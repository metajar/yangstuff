/*
Package cisco is a generated package which contains definitions
of structs which represent a YANG schema. The generated schema can be
compressed by a series of transformations (compression was false
in this case).

This package was generated by /tmp/ygot/genutil/names.go
using the following YANG input files:
	- Cisco-IOS-XR-ifmgr-cfg.yang
Imported modules were sourced from:
	- ...
*/
package cisco

import (
	"encoding/json"
	"fmt"
	"reflect"

	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/goyang/pkg/yang"
	"github.com/openconfig/ygot/ytypes"
)

// Binary is a type that is used for fields that have a YANG type of
// binary. It is used such that binary fields can be distinguished from
// leaf-lists of uint8s (which are mapped to []uint8, equivalent to
// []byte in reflection).
type Binary []byte

// YANGEmpty is a type that is used for fields that have a YANG type of
// empty. It is used such that empty fields can be distinguished from boolean fields
// in the generated code.
type YANGEmpty bool

var (
	SchemaTree map[string]*yang.Entry
	ΛEnumTypes map[string][]reflect.Type
)

func init() {
	var err error
	initΛEnumTypes()
	if SchemaTree, err = UnzipSchema(); err != nil {
		panic("schema error: " +  err.Error())
	}
}

// Schema returns the details of the generated schema.
func Schema() (*ytypes.Schema, error) {
	uzp, err := UnzipSchema()
	if err != nil {
		return nil, fmt.Errorf("cannot unzip schema, %v", err)
	}

	return &ytypes.Schema{
		Root: &Interfaces{},
		SchemaTree: uzp,
		Unmarshal: Unmarshal,
	}, nil
}

// UnzipSchema unzips the zipped schema and returns a map of yang.Entry nodes,
// keyed by the name of the struct that the yang.Entry describes the schema for.
func UnzipSchema() (map[string]*yang.Entry, error) {
	var schemaTree map[string]*yang.Entry
	var err error
	if schemaTree, err = ygot.GzipToSchema(ySchema); err != nil {
		return nil, fmt.Errorf("could not unzip the schema; %v", err)
	}
	return schemaTree, nil
}

// Unmarshal unmarshals data, which must be RFC7951 JSON format, into
// destStruct, which must be non-nil and the correct GoStruct type. It returns
// an error if the destStruct is not found in the schema or the data cannot be
// unmarshaled. The supplied options (opts) are used to control the behaviour
// of the unmarshal function - for example, determining whether errors are
// thrown for unknown fields in the input JSON.
func Unmarshal(data []byte, destStruct ygot.GoStruct, opts ...ytypes.UnmarshalOpt) error {
	tn := reflect.TypeOf(destStruct).Elem().Name()
	schema, ok := SchemaTree[tn]
	if !ok {
		return fmt.Errorf("could not find schema for type %s", tn )
	}
	var jsonTree interface{}
	if err := json.Unmarshal([]byte(data), &jsonTree); err != nil {
		return err
	}
	return ytypes.Unmarshal(schema, destStruct, jsonTree, opts...)
}

// Cisco_IOS_XRIfmgrCfg_GlobalInterfaceConfiguration represents the /Cisco-IOS-XR-ifmgr-cfg/global-interface-configuration YANG schema element.
type Cisco_IOS_XRIfmgrCfg_GlobalInterfaceConfiguration struct {
	LinkStatus	E_Cisco_IOS_XRIfmgrCfg_LinkStatusEnum	`path:"link-status" module:"Cisco-IOS-XR-ifmgr-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRIfmgrCfg_GlobalInterfaceConfiguration implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRIfmgrCfg_GlobalInterfaceConfiguration) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_GlobalInterfaceConfiguration) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRIfmgrCfg_GlobalInterfaceConfiguration"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_GlobalInterfaceConfiguration) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRIfmgrCfg_GlobalInterfaceConfiguration) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRIfmgrCfg_GlobalInterfaceConfiguration.
func (*Cisco_IOS_XRIfmgrCfg_GlobalInterfaceConfiguration) ΛBelongingModule() string {
	return "Cisco-IOS-XR-ifmgr-cfg"
}


// Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations represents the /Cisco-IOS-XR-ifmgr-cfg/interface-configurations YANG schema element.
type Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations struct {
	InterfaceConfiguration	map[Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Key]*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration	`path:"interface-configuration" module:"Cisco-IOS-XR-ifmgr-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations) IsYANGGoStruct() {}

// Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Key represents the key for list InterfaceConfiguration of element /Cisco-IOS-XR-ifmgr-cfg/interface-configurations.
type Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Key struct {
	Active	string	`path:"active"`
	InterfaceName	string	`path:"interface-name"`
}

// IsYANGGoKeyStruct ensures that Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Key) IsYANGGoKeyStruct() {}

// ΛListKeyMap returns the values of the Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Key key struct.
func (t Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"active": t.Active,
		"interface-name": t.InterfaceName,
	}, nil
}

// NewInterfaceConfiguration creates a new entry in the InterfaceConfiguration list of the
// Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations) NewInterfaceConfiguration(Active string, InterfaceName string) (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.InterfaceConfiguration == nil {
		t.InterfaceConfiguration = make(map[Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Key]*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration)
	}

	key := Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Key{
		Active: Active,
		InterfaceName: InterfaceName,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.InterfaceConfiguration[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list InterfaceConfiguration", key)
	}

	t.InterfaceConfiguration[key] = &Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration{
		Active: &Active,
		InterfaceName: &InterfaceName,
	}

	return t.InterfaceConfiguration[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations) ΛBelongingModule() string {
	return "Cisco-IOS-XR-ifmgr-cfg"
}


// Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration represents the /Cisco-IOS-XR-ifmgr-cfg/interface-configurations/interface-configuration YANG schema element.
type Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration struct {
	Active	*string	`path:"active" module:"Cisco-IOS-XR-ifmgr-cfg"`
	Bandwidth	*uint64	`path:"bandwidth" module:"Cisco-IOS-XR-ifmgr-cfg"`
	Dampening	*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Dampening	`path:"dampening" module:"Cisco-IOS-XR-ifmgr-cfg"`
	Description	*string	`path:"description" module:"Cisco-IOS-XR-ifmgr-cfg"`
	Encapsulation	*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Encapsulation	`path:"encapsulation" module:"Cisco-IOS-XR-ifmgr-cfg"`
	InterfaceModeNonPhysical	E_Cisco_IOS_XRIfmgrCfg_InterfaceModeEnum	`path:"interface-mode-non-physical" module:"Cisco-IOS-XR-ifmgr-cfg"`
	InterfaceName	*string	`path:"interface-name" module:"Cisco-IOS-XR-ifmgr-cfg"`
	InterfaceVirtual	YANGEmpty	`path:"interface-virtual" module:"Cisco-IOS-XR-ifmgr-cfg"`
	LinkStatus	YANGEmpty	`path:"link-status" module:"Cisco-IOS-XR-ifmgr-cfg"`
	Mtus	*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Mtus	`path:"mtus" module:"Cisco-IOS-XR-ifmgr-cfg"`
	SecondaryAdminState	E_Cisco_IOS_XRIfmgrCfg_SecondaryAdminStateEnum	`path:"secondary-admin-state" module:"Cisco-IOS-XR-ifmgr-cfg"`
	Shutdown	YANGEmpty	`path:"shutdown" module:"Cisco-IOS-XR-ifmgr-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration struct, which is a YANG list entry.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Active == nil {
		return nil, fmt.Errorf("nil value for key Active")
	}

	if t.InterfaceName == nil {
		return nil, fmt.Errorf("nil value for key InterfaceName")
	}

	return map[string]interface{}{
		"active": *t.Active,
		"interface-name": *t.InterfaceName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration) ΛBelongingModule() string {
	return "Cisco-IOS-XR-ifmgr-cfg"
}


// Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Dampening represents the /Cisco-IOS-XR-ifmgr-cfg/interface-configurations/interface-configuration/dampening YANG schema element.
type Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Dampening struct {
	Args	E_Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Dampening_Args	`path:"args" module:"Cisco-IOS-XR-ifmgr-cfg"`
	HalfLife	*uint32	`path:"half-life" module:"Cisco-IOS-XR-ifmgr-cfg"`
	RestartPenalty	*uint32	`path:"restart-penalty" module:"Cisco-IOS-XR-ifmgr-cfg"`
	ReuseThreshold	*uint32	`path:"reuse-threshold" module:"Cisco-IOS-XR-ifmgr-cfg"`
	SuppressThreshold	*uint32	`path:"suppress-threshold" module:"Cisco-IOS-XR-ifmgr-cfg"`
	SuppressTime	*uint32	`path:"suppress-time" module:"Cisco-IOS-XR-ifmgr-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Dampening implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Dampening) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Dampening) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Dampening"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Dampening) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Dampening) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Dampening.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Dampening) ΛBelongingModule() string {
	return "Cisco-IOS-XR-ifmgr-cfg"
}


// Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Encapsulation represents the /Cisco-IOS-XR-ifmgr-cfg/interface-configurations/interface-configuration/encapsulation YANG schema element.
type Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Encapsulation struct {
	CapsulationOptions	*uint32	`path:"capsulation-options" module:"Cisco-IOS-XR-ifmgr-cfg"`
	Encapsulation	*string	`path:"encapsulation" module:"Cisco-IOS-XR-ifmgr-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Encapsulation implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Encapsulation) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Encapsulation) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Encapsulation"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Encapsulation) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Encapsulation) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Encapsulation.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Encapsulation) ΛBelongingModule() string {
	return "Cisco-IOS-XR-ifmgr-cfg"
}


// Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Mtus represents the /Cisco-IOS-XR-ifmgr-cfg/interface-configurations/interface-configuration/mtus YANG schema element.
type Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Mtus struct {
	Mtu	map[string]*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Mtus_Mtu	`path:"mtu" module:"Cisco-IOS-XR-ifmgr-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Mtus implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Mtus) IsYANGGoStruct() {}

// NewMtu creates a new entry in the Mtu list of the
// Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Mtus struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Mtus) NewMtu(Owner string) (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Mtus_Mtu, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Mtu == nil {
		t.Mtu = make(map[string]*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Mtus_Mtu)
	}

	key := Owner

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Mtu[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Mtu", key)
	}

	t.Mtu[key] = &Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Mtus_Mtu{
		Owner: &Owner,
	}

	return t.Mtu[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Mtus) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Mtus"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Mtus) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Mtus) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Mtus.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Mtus) ΛBelongingModule() string {
	return "Cisco-IOS-XR-ifmgr-cfg"
}


// Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Mtus_Mtu represents the /Cisco-IOS-XR-ifmgr-cfg/interface-configurations/interface-configuration/mtus/mtu YANG schema element.
type Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Mtus_Mtu struct {
	Mtu	*uint32	`path:"mtu" module:"Cisco-IOS-XR-ifmgr-cfg"`
	Owner	*string	`path:"owner" module:"Cisco-IOS-XR-ifmgr-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Mtus_Mtu implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Mtus_Mtu) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Mtus_Mtu struct, which is a YANG list entry.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Mtus_Mtu) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Owner == nil {
		return nil, fmt.Errorf("nil value for key Owner")
	}

	return map[string]interface{}{
		"owner": *t.Owner,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Mtus_Mtu) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Mtus_Mtu"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Mtus_Mtu) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Mtus_Mtu) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Mtus_Mtu.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Mtus_Mtu) ΛBelongingModule() string {
	return "Cisco-IOS-XR-ifmgr-cfg"
}


// Interfaces represents the /interfaces YANG schema element.
type Interfaces struct {
	GlobalInterfaceConfiguration	*Cisco_IOS_XRIfmgrCfg_GlobalInterfaceConfiguration	`path:"global-interface-configuration" module:"Cisco-IOS-XR-ifmgr-cfg"`
	InterfaceConfigurations	*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations	`path:"interface-configurations" module:"Cisco-IOS-XR-ifmgr-cfg"`
}

// IsYANGGoStruct ensures that Interfaces implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interfaces) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interfaces) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interfaces"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interfaces) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interfaces) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Interfaces.
func (*Interfaces) ΛBelongingModule() string {
	return ""
}


// E_Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Dampening_Args is a derived int64 type which is used to represent
// the enumerated node Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Dampening_Args. An additional value named
// Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Dampening_Args_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Dampening_Args int64

// IsYANGGoEnum ensures that Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Dampening_Args implements the yang.GoEnum
// interface. This ensures that Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Dampening_Args can be identified as a
// mapped type for a YANG enumeration.
func (E_Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Dampening_Args) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Dampening_Args.
func (E_Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Dampening_Args) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Dampening_Args.
func (e E_Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Dampening_Args) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Dampening_Args")
}

const (
	// Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Dampening_Args_UNSET corresponds to the value UNSET of Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Dampening_Args
	Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Dampening_Args_UNSET E_Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Dampening_Args = 0
	// Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Dampening_Args_default_values corresponds to the value default_values of Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Dampening_Args
	Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Dampening_Args_default_values E_Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Dampening_Args = 1
	// Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Dampening_Args_specify_half_life corresponds to the value specify_half_life of Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Dampening_Args
	Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Dampening_Args_specify_half_life E_Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Dampening_Args = 2
	// Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Dampening_Args_specify_all corresponds to the value specify_all of Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Dampening_Args
	Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Dampening_Args_specify_all E_Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Dampening_Args = 3
	// Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Dampening_Args_specify_rp corresponds to the value specify_rp of Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Dampening_Args
	Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Dampening_Args_specify_rp E_Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Dampening_Args = 4
)


// E_Cisco_IOS_XRIfmgrCfg_InterfaceModeEnum is a derived int64 type which is used to represent
// the enumerated node Cisco_IOS_XRIfmgrCfg_InterfaceModeEnum. An additional value named
// Cisco_IOS_XRIfmgrCfg_InterfaceModeEnum_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Cisco_IOS_XRIfmgrCfg_InterfaceModeEnum int64

// IsYANGGoEnum ensures that Cisco_IOS_XRIfmgrCfg_InterfaceModeEnum implements the yang.GoEnum
// interface. This ensures that Cisco_IOS_XRIfmgrCfg_InterfaceModeEnum can be identified as a
// mapped type for a YANG enumeration.
func (E_Cisco_IOS_XRIfmgrCfg_InterfaceModeEnum) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Cisco_IOS_XRIfmgrCfg_InterfaceModeEnum.
func (E_Cisco_IOS_XRIfmgrCfg_InterfaceModeEnum) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_Cisco_IOS_XRIfmgrCfg_InterfaceModeEnum.
func (e E_Cisco_IOS_XRIfmgrCfg_InterfaceModeEnum) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Cisco_IOS_XRIfmgrCfg_InterfaceModeEnum")
}

const (
	// Cisco_IOS_XRIfmgrCfg_InterfaceModeEnum_UNSET corresponds to the value UNSET of Cisco_IOS_XRIfmgrCfg_InterfaceModeEnum
	Cisco_IOS_XRIfmgrCfg_InterfaceModeEnum_UNSET E_Cisco_IOS_XRIfmgrCfg_InterfaceModeEnum = 0
	// Cisco_IOS_XRIfmgrCfg_InterfaceModeEnum_default corresponds to the value default of Cisco_IOS_XRIfmgrCfg_InterfaceModeEnum
	Cisco_IOS_XRIfmgrCfg_InterfaceModeEnum_default E_Cisco_IOS_XRIfmgrCfg_InterfaceModeEnum = 1
	// Cisco_IOS_XRIfmgrCfg_InterfaceModeEnum_point_to_point corresponds to the value point_to_point of Cisco_IOS_XRIfmgrCfg_InterfaceModeEnum
	Cisco_IOS_XRIfmgrCfg_InterfaceModeEnum_point_to_point E_Cisco_IOS_XRIfmgrCfg_InterfaceModeEnum = 2
	// Cisco_IOS_XRIfmgrCfg_InterfaceModeEnum_multipoint corresponds to the value multipoint of Cisco_IOS_XRIfmgrCfg_InterfaceModeEnum
	Cisco_IOS_XRIfmgrCfg_InterfaceModeEnum_multipoint E_Cisco_IOS_XRIfmgrCfg_InterfaceModeEnum = 3
	// Cisco_IOS_XRIfmgrCfg_InterfaceModeEnum_l2_transport corresponds to the value l2_transport of Cisco_IOS_XRIfmgrCfg_InterfaceModeEnum
	Cisco_IOS_XRIfmgrCfg_InterfaceModeEnum_l2_transport E_Cisco_IOS_XRIfmgrCfg_InterfaceModeEnum = 4
)


// E_Cisco_IOS_XRIfmgrCfg_LinkStatusEnum is a derived int64 type which is used to represent
// the enumerated node Cisco_IOS_XRIfmgrCfg_LinkStatusEnum. An additional value named
// Cisco_IOS_XRIfmgrCfg_LinkStatusEnum_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Cisco_IOS_XRIfmgrCfg_LinkStatusEnum int64

// IsYANGGoEnum ensures that Cisco_IOS_XRIfmgrCfg_LinkStatusEnum implements the yang.GoEnum
// interface. This ensures that Cisco_IOS_XRIfmgrCfg_LinkStatusEnum can be identified as a
// mapped type for a YANG enumeration.
func (E_Cisco_IOS_XRIfmgrCfg_LinkStatusEnum) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Cisco_IOS_XRIfmgrCfg_LinkStatusEnum.
func (E_Cisco_IOS_XRIfmgrCfg_LinkStatusEnum) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_Cisco_IOS_XRIfmgrCfg_LinkStatusEnum.
func (e E_Cisco_IOS_XRIfmgrCfg_LinkStatusEnum) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Cisco_IOS_XRIfmgrCfg_LinkStatusEnum")
}

const (
	// Cisco_IOS_XRIfmgrCfg_LinkStatusEnum_UNSET corresponds to the value UNSET of Cisco_IOS_XRIfmgrCfg_LinkStatusEnum
	Cisco_IOS_XRIfmgrCfg_LinkStatusEnum_UNSET E_Cisco_IOS_XRIfmgrCfg_LinkStatusEnum = 0
	// Cisco_IOS_XRIfmgrCfg_LinkStatusEnum_default corresponds to the value default of Cisco_IOS_XRIfmgrCfg_LinkStatusEnum
	Cisco_IOS_XRIfmgrCfg_LinkStatusEnum_default E_Cisco_IOS_XRIfmgrCfg_LinkStatusEnum = 1
	// Cisco_IOS_XRIfmgrCfg_LinkStatusEnum_disable corresponds to the value disable of Cisco_IOS_XRIfmgrCfg_LinkStatusEnum
	Cisco_IOS_XRIfmgrCfg_LinkStatusEnum_disable E_Cisco_IOS_XRIfmgrCfg_LinkStatusEnum = 2
	// Cisco_IOS_XRIfmgrCfg_LinkStatusEnum_software_interfaces corresponds to the value software_interfaces of Cisco_IOS_XRIfmgrCfg_LinkStatusEnum
	Cisco_IOS_XRIfmgrCfg_LinkStatusEnum_software_interfaces E_Cisco_IOS_XRIfmgrCfg_LinkStatusEnum = 3
)


// E_Cisco_IOS_XRIfmgrCfg_SecondaryAdminStateEnum is a derived int64 type which is used to represent
// the enumerated node Cisco_IOS_XRIfmgrCfg_SecondaryAdminStateEnum. An additional value named
// Cisco_IOS_XRIfmgrCfg_SecondaryAdminStateEnum_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Cisco_IOS_XRIfmgrCfg_SecondaryAdminStateEnum int64

// IsYANGGoEnum ensures that Cisco_IOS_XRIfmgrCfg_SecondaryAdminStateEnum implements the yang.GoEnum
// interface. This ensures that Cisco_IOS_XRIfmgrCfg_SecondaryAdminStateEnum can be identified as a
// mapped type for a YANG enumeration.
func (E_Cisco_IOS_XRIfmgrCfg_SecondaryAdminStateEnum) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Cisco_IOS_XRIfmgrCfg_SecondaryAdminStateEnum.
func (E_Cisco_IOS_XRIfmgrCfg_SecondaryAdminStateEnum) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_Cisco_IOS_XRIfmgrCfg_SecondaryAdminStateEnum.
func (e E_Cisco_IOS_XRIfmgrCfg_SecondaryAdminStateEnum) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Cisco_IOS_XRIfmgrCfg_SecondaryAdminStateEnum")
}

const (
	// Cisco_IOS_XRIfmgrCfg_SecondaryAdminStateEnum_UNSET corresponds to the value UNSET of Cisco_IOS_XRIfmgrCfg_SecondaryAdminStateEnum
	Cisco_IOS_XRIfmgrCfg_SecondaryAdminStateEnum_UNSET E_Cisco_IOS_XRIfmgrCfg_SecondaryAdminStateEnum = 0
	// Cisco_IOS_XRIfmgrCfg_SecondaryAdminStateEnum_normal corresponds to the value normal of Cisco_IOS_XRIfmgrCfg_SecondaryAdminStateEnum
	Cisco_IOS_XRIfmgrCfg_SecondaryAdminStateEnum_normal E_Cisco_IOS_XRIfmgrCfg_SecondaryAdminStateEnum = 1
	// Cisco_IOS_XRIfmgrCfg_SecondaryAdminStateEnum_maintenance corresponds to the value maintenance of Cisco_IOS_XRIfmgrCfg_SecondaryAdminStateEnum
	Cisco_IOS_XRIfmgrCfg_SecondaryAdminStateEnum_maintenance E_Cisco_IOS_XRIfmgrCfg_SecondaryAdminStateEnum = 2
)


// ΛEnum is a map, keyed by the name of the type defined for each enum in the
// generated Go code, which provides a mapping between the constant int64 value
// of each value of the enumeration, and the string that is used to represent it
// in the YANG schema. The map is named ΛEnum in order to avoid clash with any
// valid YANG identifier.
var ΛEnum = map[string]map[int64]ygot.EnumDefinition{
	"E_Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Dampening_Args": {
		1: {Name: "default-values"},
		2: {Name: "specify-half-life"},
		3: {Name: "specify-all"},
		4: {Name: "specify-rp"},
	},
	"E_Cisco_IOS_XRIfmgrCfg_InterfaceModeEnum": {
		1: {Name: "default"},
		2: {Name: "point-to-point"},
		3: {Name: "multipoint"},
		4: {Name: "l2-transport"},
	},
	"E_Cisco_IOS_XRIfmgrCfg_LinkStatusEnum": {
		1: {Name: "default"},
		2: {Name: "disable"},
		3: {Name: "software-interfaces"},
	},
	"E_Cisco_IOS_XRIfmgrCfg_SecondaryAdminStateEnum": {
		1: {Name: "normal"},
		2: {Name: "maintenance"},
	},
}


var (
	// ySchema is a byte slice contain a gzip compressed representation of the
	// YANG schema from which the Go code was generated. When uncompressed the
	// contents of the byte slice is a JSON document containing an object, keyed
	// on the name of the generated struct, and containing the JSON marshalled
	// contents of a goyang yang.Entry struct, which defines the schema for the
	// fields within the struct.
	ySchema = []byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x5d, 0x6f, 0x6f, 0xdb, 0x36,
		0x13, 0x7f, 0x9f, 0x4f, 0x21, 0xe8, 0x79, 0x86, 0xb6, 0xa8, 0x95, 0xd8, 0x8e, 0x9d, 0x34, 0x1e,
		0x0a, 0x2c, 0x4b, 0xda, 0x35, 0x68, 0xd3, 0x16, 0x49, 0x31, 0x14, 0xab, 0x83, 0x80, 0x95, 0x69,
		0x9b, 0xa8, 0x44, 0x09, 0x24, 0x95, 0xc4, 0x5b, 0xfd, 0xdd, 0x07, 0xc9, 0xb6, 0x2c, 0xd9, 0x92,
		0x45, 0x52, 0x92, 0x1b, 0x77, 0xb7, 0x17, 0x43, 0x6a, 0xdd, 0x9d, 0x79, 0xc7, 0x1f, 0xef, 0x1f,
		0x69, 0xea, 0x9f, 0x3d, 0xc3, 0x30, 0x0c, 0xf3, 0x3d, 0x72, 0xb1, 0xd9, 0x33, 0x4c, 0x42, 0x05,
		0x66, 0x43, 0x64, 0x63, 0x6e, 0x36, 0x66, 0x4f, 0xde, 0x12, 0x3a, 0x30, 0x7b, 0x46, 0x6b, 0xfe,
		0xcf, 0x33, 0x8f, 0x0e, 0xc9, 0xc8, 0xec, 0x19, 0xcd, 0xf9, 0x07, 0xe7, 0x84, 0x99, 0x3d, 0x63,
		0x26, 0x26, 0xfa, 0x60, 0xe4, 0x78, 0x5f, 0x91, 0x63, 0xc5, 0x92, 0x2c, 0x3b, 0x62, 0x09, 0x18,
		0x12, 0xc4, 0xa3, 0x29, 0xda, 0xd4, 0x57, 0x17, 0xf0, 0x35, 0xd2, 0x5c, 0xe9, 0x61, 0xc5, 0x1f,
		0xaf, 0x0e, 0x2f, 0x7e, 0xf0, 0x91, 0xe1, 0x21, 0x79, 0x58, 0xfb, 0xf6, 0xb4, 0xf2, 0x43, 0x77,
		0xc4, 0x2c, 0x7b, 0x38, 0x5a, 0xf9, 0xb2, 0x88, 0xe8, 0xda, 0x0b, 0x98, 0x8d, 0x33, 0x05, 0xcc,
		0x06, 0x84, 0x27, 0xf7, 0x1e, 0x0b, 0xc7, 0x64, 0xfa, 0xb3, 0xef, 0x6a, 0x64, 0x13, 0xbe, 0x41,
		0xfc, 0x94, 0x8d, 0x02, 0x17, 0x53, 0x61, 0xf6, 0x0c, 0xc1, 0x02, 0x9c, 0x43, 0x98, 0xa0, 0x4a,
		0x0c, 0x6d, 0x8d, 0x76, 0x9a, 0xfa, 0x64, 0xba, 0xa2, 0xf7, 0xea, 0xf4, 0xc4, 0x0f, 0x1c, 0x42,
		0xbf, 0x59, 0x5c, 0x20, 0x11, 0xf0, 0x7c, 0xa5, 0x16, 0x96, 0x49, 0x12, 0xe7, 0x8c, 0xf6, 0x1c,
		0x0f, 0x51, 0xe0, 0x84, 0x83, 0xfd, 0x92, 0x49, 0x10, 0x11, 0x0d, 0xe6, 0x44, 0x99, 0x14, 0x37,
		0x39, 0x92, 0xe7, 0x53, 0xdd, 0xcc, 0x79, 0x9c, 0x37, 0xe5, 0x32, 0x53, 0xaf, 0x04, 0x01, 0x59,
		0x28, 0x28, 0x43, 0x42, 0x19, 0x1a, 0xaa, 0x10, 0xc9, 0x86, 0x4a, 0x0e, 0x64, 0x62, 0xe1, 0x9f,
		0x26, 0x3e, 0x96, 0xb3, 0xda, 0xbb, 0x25, 0x3c, 0x2c, 0x4c, 0x03, 0x77, 0x93, 0xf1, 0x16, 0x0b,
		0xb7, 0xb3, 0x81, 0xe6, 0x55, 0x28, 0xa3, 0xd0, 0xbc, 0x9f, 0xbc, 0x6b, 0xc1, 0x08, 0x1d, 0x15,
		0x52, 0x46, 0xd4, 0xcd, 0x70, 0xa0, 0x0b, 0xfc, 0x35, 0x8a, 0xe9, 0x5b, 0x11, 0x3d, 0xe1, 0xe8,
		0xab, 0x83, 0x65, 0xe8, 0xdb, 0x21, 0x3d, 0xf7, 0x86, 0xe2, 0x1e, 0x31, 0x6c, 0x25, 0xfc, 0xe8,
		0x46, 0xd6, 0x69, 0xa3, 0x48, 0xc7, 0x8b, 0x68, 0x76, 0x25, 0x14, 0x1c, 0xc4, 0x0b, 0xb0, 0x29,
		0x31, 0xdc, 0x85, 0x66, 0x6b, 0x2e, 0x34, 0x93, 0x3a, 0x4b, 0xaf, 0x9e, 0xd1, 0xde, 0xac, 0x9a,
		0x2a, 0x0c, 0x15, 0x3d, 0xdb, 0x29, 0xa5, 0x9e, 0xc8, 0x8e, 0x29, 0xb3, 0x31, 0xdb, 0x63, 0xec,
		0x22, 0x1f, 0x89, 0x71, 0x38, 0x33, 0x07, 0x67, 0x84, 0xdb, 0x9e, 0x75, 0xf1, 0xe1, 0xda, 0xfa,
		0x7c, 0x65, 0xc5, 0x6b, 0xe5, 0x40, 0x29, 0xea, 0xcc, 0xe4, 0x0a, 0x16, 0xd8, 0x82, 0xce, 0xa1,
		0x1f, 0x89, 0xbd, 0xbd, 0xf8, 0x70, 0x7d, 0xfb, 0xf9, 0xea, 0x22, 0x94, 0x7a, 0x36, 0x1c, 0xdd,
		0xfe, 0x11, 0x09, 0xbd, 0x58, 0xc8, 0x3c, 0x4b, 0x89, 0xdc, 0xcb, 0x56, 0x31, 0xa1, 0x9e, 0x99,
		0x33, 0x1a, 0x9e, 0x1f, 0x3c, 0x73, 0x39, 0x20, 0x6c, 0x56, 0x1b, 0x36, 0x65, 0xd3, 0x1a, 0xd9,
		0x19, 0x32, 0x37, 0x07, 0xbd, 0x16, 0x04, 0xbd, 0xed, 0x06, 0xbd, 0xbc, 0x89, 0x8f, 0x09, 0x90,
		0x2d, 0xc8, 0x9d, 0x84, 0x1d, 0x16, 0xc6, 0x9d, 0xd3, 0x17, 0xe8, 0xb4, 0x39, 0xc7, 0x91, 0x9e,
		0x76, 0x95, 0xe9, 0xd7, 0x82, 0x81, 0x2a, 0x1c, 0xb4, 0x61, 0xa1, 0x0d, 0x0f, 0x5d, 0x98, 0x14,
		0x87, 0x2d, 0xa9, 0x78, 0x5d, 0x94, 0x33, 0xad, 0x59, 0x3d, 0x8e, 0x12, 0x96, 0x14, 0x52, 0x52,
		0xce, 0xe1, 0x85, 0x04, 0xed, 0x47, 0x24, 0x04, 0x66, 0x74, 0x63, 0x5e, 0x9e, 0x62, 0x78, 0x8a,
		0x6c, 0xf1, 0xec, 0xfb, 0x53, 0x9f, 0xe1, 0x67, 0xc5, 0xd6, 0xba, 0xd1, 0x4d, 0x01, 0x36, 0x78,
		0x9a, 0xaf, 0x88, 0x0e, 0xee, 0xc9, 0x20, 0x8a, 0xdb, 0x92, 0x8b, 0x6c, 0xc9, 0x02, 0xeb, 0x0c,
		0xd6, 0x59, 0xa6, 0xd5, 0x03, 0x42, 0xc5, 0x51, 0x47, 0x61, 0x75, 0xc9, 0x2c, 0xae, 0x2b, 0x44,
		0x47, 0x58, 0x7a, 0x69, 0xc9, 0x4d, 0x61, 0x24, 0xf8, 0x92, 0x50, 0xe9, 0x39, 0x8f, 0x99, 0xfe,
		0x44, 0x4e, 0x80, 0xe5, 0xf2, 0xff, 0x14, 0xdf, 0x6b, 0x16, 0xba, 0x1e, 0x8f, 0x9e, 0x93, 0x11,
		0x11, 0x5c, 0x43, 0xc0, 0x7b, 0x3c, 0x42, 0xf3, 0xa8, 0x38, 0x44, 0x0e, 0xc7, 0xd2, 0xdc, 0xd3,
		0x86, 0x82, 0x49, 0xd0, 0x83, 0xbe, 0x49, 0x5a, 0x2f, 0x3a, 0x9d, 0xa3, 0xe3, 0x4e, 0xa7, 0x79,
		0x7c, 0x78, 0xdc, 0x3c, 0xe9, 0x76, 0x5b, 0x47, 0xad, 0xee, 0xee, 0x58, 0x69, 0xaf, 0x1a, 0xaa,
		0x3a, 0x9c, 0xf5, 0x00, 0xb9, 0x3e, 0xa6, 0x32, 0x55, 0x78, 0xbc, 0x12, 0x97, 0x2c, 0x72, 0xce,
		0xba, 0x05, 0xce, 0x7a, 0xb7, 0x9d, 0x75, 0x51, 0x4e, 0xbd, 0xcc, 0xad, 0xd9, 0x88, 0xcb, 0x5b,
		0x2f, 0xce, 0xb0, 0x43, 0x2e, 0x49, 0xfd, 0xe5, 0xe2, 0xbf, 0x32, 0xb4, 0x74, 0x20, 0x56, 0x0a,
		0x6a, 0xba, 0x90, 0x2b, 0x0d, 0xbd, 0xd2, 0x10, 0x2c, 0x0b, 0x45, 0x45, 0xa7, 0x28, 0x39, 0x6f,
		0xd2, 0xf9, 0xc4, 0xda, 0xac, 0x61, 0x1a, 0xb8, 0x78, 0x63, 0x2d, 0xaf, 0xdb, 0x06, 0xd5, 0x6b,
		0x8b, 0x96, 0x6b, 0x93, 0x6e, 0x6c, 0x9b, 0x5a, 0x77, 0x61, 0x34, 0xe5, 0x8a, 0x48, 0x59, 0x76,
		0x53, 0xb9, 0x8f, 0x6d, 0x32, 0x9c, 0x58, 0x63, 0xe4, 0x0c, 0x2d, 0x87, 0x0c, 0xb1, 0x8e, 0xa4,
		0x4e, 0x52, 0x12, 0x72, 0x1c, 0x1d, 0x19, 0xdd, 0xa4, 0x0c, 0xe6, 0x9b, 0x4a, 0x12, 0xa6, 0x0d,
		0x55, 0xfb, 0xcb, 0xb6, 0x70, 0xf3, 0x5a, 0xba, 0x0b, 0xbb, 0x2b, 0xa7, 0x1c, 0xb3, 0x7e, 0x65,
		0xc2, 0x56, 0x3d, 0xa3, 0x53, 0x42, 0xc2, 0x72, 0xde, 0xa4, 0xba, 0xc6, 0xb9, 0x72, 0x98, 0x6f,
		0xf6, 0x8c, 0xae, 0x9a, 0xd1, 0xb7, 0x9e, 0x2c, 0x49, 0x4c, 0xb3, 0x99, 0x34, 0x88, 0x62, 0xd0,
		0x52, 0x5d, 0x03, 0x10, 0xb9, 0x20, 0x72, 0x55, 0x1c, 0xb9, 0xc2, 0x8a, 0xf8, 0xb0, 0xad, 0x11,
		0xb4, 0x8e, 0x15, 0x58, 0xd4, 0x2a, 0x64, 0xf5, 0x4a, 0xb9, 0x54, 0xc5, 0xbc, 0x5e, 0x26, 0x36,
		0xf4, 0xf8, 0xcb, 0xd6, 0x86, 0xe5, 0x6b, 0x44, 0xcd, 0xe8, 0xa4, 0x5d, 0x59, 0xaf, 0x99, 0xae,
		0xd3, 0xdd, 0x7d, 0xdb, 0xd5, 0x14, 0x92, 0x6e, 0x2a, 0x5d, 0xf0, 0xf8, 0x41, 0x30, 0x64, 0x05,
		0x94, 0x8b, 0xf9, 0x06, 0xae, 0xc2, 0xd2, 0xbf, 0x1f, 0x63, 0xba, 0x8d, 0xc5, 0xb8, 0x70, 0x31,
		0xfb, 0xfb, 0x07, 0x61, 0x75, 0x66, 0xbc, 0x34, 0x9e, 0xac, 0x25, 0x11, 0x4f, 0x0c, 0x8f, 0x19,
		0x19, 0x04, 0xc8, 0x71, 0xf2, 0x1e, 0x31, 0xff, 0x89, 0x4e, 0xba, 0xa7, 0x19, 0x69, 0xb2, 0x22,
		0x4e, 0x64, 0x40, 0x4d, 0x7c, 0x96, 0x8d, 0x3b, 0x99, 0xf1, 0xa7, 0x06, 0x0b, 0x6f, 0xc5, 0xe7,
		0x9c, 0x63, 0x6e, 0x33, 0xe2, 0x6f, 0xdc, 0x3b, 0x55, 0x81, 0xd9, 0xe9, 0x4c, 0x91, 0xeb, 0x99,
		0x1e, 0x6f, 0x90, 0x33, 0x7c, 0x47, 0x86, 0x78, 0xae, 0xe5, 0xec, 0x61, 0x9f, 0xce, 0x9f, 0x9e,
		0x3a, 0x4e, 0xea, 0xc1, 0x82, 0xeb, 0xea, 0xa3, 0xee, 0xd4, 0x96, 0x44, 0xd8, 0x2a, 0xca, 0x06,
		0x09, 0xe3, 0x34, 0xf4, 0x25, 0x56, 0x05, 0xb8, 0x2c, 0xd0, 0x55, 0x64, 0x6f, 0xad, 0xf1, 0x4c,
		0x77, 0xcd, 0xb3, 0x57, 0x52, 0x6c, 0x30, 0xcc, 0x05, 0x62, 0xc2, 0xf2, 0x31, 0x45, 0x8e, 0x98,
		0xa8, 0x97, 0x1c, 0xab, 0x02, 0xa0, 0xf0, 0x80, 0xc2, 0x03, 0x0a, 0x8f, 0xc7, 0x51, 0x78, 0x34,
		0xa1, 0xf0, 0xd0, 0x35, 0x5d, 0xbb, 0xd9, 0x6c, 0x36, 0xa1, 0xf6, 0x80, 0xda, 0xa3, 0xb8, 0xf6,
		0x80, 0xfa, 0x41, 0xa6, 0x7e, 0xf8, 0x49, 0x6a, 0x00, 0xc8, 0xe6, 0x75, 0xb3, 0x79, 0xc8, 0xcb,
		0xd5, 0xf2, 0xf2, 0x80, 0x63, 0x4b, 0x8c, 0x19, 0xe6, 0x63, 0xcf, 0x19, 0xe8, 0xe4, 0xe5, 0x69,
		0x01, 0x90, 0x97, 0x43, 0x5e, 0x0e, 0x79, 0xf9, 0xe3, 0xc8, 0xcb, 0x61, 0x43, 0x00, 0xf2, 0x72,
		0xc8, 0xcb, 0xeb, 0xce, 0xcb, 0xa1, 0xe5, 0x5f, 0x32, 0x65, 0xff, 0xf9, 0x3b, 0xfa, 0xd0, 0xb3,
		0xaf, 0x3a, 0xcb, 0x87, 0xae, 0x7c, 0x15, 0xd9, 0x3f, 0x0f, 0x7c, 0x9f, 0x61, 0xce, 0xcb, 0x14,
		0x00, 0x19, 0x32, 0xa0, 0x06, 0x80, 0x1a, 0x00, 0x6a, 0x00, 0xa8, 0x01, 0xa0, 0x06, 0x80, 0x1a,
		0x00, 0x6a, 0x00, 0xa8, 0x01, 0xa0, 0x06, 0x80, 0x1a, 0x00, 0x6a, 0x80, 0x47, 0x5f, 0x03, 0x10,
		0x17, 0x97, 0x49, 0xff, 0x43, 0x76, 0xc8, 0xfc, 0x21, 0xf3, 0x87, 0xcc, 0x1f, 0x32, 0xff, 0x5d,
		0xcf, 0xfc, 0xbb, 0xf0, 0x7b, 0x00, 0xc8, 0xfb, 0x21, 0xef, 0x87, 0xbc, 0x1f, 0xf2, 0x7e, 0xc8,
		0xfb, 0x77, 0x30, 0xef, 0x2f, 0x75, 0xe3, 0x45, 0xc1, 0xdd, 0x94, 0xeb, 0x15, 0x84, 0xd4, 0x5d,
		0x95, 0x79, 0x97, 0x3c, 0xe6, 0x3d, 0x38, 0x90, 0xbd, 0x69, 0xc5, 0x90, 0xbc, 0xd7, 0x32, 0xfb,
		0x46, 0x4b, 0x9e, 0xf3, 0xf9, 0xed, 0x79, 0xfc, 0xf5, 0x75, 0x5c, 0x3c, 0xa3, 0xe0, 0x72, 0x96,
		0x57, 0xcf, 0x48, 0x2f, 0x54, 0xb8, 0x29, 0xac, 0x72, 0x37, 0xb5, 0x2b, 0x37, 0x85, 0xf1, 0xd9,
		0x75, 0x19, 0x2a, 0xf7, 0xf0, 0xd5, 0x80, 0x6f, 0x4c, 0x6d, 0xe4, 0xf3, 0xc0, 0x41, 0x6a, 0x08,
		0x4f, 0xb3, 0xc1, 0x05, 0x4b, 0x70, 0xc1, 0x52, 0x92, 0x30, 0x81, 0x0d, 0xcb, 0xf3, 0xb3, 0xef,
		0x14, 0x2e, 0x9c, 0xb1, 0x2c, 0x21, 0xd0, 0xb5, 0x82, 0xae, 0x15, 0x74, 0xad, 0x1e, 0x47, 0xd7,
		0x0a, 0x7e, 0x4b, 0xa6, 0x6d, 0xba, 0x4e, 0xfb, 0xa4, 0x73, 0x72, 0x74, 0xdc, 0x3e, 0x81, 0xe6,
		0x55, 0xed, 0x05, 0x96, 0x44, 0xb8, 0x57, 0xcb, 0x81, 0x4a, 0xe5, 0x42, 0x10, 0xa2, 0x20, 0x44,
		0xd5, 0x14, 0xa2, 0xa4, 0xeb, 0x09, 0xc5, 0xba, 0xe2, 0x3f, 0xd6, 0xcc, 0x50, 0x5d, 0xcd, 0x35,
		0x34, 0x34, 0x5e, 0xa5, 0x86, 0x50, 0x43, 0xd1, 0xb7, 0xd4, 0xdd, 0xf5, 0x06, 0xd8, 0xa2, 0x1e,
		0xb5, 0xfc, 0xf1, 0x84, 0x13, 0x1b, 0x39, 0xf2, 0x25, 0xe0, 0x26, 0x21, 0x45, 0x85, 0x84, 0xc4,
		0x4b, 0x9c, 0x12, 0x1d, 0x98, 0x0d, 0x2f, 0x73, 0x8a, 0xc3, 0x05, 0xb4, 0x59, 0xa0, 0xcd, 0x92,
		0x69, 0xf5, 0x8b, 0x34, 0x4c, 0x0b, 0xde, 0x1b, 0xb5, 0xe6, 0x1b, 0x25, 0x2e, 0xb2, 0x54, 0xbb,
		0x30, 0x55, 0xef, 0xa2, 0x54, 0xd5, 0xf7, 0x4a, 0xc5, 0x7c, 0xd1, 0x8d, 0xa8, 0xbe, 0x47, 0xa8,
		0xb0, 0x84, 0x67, 0x45, 0x7f, 0xa8, 0xb0, 0x47, 0xaf, 0x9b, 0x72, 0x03, 0x47, 0x10, 0x65, 0xd6,
		0xc3, 0xe8, 0x8d, 0x6e, 0x6d, 0x4b, 0x30, 0x44, 0xb9, 0xef, 0x31, 0x61, 0x56, 0x1b, 0x28, 0x95,
		0xef, 0x3b, 0x55, 0x7b, 0x75, 0x55, 0xcc, 0x95, 0x52, 0xa1, 0x67, 0x1c, 0x2a, 0xb0, 0x26, 0x0c,
		0xd7, 0x33, 0xda, 0x0a, 0x8c, 0x2b, 0x13, 0xd6, 0x33, 0x5a, 0xdb, 0x09, 0xd1, 0x25, 0xa3, 0xc9,
		0x3c, 0x08, 0x2a, 0x07, 0x90, 0x88, 0x0f, 0x3c, 0x38, 0x78, 0xf0, 0x02, 0x0f, 0x2e, 0x81, 0x13,
		0xa3, 0xf6, 0x17, 0xd7, 0x7c, 0x41, 0xd6, 0xdf, 0xa7, 0xd6, 0x5f, 0x4d, 0xeb, 0x64, 0xbf, 0x77,
		0x7b, 0x60, 0xdd, 0x3c, 0xff, 0x31, 0xaf, 0xaf, 0x59, 0xae, 0x9e, 0x3b, 0xc2, 0x44, 0xa0, 0x97,
		0xb9, 0x2d, 0x58, 0x61, 0xed, 0xc1, 0xda, 0xcb, 0xee, 0x6d, 0xb8, 0xbe, 0xd4, 0x15, 0x6e, 0xf1,
		0x92, 0x3b, 0xac, 0x01, 0xea, 0x32, 0xef, 0x90, 0x5d, 0x1b, 0x79, 0xf1, 0xbb, 0x64, 0x01, 0xde,
		0x00, 0xef, 0xc7, 0x00, 0x6f, 0x57, 0x09, 0xd7, 0xae, 0x3c, 0xa0, 0x61, 0xc3, 0x75, 0xc7, 0x01,
		0x2d, 0xbd, 0xe1, 0xea, 0x8a, 0x40, 0xbd, 0x6f, 0x1d, 0x32, 0xa9, 0x75, 0xab, 0x5b, 0xd0, 0xad,
		0x86, 0x6e, 0xb5, 0x0e, 0x40, 0xb5, 0x80, 0x5a, 0x02, 0xb0, 0x9a, 0xdb, 0x2c, 0xda, 0x00, 0x2e,
		0x03, 0xe4, 0x4a, 0x00, 0x5d, 0x16, 0xd8, 0x95, 0x01, 0xbc, 0x32, 0xa0, 0x57, 0x05, 0x78, 0x35,
		0xe0, 0x2b, 0x2e, 0x80, 0x78, 0x90, 0x97, 0x88, 0x0e, 0x90, 0xf0, 0xd8, 0x44, 0xfd, 0xe7, 0x1c,
		0xea, 0x5b, 0x3e, 0x6b, 0x88, 0x51, 0x3e, 0x9d, 0xb0, 0xba, 0x3e, 0x8e, 0x35, 0x58, 0xf5, 0x4e,
		0x2b, 0x2c, 0xfe, 0x2b, 0x71, 0x22, 0xba, 0xcc, 0xe9, 0x85, 0x58, 0xc8, 0x62, 0x2b, 0xfe, 0xa8,
		0xd3, 0x28, 0x27, 0xa8, 0xaa, 0xad, 0xf8, 0xe5, 0xa4, 0x96, 0xdd, 0x92, 0xd7, 0xc4, 0xf0, 0x0a,
		0x9e, 0x1f, 0x2a, 0xb4, 0x71, 0xb7, 0x7b, 0xd8, 0xfd, 0x79, 0xcd, 0xbc, 0xa5, 0xa3, 0xec, 0x37,
		0x75, 0xbd, 0xc9, 0x4a, 0x21, 0x6d, 0xf2, 0xee, 0x29, 0x66, 0xfa, 0x01, 0x7c, 0xc6, 0x0e, 0x21,
		0x1c, 0x42, 0xf8, 0x23, 0x0c, 0xe1, 0xe5, 0xc3, 0xf0, 0xec, 0x08, 0x02, 0xf1, 0xb8, 0xf5, 0xc0,
		0x2c, 0xe5, 0xe3, 0x18, 0x3a, 0xdd, 0xeb, 0xd2, 0xdd, 0xec, 0xf5, 0xee, 0x76, 0xbf, 0x7f, 0xdf,
		0xef, 0x5b, 0xfd, 0xfe, 0x7e, 0xaf, 0x71, 0xfb, 0xdb, 0xff, 0x7e, 0xf9, 0x7f, 0xbf, 0xff, 0xfc,
		0x65, 0xbf, 0xff, 0xfd, 0x57, 0x99, 0x3e, 0xf7, 0xd6, 0x5c, 0x56, 0xa5, 0x45, 0xcc, 0x5b, 0x3c,
		0x51, 0x75, 0x4e, 0xe6, 0x3b, 0xc2, 0xc5, 0xa9, 0x10, 0x8a, 0xd5, 0xcf, 0x25, 0xa1, 0xaf, 0x1c,
		0x1c, 0xae, 0x04, 0xc5, 0x08, 0x16, 0xc6, 0xe3, 0x04, 0x67, 0xb9, 0xd7, 0x4c, 0x9b, 0x1f, 0xd8,
		0x00, 0x33, 0x3c, 0xf8, 0x3d, 0x54, 0x9b, 0x06, 0x8e, 0x53, 0xa9, 0x35, 0x15, 0x8f, 0xf1, 0xc4,
		0x7c, 0x35, 0x1d, 0xe7, 0x71, 0x45, 0xc0, 0x0f, 0xd4, 0x0a, 0xc7, 0x1a, 0x4e, 0xf4, 0x5c, 0x8a,
		0x80, 0x87, 0xff, 0x33, 0xe1, 0xa4, 0x55, 0x7a, 0x6a, 0x7e, 0xcc, 0x01, 0xab, 0x70, 0x3a, 0xea,
		0x38, 0x57, 0xc5, 0xb1, 0xed, 0xd1, 0x01, 0x62, 0x13, 0x0b, 0x0d, 0x5c, 0x42, 0xa3, 0xed, 0x07,
		0x85, 0x0d, 0xf1, 0x6c, 0x76, 0xd8, 0xbc, 0x80, 0xcd, 0x8b, 0x4c, 0xab, 0x5f, 0x67, 0xc1, 0x65,
		0xb7, 0x0f, 0x38, 0x51, 0x8f, 0xb9, 0xc8, 0x51, 0x3e, 0xdf, 0xe4, 0xa2, 0xd0, 0xc7, 0x50, 0x44,
		0x6d, 0xfc, 0xc3, 0x0f, 0x19, 0x25, 0xc7, 0xa2, 0xd4, 0x0b, 0x5a, 0x28, 0xdf, 0x33, 0x9a, 0x8f,
		0xf8, 0xb0, 0x0f, 0x1f, 0x07, 0x62, 0xe0, 0xdd, 0x2b, 0xfc, 0x54, 0x30, 0xe6, 0x00, 0x47, 0x06,
		0x8e, 0x2c, 0xd3, 0xea, 0xdb, 0xdb, 0x85, 0xdd, 0x53, 0x50, 0x68, 0x51, 0x17, 0x20, 0x5b, 0x90,
		0x3b, 0x6c, 0x48, 0x9d, 0x56, 0x93, 0xab, 0x0b, 0xe4, 0xeb, 0x80, 0x52, 0x79, 0xbf, 0x5c, 0x9e,
		0x9f, 0xa7, 0xbd, 0x64, 0x92, 0x58, 0x53, 0x72, 0x68, 0x6e, 0x72, 0x41, 0x55, 0xe7, 0x83, 0xd9,
		0x2b, 0x62, 0x1d, 0x2c, 0xe9, 0x4f, 0x56, 0x0c, 0x57, 0x64, 0xb0, 0x92, 0x86, 0xca, 0x30, 0x48,
		0x09, 0x43, 0xa4, 0x35, 0x5e, 0xea, 0x35, 0xfb, 0x6b, 0xae, 0x59, 0x9e, 0x46, 0x26, 0xe1, 0xaf,
		0xd1, 0x37, 0x7c, 0xe5, 0x79, 0xeb, 0xee, 0x68, 0x55, 0x4b, 0x33, 0xf9, 0x28, 0x35, 0xdc, 0x78,
		0x64, 0xf3, 0xc1, 0x4c, 0xf7, 0xa6, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0x01, 0x00, 0x00, 0xff,
		0xff, 0xa9, 0x3e, 0x04, 0x9c, 0x25, 0x9c, 0x00, 0x00,
	}
)


// ΛEnumTypes is a map, keyed by a YANG schema path, of the enumerated types that
// correspond with the leaf. The type is represented as a reflect.Type. The naming
// of the map ensures that there are no clashes with valid YANG identifiers.
func initΛEnumTypes(){
  ΛEnumTypes = map[string][]reflect.Type{
	"/global-interface-configuration/link-status": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRIfmgrCfg_LinkStatusEnum)(0)),
	},
	"/interface-configurations/interface-configuration/dampening/args": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Dampening_Args)(0)),
	},
	"/interface-configurations/interface-configuration/interface-mode-non-physical": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRIfmgrCfg_InterfaceModeEnum)(0)),
	},
	"/interface-configurations/interface-configuration/secondary-admin-state": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRIfmgrCfg_SecondaryAdminStateEnum)(0)),
	},
  }
}

