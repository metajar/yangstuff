/*
Package cisco is a generated package which contains definitions
of structs which represent a YANG schema. The generated schema can be
compressed by a series of transformations (compression was false
in this case).

This package was generated by /tmp/ygot/genutil/names.go
using the following YANG input files:
	- Cisco-IOS-XR-ifmgr-cfg.yang
	- Cisco-IOS-XR-mpls-te-cfg.yang
Imported modules were sourced from:
	- yang/vendor/cisco/xr/732/...
*/
package interfaces

import (
	"encoding/json"
	"fmt"
	"reflect"

	"github.com/openconfig/goyang/pkg/yang"
	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// Binary is a type that is used for fields that have a YANG type of
// binary. It is used such that binary fields can be distinguished from
// leaf-lists of uint8s (which are mapped to []uint8, equivalent to
// []byte in reflection).
type Binary []byte

// YANGEmpty is a type that is used for fields that have a YANG type of
// empty. It is used such that empty fields can be distinguished from boolean fields
// in the generated code.
type YANGEmpty bool

var (
	SchemaTree map[string]*yang.Entry
	ΛEnumTypes map[string][]reflect.Type
)

func init() {
	var err error
	initΛEnumTypes()
	if SchemaTree, err = UnzipSchema(); err != nil {
		panic("schema error: " +  err.Error())
	}
}

// Schema returns the details of the generated schema.
func Schema() (*ytypes.Schema, error) {
	uzp, err := UnzipSchema()
	if err != nil {
		return nil, fmt.Errorf("cannot unzip schema, %v", err)
	}

	return &ytypes.Schema{
		Root: &Interfaces{},
		SchemaTree: uzp,
		Unmarshal: Unmarshal,
	}, nil
}

// UnzipSchema unzips the zipped schema and returns a map of yang.Entry nodes,
// keyed by the name of the struct that the yang.Entry describes the schema for.
func UnzipSchema() (map[string]*yang.Entry, error) {
	var schemaTree map[string]*yang.Entry
	var err error
	if schemaTree, err = ygot.GzipToSchema(ySchema); err != nil {
		return nil, fmt.Errorf("could not unzip the schema; %v", err)
	}
	return schemaTree, nil
}

// Unmarshal unmarshals data, which must be RFC7951 JSON format, into
// destStruct, which must be non-nil and the correct GoStruct type. It returns
// an error if the destStruct is not found in the schema or the data cannot be
// unmarshaled. The supplied options (opts) are used to control the behaviour
// of the unmarshal function - for example, determining whether errors are
// thrown for unknown fields in the input JSON.
func Unmarshal(data []byte, destStruct ygot.GoStruct, opts ...ytypes.UnmarshalOpt) error {
	tn := reflect.TypeOf(destStruct).Elem().Name()
	schema, ok := SchemaTree[tn]
	if !ok {
		return fmt.Errorf("could not find schema for type %s", tn )
	}
	var jsonTree interface{}
	if err := json.Unmarshal([]byte(data), &jsonTree); err != nil {
		return err
	}
	return ytypes.Unmarshal(schema, destStruct, jsonTree, opts...)
}

// Cisco_IOS_XRIfmgrCfg_GlobalInterfaceConfiguration represents the /Cisco-IOS-XR-ifmgr-cfg/global-interface-configuration YANG schema element.
type Cisco_IOS_XRIfmgrCfg_GlobalInterfaceConfiguration struct {
	LinkStatus	E_Cisco_IOS_XRIfmgrCfg_LinkStatusEnum	`path:"link-status" module:"Cisco-IOS-XR-ifmgr-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRIfmgrCfg_GlobalInterfaceConfiguration implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRIfmgrCfg_GlobalInterfaceConfiguration) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_GlobalInterfaceConfiguration) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRIfmgrCfg_GlobalInterfaceConfiguration"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_GlobalInterfaceConfiguration) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRIfmgrCfg_GlobalInterfaceConfiguration) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRIfmgrCfg_GlobalInterfaceConfiguration.
func (*Cisco_IOS_XRIfmgrCfg_GlobalInterfaceConfiguration) ΛBelongingModule() string {
	return "Cisco-IOS-XR-ifmgr-cfg"
}


// Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations represents the /Cisco-IOS-XR-ifmgr-cfg/interface-configurations YANG schema element.
type Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations struct {
	InterfaceConfiguration	map[Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Key]*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration	`path:"interface-configuration" module:"Cisco-IOS-XR-ifmgr-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations) IsYANGGoStruct() {}

// Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Key represents the key for list InterfaceConfiguration of element /Cisco-IOS-XR-ifmgr-cfg/interface-configurations.
type Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Key struct {
	Active	string	`path:"active"`
	InterfaceName	string	`path:"interface-name"`
}

// IsYANGGoKeyStruct ensures that Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Key) IsYANGGoKeyStruct() {}

// ΛListKeyMap returns the values of the Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Key key struct.
func (t Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"active": t.Active,
		"interface-name": t.InterfaceName,
	}, nil
}

// NewInterfaceConfiguration creates a new entry in the InterfaceConfiguration list of the
// Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations) NewInterfaceConfiguration(Active string, InterfaceName string) (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.InterfaceConfiguration == nil {
		t.InterfaceConfiguration = make(map[Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Key]*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration)
	}

	key := Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Key{
		Active: Active,
		InterfaceName: InterfaceName,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.InterfaceConfiguration[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list InterfaceConfiguration", key)
	}

	t.InterfaceConfiguration[key] = &Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration{
		Active: &Active,
		InterfaceName: &InterfaceName,
	}

	return t.InterfaceConfiguration[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations) ΛBelongingModule() string {
	return "Cisco-IOS-XR-ifmgr-cfg"
}


// Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration represents the /Cisco-IOS-XR-ifmgr-cfg/interface-configurations/interface-configuration YANG schema element.
type Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration struct {
	Active	*string	`path:"active" module:"Cisco-IOS-XR-ifmgr-cfg"`
	Bandwidth	*uint64	`path:"bandwidth" module:"Cisco-IOS-XR-ifmgr-cfg"`
	Dampening	*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Dampening	`path:"dampening" module:"Cisco-IOS-XR-ifmgr-cfg"`
	Description	*string	`path:"description" module:"Cisco-IOS-XR-ifmgr-cfg"`
	Encapsulation	*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Encapsulation	`path:"encapsulation" module:"Cisco-IOS-XR-ifmgr-cfg"`
	InterfaceModeNonPhysical	E_Cisco_IOS_XRIfmgrCfg_InterfaceModeEnum	`path:"interface-mode-non-physical" module:"Cisco-IOS-XR-ifmgr-cfg"`
	InterfaceName	*string	`path:"interface-name" module:"Cisco-IOS-XR-ifmgr-cfg"`
	InterfaceVirtual	YANGEmpty	`path:"interface-virtual" module:"Cisco-IOS-XR-ifmgr-cfg"`
	LinkStatus	YANGEmpty	`path:"link-status" module:"Cisco-IOS-XR-ifmgr-cfg"`
	MteTunnelAttributes	*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes	`path:"mte-tunnel-attributes" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Mtus	*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Mtus	`path:"mtus" module:"Cisco-IOS-XR-ifmgr-cfg"`
	SecondaryAdminState	E_Cisco_IOS_XRIfmgrCfg_SecondaryAdminStateEnum	`path:"secondary-admin-state" module:"Cisco-IOS-XR-ifmgr-cfg"`
	Shutdown	YANGEmpty	`path:"shutdown" module:"Cisco-IOS-XR-ifmgr-cfg"`
	TransportProfileTunnel	*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel	`path:"transport-profile-tunnel" module:"Cisco-IOS-XR-mpls-te-cfg"`
	TunnelTeAttributes	*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes	`path:"tunnel-te-attributes" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration struct, which is a YANG list entry.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Active == nil {
		return nil, fmt.Errorf("nil value for key Active")
	}

	if t.InterfaceName == nil {
		return nil, fmt.Errorf("nil value for key InterfaceName")
	}

	return map[string]interface{}{
		"active": *t.Active,
		"interface-name": *t.InterfaceName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration) ΛBelongingModule() string {
	return "Cisco-IOS-XR-ifmgr-cfg"
}


// Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Dampening represents the /Cisco-IOS-XR-ifmgr-cfg/interface-configurations/interface-configuration/dampening YANG schema element.
type Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Dampening struct {
	Args	E_Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Dampening_Args	`path:"args" module:"Cisco-IOS-XR-ifmgr-cfg"`
	HalfLife	*uint32	`path:"half-life" module:"Cisco-IOS-XR-ifmgr-cfg"`
	RestartPenalty	*uint32	`path:"restart-penalty" module:"Cisco-IOS-XR-ifmgr-cfg"`
	ReuseThreshold	*uint32	`path:"reuse-threshold" module:"Cisco-IOS-XR-ifmgr-cfg"`
	SuppressThreshold	*uint32	`path:"suppress-threshold" module:"Cisco-IOS-XR-ifmgr-cfg"`
	SuppressTime	*uint32	`path:"suppress-time" module:"Cisco-IOS-XR-ifmgr-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Dampening implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Dampening) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Dampening) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Dampening"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Dampening) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Dampening) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Dampening.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Dampening) ΛBelongingModule() string {
	return "Cisco-IOS-XR-ifmgr-cfg"
}


// Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Encapsulation represents the /Cisco-IOS-XR-ifmgr-cfg/interface-configurations/interface-configuration/encapsulation YANG schema element.
type Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Encapsulation struct {
	CapsulationOptions	*uint32	`path:"capsulation-options" module:"Cisco-IOS-XR-ifmgr-cfg"`
	Encapsulation	*string	`path:"encapsulation" module:"Cisco-IOS-XR-ifmgr-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Encapsulation implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Encapsulation) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Encapsulation) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Encapsulation"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Encapsulation) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Encapsulation) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Encapsulation.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Encapsulation) ΛBelongingModule() string {
	return "Cisco-IOS-XR-ifmgr-cfg"
}


// Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes represents the /Cisco-IOS-XR-ifmgr-cfg/interface-configurations/interface-configuration/mte-tunnel-attributes YANG schema element.
type Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes struct {
	AffinityMask	*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_AffinityMask	`path:"affinity-mask" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Bandwidth	*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_Bandwidth	`path:"bandwidth" module:"Cisco-IOS-XR-mpls-te-cfg"`
	DestinationLeafs	*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs	`path:"destination-leafs" module:"Cisco-IOS-XR-mpls-te-cfg"`
	FastReroute	YANGEmpty	`path:"fast-reroute" module:"Cisco-IOS-XR-mpls-te-cfg"`
	ImposeExplicitNull	YANGEmpty	`path:"impose-explicit-null" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Logging	*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_Logging	`path:"logging" module:"Cisco-IOS-XR-mpls-te-cfg"`
	NewStyleAffinityAffinityTypes	*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes	`path:"new-style-affinity-affinity-types" module:"Cisco-IOS-XR-mpls-te-cfg"`
	PathSelectionMetric	E_Cisco_IOS_XRMplsTeCfg_MplsTePathSelectionMetric	`path:"path-selection-metric" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Priority	*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_Priority	`path:"priority" module:"Cisco-IOS-XR-mpls-te-cfg"`
	RecordRoute	YANGEmpty	`path:"record-route" module:"Cisco-IOS-XR-mpls-te-cfg"`
	SignalledName	*string	`path:"signalled-name" module:"Cisco-IOS-XR-mpls-te-cfg"`
	SignalledPayload	*string	`path:"signalled-payload" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_AffinityMask represents the /Cisco-IOS-XR-ifmgr-cfg/interface-configurations/interface-configuration/mte-tunnel-attributes/affinity-mask YANG schema element.
type Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_AffinityMask struct {
	Affinity	*string	`path:"affinity" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Mask	*string	`path:"mask" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_AffinityMask implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_AffinityMask) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_AffinityMask) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_AffinityMask"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_AffinityMask) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_AffinityMask) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_AffinityMask.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_AffinityMask) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_Bandwidth represents the /Cisco-IOS-XR-ifmgr-cfg/interface-configurations/interface-configuration/mte-tunnel-attributes/bandwidth YANG schema element.
type Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_Bandwidth struct {
	Bandwidth	*uint32	`path:"bandwidth" module:"Cisco-IOS-XR-mpls-te-cfg"`
	ClassOrPoolType	*uint32	`path:"class-or-pool-type" module:"Cisco-IOS-XR-mpls-te-cfg"`
	DsteType	E_Cisco_IOS_XRMplsTeCfg_MplsTeBandwidthDste	`path:"dste-type" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_Bandwidth implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_Bandwidth) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_Bandwidth) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_Bandwidth"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_Bandwidth) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_Bandwidth) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_Bandwidth.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_Bandwidth) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs represents the /Cisco-IOS-XR-ifmgr-cfg/interface-configurations/interface-configuration/mte-tunnel-attributes/destination-leafs YANG schema element.
type Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs struct {
	DestinationLeaf	map[string]*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs_DestinationLeaf	`path:"destination-leaf" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs) IsYANGGoStruct() {}

// NewDestinationLeaf creates a new entry in the DestinationLeaf list of the
// Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs) NewDestinationLeaf(Address string) (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs_DestinationLeaf, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.DestinationLeaf == nil {
		t.DestinationLeaf = make(map[string]*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs_DestinationLeaf)
	}

	key := Address

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.DestinationLeaf[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list DestinationLeaf", key)
	}

	t.DestinationLeaf[key] = &Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs_DestinationLeaf{
		Address: &Address,
	}

	return t.DestinationLeaf[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs_DestinationLeaf represents the /Cisco-IOS-XR-ifmgr-cfg/interface-configurations/interface-configuration/mte-tunnel-attributes/destination-leafs/destination-leaf YANG schema element.
type Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs_DestinationLeaf struct {
	Address	*string	`path:"address" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Destination	YANGEmpty	`path:"destination" module:"Cisco-IOS-XR-mpls-te-cfg"`
	DestinationDisable	YANGEmpty	`path:"destination-disable" module:"Cisco-IOS-XR-mpls-te-cfg"`
	PathOptions	*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs_DestinationLeaf_PathOptions	`path:"path-options" module:"Cisco-IOS-XR-mpls-te-cfg"`
	S2LLogging	*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs_DestinationLeaf_S2LLogging	`path:"s2l-logging" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs_DestinationLeaf implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs_DestinationLeaf) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs_DestinationLeaf struct, which is a YANG list entry.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs_DestinationLeaf) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Address == nil {
		return nil, fmt.Errorf("nil value for key Address")
	}

	return map[string]interface{}{
		"address": *t.Address,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs_DestinationLeaf) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs_DestinationLeaf"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs_DestinationLeaf) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs_DestinationLeaf) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs_DestinationLeaf.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs_DestinationLeaf) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs_DestinationLeaf_PathOptions represents the /Cisco-IOS-XR-ifmgr-cfg/interface-configurations/interface-configuration/mte-tunnel-attributes/destination-leafs/destination-leaf/path-options YANG schema element.
type Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs_DestinationLeaf_PathOptions struct {
	PathOption	map[uint32]*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs_DestinationLeaf_PathOptions_PathOption	`path:"path-option" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs_DestinationLeaf_PathOptions implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs_DestinationLeaf_PathOptions) IsYANGGoStruct() {}

// NewPathOption creates a new entry in the PathOption list of the
// Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs_DestinationLeaf_PathOptions struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs_DestinationLeaf_PathOptions) NewPathOption(PreferenceLevel uint32) (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs_DestinationLeaf_PathOptions_PathOption, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PathOption == nil {
		t.PathOption = make(map[uint32]*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs_DestinationLeaf_PathOptions_PathOption)
	}

	key := PreferenceLevel

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.PathOption[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list PathOption", key)
	}

	t.PathOption[key] = &Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs_DestinationLeaf_PathOptions_PathOption{
		PreferenceLevel: &PreferenceLevel,
	}

	return t.PathOption[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs_DestinationLeaf_PathOptions) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs_DestinationLeaf_PathOptions"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs_DestinationLeaf_PathOptions) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs_DestinationLeaf_PathOptions) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs_DestinationLeaf_PathOptions.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs_DestinationLeaf_PathOptions) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs_DestinationLeaf_PathOptions_PathOption represents the /Cisco-IOS-XR-ifmgr-cfg/interface-configurations/interface-configuration/mte-tunnel-attributes/destination-leafs/destination-leaf/path-options/path-option YANG schema element.
type Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs_DestinationLeaf_PathOptions_PathOption struct {
	Lockdown	E_Cisco_IOS_XRMplsTeCfg_MplsTePathOptionProperty	`path:"lockdown" module:"Cisco-IOS-XR-mpls-te-cfg"`
	PathId	*uint32	`path:"path-id" module:"Cisco-IOS-XR-mpls-te-cfg"`
	PathName	*string	`path:"path-name" module:"Cisco-IOS-XR-mpls-te-cfg"`
	PathType	E_Cisco_IOS_XRMplsTeCfg_MplsTePathOption	`path:"path-type" module:"Cisco-IOS-XR-mpls-te-cfg"`
	PreferenceLevel	*uint32	`path:"preference-level" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Verbatim	E_Cisco_IOS_XRMplsTeCfg_MplsTePathOptionProperty	`path:"verbatim" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs_DestinationLeaf_PathOptions_PathOption implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs_DestinationLeaf_PathOptions_PathOption) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs_DestinationLeaf_PathOptions_PathOption struct, which is a YANG list entry.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs_DestinationLeaf_PathOptions_PathOption) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PreferenceLevel == nil {
		return nil, fmt.Errorf("nil value for key PreferenceLevel")
	}

	return map[string]interface{}{
		"preference-level": *t.PreferenceLevel,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs_DestinationLeaf_PathOptions_PathOption) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs_DestinationLeaf_PathOptions_PathOption"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs_DestinationLeaf_PathOptions_PathOption) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs_DestinationLeaf_PathOptions_PathOption) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs_DestinationLeaf_PathOptions_PathOption.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs_DestinationLeaf_PathOptions_PathOption) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs_DestinationLeaf_S2LLogging represents the /Cisco-IOS-XR-ifmgr-cfg/interface-configurations/interface-configuration/mte-tunnel-attributes/destination-leafs/destination-leaf/s2l-logging YANG schema element.
type Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs_DestinationLeaf_S2LLogging struct {
	S2LInsufficientBwMesssage	YANGEmpty	`path:"s2l-insufficient-bw-messsage" module:"Cisco-IOS-XR-mpls-te-cfg"`
	S2LPcalcFailureMessage	YANGEmpty	`path:"s2l-pcalc-failure-message" module:"Cisco-IOS-XR-mpls-te-cfg"`
	S2LRerouteMesssage	YANGEmpty	`path:"s2l-reroute-messsage" module:"Cisco-IOS-XR-mpls-te-cfg"`
	S2LStateMessage	YANGEmpty	`path:"s2l-state-message" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs_DestinationLeaf_S2LLogging implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs_DestinationLeaf_S2LLogging) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs_DestinationLeaf_S2LLogging) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs_DestinationLeaf_S2LLogging"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs_DestinationLeaf_S2LLogging) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs_DestinationLeaf_S2LLogging) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs_DestinationLeaf_S2LLogging.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs_DestinationLeaf_S2LLogging) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_Logging represents the /Cisco-IOS-XR-ifmgr-cfg/interface-configurations/interface-configuration/mte-tunnel-attributes/logging YANG schema element.
type Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_Logging struct {
	All	YANGEmpty	`path:"all" module:"Cisco-IOS-XR-mpls-te-cfg"`
	BandwidthChangeMessage	YANGEmpty	`path:"bandwidth-change-message" module:"Cisco-IOS-XR-mpls-te-cfg"`
	InsufficientBwMessage	YANGEmpty	`path:"insufficient-bw-message" module:"Cisco-IOS-XR-mpls-te-cfg"`
	PcalcFailureMessage	YANGEmpty	`path:"pcalc-failure-message" module:"Cisco-IOS-XR-mpls-te-cfg"`
	ReoptimizeAttemptsMessage	YANGEmpty	`path:"reoptimize-attempts-message" module:"Cisco-IOS-XR-mpls-te-cfg"`
	ReoptimizedMessage	YANGEmpty	`path:"reoptimized-message" module:"Cisco-IOS-XR-mpls-te-cfg"`
	RerouteMesssage	YANGEmpty	`path:"reroute-messsage" module:"Cisco-IOS-XR-mpls-te-cfg"`
	StateMessage	YANGEmpty	`path:"state-message" module:"Cisco-IOS-XR-mpls-te-cfg"`
	SubLspStateMessage	YANGEmpty	`path:"sub-lsp-state-message" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_Logging implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_Logging) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_Logging) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_Logging"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_Logging) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_Logging) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_Logging.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_Logging) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes represents the /Cisco-IOS-XR-ifmgr-cfg/interface-configurations/interface-configuration/mte-tunnel-attributes/new-style-affinity-affinity-types YANG schema element.
type Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes struct {
	NewStyleAffinityAffinityType	map[E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity]*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType	`path:"new-style-affinity-affinity-type" module:"Cisco-IOS-XR-mpls-te-cfg"`
	NewStyleAffinityAffinityTypeAffinity1	map[Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1_Key]*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1	`path:"new-style-affinity-affinity-type-affinity1" module:"Cisco-IOS-XR-mpls-te-cfg"`
	NewStyleAffinityAffinityTypeAffinity1Affinity2	map[Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2_Key]*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2	`path:"new-style-affinity-affinity-type-affinity1-affinity2" module:"Cisco-IOS-XR-mpls-te-cfg"`
	NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3	map[Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3_Key]*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3	`path:"new-style-affinity-affinity-type-affinity1-affinity2-affinity3" module:"Cisco-IOS-XR-mpls-te-cfg"`
	NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4	map[Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4_Key]*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4	`path:"new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4" module:"Cisco-IOS-XR-mpls-te-cfg"`
	NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5	map[Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5_Key]*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5	`path:"new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5" module:"Cisco-IOS-XR-mpls-te-cfg"`
	NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6	map[Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6_Key]*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6	`path:"new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6" module:"Cisco-IOS-XR-mpls-te-cfg"`
	NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7	map[Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7_Key]*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7	`path:"new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7" module:"Cisco-IOS-XR-mpls-te-cfg"`
	NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8	map[Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8_Key]*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8	`path:"new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8" module:"Cisco-IOS-XR-mpls-te-cfg"`
	NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9	map[Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9_Key]*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9	`path:"new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8-affinity9" module:"Cisco-IOS-XR-mpls-te-cfg"`
	NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10	map[Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10_Key]*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10	`path:"new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8-affinity9-affinity10" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes) IsYANGGoStruct() {}

// Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1_Key represents the key for list NewStyleAffinityAffinityTypeAffinity1 of element /Cisco-IOS-XR-ifmgr-cfg/interface-configurations/interface-configuration/mte-tunnel-attributes/new-style-affinity-affinity-types.
type Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1_Key struct {
	AffinityType	E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity	`path:"affinity-type"`
	Affinity1	string	`path:"affinity1"`
}

// IsYANGGoKeyStruct ensures that Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1_Key) IsYANGGoKeyStruct() {}

// ΛListKeyMap returns the values of the Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1_Key key struct.
func (t Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"affinity-type": t.AffinityType,
		"affinity1": t.Affinity1,
	}, nil
}

// Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2_Key represents the key for list NewStyleAffinityAffinityTypeAffinity1Affinity2 of element /Cisco-IOS-XR-ifmgr-cfg/interface-configurations/interface-configuration/mte-tunnel-attributes/new-style-affinity-affinity-types.
type Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2_Key struct {
	AffinityType	E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity	`path:"affinity-type"`
	Affinity1	string	`path:"affinity1"`
	Affinity2	string	`path:"affinity2"`
}

// IsYANGGoKeyStruct ensures that Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2_Key) IsYANGGoKeyStruct() {}

// ΛListKeyMap returns the values of the Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2_Key key struct.
func (t Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"affinity-type": t.AffinityType,
		"affinity1": t.Affinity1,
		"affinity2": t.Affinity2,
	}, nil
}

// Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3_Key represents the key for list NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 of element /Cisco-IOS-XR-ifmgr-cfg/interface-configurations/interface-configuration/mte-tunnel-attributes/new-style-affinity-affinity-types.
type Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3_Key struct {
	AffinityType	E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity	`path:"affinity-type"`
	Affinity1	string	`path:"affinity1"`
	Affinity2	string	`path:"affinity2"`
	Affinity3	string	`path:"affinity3"`
}

// IsYANGGoKeyStruct ensures that Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3_Key) IsYANGGoKeyStruct() {}

// ΛListKeyMap returns the values of the Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3_Key key struct.
func (t Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"affinity-type": t.AffinityType,
		"affinity1": t.Affinity1,
		"affinity2": t.Affinity2,
		"affinity3": t.Affinity3,
	}, nil
}

// Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4_Key represents the key for list NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 of element /Cisco-IOS-XR-ifmgr-cfg/interface-configurations/interface-configuration/mte-tunnel-attributes/new-style-affinity-affinity-types.
type Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4_Key struct {
	AffinityType	E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity	`path:"affinity-type"`
	Affinity1	string	`path:"affinity1"`
	Affinity2	string	`path:"affinity2"`
	Affinity3	string	`path:"affinity3"`
	Affinity4	string	`path:"affinity4"`
}

// IsYANGGoKeyStruct ensures that Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4_Key) IsYANGGoKeyStruct() {}

// ΛListKeyMap returns the values of the Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4_Key key struct.
func (t Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"affinity-type": t.AffinityType,
		"affinity1": t.Affinity1,
		"affinity2": t.Affinity2,
		"affinity3": t.Affinity3,
		"affinity4": t.Affinity4,
	}, nil
}

// Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5_Key represents the key for list NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 of element /Cisco-IOS-XR-ifmgr-cfg/interface-configurations/interface-configuration/mte-tunnel-attributes/new-style-affinity-affinity-types.
type Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5_Key struct {
	AffinityType	E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity	`path:"affinity-type"`
	Affinity1	string	`path:"affinity1"`
	Affinity2	string	`path:"affinity2"`
	Affinity3	string	`path:"affinity3"`
	Affinity4	string	`path:"affinity4"`
	Affinity5	string	`path:"affinity5"`
}

// IsYANGGoKeyStruct ensures that Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5_Key) IsYANGGoKeyStruct() {}

// ΛListKeyMap returns the values of the Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5_Key key struct.
func (t Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"affinity-type": t.AffinityType,
		"affinity1": t.Affinity1,
		"affinity2": t.Affinity2,
		"affinity3": t.Affinity3,
		"affinity4": t.Affinity4,
		"affinity5": t.Affinity5,
	}, nil
}

// Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6_Key represents the key for list NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 of element /Cisco-IOS-XR-ifmgr-cfg/interface-configurations/interface-configuration/mte-tunnel-attributes/new-style-affinity-affinity-types.
type Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6_Key struct {
	AffinityType	E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity	`path:"affinity-type"`
	Affinity1	string	`path:"affinity1"`
	Affinity2	string	`path:"affinity2"`
	Affinity3	string	`path:"affinity3"`
	Affinity4	string	`path:"affinity4"`
	Affinity5	string	`path:"affinity5"`
	Affinity6	string	`path:"affinity6"`
}

// IsYANGGoKeyStruct ensures that Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6_Key) IsYANGGoKeyStruct() {}

// ΛListKeyMap returns the values of the Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6_Key key struct.
func (t Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"affinity-type": t.AffinityType,
		"affinity1": t.Affinity1,
		"affinity2": t.Affinity2,
		"affinity3": t.Affinity3,
		"affinity4": t.Affinity4,
		"affinity5": t.Affinity5,
		"affinity6": t.Affinity6,
	}, nil
}

// Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7_Key represents the key for list NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 of element /Cisco-IOS-XR-ifmgr-cfg/interface-configurations/interface-configuration/mte-tunnel-attributes/new-style-affinity-affinity-types.
type Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7_Key struct {
	AffinityType	E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity	`path:"affinity-type"`
	Affinity1	string	`path:"affinity1"`
	Affinity2	string	`path:"affinity2"`
	Affinity3	string	`path:"affinity3"`
	Affinity4	string	`path:"affinity4"`
	Affinity5	string	`path:"affinity5"`
	Affinity6	string	`path:"affinity6"`
	Affinity7	string	`path:"affinity7"`
}

// IsYANGGoKeyStruct ensures that Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7_Key) IsYANGGoKeyStruct() {}

// ΛListKeyMap returns the values of the Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7_Key key struct.
func (t Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"affinity-type": t.AffinityType,
		"affinity1": t.Affinity1,
		"affinity2": t.Affinity2,
		"affinity3": t.Affinity3,
		"affinity4": t.Affinity4,
		"affinity5": t.Affinity5,
		"affinity6": t.Affinity6,
		"affinity7": t.Affinity7,
	}, nil
}

// Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8_Key represents the key for list NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 of element /Cisco-IOS-XR-ifmgr-cfg/interface-configurations/interface-configuration/mte-tunnel-attributes/new-style-affinity-affinity-types.
type Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8_Key struct {
	AffinityType	E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity	`path:"affinity-type"`
	Affinity1	string	`path:"affinity1"`
	Affinity2	string	`path:"affinity2"`
	Affinity3	string	`path:"affinity3"`
	Affinity4	string	`path:"affinity4"`
	Affinity5	string	`path:"affinity5"`
	Affinity6	string	`path:"affinity6"`
	Affinity7	string	`path:"affinity7"`
	Affinity8	string	`path:"affinity8"`
}

// IsYANGGoKeyStruct ensures that Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8_Key) IsYANGGoKeyStruct() {}

// ΛListKeyMap returns the values of the Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8_Key key struct.
func (t Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"affinity-type": t.AffinityType,
		"affinity1": t.Affinity1,
		"affinity2": t.Affinity2,
		"affinity3": t.Affinity3,
		"affinity4": t.Affinity4,
		"affinity5": t.Affinity5,
		"affinity6": t.Affinity6,
		"affinity7": t.Affinity7,
		"affinity8": t.Affinity8,
	}, nil
}

// Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9_Key represents the key for list NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 of element /Cisco-IOS-XR-ifmgr-cfg/interface-configurations/interface-configuration/mte-tunnel-attributes/new-style-affinity-affinity-types.
type Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9_Key struct {
	AffinityType	E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity	`path:"affinity-type"`
	Affinity1	string	`path:"affinity1"`
	Affinity2	string	`path:"affinity2"`
	Affinity3	string	`path:"affinity3"`
	Affinity4	string	`path:"affinity4"`
	Affinity5	string	`path:"affinity5"`
	Affinity6	string	`path:"affinity6"`
	Affinity7	string	`path:"affinity7"`
	Affinity8	string	`path:"affinity8"`
	Affinity9	string	`path:"affinity9"`
}

// IsYANGGoKeyStruct ensures that Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9_Key) IsYANGGoKeyStruct() {}

// ΛListKeyMap returns the values of the Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9_Key key struct.
func (t Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"affinity-type": t.AffinityType,
		"affinity1": t.Affinity1,
		"affinity2": t.Affinity2,
		"affinity3": t.Affinity3,
		"affinity4": t.Affinity4,
		"affinity5": t.Affinity5,
		"affinity6": t.Affinity6,
		"affinity7": t.Affinity7,
		"affinity8": t.Affinity8,
		"affinity9": t.Affinity9,
	}, nil
}

// Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10_Key represents the key for list NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 of element /Cisco-IOS-XR-ifmgr-cfg/interface-configurations/interface-configuration/mte-tunnel-attributes/new-style-affinity-affinity-types.
type Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10_Key struct {
	AffinityType	E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity	`path:"affinity-type"`
	Affinity1	string	`path:"affinity1"`
	Affinity2	string	`path:"affinity2"`
	Affinity3	string	`path:"affinity3"`
	Affinity4	string	`path:"affinity4"`
	Affinity5	string	`path:"affinity5"`
	Affinity6	string	`path:"affinity6"`
	Affinity7	string	`path:"affinity7"`
	Affinity8	string	`path:"affinity8"`
	Affinity9	string	`path:"affinity9"`
	Affinity10	string	`path:"affinity10"`
}

// IsYANGGoKeyStruct ensures that Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10_Key) IsYANGGoKeyStruct() {}

// ΛListKeyMap returns the values of the Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10_Key key struct.
func (t Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"affinity-type": t.AffinityType,
		"affinity1": t.Affinity1,
		"affinity2": t.Affinity2,
		"affinity3": t.Affinity3,
		"affinity4": t.Affinity4,
		"affinity5": t.Affinity5,
		"affinity6": t.Affinity6,
		"affinity7": t.Affinity7,
		"affinity8": t.Affinity8,
		"affinity9": t.Affinity9,
		"affinity10": t.Affinity10,
	}, nil
}

// NewNewStyleAffinityAffinityType creates a new entry in the NewStyleAffinityAffinityType list of the
// Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes) NewNewStyleAffinityAffinityType(AffinityType E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity) (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NewStyleAffinityAffinityType == nil {
		t.NewStyleAffinityAffinityType = make(map[E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity]*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType)
	}

	key := AffinityType

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NewStyleAffinityAffinityType[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NewStyleAffinityAffinityType", key)
	}

	t.NewStyleAffinityAffinityType[key] = &Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType{
		AffinityType: AffinityType,
	}

	return t.NewStyleAffinityAffinityType[key], nil
}

// NewNewStyleAffinityAffinityTypeAffinity1 creates a new entry in the NewStyleAffinityAffinityTypeAffinity1 list of the
// Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes) NewNewStyleAffinityAffinityTypeAffinity1(AffinityType E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity, Affinity1 string) (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NewStyleAffinityAffinityTypeAffinity1 == nil {
		t.NewStyleAffinityAffinityTypeAffinity1 = make(map[Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1_Key]*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1)
	}

	key := Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1_Key{
		AffinityType: AffinityType,
		Affinity1: Affinity1,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NewStyleAffinityAffinityTypeAffinity1[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NewStyleAffinityAffinityTypeAffinity1", key)
	}

	t.NewStyleAffinityAffinityTypeAffinity1[key] = &Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1{
		AffinityType: AffinityType,
		Affinity1: &Affinity1,
	}

	return t.NewStyleAffinityAffinityTypeAffinity1[key], nil
}

// NewNewStyleAffinityAffinityTypeAffinity1Affinity2 creates a new entry in the NewStyleAffinityAffinityTypeAffinity1Affinity2 list of the
// Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes) NewNewStyleAffinityAffinityTypeAffinity1Affinity2(AffinityType E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity, Affinity1 string, Affinity2 string) (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NewStyleAffinityAffinityTypeAffinity1Affinity2 == nil {
		t.NewStyleAffinityAffinityTypeAffinity1Affinity2 = make(map[Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2_Key]*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2)
	}

	key := Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2_Key{
		AffinityType: AffinityType,
		Affinity1: Affinity1,
		Affinity2: Affinity2,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NewStyleAffinityAffinityTypeAffinity1Affinity2[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NewStyleAffinityAffinityTypeAffinity1Affinity2", key)
	}

	t.NewStyleAffinityAffinityTypeAffinity1Affinity2[key] = &Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2{
		AffinityType: AffinityType,
		Affinity1: &Affinity1,
		Affinity2: &Affinity2,
	}

	return t.NewStyleAffinityAffinityTypeAffinity1Affinity2[key], nil
}

// NewNewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 creates a new entry in the NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 list of the
// Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes) NewNewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3(AffinityType E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity, Affinity1 string, Affinity2 string, Affinity3 string) (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 == nil {
		t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 = make(map[Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3_Key]*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3)
	}

	key := Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3_Key{
		AffinityType: AffinityType,
		Affinity1: Affinity1,
		Affinity2: Affinity2,
		Affinity3: Affinity3,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3", key)
	}

	t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3[key] = &Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3{
		AffinityType: AffinityType,
		Affinity1: &Affinity1,
		Affinity2: &Affinity2,
		Affinity3: &Affinity3,
	}

	return t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3[key], nil
}

// NewNewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 creates a new entry in the NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 list of the
// Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes) NewNewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4(AffinityType E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity, Affinity1 string, Affinity2 string, Affinity3 string, Affinity4 string) (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 == nil {
		t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 = make(map[Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4_Key]*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4)
	}

	key := Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4_Key{
		AffinityType: AffinityType,
		Affinity1: Affinity1,
		Affinity2: Affinity2,
		Affinity3: Affinity3,
		Affinity4: Affinity4,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4", key)
	}

	t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4[key] = &Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4{
		AffinityType: AffinityType,
		Affinity1: &Affinity1,
		Affinity2: &Affinity2,
		Affinity3: &Affinity3,
		Affinity4: &Affinity4,
	}

	return t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4[key], nil
}

// NewNewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 creates a new entry in the NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 list of the
// Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes) NewNewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5(AffinityType E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity, Affinity1 string, Affinity2 string, Affinity3 string, Affinity4 string, Affinity5 string) (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 == nil {
		t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 = make(map[Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5_Key]*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5)
	}

	key := Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5_Key{
		AffinityType: AffinityType,
		Affinity1: Affinity1,
		Affinity2: Affinity2,
		Affinity3: Affinity3,
		Affinity4: Affinity4,
		Affinity5: Affinity5,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5", key)
	}

	t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5[key] = &Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5{
		AffinityType: AffinityType,
		Affinity1: &Affinity1,
		Affinity2: &Affinity2,
		Affinity3: &Affinity3,
		Affinity4: &Affinity4,
		Affinity5: &Affinity5,
	}

	return t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5[key], nil
}

// NewNewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 creates a new entry in the NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 list of the
// Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes) NewNewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6(AffinityType E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity, Affinity1 string, Affinity2 string, Affinity3 string, Affinity4 string, Affinity5 string, Affinity6 string) (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 == nil {
		t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 = make(map[Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6_Key]*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6)
	}

	key := Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6_Key{
		AffinityType: AffinityType,
		Affinity1: Affinity1,
		Affinity2: Affinity2,
		Affinity3: Affinity3,
		Affinity4: Affinity4,
		Affinity5: Affinity5,
		Affinity6: Affinity6,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6", key)
	}

	t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6[key] = &Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6{
		AffinityType: AffinityType,
		Affinity1: &Affinity1,
		Affinity2: &Affinity2,
		Affinity3: &Affinity3,
		Affinity4: &Affinity4,
		Affinity5: &Affinity5,
		Affinity6: &Affinity6,
	}

	return t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6[key], nil
}

// NewNewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 creates a new entry in the NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 list of the
// Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes) NewNewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7(AffinityType E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity, Affinity1 string, Affinity2 string, Affinity3 string, Affinity4 string, Affinity5 string, Affinity6 string, Affinity7 string) (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 == nil {
		t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 = make(map[Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7_Key]*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7)
	}

	key := Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7_Key{
		AffinityType: AffinityType,
		Affinity1: Affinity1,
		Affinity2: Affinity2,
		Affinity3: Affinity3,
		Affinity4: Affinity4,
		Affinity5: Affinity5,
		Affinity6: Affinity6,
		Affinity7: Affinity7,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7", key)
	}

	t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7[key] = &Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7{
		AffinityType: AffinityType,
		Affinity1: &Affinity1,
		Affinity2: &Affinity2,
		Affinity3: &Affinity3,
		Affinity4: &Affinity4,
		Affinity5: &Affinity5,
		Affinity6: &Affinity6,
		Affinity7: &Affinity7,
	}

	return t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7[key], nil
}

// NewNewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 creates a new entry in the NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 list of the
// Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes) NewNewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8(AffinityType E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity, Affinity1 string, Affinity2 string, Affinity3 string, Affinity4 string, Affinity5 string, Affinity6 string, Affinity7 string, Affinity8 string) (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 == nil {
		t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 = make(map[Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8_Key]*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8)
	}

	key := Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8_Key{
		AffinityType: AffinityType,
		Affinity1: Affinity1,
		Affinity2: Affinity2,
		Affinity3: Affinity3,
		Affinity4: Affinity4,
		Affinity5: Affinity5,
		Affinity6: Affinity6,
		Affinity7: Affinity7,
		Affinity8: Affinity8,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8", key)
	}

	t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8[key] = &Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8{
		AffinityType: AffinityType,
		Affinity1: &Affinity1,
		Affinity2: &Affinity2,
		Affinity3: &Affinity3,
		Affinity4: &Affinity4,
		Affinity5: &Affinity5,
		Affinity6: &Affinity6,
		Affinity7: &Affinity7,
		Affinity8: &Affinity8,
	}

	return t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8[key], nil
}

// NewNewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 creates a new entry in the NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 list of the
// Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes) NewNewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9(AffinityType E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity, Affinity1 string, Affinity2 string, Affinity3 string, Affinity4 string, Affinity5 string, Affinity6 string, Affinity7 string, Affinity8 string, Affinity9 string) (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 == nil {
		t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 = make(map[Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9_Key]*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9)
	}

	key := Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9_Key{
		AffinityType: AffinityType,
		Affinity1: Affinity1,
		Affinity2: Affinity2,
		Affinity3: Affinity3,
		Affinity4: Affinity4,
		Affinity5: Affinity5,
		Affinity6: Affinity6,
		Affinity7: Affinity7,
		Affinity8: Affinity8,
		Affinity9: Affinity9,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9", key)
	}

	t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9[key] = &Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9{
		AffinityType: AffinityType,
		Affinity1: &Affinity1,
		Affinity2: &Affinity2,
		Affinity3: &Affinity3,
		Affinity4: &Affinity4,
		Affinity5: &Affinity5,
		Affinity6: &Affinity6,
		Affinity7: &Affinity7,
		Affinity8: &Affinity8,
		Affinity9: &Affinity9,
	}

	return t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9[key], nil
}

// NewNewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 creates a new entry in the NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 list of the
// Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes) NewNewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10(AffinityType E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity, Affinity1 string, Affinity2 string, Affinity3 string, Affinity4 string, Affinity5 string, Affinity6 string, Affinity7 string, Affinity8 string, Affinity9 string, Affinity10 string) (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 == nil {
		t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 = make(map[Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10_Key]*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10)
	}

	key := Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10_Key{
		AffinityType: AffinityType,
		Affinity1: Affinity1,
		Affinity2: Affinity2,
		Affinity3: Affinity3,
		Affinity4: Affinity4,
		Affinity5: Affinity5,
		Affinity6: Affinity6,
		Affinity7: Affinity7,
		Affinity8: Affinity8,
		Affinity9: Affinity9,
		Affinity10: Affinity10,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10", key)
	}

	t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10[key] = &Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10{
		AffinityType: AffinityType,
		Affinity1: &Affinity1,
		Affinity2: &Affinity2,
		Affinity3: &Affinity3,
		Affinity4: &Affinity4,
		Affinity5: &Affinity5,
		Affinity6: &Affinity6,
		Affinity7: &Affinity7,
		Affinity8: &Affinity8,
		Affinity9: &Affinity9,
		Affinity10: &Affinity10,
	}

	return t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType represents the /Cisco-IOS-XR-ifmgr-cfg/interface-configurations/interface-configuration/mte-tunnel-attributes/new-style-affinity-affinity-types/new-style-affinity-affinity-type YANG schema element.
type Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType struct {
	AffinityType	E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity	`path:"affinity-type" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType struct, which is a YANG list entry.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"affinity-type": t.AffinityType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1 represents the /Cisco-IOS-XR-ifmgr-cfg/interface-configurations/interface-configuration/mte-tunnel-attributes/new-style-affinity-affinity-types/new-style-affinity-affinity-type-affinity1 YANG schema element.
type Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1 struct {
	AffinityType	E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity	`path:"affinity-type" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity1	*string	`path:"affinity1" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1 struct, which is a YANG list entry.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1) ΛListKeyMap() (map[string]interface{}, error) {

	if t.Affinity1 == nil {
		return nil, fmt.Errorf("nil value for key Affinity1")
	}

	return map[string]interface{}{
		"affinity-type": t.AffinityType,
		"affinity1": *t.Affinity1,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2 represents the /Cisco-IOS-XR-ifmgr-cfg/interface-configurations/interface-configuration/mte-tunnel-attributes/new-style-affinity-affinity-types/new-style-affinity-affinity-type-affinity1-affinity2 YANG schema element.
type Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2 struct {
	AffinityType	E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity	`path:"affinity-type" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity1	*string	`path:"affinity1" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity2	*string	`path:"affinity2" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2 struct, which is a YANG list entry.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2) ΛListKeyMap() (map[string]interface{}, error) {

	if t.Affinity1 == nil {
		return nil, fmt.Errorf("nil value for key Affinity1")
	}

	if t.Affinity2 == nil {
		return nil, fmt.Errorf("nil value for key Affinity2")
	}

	return map[string]interface{}{
		"affinity-type": t.AffinityType,
		"affinity1": *t.Affinity1,
		"affinity2": *t.Affinity2,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 represents the /Cisco-IOS-XR-ifmgr-cfg/interface-configurations/interface-configuration/mte-tunnel-attributes/new-style-affinity-affinity-types/new-style-affinity-affinity-type-affinity1-affinity2-affinity3 YANG schema element.
type Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 struct {
	AffinityType	E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity	`path:"affinity-type" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity1	*string	`path:"affinity1" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity2	*string	`path:"affinity2" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity3	*string	`path:"affinity3" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 struct, which is a YANG list entry.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3) ΛListKeyMap() (map[string]interface{}, error) {

	if t.Affinity1 == nil {
		return nil, fmt.Errorf("nil value for key Affinity1")
	}

	if t.Affinity2 == nil {
		return nil, fmt.Errorf("nil value for key Affinity2")
	}

	if t.Affinity3 == nil {
		return nil, fmt.Errorf("nil value for key Affinity3")
	}

	return map[string]interface{}{
		"affinity-type": t.AffinityType,
		"affinity1": *t.Affinity1,
		"affinity2": *t.Affinity2,
		"affinity3": *t.Affinity3,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 represents the /Cisco-IOS-XR-ifmgr-cfg/interface-configurations/interface-configuration/mte-tunnel-attributes/new-style-affinity-affinity-types/new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4 YANG schema element.
type Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 struct {
	AffinityType	E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity	`path:"affinity-type" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity1	*string	`path:"affinity1" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity2	*string	`path:"affinity2" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity3	*string	`path:"affinity3" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity4	*string	`path:"affinity4" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 struct, which is a YANG list entry.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4) ΛListKeyMap() (map[string]interface{}, error) {

	if t.Affinity1 == nil {
		return nil, fmt.Errorf("nil value for key Affinity1")
	}

	if t.Affinity2 == nil {
		return nil, fmt.Errorf("nil value for key Affinity2")
	}

	if t.Affinity3 == nil {
		return nil, fmt.Errorf("nil value for key Affinity3")
	}

	if t.Affinity4 == nil {
		return nil, fmt.Errorf("nil value for key Affinity4")
	}

	return map[string]interface{}{
		"affinity-type": t.AffinityType,
		"affinity1": *t.Affinity1,
		"affinity2": *t.Affinity2,
		"affinity3": *t.Affinity3,
		"affinity4": *t.Affinity4,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 represents the /Cisco-IOS-XR-ifmgr-cfg/interface-configurations/interface-configuration/mte-tunnel-attributes/new-style-affinity-affinity-types/new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5 YANG schema element.
type Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 struct {
	AffinityType	E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity	`path:"affinity-type" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity1	*string	`path:"affinity1" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity2	*string	`path:"affinity2" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity3	*string	`path:"affinity3" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity4	*string	`path:"affinity4" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity5	*string	`path:"affinity5" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 struct, which is a YANG list entry.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5) ΛListKeyMap() (map[string]interface{}, error) {

	if t.Affinity1 == nil {
		return nil, fmt.Errorf("nil value for key Affinity1")
	}

	if t.Affinity2 == nil {
		return nil, fmt.Errorf("nil value for key Affinity2")
	}

	if t.Affinity3 == nil {
		return nil, fmt.Errorf("nil value for key Affinity3")
	}

	if t.Affinity4 == nil {
		return nil, fmt.Errorf("nil value for key Affinity4")
	}

	if t.Affinity5 == nil {
		return nil, fmt.Errorf("nil value for key Affinity5")
	}

	return map[string]interface{}{
		"affinity-type": t.AffinityType,
		"affinity1": *t.Affinity1,
		"affinity2": *t.Affinity2,
		"affinity3": *t.Affinity3,
		"affinity4": *t.Affinity4,
		"affinity5": *t.Affinity5,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 represents the /Cisco-IOS-XR-ifmgr-cfg/interface-configurations/interface-configuration/mte-tunnel-attributes/new-style-affinity-affinity-types/new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6 YANG schema element.
type Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 struct {
	AffinityType	E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity	`path:"affinity-type" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity1	*string	`path:"affinity1" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity2	*string	`path:"affinity2" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity3	*string	`path:"affinity3" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity4	*string	`path:"affinity4" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity5	*string	`path:"affinity5" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity6	*string	`path:"affinity6" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 struct, which is a YANG list entry.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6) ΛListKeyMap() (map[string]interface{}, error) {

	if t.Affinity1 == nil {
		return nil, fmt.Errorf("nil value for key Affinity1")
	}

	if t.Affinity2 == nil {
		return nil, fmt.Errorf("nil value for key Affinity2")
	}

	if t.Affinity3 == nil {
		return nil, fmt.Errorf("nil value for key Affinity3")
	}

	if t.Affinity4 == nil {
		return nil, fmt.Errorf("nil value for key Affinity4")
	}

	if t.Affinity5 == nil {
		return nil, fmt.Errorf("nil value for key Affinity5")
	}

	if t.Affinity6 == nil {
		return nil, fmt.Errorf("nil value for key Affinity6")
	}

	return map[string]interface{}{
		"affinity-type": t.AffinityType,
		"affinity1": *t.Affinity1,
		"affinity2": *t.Affinity2,
		"affinity3": *t.Affinity3,
		"affinity4": *t.Affinity4,
		"affinity5": *t.Affinity5,
		"affinity6": *t.Affinity6,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 represents the /Cisco-IOS-XR-ifmgr-cfg/interface-configurations/interface-configuration/mte-tunnel-attributes/new-style-affinity-affinity-types/new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7 YANG schema element.
type Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 struct {
	AffinityType	E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity	`path:"affinity-type" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity1	*string	`path:"affinity1" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity2	*string	`path:"affinity2" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity3	*string	`path:"affinity3" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity4	*string	`path:"affinity4" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity5	*string	`path:"affinity5" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity6	*string	`path:"affinity6" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity7	*string	`path:"affinity7" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 struct, which is a YANG list entry.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7) ΛListKeyMap() (map[string]interface{}, error) {

	if t.Affinity1 == nil {
		return nil, fmt.Errorf("nil value for key Affinity1")
	}

	if t.Affinity2 == nil {
		return nil, fmt.Errorf("nil value for key Affinity2")
	}

	if t.Affinity3 == nil {
		return nil, fmt.Errorf("nil value for key Affinity3")
	}

	if t.Affinity4 == nil {
		return nil, fmt.Errorf("nil value for key Affinity4")
	}

	if t.Affinity5 == nil {
		return nil, fmt.Errorf("nil value for key Affinity5")
	}

	if t.Affinity6 == nil {
		return nil, fmt.Errorf("nil value for key Affinity6")
	}

	if t.Affinity7 == nil {
		return nil, fmt.Errorf("nil value for key Affinity7")
	}

	return map[string]interface{}{
		"affinity-type": t.AffinityType,
		"affinity1": *t.Affinity1,
		"affinity2": *t.Affinity2,
		"affinity3": *t.Affinity3,
		"affinity4": *t.Affinity4,
		"affinity5": *t.Affinity5,
		"affinity6": *t.Affinity6,
		"affinity7": *t.Affinity7,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 represents the /Cisco-IOS-XR-ifmgr-cfg/interface-configurations/interface-configuration/mte-tunnel-attributes/new-style-affinity-affinity-types/new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8 YANG schema element.
type Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 struct {
	AffinityType	E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity	`path:"affinity-type" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity1	*string	`path:"affinity1" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity2	*string	`path:"affinity2" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity3	*string	`path:"affinity3" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity4	*string	`path:"affinity4" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity5	*string	`path:"affinity5" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity6	*string	`path:"affinity6" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity7	*string	`path:"affinity7" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity8	*string	`path:"affinity8" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 struct, which is a YANG list entry.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8) ΛListKeyMap() (map[string]interface{}, error) {

	if t.Affinity1 == nil {
		return nil, fmt.Errorf("nil value for key Affinity1")
	}

	if t.Affinity2 == nil {
		return nil, fmt.Errorf("nil value for key Affinity2")
	}

	if t.Affinity3 == nil {
		return nil, fmt.Errorf("nil value for key Affinity3")
	}

	if t.Affinity4 == nil {
		return nil, fmt.Errorf("nil value for key Affinity4")
	}

	if t.Affinity5 == nil {
		return nil, fmt.Errorf("nil value for key Affinity5")
	}

	if t.Affinity6 == nil {
		return nil, fmt.Errorf("nil value for key Affinity6")
	}

	if t.Affinity7 == nil {
		return nil, fmt.Errorf("nil value for key Affinity7")
	}

	if t.Affinity8 == nil {
		return nil, fmt.Errorf("nil value for key Affinity8")
	}

	return map[string]interface{}{
		"affinity-type": t.AffinityType,
		"affinity1": *t.Affinity1,
		"affinity2": *t.Affinity2,
		"affinity3": *t.Affinity3,
		"affinity4": *t.Affinity4,
		"affinity5": *t.Affinity5,
		"affinity6": *t.Affinity6,
		"affinity7": *t.Affinity7,
		"affinity8": *t.Affinity8,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 represents the /Cisco-IOS-XR-ifmgr-cfg/interface-configurations/interface-configuration/mte-tunnel-attributes/new-style-affinity-affinity-types/new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8-affinity9 YANG schema element.
type Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 struct {
	AffinityType	E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity	`path:"affinity-type" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity1	*string	`path:"affinity1" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity2	*string	`path:"affinity2" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity3	*string	`path:"affinity3" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity4	*string	`path:"affinity4" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity5	*string	`path:"affinity5" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity6	*string	`path:"affinity6" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity7	*string	`path:"affinity7" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity8	*string	`path:"affinity8" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity9	*string	`path:"affinity9" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 struct, which is a YANG list entry.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9) ΛListKeyMap() (map[string]interface{}, error) {

	if t.Affinity1 == nil {
		return nil, fmt.Errorf("nil value for key Affinity1")
	}

	if t.Affinity2 == nil {
		return nil, fmt.Errorf("nil value for key Affinity2")
	}

	if t.Affinity3 == nil {
		return nil, fmt.Errorf("nil value for key Affinity3")
	}

	if t.Affinity4 == nil {
		return nil, fmt.Errorf("nil value for key Affinity4")
	}

	if t.Affinity5 == nil {
		return nil, fmt.Errorf("nil value for key Affinity5")
	}

	if t.Affinity6 == nil {
		return nil, fmt.Errorf("nil value for key Affinity6")
	}

	if t.Affinity7 == nil {
		return nil, fmt.Errorf("nil value for key Affinity7")
	}

	if t.Affinity8 == nil {
		return nil, fmt.Errorf("nil value for key Affinity8")
	}

	if t.Affinity9 == nil {
		return nil, fmt.Errorf("nil value for key Affinity9")
	}

	return map[string]interface{}{
		"affinity-type": t.AffinityType,
		"affinity1": *t.Affinity1,
		"affinity2": *t.Affinity2,
		"affinity3": *t.Affinity3,
		"affinity4": *t.Affinity4,
		"affinity5": *t.Affinity5,
		"affinity6": *t.Affinity6,
		"affinity7": *t.Affinity7,
		"affinity8": *t.Affinity8,
		"affinity9": *t.Affinity9,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 represents the /Cisco-IOS-XR-ifmgr-cfg/interface-configurations/interface-configuration/mte-tunnel-attributes/new-style-affinity-affinity-types/new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8-affinity9-affinity10 YANG schema element.
type Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 struct {
	AffinityType	E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity	`path:"affinity-type" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity1	*string	`path:"affinity1" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity10	*string	`path:"affinity10" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity2	*string	`path:"affinity2" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity3	*string	`path:"affinity3" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity4	*string	`path:"affinity4" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity5	*string	`path:"affinity5" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity6	*string	`path:"affinity6" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity7	*string	`path:"affinity7" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity8	*string	`path:"affinity8" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity9	*string	`path:"affinity9" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 struct, which is a YANG list entry.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10) ΛListKeyMap() (map[string]interface{}, error) {

	if t.Affinity1 == nil {
		return nil, fmt.Errorf("nil value for key Affinity1")
	}

	if t.Affinity10 == nil {
		return nil, fmt.Errorf("nil value for key Affinity10")
	}

	if t.Affinity2 == nil {
		return nil, fmt.Errorf("nil value for key Affinity2")
	}

	if t.Affinity3 == nil {
		return nil, fmt.Errorf("nil value for key Affinity3")
	}

	if t.Affinity4 == nil {
		return nil, fmt.Errorf("nil value for key Affinity4")
	}

	if t.Affinity5 == nil {
		return nil, fmt.Errorf("nil value for key Affinity5")
	}

	if t.Affinity6 == nil {
		return nil, fmt.Errorf("nil value for key Affinity6")
	}

	if t.Affinity7 == nil {
		return nil, fmt.Errorf("nil value for key Affinity7")
	}

	if t.Affinity8 == nil {
		return nil, fmt.Errorf("nil value for key Affinity8")
	}

	if t.Affinity9 == nil {
		return nil, fmt.Errorf("nil value for key Affinity9")
	}

	return map[string]interface{}{
		"affinity-type": t.AffinityType,
		"affinity1": *t.Affinity1,
		"affinity10": *t.Affinity10,
		"affinity2": *t.Affinity2,
		"affinity3": *t.Affinity3,
		"affinity4": *t.Affinity4,
		"affinity5": *t.Affinity5,
		"affinity6": *t.Affinity6,
		"affinity7": *t.Affinity7,
		"affinity8": *t.Affinity8,
		"affinity9": *t.Affinity9,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_Priority represents the /Cisco-IOS-XR-ifmgr-cfg/interface-configurations/interface-configuration/mte-tunnel-attributes/priority YANG schema element.
type Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_Priority struct {
	HoldPriority	*uint32	`path:"hold-priority" module:"Cisco-IOS-XR-mpls-te-cfg"`
	SetupPriority	*uint32	`path:"setup-priority" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_Priority implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_Priority) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_Priority) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_Priority"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_Priority) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_Priority) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_Priority.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_Priority) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Mtus represents the /Cisco-IOS-XR-ifmgr-cfg/interface-configurations/interface-configuration/mtus YANG schema element.
type Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Mtus struct {
	Mtu	map[string]*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Mtus_Mtu	`path:"mtu" module:"Cisco-IOS-XR-ifmgr-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Mtus implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Mtus) IsYANGGoStruct() {}

// NewMtu creates a new entry in the Mtu list of the
// Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Mtus struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Mtus) NewMtu(Owner string) (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Mtus_Mtu, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Mtu == nil {
		t.Mtu = make(map[string]*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Mtus_Mtu)
	}

	key := Owner

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Mtu[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Mtu", key)
	}

	t.Mtu[key] = &Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Mtus_Mtu{
		Owner: &Owner,
	}

	return t.Mtu[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Mtus) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Mtus"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Mtus) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Mtus) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Mtus.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Mtus) ΛBelongingModule() string {
	return "Cisco-IOS-XR-ifmgr-cfg"
}


// Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Mtus_Mtu represents the /Cisco-IOS-XR-ifmgr-cfg/interface-configurations/interface-configuration/mtus/mtu YANG schema element.
type Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Mtus_Mtu struct {
	Mtu	*uint32	`path:"mtu" module:"Cisco-IOS-XR-ifmgr-cfg"`
	Owner	*string	`path:"owner" module:"Cisco-IOS-XR-ifmgr-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Mtus_Mtu implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Mtus_Mtu) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Mtus_Mtu struct, which is a YANG list entry.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Mtus_Mtu) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Owner == nil {
		return nil, fmt.Errorf("nil value for key Owner")
	}

	return map[string]interface{}{
		"owner": *t.Owner,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Mtus_Mtu) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Mtus_Mtu"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Mtus_Mtu) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Mtus_Mtu) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Mtus_Mtu.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Mtus_Mtu) ΛBelongingModule() string {
	return "Cisco-IOS-XR-ifmgr-cfg"
}


// Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel represents the /Cisco-IOS-XR-ifmgr-cfg/interface-configurations/interface-configuration/transport-profile-tunnel YANG schema element.
type Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel struct {
	Bfd	*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Bfd	`path:"bfd" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Destination	*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Destination	`path:"destination" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Fault	*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Fault	`path:"fault" module:"Cisco-IOS-XR-mpls-te-cfg"`
	ProtectLsp	*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_ProtectLsp	`path:"protect-lsp" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Source	*string	`path:"source" module:"Cisco-IOS-XR-mpls-te-cfg"`
	WorkingLsp	*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_WorkingLsp	`path:"working-lsp" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Bfd represents the /Cisco-IOS-XR-ifmgr-cfg/interface-configurations/interface-configuration/transport-profile-tunnel/bfd YANG schema element.
type Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Bfd struct {
	DetectionMultiplier	*uint32	`path:"detection-multiplier" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Enable	YANGEmpty	`path:"enable" module:"Cisco-IOS-XR-mpls-te-cfg"`
	MinInterval	*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Bfd_MinInterval	`path:"min-interval" module:"Cisco-IOS-XR-mpls-te-cfg"`
	MinIntervalStandby	*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Bfd_MinIntervalStandby	`path:"min-interval-standby" module:"Cisco-IOS-XR-mpls-te-cfg"`
	MultiplierStandby	*uint32	`path:"multiplier-standby" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Bfd implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Bfd) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Bfd) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Bfd"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Bfd) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Bfd) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Bfd.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Bfd) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Bfd_MinInterval represents the /Cisco-IOS-XR-ifmgr-cfg/interface-configurations/interface-configuration/transport-profile-tunnel/bfd/min-interval YANG schema element.
type Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Bfd_MinInterval struct {
	IntervalMs	*uint32	`path:"interval-ms" module:"Cisco-IOS-XR-mpls-te-cfg"`
	IntervalUs	*uint32	`path:"interval-us" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Bfd_MinInterval implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Bfd_MinInterval) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Bfd_MinInterval) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Bfd_MinInterval"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Bfd_MinInterval) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Bfd_MinInterval) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Bfd_MinInterval.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Bfd_MinInterval) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Bfd_MinIntervalStandby represents the /Cisco-IOS-XR-ifmgr-cfg/interface-configurations/interface-configuration/transport-profile-tunnel/bfd/min-interval-standby YANG schema element.
type Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Bfd_MinIntervalStandby struct {
	IntervalStandbyMs	*uint32	`path:"interval-standby-ms" module:"Cisco-IOS-XR-mpls-te-cfg"`
	IntervalStandbyUs	*uint32	`path:"interval-standby-us" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Bfd_MinIntervalStandby implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Bfd_MinIntervalStandby) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Bfd_MinIntervalStandby) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Bfd_MinIntervalStandby"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Bfd_MinIntervalStandby) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Bfd_MinIntervalStandby) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Bfd_MinIntervalStandby.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Bfd_MinIntervalStandby) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Destination represents the /Cisco-IOS-XR-ifmgr-cfg/interface-configurations/interface-configuration/transport-profile-tunnel/destination YANG schema element.
type Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Destination struct {
	GlobalId	*uint32	`path:"global-id" module:"Cisco-IOS-XR-mpls-te-cfg"`
	NodeId	*string	`path:"node-id" module:"Cisco-IOS-XR-mpls-te-cfg"`
	TunnelId	*uint32	`path:"tunnel-id" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Destination implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Destination) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Destination) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Destination"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Destination) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Destination) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Destination.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Destination) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Fault represents the /Cisco-IOS-XR-ifmgr-cfg/interface-configurations/interface-configuration/transport-profile-tunnel/fault YANG schema element.
type Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Fault struct {
	Enable	YANGEmpty	`path:"enable" module:"Cisco-IOS-XR-mpls-te-cfg"`
	ProtectionTrigger	*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Fault_ProtectionTrigger	`path:"protection-trigger" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Fault implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Fault) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Fault) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Fault"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Fault) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Fault) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Fault.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Fault) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Fault_ProtectionTrigger represents the /Cisco-IOS-XR-ifmgr-cfg/interface-configurations/interface-configuration/transport-profile-tunnel/fault/protection-trigger YANG schema element.
type Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Fault_ProtectionTrigger struct {
	Ais	*bool	`path:"ais" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Ldi	*bool	`path:"ldi" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Lkr	*bool	`path:"lkr" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Fault_ProtectionTrigger implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Fault_ProtectionTrigger) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Fault_ProtectionTrigger) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Fault_ProtectionTrigger"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Fault_ProtectionTrigger) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Fault_ProtectionTrigger) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Fault_ProtectionTrigger.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Fault_ProtectionTrigger) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_ProtectLsp represents the /Cisco-IOS-XR-ifmgr-cfg/interface-configurations/interface-configuration/transport-profile-tunnel/protect-lsp YANG schema element.
type Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_ProtectLsp struct {
	InLabel	*uint32	`path:"in-label" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Lockout	YANGEmpty	`path:"lockout" module:"Cisco-IOS-XR-mpls-te-cfg"`
	LspId	*uint32	`path:"lsp-id" module:"Cisco-IOS-XR-mpls-te-cfg"`
	OutLabel	*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_ProtectLsp_OutLabel	`path:"out-label" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_ProtectLsp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_ProtectLsp) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_ProtectLsp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_ProtectLsp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_ProtectLsp) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_ProtectLsp) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_ProtectLsp.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_ProtectLsp) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_ProtectLsp_OutLabel represents the /Cisco-IOS-XR-ifmgr-cfg/interface-configurations/interface-configuration/transport-profile-tunnel/protect-lsp/out-label YANG schema element.
type Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_ProtectLsp_OutLabel struct {
	Label	*uint32	`path:"label" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Link	*uint32	`path:"link" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_ProtectLsp_OutLabel implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_ProtectLsp_OutLabel) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_ProtectLsp_OutLabel) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_ProtectLsp_OutLabel"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_ProtectLsp_OutLabel) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_ProtectLsp_OutLabel) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_ProtectLsp_OutLabel.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_ProtectLsp_OutLabel) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_WorkingLsp represents the /Cisco-IOS-XR-ifmgr-cfg/interface-configurations/interface-configuration/transport-profile-tunnel/working-lsp YANG schema element.
type Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_WorkingLsp struct {
	InLabel	*uint32	`path:"in-label" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Lockout	YANGEmpty	`path:"lockout" module:"Cisco-IOS-XR-mpls-te-cfg"`
	LspId	*uint32	`path:"lsp-id" module:"Cisco-IOS-XR-mpls-te-cfg"`
	OutLabel	*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_WorkingLsp_OutLabel	`path:"out-label" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_WorkingLsp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_WorkingLsp) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_WorkingLsp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_WorkingLsp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_WorkingLsp) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_WorkingLsp) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_WorkingLsp.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_WorkingLsp) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_WorkingLsp_OutLabel represents the /Cisco-IOS-XR-ifmgr-cfg/interface-configurations/interface-configuration/transport-profile-tunnel/working-lsp/out-label YANG schema element.
type Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_WorkingLsp_OutLabel struct {
	Label	*uint32	`path:"label" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Link	*uint32	`path:"link" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_WorkingLsp_OutLabel implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_WorkingLsp_OutLabel) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_WorkingLsp_OutLabel) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_WorkingLsp_OutLabel"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_WorkingLsp_OutLabel) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_WorkingLsp_OutLabel) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_WorkingLsp_OutLabel.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_WorkingLsp_OutLabel) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes represents the /Cisco-IOS-XR-ifmgr-cfg/interface-configurations/interface-configuration/tunnel-te-attributes YANG schema element.
type Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes struct {
	AdminMode	*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AdminMode	`path:"admin-mode" module:"Cisco-IOS-XR-mpls-te-cfg"`
	AffinityMask	*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AffinityMask	`path:"affinity-mask" module:"Cisco-IOS-XR-mpls-te-cfg"`
	AutoBandwidth	*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth	`path:"auto-bandwidth" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Autoroute	*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute	`path:"autoroute" module:"Cisco-IOS-XR-mpls-te-cfg"`
	BackupBandwidth	*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_BackupBandwidth	`path:"backup-bandwidth" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Bandwidth	*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bandwidth	`path:"bandwidth" module:"Cisco-IOS-XR-mpls-te-cfg"`
	BfdOverLsp	*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_BfdOverLsp	`path:"bfd-over-lsp" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Bidirectional	*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bidirectional	`path:"bidirectional" module:"Cisco-IOS-XR-mpls-te-cfg"`
	BindingSegmentIdMpls	*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_BindingSegmentIdMpls	`path:"binding-segment-id-mpls" module:"Cisco-IOS-XR-mpls-te-cfg"`
	DelayMeasurement	YANGEmpty	`path:"delay-measurement" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Destination	*string	`path:"destination" module:"Cisco-IOS-XR-mpls-te-cfg"`
	FastReroute	*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_FastReroute	`path:"fast-reroute" module:"Cisco-IOS-XR-mpls-te-cfg"`
	ForwardClass	*uint32	`path:"forward-class" module:"Cisco-IOS-XR-mpls-te-cfg"`
	ForwardingAdjacency	*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_ForwardingAdjacency	`path:"forwarding-adjacency" module:"Cisco-IOS-XR-mpls-te-cfg"`
	LoadShare	*uint32	`path:"load-share" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Logging	*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Logging	`path:"logging" module:"Cisco-IOS-XR-mpls-te-cfg"`
	NewStyleAffinityAffinityTypes	*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes	`path:"new-style-affinity-affinity-types" module:"Cisco-IOS-XR-mpls-te-cfg"`
	PathOptionProtects	*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PathOptionProtects	`path:"path-option-protects" module:"Cisco-IOS-XR-mpls-te-cfg"`
	PathSelectionMetric	E_Cisco_IOS_XRMplsTeCfg_MplsTePathSelectionMetric	`path:"path-selection-metric" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Pce	*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Pce	`path:"pce" module:"Cisco-IOS-XR-mpls-te-cfg"`
	PolicyClasses	*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PolicyClasses	`path:"policy-classes" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Priority	*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Priority	`path:"priority" module:"Cisco-IOS-XR-mpls-te-cfg"`
	RecordRoute	YANGEmpty	`path:"record-route" module:"Cisco-IOS-XR-mpls-te-cfg"`
	SignalledName	*string	`path:"signalled-name" module:"Cisco-IOS-XR-mpls-te-cfg"`
	SoftPreemption	YANGEmpty	`path:"soft-preemption" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Switching	*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Switching	`path:"switching" module:"Cisco-IOS-XR-mpls-te-cfg"`
	TunnelPathProtection	*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_TunnelPathProtection	`path:"tunnel-path-protection" module:"Cisco-IOS-XR-mpls-te-cfg"`
	TunnelPathSelection	*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_TunnelPathSelection	`path:"tunnel-path-selection" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AdminMode represents the /Cisco-IOS-XR-ifmgr-cfg/interface-configurations/interface-configuration/tunnel-te-attributes/admin-mode YANG schema element.
type Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AdminMode struct {
	DeactivateTunnel	YANGEmpty	`path:"deactivate-tunnel" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AdminMode implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AdminMode) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AdminMode) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AdminMode"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AdminMode) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AdminMode) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AdminMode.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AdminMode) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AffinityMask represents the /Cisco-IOS-XR-ifmgr-cfg/interface-configurations/interface-configuration/tunnel-te-attributes/affinity-mask YANG schema element.
type Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AffinityMask struct {
	Affinity	*string	`path:"affinity" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Mask	*string	`path:"mask" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AffinityMask implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AffinityMask) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AffinityMask) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AffinityMask"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AffinityMask) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AffinityMask) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AffinityMask.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AffinityMask) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth represents the /Cisco-IOS-XR-ifmgr-cfg/interface-configurations/interface-configuration/tunnel-te-attributes/auto-bandwidth YANG schema element.
type Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth struct {
	AdjustmentThreshold	*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth_AdjustmentThreshold	`path:"adjustment-threshold" module:"Cisco-IOS-XR-mpls-te-cfg"`
	ApplicationFrequency	*uint32	`path:"application-frequency" module:"Cisco-IOS-XR-mpls-te-cfg"`
	AutoCapacity	*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth_AutoCapacity	`path:"auto-capacity" module:"Cisco-IOS-XR-mpls-te-cfg"`
	BandwidthLimits	*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth_BandwidthLimits	`path:"bandwidth-limits" module:"Cisco-IOS-XR-mpls-te-cfg"`
	CollectionOnly	YANGEmpty	`path:"collection-only" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Enabled	*bool	`path:"enabled" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Overflow	*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth_Overflow	`path:"overflow" module:"Cisco-IOS-XR-mpls-te-cfg"`
	OverflowEnable	*bool	`path:"overflow-enable" module:"Cisco-IOS-XR-mpls-te-cfg"`
	ResignalLastBandwidthTimeOut	*uint32	`path:"resignal-last-bandwidth-time-out" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Underflow	*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth_Underflow	`path:"underflow" module:"Cisco-IOS-XR-mpls-te-cfg"`
	UnderflowEnable	*bool	`path:"underflow-enable" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth_AdjustmentThreshold represents the /Cisco-IOS-XR-ifmgr-cfg/interface-configurations/interface-configuration/tunnel-te-attributes/auto-bandwidth/adjustment-threshold YANG schema element.
type Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth_AdjustmentThreshold struct {
	AdjustmentThresholdPercent	*uint32	`path:"adjustment-threshold-percent" module:"Cisco-IOS-XR-mpls-te-cfg"`
	AdjustmentThresholdValue	*uint32	`path:"adjustment-threshold-value" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth_AdjustmentThreshold implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth_AdjustmentThreshold) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth_AdjustmentThreshold) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth_AdjustmentThreshold"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth_AdjustmentThreshold) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth_AdjustmentThreshold) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth_AdjustmentThreshold.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth_AdjustmentThreshold) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth_AutoCapacity represents the /Cisco-IOS-XR-ifmgr-cfg/interface-configurations/interface-configuration/tunnel-te-attributes/auto-bandwidth/auto-capacity YANG schema element.
type Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth_AutoCapacity struct {
	ClonesMaximum	*uint32	`path:"clones-maximum" module:"Cisco-IOS-XR-mpls-te-cfg"`
	ClonesMinimum	*uint32	`path:"clones-minimum" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Enable	*bool	`path:"enable" module:"Cisco-IOS-XR-mpls-te-cfg"`
	MergeBandwidth	*uint32	`path:"merge-bandwidth" module:"Cisco-IOS-XR-mpls-te-cfg"`
	NominalBandwidth	*uint32	`path:"nominal-bandwidth" module:"Cisco-IOS-XR-mpls-te-cfg"`
	SplitBandwidth	*uint32	`path:"split-bandwidth" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth_AutoCapacity implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth_AutoCapacity) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth_AutoCapacity) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth_AutoCapacity"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth_AutoCapacity) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth_AutoCapacity) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth_AutoCapacity.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth_AutoCapacity) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth_BandwidthLimits represents the /Cisco-IOS-XR-ifmgr-cfg/interface-configurations/interface-configuration/tunnel-te-attributes/auto-bandwidth/bandwidth-limits YANG schema element.
type Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth_BandwidthLimits struct {
	BandwidthMaxLimit	*uint32	`path:"bandwidth-max-limit" module:"Cisco-IOS-XR-mpls-te-cfg"`
	BandwidthMinLimit	*uint32	`path:"bandwidth-min-limit" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth_BandwidthLimits implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth_BandwidthLimits) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth_BandwidthLimits) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth_BandwidthLimits"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth_BandwidthLimits) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth_BandwidthLimits) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth_BandwidthLimits.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth_BandwidthLimits) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth_Overflow represents the /Cisco-IOS-XR-ifmgr-cfg/interface-configurations/interface-configuration/tunnel-te-attributes/auto-bandwidth/overflow YANG schema element.
type Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth_Overflow struct {
	OverflowThresholdLimit	*uint32	`path:"overflow-threshold-limit" module:"Cisco-IOS-XR-mpls-te-cfg"`
	OverflowThresholdPercent	*uint32	`path:"overflow-threshold-percent" module:"Cisco-IOS-XR-mpls-te-cfg"`
	OverflowThresholdValue	*uint32	`path:"overflow-threshold-value" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth_Overflow implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth_Overflow) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth_Overflow) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth_Overflow"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth_Overflow) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth_Overflow) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth_Overflow.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth_Overflow) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth_Underflow represents the /Cisco-IOS-XR-ifmgr-cfg/interface-configurations/interface-configuration/tunnel-te-attributes/auto-bandwidth/underflow YANG schema element.
type Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth_Underflow struct {
	UnderflowThresholdLimit	*uint32	`path:"underflow-threshold-limit" module:"Cisco-IOS-XR-mpls-te-cfg"`
	UnderflowThresholdPercent	*uint32	`path:"underflow-threshold-percent" module:"Cisco-IOS-XR-mpls-te-cfg"`
	UnderflowThresholdValue	*uint32	`path:"underflow-threshold-value" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth_Underflow implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth_Underflow) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth_Underflow) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth_Underflow"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth_Underflow) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth_Underflow) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth_Underflow.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth_Underflow) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute represents the /Cisco-IOS-XR-ifmgr-cfg/interface-configurations/interface-configuration/tunnel-te-attributes/autoroute YANG schema element.
type Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute struct {
	AutorouteAnnounce	*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_AutorouteAnnounce	`path:"autoroute-announce" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Destinations	*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_Destinations	`path:"destinations" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_AutorouteAnnounce represents the /Cisco-IOS-XR-ifmgr-cfg/interface-configurations/interface-configuration/tunnel-te-attributes/autoroute/autoroute-announce YANG schema element.
type Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_AutorouteAnnounce struct {
	Enable	YANGEmpty	`path:"enable" module:"Cisco-IOS-XR-mpls-te-cfg"`
	ExcludeTraffic	*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_AutorouteAnnounce_ExcludeTraffic	`path:"exclude-traffic" module:"Cisco-IOS-XR-mpls-te-cfg"`
	IncludeIpv6	YANGEmpty	`path:"include-ipv6" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Metric	*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_AutorouteAnnounce_Metric	`path:"metric" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_AutorouteAnnounce implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_AutorouteAnnounce) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_AutorouteAnnounce) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_AutorouteAnnounce"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_AutorouteAnnounce) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_AutorouteAnnounce) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_AutorouteAnnounce.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_AutorouteAnnounce) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_AutorouteAnnounce_ExcludeTraffic represents the /Cisco-IOS-XR-ifmgr-cfg/interface-configurations/interface-configuration/tunnel-te-attributes/autoroute/autoroute-announce/exclude-traffic YANG schema element.
type Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_AutorouteAnnounce_ExcludeTraffic struct {
	SegmentRouting	YANGEmpty	`path:"segment-routing" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_AutorouteAnnounce_ExcludeTraffic implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_AutorouteAnnounce_ExcludeTraffic) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_AutorouteAnnounce_ExcludeTraffic) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_AutorouteAnnounce_ExcludeTraffic"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_AutorouteAnnounce_ExcludeTraffic) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_AutorouteAnnounce_ExcludeTraffic) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_AutorouteAnnounce_ExcludeTraffic.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_AutorouteAnnounce_ExcludeTraffic) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_AutorouteAnnounce_Metric represents the /Cisco-IOS-XR-ifmgr-cfg/interface-configurations/interface-configuration/tunnel-te-attributes/autoroute/autoroute-announce/metric YANG schema element.
type Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_AutorouteAnnounce_Metric struct {
	AbsoluteMetric	*uint32	`path:"absolute-metric" module:"Cisco-IOS-XR-mpls-te-cfg"`
	ConstantMetric	*uint32	`path:"constant-metric" module:"Cisco-IOS-XR-mpls-te-cfg"`
	MetricType	E_Cisco_IOS_XRMplsTeCfg_MplsTeAutorouteMetric	`path:"metric-type" module:"Cisco-IOS-XR-mpls-te-cfg"`
	RelativeMetric	*int32	`path:"relative-metric" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_AutorouteAnnounce_Metric implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_AutorouteAnnounce_Metric) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_AutorouteAnnounce_Metric) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_AutorouteAnnounce_Metric"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_AutorouteAnnounce_Metric) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_AutorouteAnnounce_Metric) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_AutorouteAnnounce_Metric.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_AutorouteAnnounce_Metric) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_Destinations represents the /Cisco-IOS-XR-ifmgr-cfg/interface-configurations/interface-configuration/tunnel-te-attributes/autoroute/destinations YANG schema element.
type Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_Destinations struct {
	Destination	map[string]*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_Destinations_Destination	`path:"destination" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_Destinations implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_Destinations) IsYANGGoStruct() {}

// NewDestination creates a new entry in the Destination list of the
// Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_Destinations struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_Destinations) NewDestination(DestinationAddress string) (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_Destinations_Destination, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Destination == nil {
		t.Destination = make(map[string]*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_Destinations_Destination)
	}

	key := DestinationAddress

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Destination[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Destination", key)
	}

	t.Destination[key] = &Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_Destinations_Destination{
		DestinationAddress: &DestinationAddress,
	}

	return t.Destination[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_Destinations) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_Destinations"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_Destinations) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_Destinations) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_Destinations.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_Destinations) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_Destinations_Destination represents the /Cisco-IOS-XR-ifmgr-cfg/interface-configurations/interface-configuration/tunnel-te-attributes/autoroute/destinations/destination YANG schema element.
type Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_Destinations_Destination struct {
	DestinationAddress	*string	`path:"destination-address" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_Destinations_Destination implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_Destinations_Destination) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_Destinations_Destination struct, which is a YANG list entry.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_Destinations_Destination) ΛListKeyMap() (map[string]interface{}, error) {
	if t.DestinationAddress == nil {
		return nil, fmt.Errorf("nil value for key DestinationAddress")
	}

	return map[string]interface{}{
		"destination-address": *t.DestinationAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_Destinations_Destination) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_Destinations_Destination"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_Destinations_Destination) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_Destinations_Destination) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_Destinations_Destination.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_Destinations_Destination) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_BackupBandwidth represents the /Cisco-IOS-XR-ifmgr-cfg/interface-configurations/interface-configuration/tunnel-te-attributes/backup-bandwidth YANG schema element.
type Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_BackupBandwidth struct {
	BackupBandwidth	*uint32	`path:"backup-bandwidth" module:"Cisco-IOS-XR-mpls-te-cfg"`
	ClassType	E_Cisco_IOS_XRMplsTeCfg_MplsTeBackupBandwidthClass	`path:"class-type" module:"Cisco-IOS-XR-mpls-te-cfg"`
	DsteType	E_Cisco_IOS_XRMplsTeCfg_MplsTeBandwidthDste	`path:"dste-type" module:"Cisco-IOS-XR-mpls-te-cfg"`
	LimitType	E_Cisco_IOS_XRMplsTeCfg_MplsTeBandwidthLimit	`path:"limit-type" module:"Cisco-IOS-XR-mpls-te-cfg"`
	PoolType	E_Cisco_IOS_XRMplsTeCfg_MplsTeBackupBandwidthPool	`path:"pool-type" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_BackupBandwidth implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_BackupBandwidth) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_BackupBandwidth) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_BackupBandwidth"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_BackupBandwidth) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_BackupBandwidth) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_BackupBandwidth.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_BackupBandwidth) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bandwidth represents the /Cisco-IOS-XR-ifmgr-cfg/interface-configurations/interface-configuration/tunnel-te-attributes/bandwidth YANG schema element.
type Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bandwidth struct {
	Bandwidth	*uint32	`path:"bandwidth" module:"Cisco-IOS-XR-mpls-te-cfg"`
	ClassOrPoolType	*uint32	`path:"class-or-pool-type" module:"Cisco-IOS-XR-mpls-te-cfg"`
	DsteType	E_Cisco_IOS_XRMplsTeCfg_MplsTeBandwidthDste	`path:"dste-type" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bandwidth implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bandwidth) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bandwidth) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bandwidth"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bandwidth) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bandwidth) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bandwidth.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bandwidth) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_BfdOverLsp represents the /Cisco-IOS-XR-ifmgr-cfg/interface-configurations/interface-configuration/tunnel-te-attributes/bfd-over-lsp YANG schema element.
type Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_BfdOverLsp struct {
	BringupTimeout	*uint32	`path:"bringup-timeout" module:"Cisco-IOS-XR-mpls-te-cfg"`
	DampeningInitialWait	*uint32	`path:"dampening-initial-wait" module:"Cisco-IOS-XR-mpls-te-cfg"`
	DampeningMaximumWait	*uint32	`path:"dampening-maximum-wait" module:"Cisco-IOS-XR-mpls-te-cfg"`
	DampeningSecondaryWait	*uint32	`path:"dampening-secondary-wait" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Enable	YANGEmpty	`path:"enable" module:"Cisco-IOS-XR-mpls-te-cfg"`
	EncapMode	*uint32	`path:"encap-mode" module:"Cisco-IOS-XR-mpls-te-cfg"`
	FastDetect	E_Cisco_IOS_XRMplsTeCfg_MplsTebfdSession	`path:"fast-detect" module:"Cisco-IOS-XR-mpls-te-cfg"`
	MinimumInterval	*uint32	`path:"minimum-interval" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Multiplier	*uint32	`path:"multiplier" module:"Cisco-IOS-XR-mpls-te-cfg"`
	PeriodicPingDisable	YANGEmpty	`path:"periodic-ping-disable" module:"Cisco-IOS-XR-mpls-te-cfg"`
	PeriodicPingInterval	*uint32	`path:"periodic-ping-interval" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_BfdOverLsp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_BfdOverLsp) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_BfdOverLsp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_BfdOverLsp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_BfdOverLsp) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_BfdOverLsp) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_BfdOverLsp.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_BfdOverLsp) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bidirectional represents the /Cisco-IOS-XR-ifmgr-cfg/interface-configurations/interface-configuration/tunnel-te-attributes/bidirectional YANG schema element.
type Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bidirectional struct {
	AssociationCoroutedType	*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bidirectional_AssociationCoroutedType	`path:"association-corouted-type" module:"Cisco-IOS-XR-mpls-te-cfg"`
	AssociationParameters	*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bidirectional_AssociationParameters	`path:"association-parameters" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Enabled	YANGEmpty	`path:"enabled" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bidirectional implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bidirectional) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bidirectional) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bidirectional"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bidirectional) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bidirectional) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bidirectional.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bidirectional) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bidirectional_AssociationCoroutedType represents the /Cisco-IOS-XR-ifmgr-cfg/interface-configurations/interface-configuration/tunnel-te-attributes/bidirectional/association-corouted-type YANG schema element.
type Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bidirectional_AssociationCoroutedType struct {
	DisableProtectionObject	YANGEmpty	`path:"disable-protection-object" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Enable	YANGEmpty	`path:"enable" module:"Cisco-IOS-XR-mpls-te-cfg"`
	FaultOam	*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bidirectional_AssociationCoroutedType_FaultOam	`path:"fault-oam" module:"Cisco-IOS-XR-mpls-te-cfg"`
	WrapProtectionEnable	YANGEmpty	`path:"wrap-protection-enable" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bidirectional_AssociationCoroutedType implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bidirectional_AssociationCoroutedType) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bidirectional_AssociationCoroutedType) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bidirectional_AssociationCoroutedType"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bidirectional_AssociationCoroutedType) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bidirectional_AssociationCoroutedType) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bidirectional_AssociationCoroutedType.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bidirectional_AssociationCoroutedType) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bidirectional_AssociationCoroutedType_FaultOam represents the /Cisco-IOS-XR-ifmgr-cfg/interface-configurations/interface-configuration/tunnel-te-attributes/bidirectional/association-corouted-type/fault-oam YANG schema element.
type Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bidirectional_AssociationCoroutedType_FaultOam struct {
	Enable	YANGEmpty	`path:"enable" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bidirectional_AssociationCoroutedType_FaultOam implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bidirectional_AssociationCoroutedType_FaultOam) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bidirectional_AssociationCoroutedType_FaultOam) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bidirectional_AssociationCoroutedType_FaultOam"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bidirectional_AssociationCoroutedType_FaultOam) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bidirectional_AssociationCoroutedType_FaultOam) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bidirectional_AssociationCoroutedType_FaultOam.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bidirectional_AssociationCoroutedType_FaultOam) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bidirectional_AssociationParameters represents the /Cisco-IOS-XR-ifmgr-cfg/interface-configurations/interface-configuration/tunnel-te-attributes/bidirectional/association-parameters YANG schema element.
type Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bidirectional_AssociationParameters struct {
	AssociationGlobalId	*uint32	`path:"association-global-id" module:"Cisco-IOS-XR-mpls-te-cfg"`
	AssociationId	*uint32	`path:"association-id" module:"Cisco-IOS-XR-mpls-te-cfg"`
	AssociationIsGlobalIdConfigured	*bool	`path:"association-is-global-id-configured" module:"Cisco-IOS-XR-mpls-te-cfg"`
	AssociationSourceAddress	*string	`path:"association-source-address" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bidirectional_AssociationParameters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bidirectional_AssociationParameters) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bidirectional_AssociationParameters) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bidirectional_AssociationParameters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bidirectional_AssociationParameters) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bidirectional_AssociationParameters) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bidirectional_AssociationParameters.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bidirectional_AssociationParameters) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_BindingSegmentIdMpls represents the /Cisco-IOS-XR-ifmgr-cfg/interface-configurations/interface-configuration/tunnel-te-attributes/binding-segment-id-mpls YANG schema element.
type Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_BindingSegmentIdMpls struct {
	LabelValue	*uint32	`path:"label-value" module:"Cisco-IOS-XR-mpls-te-cfg"`
	SegmentIdType	E_Cisco_IOS_XRMplsTeCfg_BindingSegmentId	`path:"segment-id-type" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_BindingSegmentIdMpls implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_BindingSegmentIdMpls) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_BindingSegmentIdMpls) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_BindingSegmentIdMpls"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_BindingSegmentIdMpls) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_BindingSegmentIdMpls) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_BindingSegmentIdMpls.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_BindingSegmentIdMpls) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_FastReroute represents the /Cisco-IOS-XR-ifmgr-cfg/interface-configurations/interface-configuration/tunnel-te-attributes/fast-reroute YANG schema element.
type Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_FastReroute struct {
	BandwidthProtection	*uint32	`path:"bandwidth-protection" module:"Cisco-IOS-XR-mpls-te-cfg"`
	NodeProtection	*uint32	`path:"node-protection" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_FastReroute implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_FastReroute) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_FastReroute) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_FastReroute"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_FastReroute) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_FastReroute) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_FastReroute.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_FastReroute) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_ForwardingAdjacency represents the /Cisco-IOS-XR-ifmgr-cfg/interface-configurations/interface-configuration/tunnel-te-attributes/forwarding-adjacency YANG schema element.
type Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_ForwardingAdjacency struct {
	Enable	YANGEmpty	`path:"enable" module:"Cisco-IOS-XR-mpls-te-cfg"`
	HoldTime	*uint32	`path:"hold-time" module:"Cisco-IOS-XR-mpls-te-cfg"`
	IncludeIpv6	YANGEmpty	`path:"include-ipv6" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_ForwardingAdjacency implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_ForwardingAdjacency) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_ForwardingAdjacency) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_ForwardingAdjacency"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_ForwardingAdjacency) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_ForwardingAdjacency) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_ForwardingAdjacency.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_ForwardingAdjacency) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Logging represents the /Cisco-IOS-XR-ifmgr-cfg/interface-configurations/interface-configuration/tunnel-te-attributes/logging YANG schema element.
type Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Logging struct {
	All	YANGEmpty	`path:"all" module:"Cisco-IOS-XR-mpls-te-cfg"`
	BandwidthChangeMessage	YANGEmpty	`path:"bandwidth-change-message" module:"Cisco-IOS-XR-mpls-te-cfg"`
	BfdStateMessage	YANGEmpty	`path:"bfd-state-message" module:"Cisco-IOS-XR-mpls-te-cfg"`
	InsufficientBwMessage	YANGEmpty	`path:"insufficient-bw-message" module:"Cisco-IOS-XR-mpls-te-cfg"`
	LspSwitchOverChangeMessage	YANGEmpty	`path:"lsp-switch-over-change-message" module:"Cisco-IOS-XR-mpls-te-cfg"`
	PathErrorMessage	YANGEmpty	`path:"path-error-message" module:"Cisco-IOS-XR-mpls-te-cfg"`
	PcalcFailureMessage	YANGEmpty	`path:"pcalc-failure-message" module:"Cisco-IOS-XR-mpls-te-cfg"`
	RecordRouteMesssage	YANGEmpty	`path:"record-route-messsage" module:"Cisco-IOS-XR-mpls-te-cfg"`
	ReoptimizeAttemptsMessage	YANGEmpty	`path:"reoptimize-attempts-message" module:"Cisco-IOS-XR-mpls-te-cfg"`
	ReoptimizedMessage	YANGEmpty	`path:"reoptimized-message" module:"Cisco-IOS-XR-mpls-te-cfg"`
	RerouteMesssage	YANGEmpty	`path:"reroute-messsage" module:"Cisco-IOS-XR-mpls-te-cfg"`
	StateMessage	YANGEmpty	`path:"state-message" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Logging implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Logging) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Logging) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Logging"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Logging) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Logging) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Logging.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Logging) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes represents the /Cisco-IOS-XR-ifmgr-cfg/interface-configurations/interface-configuration/tunnel-te-attributes/new-style-affinity-affinity-types YANG schema element.
type Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes struct {
	NewStyleAffinityAffinityType	map[E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity]*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType	`path:"new-style-affinity-affinity-type" module:"Cisco-IOS-XR-mpls-te-cfg"`
	NewStyleAffinityAffinityTypeAffinity1	map[Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1_Key]*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1	`path:"new-style-affinity-affinity-type-affinity1" module:"Cisco-IOS-XR-mpls-te-cfg"`
	NewStyleAffinityAffinityTypeAffinity1Affinity2	map[Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2_Key]*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2	`path:"new-style-affinity-affinity-type-affinity1-affinity2" module:"Cisco-IOS-XR-mpls-te-cfg"`
	NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3	map[Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3_Key]*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3	`path:"new-style-affinity-affinity-type-affinity1-affinity2-affinity3" module:"Cisco-IOS-XR-mpls-te-cfg"`
	NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4	map[Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4_Key]*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4	`path:"new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4" module:"Cisco-IOS-XR-mpls-te-cfg"`
	NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5	map[Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5_Key]*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5	`path:"new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5" module:"Cisco-IOS-XR-mpls-te-cfg"`
	NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6	map[Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6_Key]*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6	`path:"new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6" module:"Cisco-IOS-XR-mpls-te-cfg"`
	NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7	map[Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7_Key]*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7	`path:"new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7" module:"Cisco-IOS-XR-mpls-te-cfg"`
	NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8	map[Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8_Key]*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8	`path:"new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8" module:"Cisco-IOS-XR-mpls-te-cfg"`
	NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9	map[Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9_Key]*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9	`path:"new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8-affinity9" module:"Cisco-IOS-XR-mpls-te-cfg"`
	NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10	map[Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10_Key]*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10	`path:"new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8-affinity9-affinity10" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes) IsYANGGoStruct() {}

// Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1_Key represents the key for list NewStyleAffinityAffinityTypeAffinity1 of element /Cisco-IOS-XR-ifmgr-cfg/interface-configurations/interface-configuration/tunnel-te-attributes/new-style-affinity-affinity-types.
type Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1_Key struct {
	AffinityType	E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity	`path:"affinity-type"`
	Affinity1	string	`path:"affinity1"`
}

// IsYANGGoKeyStruct ensures that Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1_Key) IsYANGGoKeyStruct() {}

// ΛListKeyMap returns the values of the Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1_Key key struct.
func (t Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"affinity-type": t.AffinityType,
		"affinity1": t.Affinity1,
	}, nil
}

// Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2_Key represents the key for list NewStyleAffinityAffinityTypeAffinity1Affinity2 of element /Cisco-IOS-XR-ifmgr-cfg/interface-configurations/interface-configuration/tunnel-te-attributes/new-style-affinity-affinity-types.
type Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2_Key struct {
	AffinityType	E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity	`path:"affinity-type"`
	Affinity1	string	`path:"affinity1"`
	Affinity2	string	`path:"affinity2"`
}

// IsYANGGoKeyStruct ensures that Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2_Key) IsYANGGoKeyStruct() {}

// ΛListKeyMap returns the values of the Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2_Key key struct.
func (t Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"affinity-type": t.AffinityType,
		"affinity1": t.Affinity1,
		"affinity2": t.Affinity2,
	}, nil
}

// Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3_Key represents the key for list NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 of element /Cisco-IOS-XR-ifmgr-cfg/interface-configurations/interface-configuration/tunnel-te-attributes/new-style-affinity-affinity-types.
type Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3_Key struct {
	AffinityType	E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity	`path:"affinity-type"`
	Affinity1	string	`path:"affinity1"`
	Affinity2	string	`path:"affinity2"`
	Affinity3	string	`path:"affinity3"`
}

// IsYANGGoKeyStruct ensures that Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3_Key) IsYANGGoKeyStruct() {}

// ΛListKeyMap returns the values of the Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3_Key key struct.
func (t Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"affinity-type": t.AffinityType,
		"affinity1": t.Affinity1,
		"affinity2": t.Affinity2,
		"affinity3": t.Affinity3,
	}, nil
}

// Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4_Key represents the key for list NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 of element /Cisco-IOS-XR-ifmgr-cfg/interface-configurations/interface-configuration/tunnel-te-attributes/new-style-affinity-affinity-types.
type Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4_Key struct {
	AffinityType	E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity	`path:"affinity-type"`
	Affinity1	string	`path:"affinity1"`
	Affinity2	string	`path:"affinity2"`
	Affinity3	string	`path:"affinity3"`
	Affinity4	string	`path:"affinity4"`
}

// IsYANGGoKeyStruct ensures that Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4_Key) IsYANGGoKeyStruct() {}

// ΛListKeyMap returns the values of the Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4_Key key struct.
func (t Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"affinity-type": t.AffinityType,
		"affinity1": t.Affinity1,
		"affinity2": t.Affinity2,
		"affinity3": t.Affinity3,
		"affinity4": t.Affinity4,
	}, nil
}

// Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5_Key represents the key for list NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 of element /Cisco-IOS-XR-ifmgr-cfg/interface-configurations/interface-configuration/tunnel-te-attributes/new-style-affinity-affinity-types.
type Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5_Key struct {
	AffinityType	E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity	`path:"affinity-type"`
	Affinity1	string	`path:"affinity1"`
	Affinity2	string	`path:"affinity2"`
	Affinity3	string	`path:"affinity3"`
	Affinity4	string	`path:"affinity4"`
	Affinity5	string	`path:"affinity5"`
}

// IsYANGGoKeyStruct ensures that Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5_Key) IsYANGGoKeyStruct() {}

// ΛListKeyMap returns the values of the Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5_Key key struct.
func (t Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"affinity-type": t.AffinityType,
		"affinity1": t.Affinity1,
		"affinity2": t.Affinity2,
		"affinity3": t.Affinity3,
		"affinity4": t.Affinity4,
		"affinity5": t.Affinity5,
	}, nil
}

// Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6_Key represents the key for list NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 of element /Cisco-IOS-XR-ifmgr-cfg/interface-configurations/interface-configuration/tunnel-te-attributes/new-style-affinity-affinity-types.
type Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6_Key struct {
	AffinityType	E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity	`path:"affinity-type"`
	Affinity1	string	`path:"affinity1"`
	Affinity2	string	`path:"affinity2"`
	Affinity3	string	`path:"affinity3"`
	Affinity4	string	`path:"affinity4"`
	Affinity5	string	`path:"affinity5"`
	Affinity6	string	`path:"affinity6"`
}

// IsYANGGoKeyStruct ensures that Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6_Key) IsYANGGoKeyStruct() {}

// ΛListKeyMap returns the values of the Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6_Key key struct.
func (t Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"affinity-type": t.AffinityType,
		"affinity1": t.Affinity1,
		"affinity2": t.Affinity2,
		"affinity3": t.Affinity3,
		"affinity4": t.Affinity4,
		"affinity5": t.Affinity5,
		"affinity6": t.Affinity6,
	}, nil
}

// Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7_Key represents the key for list NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 of element /Cisco-IOS-XR-ifmgr-cfg/interface-configurations/interface-configuration/tunnel-te-attributes/new-style-affinity-affinity-types.
type Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7_Key struct {
	AffinityType	E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity	`path:"affinity-type"`
	Affinity1	string	`path:"affinity1"`
	Affinity2	string	`path:"affinity2"`
	Affinity3	string	`path:"affinity3"`
	Affinity4	string	`path:"affinity4"`
	Affinity5	string	`path:"affinity5"`
	Affinity6	string	`path:"affinity6"`
	Affinity7	string	`path:"affinity7"`
}

// IsYANGGoKeyStruct ensures that Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7_Key) IsYANGGoKeyStruct() {}

// ΛListKeyMap returns the values of the Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7_Key key struct.
func (t Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"affinity-type": t.AffinityType,
		"affinity1": t.Affinity1,
		"affinity2": t.Affinity2,
		"affinity3": t.Affinity3,
		"affinity4": t.Affinity4,
		"affinity5": t.Affinity5,
		"affinity6": t.Affinity6,
		"affinity7": t.Affinity7,
	}, nil
}

// Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8_Key represents the key for list NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 of element /Cisco-IOS-XR-ifmgr-cfg/interface-configurations/interface-configuration/tunnel-te-attributes/new-style-affinity-affinity-types.
type Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8_Key struct {
	AffinityType	E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity	`path:"affinity-type"`
	Affinity1	string	`path:"affinity1"`
	Affinity2	string	`path:"affinity2"`
	Affinity3	string	`path:"affinity3"`
	Affinity4	string	`path:"affinity4"`
	Affinity5	string	`path:"affinity5"`
	Affinity6	string	`path:"affinity6"`
	Affinity7	string	`path:"affinity7"`
	Affinity8	string	`path:"affinity8"`
}

// IsYANGGoKeyStruct ensures that Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8_Key) IsYANGGoKeyStruct() {}

// ΛListKeyMap returns the values of the Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8_Key key struct.
func (t Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"affinity-type": t.AffinityType,
		"affinity1": t.Affinity1,
		"affinity2": t.Affinity2,
		"affinity3": t.Affinity3,
		"affinity4": t.Affinity4,
		"affinity5": t.Affinity5,
		"affinity6": t.Affinity6,
		"affinity7": t.Affinity7,
		"affinity8": t.Affinity8,
	}, nil
}

// Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9_Key represents the key for list NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 of element /Cisco-IOS-XR-ifmgr-cfg/interface-configurations/interface-configuration/tunnel-te-attributes/new-style-affinity-affinity-types.
type Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9_Key struct {
	AffinityType	E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity	`path:"affinity-type"`
	Affinity1	string	`path:"affinity1"`
	Affinity2	string	`path:"affinity2"`
	Affinity3	string	`path:"affinity3"`
	Affinity4	string	`path:"affinity4"`
	Affinity5	string	`path:"affinity5"`
	Affinity6	string	`path:"affinity6"`
	Affinity7	string	`path:"affinity7"`
	Affinity8	string	`path:"affinity8"`
	Affinity9	string	`path:"affinity9"`
}

// IsYANGGoKeyStruct ensures that Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9_Key) IsYANGGoKeyStruct() {}

// ΛListKeyMap returns the values of the Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9_Key key struct.
func (t Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"affinity-type": t.AffinityType,
		"affinity1": t.Affinity1,
		"affinity2": t.Affinity2,
		"affinity3": t.Affinity3,
		"affinity4": t.Affinity4,
		"affinity5": t.Affinity5,
		"affinity6": t.Affinity6,
		"affinity7": t.Affinity7,
		"affinity8": t.Affinity8,
		"affinity9": t.Affinity9,
	}, nil
}

// Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10_Key represents the key for list NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 of element /Cisco-IOS-XR-ifmgr-cfg/interface-configurations/interface-configuration/tunnel-te-attributes/new-style-affinity-affinity-types.
type Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10_Key struct {
	AffinityType	E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity	`path:"affinity-type"`
	Affinity1	string	`path:"affinity1"`
	Affinity2	string	`path:"affinity2"`
	Affinity3	string	`path:"affinity3"`
	Affinity4	string	`path:"affinity4"`
	Affinity5	string	`path:"affinity5"`
	Affinity6	string	`path:"affinity6"`
	Affinity7	string	`path:"affinity7"`
	Affinity8	string	`path:"affinity8"`
	Affinity9	string	`path:"affinity9"`
	Affinity10	string	`path:"affinity10"`
}

// IsYANGGoKeyStruct ensures that Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10_Key) IsYANGGoKeyStruct() {}

// ΛListKeyMap returns the values of the Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10_Key key struct.
func (t Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"affinity-type": t.AffinityType,
		"affinity1": t.Affinity1,
		"affinity2": t.Affinity2,
		"affinity3": t.Affinity3,
		"affinity4": t.Affinity4,
		"affinity5": t.Affinity5,
		"affinity6": t.Affinity6,
		"affinity7": t.Affinity7,
		"affinity8": t.Affinity8,
		"affinity9": t.Affinity9,
		"affinity10": t.Affinity10,
	}, nil
}

// NewNewStyleAffinityAffinityType creates a new entry in the NewStyleAffinityAffinityType list of the
// Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes) NewNewStyleAffinityAffinityType(AffinityType E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity) (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NewStyleAffinityAffinityType == nil {
		t.NewStyleAffinityAffinityType = make(map[E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity]*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType)
	}

	key := AffinityType

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NewStyleAffinityAffinityType[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NewStyleAffinityAffinityType", key)
	}

	t.NewStyleAffinityAffinityType[key] = &Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType{
		AffinityType: AffinityType,
	}

	return t.NewStyleAffinityAffinityType[key], nil
}

// NewNewStyleAffinityAffinityTypeAffinity1 creates a new entry in the NewStyleAffinityAffinityTypeAffinity1 list of the
// Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes) NewNewStyleAffinityAffinityTypeAffinity1(AffinityType E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity, Affinity1 string) (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NewStyleAffinityAffinityTypeAffinity1 == nil {
		t.NewStyleAffinityAffinityTypeAffinity1 = make(map[Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1_Key]*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1)
	}

	key := Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1_Key{
		AffinityType: AffinityType,
		Affinity1: Affinity1,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NewStyleAffinityAffinityTypeAffinity1[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NewStyleAffinityAffinityTypeAffinity1", key)
	}

	t.NewStyleAffinityAffinityTypeAffinity1[key] = &Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1{
		AffinityType: AffinityType,
		Affinity1: &Affinity1,
	}

	return t.NewStyleAffinityAffinityTypeAffinity1[key], nil
}

// NewNewStyleAffinityAffinityTypeAffinity1Affinity2 creates a new entry in the NewStyleAffinityAffinityTypeAffinity1Affinity2 list of the
// Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes) NewNewStyleAffinityAffinityTypeAffinity1Affinity2(AffinityType E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity, Affinity1 string, Affinity2 string) (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NewStyleAffinityAffinityTypeAffinity1Affinity2 == nil {
		t.NewStyleAffinityAffinityTypeAffinity1Affinity2 = make(map[Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2_Key]*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2)
	}

	key := Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2_Key{
		AffinityType: AffinityType,
		Affinity1: Affinity1,
		Affinity2: Affinity2,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NewStyleAffinityAffinityTypeAffinity1Affinity2[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NewStyleAffinityAffinityTypeAffinity1Affinity2", key)
	}

	t.NewStyleAffinityAffinityTypeAffinity1Affinity2[key] = &Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2{
		AffinityType: AffinityType,
		Affinity1: &Affinity1,
		Affinity2: &Affinity2,
	}

	return t.NewStyleAffinityAffinityTypeAffinity1Affinity2[key], nil
}

// NewNewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 creates a new entry in the NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 list of the
// Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes) NewNewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3(AffinityType E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity, Affinity1 string, Affinity2 string, Affinity3 string) (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 == nil {
		t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 = make(map[Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3_Key]*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3)
	}

	key := Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3_Key{
		AffinityType: AffinityType,
		Affinity1: Affinity1,
		Affinity2: Affinity2,
		Affinity3: Affinity3,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3", key)
	}

	t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3[key] = &Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3{
		AffinityType: AffinityType,
		Affinity1: &Affinity1,
		Affinity2: &Affinity2,
		Affinity3: &Affinity3,
	}

	return t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3[key], nil
}

// NewNewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 creates a new entry in the NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 list of the
// Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes) NewNewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4(AffinityType E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity, Affinity1 string, Affinity2 string, Affinity3 string, Affinity4 string) (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 == nil {
		t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 = make(map[Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4_Key]*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4)
	}

	key := Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4_Key{
		AffinityType: AffinityType,
		Affinity1: Affinity1,
		Affinity2: Affinity2,
		Affinity3: Affinity3,
		Affinity4: Affinity4,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4", key)
	}

	t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4[key] = &Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4{
		AffinityType: AffinityType,
		Affinity1: &Affinity1,
		Affinity2: &Affinity2,
		Affinity3: &Affinity3,
		Affinity4: &Affinity4,
	}

	return t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4[key], nil
}

// NewNewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 creates a new entry in the NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 list of the
// Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes) NewNewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5(AffinityType E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity, Affinity1 string, Affinity2 string, Affinity3 string, Affinity4 string, Affinity5 string) (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 == nil {
		t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 = make(map[Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5_Key]*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5)
	}

	key := Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5_Key{
		AffinityType: AffinityType,
		Affinity1: Affinity1,
		Affinity2: Affinity2,
		Affinity3: Affinity3,
		Affinity4: Affinity4,
		Affinity5: Affinity5,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5", key)
	}

	t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5[key] = &Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5{
		AffinityType: AffinityType,
		Affinity1: &Affinity1,
		Affinity2: &Affinity2,
		Affinity3: &Affinity3,
		Affinity4: &Affinity4,
		Affinity5: &Affinity5,
	}

	return t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5[key], nil
}

// NewNewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 creates a new entry in the NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 list of the
// Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes) NewNewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6(AffinityType E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity, Affinity1 string, Affinity2 string, Affinity3 string, Affinity4 string, Affinity5 string, Affinity6 string) (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 == nil {
		t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 = make(map[Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6_Key]*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6)
	}

	key := Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6_Key{
		AffinityType: AffinityType,
		Affinity1: Affinity1,
		Affinity2: Affinity2,
		Affinity3: Affinity3,
		Affinity4: Affinity4,
		Affinity5: Affinity5,
		Affinity6: Affinity6,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6", key)
	}

	t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6[key] = &Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6{
		AffinityType: AffinityType,
		Affinity1: &Affinity1,
		Affinity2: &Affinity2,
		Affinity3: &Affinity3,
		Affinity4: &Affinity4,
		Affinity5: &Affinity5,
		Affinity6: &Affinity6,
	}

	return t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6[key], nil
}

// NewNewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 creates a new entry in the NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 list of the
// Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes) NewNewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7(AffinityType E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity, Affinity1 string, Affinity2 string, Affinity3 string, Affinity4 string, Affinity5 string, Affinity6 string, Affinity7 string) (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 == nil {
		t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 = make(map[Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7_Key]*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7)
	}

	key := Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7_Key{
		AffinityType: AffinityType,
		Affinity1: Affinity1,
		Affinity2: Affinity2,
		Affinity3: Affinity3,
		Affinity4: Affinity4,
		Affinity5: Affinity5,
		Affinity6: Affinity6,
		Affinity7: Affinity7,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7", key)
	}

	t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7[key] = &Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7{
		AffinityType: AffinityType,
		Affinity1: &Affinity1,
		Affinity2: &Affinity2,
		Affinity3: &Affinity3,
		Affinity4: &Affinity4,
		Affinity5: &Affinity5,
		Affinity6: &Affinity6,
		Affinity7: &Affinity7,
	}

	return t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7[key], nil
}

// NewNewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 creates a new entry in the NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 list of the
// Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes) NewNewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8(AffinityType E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity, Affinity1 string, Affinity2 string, Affinity3 string, Affinity4 string, Affinity5 string, Affinity6 string, Affinity7 string, Affinity8 string) (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 == nil {
		t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 = make(map[Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8_Key]*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8)
	}

	key := Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8_Key{
		AffinityType: AffinityType,
		Affinity1: Affinity1,
		Affinity2: Affinity2,
		Affinity3: Affinity3,
		Affinity4: Affinity4,
		Affinity5: Affinity5,
		Affinity6: Affinity6,
		Affinity7: Affinity7,
		Affinity8: Affinity8,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8", key)
	}

	t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8[key] = &Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8{
		AffinityType: AffinityType,
		Affinity1: &Affinity1,
		Affinity2: &Affinity2,
		Affinity3: &Affinity3,
		Affinity4: &Affinity4,
		Affinity5: &Affinity5,
		Affinity6: &Affinity6,
		Affinity7: &Affinity7,
		Affinity8: &Affinity8,
	}

	return t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8[key], nil
}

// NewNewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 creates a new entry in the NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 list of the
// Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes) NewNewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9(AffinityType E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity, Affinity1 string, Affinity2 string, Affinity3 string, Affinity4 string, Affinity5 string, Affinity6 string, Affinity7 string, Affinity8 string, Affinity9 string) (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 == nil {
		t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 = make(map[Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9_Key]*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9)
	}

	key := Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9_Key{
		AffinityType: AffinityType,
		Affinity1: Affinity1,
		Affinity2: Affinity2,
		Affinity3: Affinity3,
		Affinity4: Affinity4,
		Affinity5: Affinity5,
		Affinity6: Affinity6,
		Affinity7: Affinity7,
		Affinity8: Affinity8,
		Affinity9: Affinity9,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9", key)
	}

	t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9[key] = &Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9{
		AffinityType: AffinityType,
		Affinity1: &Affinity1,
		Affinity2: &Affinity2,
		Affinity3: &Affinity3,
		Affinity4: &Affinity4,
		Affinity5: &Affinity5,
		Affinity6: &Affinity6,
		Affinity7: &Affinity7,
		Affinity8: &Affinity8,
		Affinity9: &Affinity9,
	}

	return t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9[key], nil
}

// NewNewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 creates a new entry in the NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 list of the
// Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes) NewNewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10(AffinityType E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity, Affinity1 string, Affinity2 string, Affinity3 string, Affinity4 string, Affinity5 string, Affinity6 string, Affinity7 string, Affinity8 string, Affinity9 string, Affinity10 string) (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 == nil {
		t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 = make(map[Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10_Key]*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10)
	}

	key := Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10_Key{
		AffinityType: AffinityType,
		Affinity1: Affinity1,
		Affinity2: Affinity2,
		Affinity3: Affinity3,
		Affinity4: Affinity4,
		Affinity5: Affinity5,
		Affinity6: Affinity6,
		Affinity7: Affinity7,
		Affinity8: Affinity8,
		Affinity9: Affinity9,
		Affinity10: Affinity10,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10", key)
	}

	t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10[key] = &Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10{
		AffinityType: AffinityType,
		Affinity1: &Affinity1,
		Affinity2: &Affinity2,
		Affinity3: &Affinity3,
		Affinity4: &Affinity4,
		Affinity5: &Affinity5,
		Affinity6: &Affinity6,
		Affinity7: &Affinity7,
		Affinity8: &Affinity8,
		Affinity9: &Affinity9,
		Affinity10: &Affinity10,
	}

	return t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType represents the /Cisco-IOS-XR-ifmgr-cfg/interface-configurations/interface-configuration/tunnel-te-attributes/new-style-affinity-affinity-types/new-style-affinity-affinity-type YANG schema element.
type Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType struct {
	AffinityType	E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity	`path:"affinity-type" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType struct, which is a YANG list entry.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"affinity-type": t.AffinityType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1 represents the /Cisco-IOS-XR-ifmgr-cfg/interface-configurations/interface-configuration/tunnel-te-attributes/new-style-affinity-affinity-types/new-style-affinity-affinity-type-affinity1 YANG schema element.
type Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1 struct {
	AffinityType	E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity	`path:"affinity-type" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity1	*string	`path:"affinity1" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1 struct, which is a YANG list entry.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1) ΛListKeyMap() (map[string]interface{}, error) {

	if t.Affinity1 == nil {
		return nil, fmt.Errorf("nil value for key Affinity1")
	}

	return map[string]interface{}{
		"affinity-type": t.AffinityType,
		"affinity1": *t.Affinity1,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2 represents the /Cisco-IOS-XR-ifmgr-cfg/interface-configurations/interface-configuration/tunnel-te-attributes/new-style-affinity-affinity-types/new-style-affinity-affinity-type-affinity1-affinity2 YANG schema element.
type Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2 struct {
	AffinityType	E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity	`path:"affinity-type" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity1	*string	`path:"affinity1" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity2	*string	`path:"affinity2" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2 struct, which is a YANG list entry.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2) ΛListKeyMap() (map[string]interface{}, error) {

	if t.Affinity1 == nil {
		return nil, fmt.Errorf("nil value for key Affinity1")
	}

	if t.Affinity2 == nil {
		return nil, fmt.Errorf("nil value for key Affinity2")
	}

	return map[string]interface{}{
		"affinity-type": t.AffinityType,
		"affinity1": *t.Affinity1,
		"affinity2": *t.Affinity2,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 represents the /Cisco-IOS-XR-ifmgr-cfg/interface-configurations/interface-configuration/tunnel-te-attributes/new-style-affinity-affinity-types/new-style-affinity-affinity-type-affinity1-affinity2-affinity3 YANG schema element.
type Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 struct {
	AffinityType	E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity	`path:"affinity-type" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity1	*string	`path:"affinity1" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity2	*string	`path:"affinity2" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity3	*string	`path:"affinity3" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 struct, which is a YANG list entry.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3) ΛListKeyMap() (map[string]interface{}, error) {

	if t.Affinity1 == nil {
		return nil, fmt.Errorf("nil value for key Affinity1")
	}

	if t.Affinity2 == nil {
		return nil, fmt.Errorf("nil value for key Affinity2")
	}

	if t.Affinity3 == nil {
		return nil, fmt.Errorf("nil value for key Affinity3")
	}

	return map[string]interface{}{
		"affinity-type": t.AffinityType,
		"affinity1": *t.Affinity1,
		"affinity2": *t.Affinity2,
		"affinity3": *t.Affinity3,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 represents the /Cisco-IOS-XR-ifmgr-cfg/interface-configurations/interface-configuration/tunnel-te-attributes/new-style-affinity-affinity-types/new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4 YANG schema element.
type Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 struct {
	AffinityType	E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity	`path:"affinity-type" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity1	*string	`path:"affinity1" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity2	*string	`path:"affinity2" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity3	*string	`path:"affinity3" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity4	*string	`path:"affinity4" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 struct, which is a YANG list entry.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4) ΛListKeyMap() (map[string]interface{}, error) {

	if t.Affinity1 == nil {
		return nil, fmt.Errorf("nil value for key Affinity1")
	}

	if t.Affinity2 == nil {
		return nil, fmt.Errorf("nil value for key Affinity2")
	}

	if t.Affinity3 == nil {
		return nil, fmt.Errorf("nil value for key Affinity3")
	}

	if t.Affinity4 == nil {
		return nil, fmt.Errorf("nil value for key Affinity4")
	}

	return map[string]interface{}{
		"affinity-type": t.AffinityType,
		"affinity1": *t.Affinity1,
		"affinity2": *t.Affinity2,
		"affinity3": *t.Affinity3,
		"affinity4": *t.Affinity4,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 represents the /Cisco-IOS-XR-ifmgr-cfg/interface-configurations/interface-configuration/tunnel-te-attributes/new-style-affinity-affinity-types/new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5 YANG schema element.
type Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 struct {
	AffinityType	E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity	`path:"affinity-type" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity1	*string	`path:"affinity1" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity2	*string	`path:"affinity2" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity3	*string	`path:"affinity3" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity4	*string	`path:"affinity4" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity5	*string	`path:"affinity5" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 struct, which is a YANG list entry.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5) ΛListKeyMap() (map[string]interface{}, error) {

	if t.Affinity1 == nil {
		return nil, fmt.Errorf("nil value for key Affinity1")
	}

	if t.Affinity2 == nil {
		return nil, fmt.Errorf("nil value for key Affinity2")
	}

	if t.Affinity3 == nil {
		return nil, fmt.Errorf("nil value for key Affinity3")
	}

	if t.Affinity4 == nil {
		return nil, fmt.Errorf("nil value for key Affinity4")
	}

	if t.Affinity5 == nil {
		return nil, fmt.Errorf("nil value for key Affinity5")
	}

	return map[string]interface{}{
		"affinity-type": t.AffinityType,
		"affinity1": *t.Affinity1,
		"affinity2": *t.Affinity2,
		"affinity3": *t.Affinity3,
		"affinity4": *t.Affinity4,
		"affinity5": *t.Affinity5,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 represents the /Cisco-IOS-XR-ifmgr-cfg/interface-configurations/interface-configuration/tunnel-te-attributes/new-style-affinity-affinity-types/new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6 YANG schema element.
type Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 struct {
	AffinityType	E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity	`path:"affinity-type" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity1	*string	`path:"affinity1" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity2	*string	`path:"affinity2" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity3	*string	`path:"affinity3" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity4	*string	`path:"affinity4" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity5	*string	`path:"affinity5" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity6	*string	`path:"affinity6" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 struct, which is a YANG list entry.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6) ΛListKeyMap() (map[string]interface{}, error) {

	if t.Affinity1 == nil {
		return nil, fmt.Errorf("nil value for key Affinity1")
	}

	if t.Affinity2 == nil {
		return nil, fmt.Errorf("nil value for key Affinity2")
	}

	if t.Affinity3 == nil {
		return nil, fmt.Errorf("nil value for key Affinity3")
	}

	if t.Affinity4 == nil {
		return nil, fmt.Errorf("nil value for key Affinity4")
	}

	if t.Affinity5 == nil {
		return nil, fmt.Errorf("nil value for key Affinity5")
	}

	if t.Affinity6 == nil {
		return nil, fmt.Errorf("nil value for key Affinity6")
	}

	return map[string]interface{}{
		"affinity-type": t.AffinityType,
		"affinity1": *t.Affinity1,
		"affinity2": *t.Affinity2,
		"affinity3": *t.Affinity3,
		"affinity4": *t.Affinity4,
		"affinity5": *t.Affinity5,
		"affinity6": *t.Affinity6,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 represents the /Cisco-IOS-XR-ifmgr-cfg/interface-configurations/interface-configuration/tunnel-te-attributes/new-style-affinity-affinity-types/new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7 YANG schema element.
type Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 struct {
	AffinityType	E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity	`path:"affinity-type" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity1	*string	`path:"affinity1" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity2	*string	`path:"affinity2" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity3	*string	`path:"affinity3" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity4	*string	`path:"affinity4" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity5	*string	`path:"affinity5" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity6	*string	`path:"affinity6" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity7	*string	`path:"affinity7" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 struct, which is a YANG list entry.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7) ΛListKeyMap() (map[string]interface{}, error) {

	if t.Affinity1 == nil {
		return nil, fmt.Errorf("nil value for key Affinity1")
	}

	if t.Affinity2 == nil {
		return nil, fmt.Errorf("nil value for key Affinity2")
	}

	if t.Affinity3 == nil {
		return nil, fmt.Errorf("nil value for key Affinity3")
	}

	if t.Affinity4 == nil {
		return nil, fmt.Errorf("nil value for key Affinity4")
	}

	if t.Affinity5 == nil {
		return nil, fmt.Errorf("nil value for key Affinity5")
	}

	if t.Affinity6 == nil {
		return nil, fmt.Errorf("nil value for key Affinity6")
	}

	if t.Affinity7 == nil {
		return nil, fmt.Errorf("nil value for key Affinity7")
	}

	return map[string]interface{}{
		"affinity-type": t.AffinityType,
		"affinity1": *t.Affinity1,
		"affinity2": *t.Affinity2,
		"affinity3": *t.Affinity3,
		"affinity4": *t.Affinity4,
		"affinity5": *t.Affinity5,
		"affinity6": *t.Affinity6,
		"affinity7": *t.Affinity7,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 represents the /Cisco-IOS-XR-ifmgr-cfg/interface-configurations/interface-configuration/tunnel-te-attributes/new-style-affinity-affinity-types/new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8 YANG schema element.
type Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 struct {
	AffinityType	E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity	`path:"affinity-type" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity1	*string	`path:"affinity1" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity2	*string	`path:"affinity2" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity3	*string	`path:"affinity3" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity4	*string	`path:"affinity4" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity5	*string	`path:"affinity5" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity6	*string	`path:"affinity6" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity7	*string	`path:"affinity7" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity8	*string	`path:"affinity8" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 struct, which is a YANG list entry.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8) ΛListKeyMap() (map[string]interface{}, error) {

	if t.Affinity1 == nil {
		return nil, fmt.Errorf("nil value for key Affinity1")
	}

	if t.Affinity2 == nil {
		return nil, fmt.Errorf("nil value for key Affinity2")
	}

	if t.Affinity3 == nil {
		return nil, fmt.Errorf("nil value for key Affinity3")
	}

	if t.Affinity4 == nil {
		return nil, fmt.Errorf("nil value for key Affinity4")
	}

	if t.Affinity5 == nil {
		return nil, fmt.Errorf("nil value for key Affinity5")
	}

	if t.Affinity6 == nil {
		return nil, fmt.Errorf("nil value for key Affinity6")
	}

	if t.Affinity7 == nil {
		return nil, fmt.Errorf("nil value for key Affinity7")
	}

	if t.Affinity8 == nil {
		return nil, fmt.Errorf("nil value for key Affinity8")
	}

	return map[string]interface{}{
		"affinity-type": t.AffinityType,
		"affinity1": *t.Affinity1,
		"affinity2": *t.Affinity2,
		"affinity3": *t.Affinity3,
		"affinity4": *t.Affinity4,
		"affinity5": *t.Affinity5,
		"affinity6": *t.Affinity6,
		"affinity7": *t.Affinity7,
		"affinity8": *t.Affinity8,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 represents the /Cisco-IOS-XR-ifmgr-cfg/interface-configurations/interface-configuration/tunnel-te-attributes/new-style-affinity-affinity-types/new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8-affinity9 YANG schema element.
type Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 struct {
	AffinityType	E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity	`path:"affinity-type" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity1	*string	`path:"affinity1" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity2	*string	`path:"affinity2" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity3	*string	`path:"affinity3" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity4	*string	`path:"affinity4" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity5	*string	`path:"affinity5" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity6	*string	`path:"affinity6" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity7	*string	`path:"affinity7" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity8	*string	`path:"affinity8" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity9	*string	`path:"affinity9" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 struct, which is a YANG list entry.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9) ΛListKeyMap() (map[string]interface{}, error) {

	if t.Affinity1 == nil {
		return nil, fmt.Errorf("nil value for key Affinity1")
	}

	if t.Affinity2 == nil {
		return nil, fmt.Errorf("nil value for key Affinity2")
	}

	if t.Affinity3 == nil {
		return nil, fmt.Errorf("nil value for key Affinity3")
	}

	if t.Affinity4 == nil {
		return nil, fmt.Errorf("nil value for key Affinity4")
	}

	if t.Affinity5 == nil {
		return nil, fmt.Errorf("nil value for key Affinity5")
	}

	if t.Affinity6 == nil {
		return nil, fmt.Errorf("nil value for key Affinity6")
	}

	if t.Affinity7 == nil {
		return nil, fmt.Errorf("nil value for key Affinity7")
	}

	if t.Affinity8 == nil {
		return nil, fmt.Errorf("nil value for key Affinity8")
	}

	if t.Affinity9 == nil {
		return nil, fmt.Errorf("nil value for key Affinity9")
	}

	return map[string]interface{}{
		"affinity-type": t.AffinityType,
		"affinity1": *t.Affinity1,
		"affinity2": *t.Affinity2,
		"affinity3": *t.Affinity3,
		"affinity4": *t.Affinity4,
		"affinity5": *t.Affinity5,
		"affinity6": *t.Affinity6,
		"affinity7": *t.Affinity7,
		"affinity8": *t.Affinity8,
		"affinity9": *t.Affinity9,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 represents the /Cisco-IOS-XR-ifmgr-cfg/interface-configurations/interface-configuration/tunnel-te-attributes/new-style-affinity-affinity-types/new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8-affinity9-affinity10 YANG schema element.
type Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 struct {
	AffinityType	E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity	`path:"affinity-type" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity1	*string	`path:"affinity1" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity10	*string	`path:"affinity10" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity2	*string	`path:"affinity2" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity3	*string	`path:"affinity3" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity4	*string	`path:"affinity4" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity5	*string	`path:"affinity5" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity6	*string	`path:"affinity6" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity7	*string	`path:"affinity7" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity8	*string	`path:"affinity8" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity9	*string	`path:"affinity9" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 struct, which is a YANG list entry.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10) ΛListKeyMap() (map[string]interface{}, error) {

	if t.Affinity1 == nil {
		return nil, fmt.Errorf("nil value for key Affinity1")
	}

	if t.Affinity10 == nil {
		return nil, fmt.Errorf("nil value for key Affinity10")
	}

	if t.Affinity2 == nil {
		return nil, fmt.Errorf("nil value for key Affinity2")
	}

	if t.Affinity3 == nil {
		return nil, fmt.Errorf("nil value for key Affinity3")
	}

	if t.Affinity4 == nil {
		return nil, fmt.Errorf("nil value for key Affinity4")
	}

	if t.Affinity5 == nil {
		return nil, fmt.Errorf("nil value for key Affinity5")
	}

	if t.Affinity6 == nil {
		return nil, fmt.Errorf("nil value for key Affinity6")
	}

	if t.Affinity7 == nil {
		return nil, fmt.Errorf("nil value for key Affinity7")
	}

	if t.Affinity8 == nil {
		return nil, fmt.Errorf("nil value for key Affinity8")
	}

	if t.Affinity9 == nil {
		return nil, fmt.Errorf("nil value for key Affinity9")
	}

	return map[string]interface{}{
		"affinity-type": t.AffinityType,
		"affinity1": *t.Affinity1,
		"affinity10": *t.Affinity10,
		"affinity2": *t.Affinity2,
		"affinity3": *t.Affinity3,
		"affinity4": *t.Affinity4,
		"affinity5": *t.Affinity5,
		"affinity6": *t.Affinity6,
		"affinity7": *t.Affinity7,
		"affinity8": *t.Affinity8,
		"affinity9": *t.Affinity9,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PathOptionProtects represents the /Cisco-IOS-XR-ifmgr-cfg/interface-configurations/interface-configuration/tunnel-te-attributes/path-option-protects YANG schema element.
type Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PathOptionProtects struct {
	PathOptionProtect	map[E_Cisco_IOS_XRMplsTeCfg_MplsTePathOptionProtection]*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PathOptionProtects_PathOptionProtect	`path:"path-option-protect" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PathOptionProtects implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PathOptionProtects) IsYANGGoStruct() {}

// NewPathOptionProtect creates a new entry in the PathOptionProtect list of the
// Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PathOptionProtects struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PathOptionProtects) NewPathOptionProtect(Protection E_Cisco_IOS_XRMplsTeCfg_MplsTePathOptionProtection) (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PathOptionProtects_PathOptionProtect, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PathOptionProtect == nil {
		t.PathOptionProtect = make(map[E_Cisco_IOS_XRMplsTeCfg_MplsTePathOptionProtection]*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PathOptionProtects_PathOptionProtect)
	}

	key := Protection

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.PathOptionProtect[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list PathOptionProtect", key)
	}

	t.PathOptionProtect[key] = &Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PathOptionProtects_PathOptionProtect{
		Protection: Protection,
	}

	return t.PathOptionProtect[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PathOptionProtects) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PathOptionProtects"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PathOptionProtects) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PathOptionProtects) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PathOptionProtects.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PathOptionProtects) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PathOptionProtects_PathOptionProtect represents the /Cisco-IOS-XR-ifmgr-cfg/interface-configurations/interface-configuration/tunnel-te-attributes/path-option-protects/path-option-protect YANG schema element.
type Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PathOptionProtects_PathOptionProtect struct {
	PathOptions	*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PathOptionProtects_PathOptionProtect_PathOptions	`path:"path-options" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Protection	E_Cisco_IOS_XRMplsTeCfg_MplsTePathOptionProtection	`path:"protection" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PathOptionProtects_PathOptionProtect implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PathOptionProtects_PathOptionProtect) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PathOptionProtects_PathOptionProtect struct, which is a YANG list entry.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PathOptionProtects_PathOptionProtect) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"protection": t.Protection,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PathOptionProtects_PathOptionProtect) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PathOptionProtects_PathOptionProtect"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PathOptionProtects_PathOptionProtect) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PathOptionProtects_PathOptionProtect) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PathOptionProtects_PathOptionProtect.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PathOptionProtects_PathOptionProtect) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PathOptionProtects_PathOptionProtect_PathOptions represents the /Cisco-IOS-XR-ifmgr-cfg/interface-configurations/interface-configuration/tunnel-te-attributes/path-option-protects/path-option-protect/path-options YANG schema element.
type Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PathOptionProtects_PathOptionProtect_PathOptions struct {
	PathOption	map[uint32]*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PathOptionProtects_PathOptionProtect_PathOptions_PathOption	`path:"path-option" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PathOptionProtects_PathOptionProtect_PathOptions implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PathOptionProtects_PathOptionProtect_PathOptions) IsYANGGoStruct() {}

// NewPathOption creates a new entry in the PathOption list of the
// Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PathOptionProtects_PathOptionProtect_PathOptions struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PathOptionProtects_PathOptionProtect_PathOptions) NewPathOption(PreferenceLevel uint32) (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PathOptionProtects_PathOptionProtect_PathOptions_PathOption, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PathOption == nil {
		t.PathOption = make(map[uint32]*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PathOptionProtects_PathOptionProtect_PathOptions_PathOption)
	}

	key := PreferenceLevel

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.PathOption[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list PathOption", key)
	}

	t.PathOption[key] = &Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PathOptionProtects_PathOptionProtect_PathOptions_PathOption{
		PreferenceLevel: &PreferenceLevel,
	}

	return t.PathOption[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PathOptionProtects_PathOptionProtect_PathOptions) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PathOptionProtects_PathOptionProtect_PathOptions"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PathOptionProtects_PathOptionProtect_PathOptions) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PathOptionProtects_PathOptionProtect_PathOptions) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PathOptionProtects_PathOptionProtect_PathOptions.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PathOptionProtects_PathOptionProtect_PathOptions) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PathOptionProtects_PathOptionProtect_PathOptions_PathOption represents the /Cisco-IOS-XR-ifmgr-cfg/interface-configurations/interface-configuration/tunnel-te-attributes/path-option-protects/path-option-protect/path-options/path-option YANG schema element.
type Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PathOptionProtects_PathOptionProtect_PathOptions_PathOption struct {
	Destination	*string	`path:"destination" module:"Cisco-IOS-XR-mpls-te-cfg"`
	IgpArea	*uint32	`path:"igp-area" module:"Cisco-IOS-XR-mpls-te-cfg"`
	IgpAreaIpAddressId	*string	`path:"igp-area-ip-address-id" module:"Cisco-IOS-XR-mpls-te-cfg"`
	IgpInstance	*string	`path:"igp-instance" module:"Cisco-IOS-XR-mpls-te-cfg"`
	IgpType	E_Cisco_IOS_XRMplsTeCfg_MplsTeIgpProtocol	`path:"igp-type" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Interface	*string	`path:"interface" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Lockdown	E_Cisco_IOS_XRMplsTeCfg_MplsTePathOptionProperty	`path:"lockdown" module:"Cisco-IOS-XR-mpls-te-cfg"`
	OutputLabel	*uint32	`path:"output-label" module:"Cisco-IOS-XR-mpls-te-cfg"`
	PathId	*uint32	`path:"path-id" module:"Cisco-IOS-XR-mpls-te-cfg"`
	PathName	*string	`path:"path-name" module:"Cisco-IOS-XR-mpls-te-cfg"`
	PathOptionAttributeSetName	*string	`path:"path-option-attribute-set-name" module:"Cisco-IOS-XR-mpls-te-cfg"`
	PathProperty	*uint32	`path:"path-property" module:"Cisco-IOS-XR-mpls-te-cfg"`
	PathType	E_Cisco_IOS_XRMplsTeCfg_MplsTePathOption	`path:"path-type" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Pce	E_Cisco_IOS_XRMplsTeCfg_MplsTePathOptionProperty	`path:"pce" module:"Cisco-IOS-XR-mpls-te-cfg"`
	PceAddress	*string	`path:"pce-address" module:"Cisco-IOS-XR-mpls-te-cfg"`
	PreferenceLevel	*uint32	`path:"preference-level" module:"Cisco-IOS-XR-mpls-te-cfg"`
	ProtectedByPreferenceLevel	*uint32	`path:"protected-by-preference-level" module:"Cisco-IOS-XR-mpls-te-cfg"`
	SegmentRouting	E_Cisco_IOS_XRMplsTeCfg_MplsTePathOptionProperty	`path:"segment-routing" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Sticky	E_Cisco_IOS_XRMplsTeCfg_MplsTePathOptionProperty	`path:"sticky" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Verbatim	E_Cisco_IOS_XRMplsTeCfg_MplsTePathOptionProperty	`path:"verbatim" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PathOptionProtects_PathOptionProtect_PathOptions_PathOption implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PathOptionProtects_PathOptionProtect_PathOptions_PathOption) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PathOptionProtects_PathOptionProtect_PathOptions_PathOption struct, which is a YANG list entry.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PathOptionProtects_PathOptionProtect_PathOptions_PathOption) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PreferenceLevel == nil {
		return nil, fmt.Errorf("nil value for key PreferenceLevel")
	}

	return map[string]interface{}{
		"preference-level": *t.PreferenceLevel,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PathOptionProtects_PathOptionProtect_PathOptions_PathOption) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PathOptionProtects_PathOptionProtect_PathOptions_PathOption"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PathOptionProtects_PathOptionProtect_PathOptions_PathOption) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PathOptionProtects_PathOptionProtect_PathOptions_PathOption) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PathOptionProtects_PathOptionProtect_PathOptions_PathOption.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PathOptionProtects_PathOptionProtect_PathOptions_PathOption) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Pce represents the /Cisco-IOS-XR-ifmgr-cfg/interface-configurations/interface-configuration/tunnel-te-attributes/pce YANG schema element.
type Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Pce struct {
	Delegation	*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Pce_Delegation	`path:"delegation" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Enable	YANGEmpty	`path:"enable" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Pce implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Pce) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Pce) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Pce"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Pce) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Pce) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Pce.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Pce) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Pce_Delegation represents the /Cisco-IOS-XR-ifmgr-cfg/interface-configurations/interface-configuration/tunnel-te-attributes/pce/delegation YANG schema element.
type Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Pce_Delegation struct {
	Enable	YANGEmpty	`path:"enable" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Reopt	YANGEmpty	`path:"reopt" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Pce_Delegation implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Pce_Delegation) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Pce_Delegation) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Pce_Delegation"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Pce_Delegation) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Pce_Delegation) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Pce_Delegation.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Pce_Delegation) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PolicyClasses represents the /Cisco-IOS-XR-ifmgr-cfg/interface-configurations/interface-configuration/tunnel-te-attributes/policy-classes YANG schema element.
type Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PolicyClasses struct {
	PolicyClass	[]uint32	`path:"policy-class" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PolicyClasses implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PolicyClasses) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PolicyClasses) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PolicyClasses"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PolicyClasses) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PolicyClasses) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PolicyClasses.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PolicyClasses) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Priority represents the /Cisco-IOS-XR-ifmgr-cfg/interface-configurations/interface-configuration/tunnel-te-attributes/priority YANG schema element.
type Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Priority struct {
	HoldPriority	*uint32	`path:"hold-priority" module:"Cisco-IOS-XR-mpls-te-cfg"`
	SetupPriority	*uint32	`path:"setup-priority" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Priority implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Priority) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Priority) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Priority"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Priority) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Priority) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Priority.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Priority) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Switching represents the /Cisco-IOS-XR-ifmgr-cfg/interface-configurations/interface-configuration/tunnel-te-attributes/switching YANG schema element.
type Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Switching struct {
	Endpoint	*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Switching_Endpoint	`path:"endpoint" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Transit	*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Switching_Transit	`path:"transit" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Switching implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Switching) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Switching) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Switching"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Switching) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Switching) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Switching.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Switching) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Switching_Endpoint represents the /Cisco-IOS-XR-ifmgr-cfg/interface-configurations/interface-configuration/tunnel-te-attributes/switching/endpoint YANG schema element.
type Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Switching_Endpoint struct {
	Capability	E_Cisco_IOS_XRMplsTeCfg_MplsTeSwitchingCap	`path:"capability" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Encoding	E_Cisco_IOS_XRMplsTeCfg_MplsTeSwitchingEncode	`path:"encoding" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Switching_Endpoint implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Switching_Endpoint) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Switching_Endpoint) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Switching_Endpoint"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Switching_Endpoint) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Switching_Endpoint) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Switching_Endpoint.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Switching_Endpoint) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Switching_Transit represents the /Cisco-IOS-XR-ifmgr-cfg/interface-configurations/interface-configuration/tunnel-te-attributes/switching/transit YANG schema element.
type Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Switching_Transit struct {
	Capability	E_Cisco_IOS_XRMplsTeCfg_MplsTeSwitchingCap	`path:"capability" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Encoding	E_Cisco_IOS_XRMplsTeCfg_MplsTeSwitchingEncode	`path:"encoding" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Switching_Transit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Switching_Transit) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Switching_Transit) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Switching_Transit"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Switching_Transit) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Switching_Transit) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Switching_Transit.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Switching_Transit) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_TunnelPathProtection represents the /Cisco-IOS-XR-ifmgr-cfg/interface-configurations/interface-configuration/tunnel-te-attributes/tunnel-path-protection YANG schema element.
type Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_TunnelPathProtection struct {
	Enable	YANGEmpty	`path:"enable" module:"Cisco-IOS-XR-mpls-te-cfg"`
	ProtectionMode	*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_TunnelPathProtection_ProtectionMode	`path:"protection-mode" module:"Cisco-IOS-XR-mpls-te-cfg"`
	SrlgDiverse	YANGEmpty	`path:"srlg-diverse" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_TunnelPathProtection implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_TunnelPathProtection) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_TunnelPathProtection) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_TunnelPathProtection"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_TunnelPathProtection) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_TunnelPathProtection) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_TunnelPathProtection.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_TunnelPathProtection) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_TunnelPathProtection_ProtectionMode represents the /Cisco-IOS-XR-ifmgr-cfg/interface-configurations/interface-configuration/tunnel-te-attributes/tunnel-path-protection/protection-mode YANG schema element.
type Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_TunnelPathProtection_ProtectionMode struct {
	NonRevertive	YANGEmpty	`path:"non-revertive" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_TunnelPathProtection_ProtectionMode implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_TunnelPathProtection_ProtectionMode) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_TunnelPathProtection_ProtectionMode) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_TunnelPathProtection_ProtectionMode"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_TunnelPathProtection_ProtectionMode) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_TunnelPathProtection_ProtectionMode) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_TunnelPathProtection_ProtectionMode.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_TunnelPathProtection_ProtectionMode) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_TunnelPathSelection represents the /Cisco-IOS-XR-ifmgr-cfg/interface-configurations/interface-configuration/tunnel-te-attributes/tunnel-path-selection YANG schema element.
type Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_TunnelPathSelection struct {
	Invalidation	*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_TunnelPathSelection_Invalidation	`path:"invalidation" module:"Cisco-IOS-XR-mpls-te-cfg"`
	PathSelectionCostLimit	*uint32	`path:"path-selection-cost-limit" module:"Cisco-IOS-XR-mpls-te-cfg"`
	PathSelectionDelayLimit	*uint32	`path:"path-selection-delay-limit" module:"Cisco-IOS-XR-mpls-te-cfg"`
	PathSelectionHopLimit	*uint32	`path:"path-selection-hop-limit" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Tiebreaker	E_Cisco_IOS_XRMplsTeCfg_MplsTePathSelectionTiebreaker	`path:"tiebreaker" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_TunnelPathSelection implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_TunnelPathSelection) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_TunnelPathSelection) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_TunnelPathSelection"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_TunnelPathSelection) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_TunnelPathSelection) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_TunnelPathSelection.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_TunnelPathSelection) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_TunnelPathSelection_Invalidation represents the /Cisco-IOS-XR-ifmgr-cfg/interface-configurations/interface-configuration/tunnel-te-attributes/tunnel-path-selection/invalidation YANG schema element.
type Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_TunnelPathSelection_Invalidation struct {
	PathInvalidationAction	E_Cisco_IOS_XRMplsTeCfg_PathInvalidationAction	`path:"path-invalidation-action" module:"Cisco-IOS-XR-mpls-te-cfg"`
	PathInvalidationTimeout	*uint32	`path:"path-invalidation-timeout" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_TunnelPathSelection_Invalidation implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_TunnelPathSelection_Invalidation) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_TunnelPathSelection_Invalidation) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_TunnelPathSelection_Invalidation"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_TunnelPathSelection_Invalidation) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_TunnelPathSelection_Invalidation) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_TunnelPathSelection_Invalidation.
func (*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_TunnelPathSelection_Invalidation) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe struct {
	DiffServTrafficEngineering	*Cisco_IOS_XRMplsTeCfg_MplsTe_DiffServTrafficEngineering	`path:"diff-serv-traffic-engineering" module:"Cisco-IOS-XR-mpls-te-cfg"`
	EnableTrafficEngineering	YANGEmpty	`path:"enable-traffic-engineering" module:"Cisco-IOS-XR-mpls-te-cfg"`
	GlobalAttributes	*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes	`path:"global-attributes" module:"Cisco-IOS-XR-mpls-te-cfg"`
	GmplsNni	*Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni	`path:"gmpls-nni" module:"Cisco-IOS-XR-mpls-te-cfg"`
	GmplsUni	*Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsUni	`path:"gmpls-uni" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Interfaces	*Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces	`path:"interfaces" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Lcac	*Cisco_IOS_XRMplsTeCfg_MplsTe_Lcac	`path:"lcac" module:"Cisco-IOS-XR-mpls-te-cfg"`
	NamedTunnels	*Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels	`path:"named-tunnels" module:"Cisco-IOS-XR-mpls-te-cfg"`
	TransportProfile	*Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile	`path:"transport-profile" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_DiffServTrafficEngineering represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/diff-serv-traffic-engineering YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_DiffServTrafficEngineering struct {
	BandwidthConstraintModel	E_Cisco_IOS_XRMplsTeCfg_BandwidthConstraint	`path:"bandwidth-constraint-model" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Classes	*Cisco_IOS_XRMplsTeCfg_MplsTe_DiffServTrafficEngineering_Classes	`path:"classes" module:"Cisco-IOS-XR-mpls-te-cfg"`
	ModeIETF	E_Cisco_IOS_XRMplsTeCfg_IETFMode	`path:"mode-ietf" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_DiffServTrafficEngineering implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_DiffServTrafficEngineering) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_DiffServTrafficEngineering) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_DiffServTrafficEngineering"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_DiffServTrafficEngineering) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_DiffServTrafficEngineering) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_DiffServTrafficEngineering.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_DiffServTrafficEngineering) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_DiffServTrafficEngineering_Classes represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/diff-serv-traffic-engineering/classes YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_DiffServTrafficEngineering_Classes struct {
	Class	map[uint32]*Cisco_IOS_XRMplsTeCfg_MplsTe_DiffServTrafficEngineering_Classes_Class	`path:"class" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_DiffServTrafficEngineering_Classes implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_DiffServTrafficEngineering_Classes) IsYANGGoStruct() {}

// NewClass creates a new entry in the Class list of the
// Cisco_IOS_XRMplsTeCfg_MplsTe_DiffServTrafficEngineering_Classes struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_DiffServTrafficEngineering_Classes) NewClass(ClassNumber uint32) (*Cisco_IOS_XRMplsTeCfg_MplsTe_DiffServTrafficEngineering_Classes_Class, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Class == nil {
		t.Class = make(map[uint32]*Cisco_IOS_XRMplsTeCfg_MplsTe_DiffServTrafficEngineering_Classes_Class)
	}

	key := ClassNumber

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Class[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Class", key)
	}

	t.Class[key] = &Cisco_IOS_XRMplsTeCfg_MplsTe_DiffServTrafficEngineering_Classes_Class{
		ClassNumber: &ClassNumber,
	}

	return t.Class[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_DiffServTrafficEngineering_Classes) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_DiffServTrafficEngineering_Classes"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_DiffServTrafficEngineering_Classes) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_DiffServTrafficEngineering_Classes) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_DiffServTrafficEngineering_Classes.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_DiffServTrafficEngineering_Classes) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_DiffServTrafficEngineering_Classes_Class represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/diff-serv-traffic-engineering/classes/class YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_DiffServTrafficEngineering_Classes_Class struct {
	ClassNumber	*uint32	`path:"class-number" module:"Cisco-IOS-XR-mpls-te-cfg"`
	ClassPriority	*uint32	`path:"class-priority" module:"Cisco-IOS-XR-mpls-te-cfg"`
	ClassType	*uint32	`path:"class-type" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Unused	*bool	`path:"unused" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_DiffServTrafficEngineering_Classes_Class implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_DiffServTrafficEngineering_Classes_Class) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRMplsTeCfg_MplsTe_DiffServTrafficEngineering_Classes_Class struct, which is a YANG list entry.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_DiffServTrafficEngineering_Classes_Class) ΛListKeyMap() (map[string]interface{}, error) {
	if t.ClassNumber == nil {
		return nil, fmt.Errorf("nil value for key ClassNumber")
	}

	return map[string]interface{}{
		"class-number": *t.ClassNumber,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_DiffServTrafficEngineering_Classes_Class) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_DiffServTrafficEngineering_Classes_Class"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_DiffServTrafficEngineering_Classes_Class) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_DiffServTrafficEngineering_Classes_Class) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_DiffServTrafficEngineering_Classes_Class.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_DiffServTrafficEngineering_Classes_Class) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes struct {
	AdvertiseExplicitNulls	YANGEmpty	`path:"advertise-explicit-nulls" module:"Cisco-IOS-XR-mpls-te-cfg"`
	AffinityMappings	*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AffinityMappings	`path:"affinity-mappings" module:"Cisco-IOS-XR-mpls-te-cfg"`
	AttributeSet	*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet	`path:"attribute-set" module:"Cisco-IOS-XR-mpls-te-cfg"`
	AutoBandwidthCollectFrequency	*uint32	`path:"auto-bandwidth-collect-frequency" module:"Cisco-IOS-XR-mpls-te-cfg"`
	AutoTunnel	*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel	`path:"auto-tunnel" module:"Cisco-IOS-XR-mpls-te-cfg"`
	BackoffTimer	*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_BackoffTimer	`path:"backoff-timer" module:"Cisco-IOS-XR-mpls-te-cfg"`
	BandwidthAccounting	*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_BandwidthAccounting	`path:"bandwidth-accounting" module:"Cisco-IOS-XR-mpls-te-cfg"`
	BfdOverLsp	*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_BfdOverLsp	`path:"bfd-over-lsp" module:"Cisco-IOS-XR-mpls-te-cfg"`
	DisableReoptimizeAffinityFailure	YANGEmpty	`path:"disable-reoptimize-affinity-failure" module:"Cisco-IOS-XR-mpls-te-cfg"`
	EnableUnequalLoadBalancing	YANGEmpty	`path:"enable-unequal-load-balancing" module:"Cisco-IOS-XR-mpls-te-cfg"`
	FastReroute	*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_FastReroute	`path:"fast-reroute" module:"Cisco-IOS-XR-mpls-te-cfg"`
	FaultOam	YANGEmpty	`path:"fault-oam" module:"Cisco-IOS-XR-mpls-te-cfg"`
	GracefulPreemptionOnBandwidthReduction	YANGEmpty	`path:"graceful-preemption-on-bandwidth-reduction" module:"Cisco-IOS-XR-mpls-te-cfg"`
	HardwareOutOfResource	*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_HardwareOutOfResource	`path:"hardware-out-of-resource" module:"Cisco-IOS-XR-mpls-te-cfg"`
	LinkHolddownTimer	*uint32	`path:"link-holddown-timer" module:"Cisco-IOS-XR-mpls-te-cfg"`
	LogAll	YANGEmpty	`path:"log-all" module:"Cisco-IOS-XR-mpls-te-cfg"`
	LogFrrProtection	E_Cisco_IOS_XRMplsTeCfg_MplsTeLogFrrProtection	`path:"log-frr-protection" module:"Cisco-IOS-XR-mpls-te-cfg"`
	LogHead	YANGEmpty	`path:"log-head" module:"Cisco-IOS-XR-mpls-te-cfg"`
	LogIssuStatus	YANGEmpty	`path:"log-issu-status" module:"Cisco-IOS-XR-mpls-te-cfg"`
	LogMid	YANGEmpty	`path:"log-mid" module:"Cisco-IOS-XR-mpls-te-cfg"`
	LogNsrStatus	YANGEmpty	`path:"log-nsr-status" module:"Cisco-IOS-XR-mpls-te-cfg"`
	LogPreemption	YANGEmpty	`path:"log-preemption" module:"Cisco-IOS-XR-mpls-te-cfg"`
	LogTail	YANGEmpty	`path:"log-tail" module:"Cisco-IOS-XR-mpls-te-cfg"`
	LoosePathRetryPeriod	*uint32	`path:"loose-path-retry-period" module:"Cisco-IOS-XR-mpls-te-cfg"`
	LspOutOfResource	*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_LspOutOfResource	`path:"lsp-out-of-resource" module:"Cisco-IOS-XR-mpls-te-cfg"`
	MaximumTunnels	*uint32	`path:"maximum-tunnels" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Mib	*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_Mib	`path:"mib" module:"Cisco-IOS-XR-mpls-te-cfg"`
	PathRetryTimeout	*uint32	`path:"path-retry-timeout" module:"Cisco-IOS-XR-mpls-te-cfg"`
	PathSelection	*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PathSelection	`path:"path-selection" module:"Cisco-IOS-XR-mpls-te-cfg"`
	PathSelectionIgnoreOverload	YANGEmpty	`path:"path-selection-ignore-overload" module:"Cisco-IOS-XR-mpls-te-cfg"`
	PceAttributes	*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PceAttributes	`path:"pce-attributes" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Queues	*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_Queues	`path:"queues" module:"Cisco-IOS-XR-mpls-te-cfg"`
	ReoptDelayPathProtectSwitchoverTimer	*uint32	`path:"reopt-delay-path-protect-switchover-timer" module:"Cisco-IOS-XR-mpls-te-cfg"`
	ReoptimizeDelayAfterAffinityFailureTimer	*uint32	`path:"reoptimize-delay-after-affinity-failure-timer" module:"Cisco-IOS-XR-mpls-te-cfg"`
	ReoptimizeDelayAfterFrrTimer	*uint32	`path:"reoptimize-delay-after-frr-timer" module:"Cisco-IOS-XR-mpls-te-cfg"`
	ReoptimizeDelayCleanupTimer	*uint32	`path:"reoptimize-delay-cleanup-timer" module:"Cisco-IOS-XR-mpls-te-cfg"`
	ReoptimizeDelayInstallTimer	*uint32	`path:"reoptimize-delay-install-timer" module:"Cisco-IOS-XR-mpls-te-cfg"`
	ReoptimizeLinkUp	YANGEmpty	`path:"reoptimize-link-up" module:"Cisco-IOS-XR-mpls-te-cfg"`
	ReoptimizeLoadBalancing	YANGEmpty	`path:"reoptimize-load-balancing" module:"Cisco-IOS-XR-mpls-te-cfg"`
	ReoptimizeTimerFrequency	*uint32	`path:"reoptimize-timer-frequency" module:"Cisco-IOS-XR-mpls-te-cfg"`
	SecondaryRouterIds	*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_SecondaryRouterIds	`path:"secondary-router-ids" module:"Cisco-IOS-XR-mpls-te-cfg"`
	SoftPreemption	*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_SoftPreemption	`path:"soft-preemption" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Srlg	*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_Srlg	`path:"srlg" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AffinityMappings represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/affinity-mappings YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AffinityMappings struct {
	AffinityMapping	map[string]*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AffinityMappings_AffinityMapping	`path:"affinity-mapping" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AffinityMappings implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AffinityMappings) IsYANGGoStruct() {}

// NewAffinityMapping creates a new entry in the AffinityMapping list of the
// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AffinityMappings struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AffinityMappings) NewAffinityMapping(AffinityName string) (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AffinityMappings_AffinityMapping, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AffinityMapping == nil {
		t.AffinityMapping = make(map[string]*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AffinityMappings_AffinityMapping)
	}

	key := AffinityName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.AffinityMapping[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list AffinityMapping", key)
	}

	t.AffinityMapping[key] = &Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AffinityMappings_AffinityMapping{
		AffinityName: &AffinityName,
	}

	return t.AffinityMapping[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AffinityMappings) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AffinityMappings"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AffinityMappings) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AffinityMappings) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AffinityMappings.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AffinityMappings) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AffinityMappings_AffinityMapping represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/affinity-mappings/affinity-mapping YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AffinityMappings_AffinityMapping struct {
	AffinityName	*string	`path:"affinity-name" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Value	*string	`path:"value" module:"Cisco-IOS-XR-mpls-te-cfg"`
	ValueType	E_Cisco_IOS_XRMplsTeCfg_MplsTeAffinityValue	`path:"value-type" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AffinityMappings_AffinityMapping implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AffinityMappings_AffinityMapping) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AffinityMappings_AffinityMapping struct, which is a YANG list entry.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AffinityMappings_AffinityMapping) ΛListKeyMap() (map[string]interface{}, error) {
	if t.AffinityName == nil {
		return nil, fmt.Errorf("nil value for key AffinityName")
	}

	return map[string]interface{}{
		"affinity-name": *t.AffinityName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AffinityMappings_AffinityMapping) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AffinityMappings_AffinityMapping"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AffinityMappings_AffinityMapping) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AffinityMappings_AffinityMapping) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AffinityMappings_AffinityMapping.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AffinityMappings_AffinityMapping) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet struct {
	AutoBackupAttributes	*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes	`path:"auto-backup-attributes" module:"Cisco-IOS-XR-mpls-te-cfg"`
	AutoMeshAttributes	*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes	`path:"auto-mesh-attributes" module:"Cisco-IOS-XR-mpls-te-cfg"`
	OtnPpAttributes	*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes	`path:"otn-pp-attributes" module:"Cisco-IOS-XR-mpls-te-cfg"`
	P2MpteAttributes	*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes	`path:"p2mpte-attributes" module:"Cisco-IOS-XR-mpls-te-cfg"`
	P2PTeAttributes	*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes	`path:"p2p-te-attributes" module:"Cisco-IOS-XR-mpls-te-cfg"`
	PathOptionAttributes	*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes	`path:"path-option-attributes" module:"Cisco-IOS-XR-mpls-te-cfg"`
	UniPAttributes	*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_UniPAttributes	`path:"uni-p-attributes" module:"Cisco-IOS-XR-mpls-te-cfg"`
	XroAttributes	*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_XroAttributes	`path:"xro-attributes" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/auto-backup-attributes YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes struct {
	AutoBackupAttribute	map[string]*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute	`path:"auto-backup-attribute" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes) IsYANGGoStruct() {}

// NewAutoBackupAttribute creates a new entry in the AutoBackupAttribute list of the
// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes) NewAutoBackupAttribute(AttributeSetName string) (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AutoBackupAttribute == nil {
		t.AutoBackupAttribute = make(map[string]*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute)
	}

	key := AttributeSetName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.AutoBackupAttribute[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list AutoBackupAttribute", key)
	}

	t.AutoBackupAttribute[key] = &Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute{
		AttributeSetName: &AttributeSetName,
	}

	return t.AutoBackupAttribute[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/auto-backup-attributes/auto-backup-attribute YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute struct {
	AffinityMask	*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_AffinityMask	`path:"affinity-mask" module:"Cisco-IOS-XR-mpls-te-cfg"`
	AttributeSetName	*string	`path:"attribute-set-name" module:"Cisco-IOS-XR-mpls-te-cfg"`
	AutoBackupLogging	*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_AutoBackupLogging	`path:"auto-backup-logging" module:"Cisco-IOS-XR-mpls-te-cfg"`
	NewStyleAffinityAffinityTypes	*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes	`path:"new-style-affinity-affinity-types" module:"Cisco-IOS-XR-mpls-te-cfg"`
	PathSelection	*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_PathSelection	`path:"path-selection" module:"Cisco-IOS-XR-mpls-te-cfg"`
	PolicyClasses	*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_PolicyClasses	`path:"policy-classes" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Priority	*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_Priority	`path:"priority" module:"Cisco-IOS-XR-mpls-te-cfg"`
	RecordRoute	YANGEmpty	`path:"record-route" module:"Cisco-IOS-XR-mpls-te-cfg"`
	SignalledName	*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_SignalledName	`path:"signalled-name" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute struct, which is a YANG list entry.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute) ΛListKeyMap() (map[string]interface{}, error) {
	if t.AttributeSetName == nil {
		return nil, fmt.Errorf("nil value for key AttributeSetName")
	}

	return map[string]interface{}{
		"attribute-set-name": *t.AttributeSetName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_AffinityMask represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/auto-backup-attributes/auto-backup-attribute/affinity-mask YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_AffinityMask struct {
	Affinity	*string	`path:"affinity" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Mask	*string	`path:"mask" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_AffinityMask implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_AffinityMask) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_AffinityMask) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_AffinityMask"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_AffinityMask) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_AffinityMask) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_AffinityMask.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_AffinityMask) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_AutoBackupLogging represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/auto-backup-attributes/auto-backup-attribute/auto-backup-logging YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_AutoBackupLogging struct {
	BandwidthChangeMessage	YANGEmpty	`path:"bandwidth-change-message" module:"Cisco-IOS-XR-mpls-te-cfg"`
	ReoptimizeAttemptsMessage	YANGEmpty	`path:"reoptimize-attempts-message" module:"Cisco-IOS-XR-mpls-te-cfg"`
	ReoptimizedMessage	YANGEmpty	`path:"reoptimized-message" module:"Cisco-IOS-XR-mpls-te-cfg"`
	StateMessage	YANGEmpty	`path:"state-message" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_AutoBackupLogging implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_AutoBackupLogging) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_AutoBackupLogging) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_AutoBackupLogging"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_AutoBackupLogging) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_AutoBackupLogging) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_AutoBackupLogging.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_AutoBackupLogging) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/auto-backup-attributes/auto-backup-attribute/new-style-affinity-affinity-types YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes struct {
	NewStyleAffinityAffinityType	map[E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity]*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType	`path:"new-style-affinity-affinity-type" module:"Cisco-IOS-XR-mpls-te-cfg"`
	NewStyleAffinityAffinityTypeAffinity1	map[Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1_Key]*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1	`path:"new-style-affinity-affinity-type-affinity1" module:"Cisco-IOS-XR-mpls-te-cfg"`
	NewStyleAffinityAffinityTypeAffinity1Affinity2	map[Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2_Key]*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2	`path:"new-style-affinity-affinity-type-affinity1-affinity2" module:"Cisco-IOS-XR-mpls-te-cfg"`
	NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3	map[Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3_Key]*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3	`path:"new-style-affinity-affinity-type-affinity1-affinity2-affinity3" module:"Cisco-IOS-XR-mpls-te-cfg"`
	NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4	map[Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4_Key]*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4	`path:"new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4" module:"Cisco-IOS-XR-mpls-te-cfg"`
	NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5	map[Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5_Key]*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5	`path:"new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5" module:"Cisco-IOS-XR-mpls-te-cfg"`
	NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6	map[Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6_Key]*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6	`path:"new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6" module:"Cisco-IOS-XR-mpls-te-cfg"`
	NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7	map[Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7_Key]*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7	`path:"new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7" module:"Cisco-IOS-XR-mpls-te-cfg"`
	NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8	map[Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8_Key]*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8	`path:"new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8" module:"Cisco-IOS-XR-mpls-te-cfg"`
	NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9	map[Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9_Key]*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9	`path:"new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8-affinity9" module:"Cisco-IOS-XR-mpls-te-cfg"`
	NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10	map[Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10_Key]*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10	`path:"new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8-affinity9-affinity10" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes) IsYANGGoStruct() {}

// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1_Key represents the key for list NewStyleAffinityAffinityTypeAffinity1 of element /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/auto-backup-attributes/auto-backup-attribute/new-style-affinity-affinity-types.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1_Key struct {
	AffinityType	E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity	`path:"affinity-type"`
	Affinity1	string	`path:"affinity1"`
}

// IsYANGGoKeyStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1_Key) IsYANGGoKeyStruct() {}

// ΛListKeyMap returns the values of the Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1_Key key struct.
func (t Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"affinity-type": t.AffinityType,
		"affinity1": t.Affinity1,
	}, nil
}

// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2_Key represents the key for list NewStyleAffinityAffinityTypeAffinity1Affinity2 of element /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/auto-backup-attributes/auto-backup-attribute/new-style-affinity-affinity-types.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2_Key struct {
	AffinityType	E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity	`path:"affinity-type"`
	Affinity1	string	`path:"affinity1"`
	Affinity2	string	`path:"affinity2"`
}

// IsYANGGoKeyStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2_Key) IsYANGGoKeyStruct() {}

// ΛListKeyMap returns the values of the Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2_Key key struct.
func (t Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"affinity-type": t.AffinityType,
		"affinity1": t.Affinity1,
		"affinity2": t.Affinity2,
	}, nil
}

// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3_Key represents the key for list NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 of element /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/auto-backup-attributes/auto-backup-attribute/new-style-affinity-affinity-types.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3_Key struct {
	AffinityType	E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity	`path:"affinity-type"`
	Affinity1	string	`path:"affinity1"`
	Affinity2	string	`path:"affinity2"`
	Affinity3	string	`path:"affinity3"`
}

// IsYANGGoKeyStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3_Key) IsYANGGoKeyStruct() {}

// ΛListKeyMap returns the values of the Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3_Key key struct.
func (t Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"affinity-type": t.AffinityType,
		"affinity1": t.Affinity1,
		"affinity2": t.Affinity2,
		"affinity3": t.Affinity3,
	}, nil
}

// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4_Key represents the key for list NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 of element /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/auto-backup-attributes/auto-backup-attribute/new-style-affinity-affinity-types.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4_Key struct {
	AffinityType	E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity	`path:"affinity-type"`
	Affinity1	string	`path:"affinity1"`
	Affinity2	string	`path:"affinity2"`
	Affinity3	string	`path:"affinity3"`
	Affinity4	string	`path:"affinity4"`
}

// IsYANGGoKeyStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4_Key) IsYANGGoKeyStruct() {}

// ΛListKeyMap returns the values of the Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4_Key key struct.
func (t Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"affinity-type": t.AffinityType,
		"affinity1": t.Affinity1,
		"affinity2": t.Affinity2,
		"affinity3": t.Affinity3,
		"affinity4": t.Affinity4,
	}, nil
}

// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5_Key represents the key for list NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 of element /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/auto-backup-attributes/auto-backup-attribute/new-style-affinity-affinity-types.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5_Key struct {
	AffinityType	E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity	`path:"affinity-type"`
	Affinity1	string	`path:"affinity1"`
	Affinity2	string	`path:"affinity2"`
	Affinity3	string	`path:"affinity3"`
	Affinity4	string	`path:"affinity4"`
	Affinity5	string	`path:"affinity5"`
}

// IsYANGGoKeyStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5_Key) IsYANGGoKeyStruct() {}

// ΛListKeyMap returns the values of the Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5_Key key struct.
func (t Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"affinity-type": t.AffinityType,
		"affinity1": t.Affinity1,
		"affinity2": t.Affinity2,
		"affinity3": t.Affinity3,
		"affinity4": t.Affinity4,
		"affinity5": t.Affinity5,
	}, nil
}

// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6_Key represents the key for list NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 of element /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/auto-backup-attributes/auto-backup-attribute/new-style-affinity-affinity-types.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6_Key struct {
	AffinityType	E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity	`path:"affinity-type"`
	Affinity1	string	`path:"affinity1"`
	Affinity2	string	`path:"affinity2"`
	Affinity3	string	`path:"affinity3"`
	Affinity4	string	`path:"affinity4"`
	Affinity5	string	`path:"affinity5"`
	Affinity6	string	`path:"affinity6"`
}

// IsYANGGoKeyStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6_Key) IsYANGGoKeyStruct() {}

// ΛListKeyMap returns the values of the Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6_Key key struct.
func (t Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"affinity-type": t.AffinityType,
		"affinity1": t.Affinity1,
		"affinity2": t.Affinity2,
		"affinity3": t.Affinity3,
		"affinity4": t.Affinity4,
		"affinity5": t.Affinity5,
		"affinity6": t.Affinity6,
	}, nil
}

// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7_Key represents the key for list NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 of element /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/auto-backup-attributes/auto-backup-attribute/new-style-affinity-affinity-types.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7_Key struct {
	AffinityType	E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity	`path:"affinity-type"`
	Affinity1	string	`path:"affinity1"`
	Affinity2	string	`path:"affinity2"`
	Affinity3	string	`path:"affinity3"`
	Affinity4	string	`path:"affinity4"`
	Affinity5	string	`path:"affinity5"`
	Affinity6	string	`path:"affinity6"`
	Affinity7	string	`path:"affinity7"`
}

// IsYANGGoKeyStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7_Key) IsYANGGoKeyStruct() {}

// ΛListKeyMap returns the values of the Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7_Key key struct.
func (t Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"affinity-type": t.AffinityType,
		"affinity1": t.Affinity1,
		"affinity2": t.Affinity2,
		"affinity3": t.Affinity3,
		"affinity4": t.Affinity4,
		"affinity5": t.Affinity5,
		"affinity6": t.Affinity6,
		"affinity7": t.Affinity7,
	}, nil
}

// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8_Key represents the key for list NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 of element /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/auto-backup-attributes/auto-backup-attribute/new-style-affinity-affinity-types.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8_Key struct {
	AffinityType	E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity	`path:"affinity-type"`
	Affinity1	string	`path:"affinity1"`
	Affinity2	string	`path:"affinity2"`
	Affinity3	string	`path:"affinity3"`
	Affinity4	string	`path:"affinity4"`
	Affinity5	string	`path:"affinity5"`
	Affinity6	string	`path:"affinity6"`
	Affinity7	string	`path:"affinity7"`
	Affinity8	string	`path:"affinity8"`
}

// IsYANGGoKeyStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8_Key) IsYANGGoKeyStruct() {}

// ΛListKeyMap returns the values of the Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8_Key key struct.
func (t Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"affinity-type": t.AffinityType,
		"affinity1": t.Affinity1,
		"affinity2": t.Affinity2,
		"affinity3": t.Affinity3,
		"affinity4": t.Affinity4,
		"affinity5": t.Affinity5,
		"affinity6": t.Affinity6,
		"affinity7": t.Affinity7,
		"affinity8": t.Affinity8,
	}, nil
}

// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9_Key represents the key for list NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 of element /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/auto-backup-attributes/auto-backup-attribute/new-style-affinity-affinity-types.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9_Key struct {
	AffinityType	E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity	`path:"affinity-type"`
	Affinity1	string	`path:"affinity1"`
	Affinity2	string	`path:"affinity2"`
	Affinity3	string	`path:"affinity3"`
	Affinity4	string	`path:"affinity4"`
	Affinity5	string	`path:"affinity5"`
	Affinity6	string	`path:"affinity6"`
	Affinity7	string	`path:"affinity7"`
	Affinity8	string	`path:"affinity8"`
	Affinity9	string	`path:"affinity9"`
}

// IsYANGGoKeyStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9_Key) IsYANGGoKeyStruct() {}

// ΛListKeyMap returns the values of the Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9_Key key struct.
func (t Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"affinity-type": t.AffinityType,
		"affinity1": t.Affinity1,
		"affinity2": t.Affinity2,
		"affinity3": t.Affinity3,
		"affinity4": t.Affinity4,
		"affinity5": t.Affinity5,
		"affinity6": t.Affinity6,
		"affinity7": t.Affinity7,
		"affinity8": t.Affinity8,
		"affinity9": t.Affinity9,
	}, nil
}

// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10_Key represents the key for list NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 of element /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/auto-backup-attributes/auto-backup-attribute/new-style-affinity-affinity-types.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10_Key struct {
	AffinityType	E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity	`path:"affinity-type"`
	Affinity1	string	`path:"affinity1"`
	Affinity2	string	`path:"affinity2"`
	Affinity3	string	`path:"affinity3"`
	Affinity4	string	`path:"affinity4"`
	Affinity5	string	`path:"affinity5"`
	Affinity6	string	`path:"affinity6"`
	Affinity7	string	`path:"affinity7"`
	Affinity8	string	`path:"affinity8"`
	Affinity9	string	`path:"affinity9"`
	Affinity10	string	`path:"affinity10"`
}

// IsYANGGoKeyStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10_Key) IsYANGGoKeyStruct() {}

// ΛListKeyMap returns the values of the Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10_Key key struct.
func (t Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"affinity-type": t.AffinityType,
		"affinity1": t.Affinity1,
		"affinity2": t.Affinity2,
		"affinity3": t.Affinity3,
		"affinity4": t.Affinity4,
		"affinity5": t.Affinity5,
		"affinity6": t.Affinity6,
		"affinity7": t.Affinity7,
		"affinity8": t.Affinity8,
		"affinity9": t.Affinity9,
		"affinity10": t.Affinity10,
	}, nil
}

// NewNewStyleAffinityAffinityType creates a new entry in the NewStyleAffinityAffinityType list of the
// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes) NewNewStyleAffinityAffinityType(AffinityType E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity) (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NewStyleAffinityAffinityType == nil {
		t.NewStyleAffinityAffinityType = make(map[E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity]*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType)
	}

	key := AffinityType

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NewStyleAffinityAffinityType[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NewStyleAffinityAffinityType", key)
	}

	t.NewStyleAffinityAffinityType[key] = &Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType{
		AffinityType: AffinityType,
	}

	return t.NewStyleAffinityAffinityType[key], nil
}

// NewNewStyleAffinityAffinityTypeAffinity1 creates a new entry in the NewStyleAffinityAffinityTypeAffinity1 list of the
// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes) NewNewStyleAffinityAffinityTypeAffinity1(AffinityType E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity, Affinity1 string) (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NewStyleAffinityAffinityTypeAffinity1 == nil {
		t.NewStyleAffinityAffinityTypeAffinity1 = make(map[Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1_Key]*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1)
	}

	key := Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1_Key{
		AffinityType: AffinityType,
		Affinity1: Affinity1,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NewStyleAffinityAffinityTypeAffinity1[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NewStyleAffinityAffinityTypeAffinity1", key)
	}

	t.NewStyleAffinityAffinityTypeAffinity1[key] = &Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1{
		AffinityType: AffinityType,
		Affinity1: &Affinity1,
	}

	return t.NewStyleAffinityAffinityTypeAffinity1[key], nil
}

// NewNewStyleAffinityAffinityTypeAffinity1Affinity2 creates a new entry in the NewStyleAffinityAffinityTypeAffinity1Affinity2 list of the
// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes) NewNewStyleAffinityAffinityTypeAffinity1Affinity2(AffinityType E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity, Affinity1 string, Affinity2 string) (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NewStyleAffinityAffinityTypeAffinity1Affinity2 == nil {
		t.NewStyleAffinityAffinityTypeAffinity1Affinity2 = make(map[Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2_Key]*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2)
	}

	key := Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2_Key{
		AffinityType: AffinityType,
		Affinity1: Affinity1,
		Affinity2: Affinity2,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NewStyleAffinityAffinityTypeAffinity1Affinity2[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NewStyleAffinityAffinityTypeAffinity1Affinity2", key)
	}

	t.NewStyleAffinityAffinityTypeAffinity1Affinity2[key] = &Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2{
		AffinityType: AffinityType,
		Affinity1: &Affinity1,
		Affinity2: &Affinity2,
	}

	return t.NewStyleAffinityAffinityTypeAffinity1Affinity2[key], nil
}

// NewNewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 creates a new entry in the NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 list of the
// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes) NewNewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3(AffinityType E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity, Affinity1 string, Affinity2 string, Affinity3 string) (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 == nil {
		t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 = make(map[Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3_Key]*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3)
	}

	key := Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3_Key{
		AffinityType: AffinityType,
		Affinity1: Affinity1,
		Affinity2: Affinity2,
		Affinity3: Affinity3,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3", key)
	}

	t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3[key] = &Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3{
		AffinityType: AffinityType,
		Affinity1: &Affinity1,
		Affinity2: &Affinity2,
		Affinity3: &Affinity3,
	}

	return t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3[key], nil
}

// NewNewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 creates a new entry in the NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 list of the
// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes) NewNewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4(AffinityType E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity, Affinity1 string, Affinity2 string, Affinity3 string, Affinity4 string) (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 == nil {
		t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 = make(map[Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4_Key]*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4)
	}

	key := Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4_Key{
		AffinityType: AffinityType,
		Affinity1: Affinity1,
		Affinity2: Affinity2,
		Affinity3: Affinity3,
		Affinity4: Affinity4,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4", key)
	}

	t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4[key] = &Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4{
		AffinityType: AffinityType,
		Affinity1: &Affinity1,
		Affinity2: &Affinity2,
		Affinity3: &Affinity3,
		Affinity4: &Affinity4,
	}

	return t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4[key], nil
}

// NewNewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 creates a new entry in the NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 list of the
// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes) NewNewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5(AffinityType E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity, Affinity1 string, Affinity2 string, Affinity3 string, Affinity4 string, Affinity5 string) (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 == nil {
		t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 = make(map[Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5_Key]*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5)
	}

	key := Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5_Key{
		AffinityType: AffinityType,
		Affinity1: Affinity1,
		Affinity2: Affinity2,
		Affinity3: Affinity3,
		Affinity4: Affinity4,
		Affinity5: Affinity5,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5", key)
	}

	t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5[key] = &Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5{
		AffinityType: AffinityType,
		Affinity1: &Affinity1,
		Affinity2: &Affinity2,
		Affinity3: &Affinity3,
		Affinity4: &Affinity4,
		Affinity5: &Affinity5,
	}

	return t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5[key], nil
}

// NewNewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 creates a new entry in the NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 list of the
// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes) NewNewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6(AffinityType E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity, Affinity1 string, Affinity2 string, Affinity3 string, Affinity4 string, Affinity5 string, Affinity6 string) (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 == nil {
		t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 = make(map[Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6_Key]*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6)
	}

	key := Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6_Key{
		AffinityType: AffinityType,
		Affinity1: Affinity1,
		Affinity2: Affinity2,
		Affinity3: Affinity3,
		Affinity4: Affinity4,
		Affinity5: Affinity5,
		Affinity6: Affinity6,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6", key)
	}

	t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6[key] = &Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6{
		AffinityType: AffinityType,
		Affinity1: &Affinity1,
		Affinity2: &Affinity2,
		Affinity3: &Affinity3,
		Affinity4: &Affinity4,
		Affinity5: &Affinity5,
		Affinity6: &Affinity6,
	}

	return t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6[key], nil
}

// NewNewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 creates a new entry in the NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 list of the
// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes) NewNewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7(AffinityType E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity, Affinity1 string, Affinity2 string, Affinity3 string, Affinity4 string, Affinity5 string, Affinity6 string, Affinity7 string) (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 == nil {
		t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 = make(map[Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7_Key]*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7)
	}

	key := Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7_Key{
		AffinityType: AffinityType,
		Affinity1: Affinity1,
		Affinity2: Affinity2,
		Affinity3: Affinity3,
		Affinity4: Affinity4,
		Affinity5: Affinity5,
		Affinity6: Affinity6,
		Affinity7: Affinity7,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7", key)
	}

	t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7[key] = &Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7{
		AffinityType: AffinityType,
		Affinity1: &Affinity1,
		Affinity2: &Affinity2,
		Affinity3: &Affinity3,
		Affinity4: &Affinity4,
		Affinity5: &Affinity5,
		Affinity6: &Affinity6,
		Affinity7: &Affinity7,
	}

	return t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7[key], nil
}

// NewNewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 creates a new entry in the NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 list of the
// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes) NewNewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8(AffinityType E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity, Affinity1 string, Affinity2 string, Affinity3 string, Affinity4 string, Affinity5 string, Affinity6 string, Affinity7 string, Affinity8 string) (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 == nil {
		t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 = make(map[Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8_Key]*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8)
	}

	key := Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8_Key{
		AffinityType: AffinityType,
		Affinity1: Affinity1,
		Affinity2: Affinity2,
		Affinity3: Affinity3,
		Affinity4: Affinity4,
		Affinity5: Affinity5,
		Affinity6: Affinity6,
		Affinity7: Affinity7,
		Affinity8: Affinity8,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8", key)
	}

	t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8[key] = &Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8{
		AffinityType: AffinityType,
		Affinity1: &Affinity1,
		Affinity2: &Affinity2,
		Affinity3: &Affinity3,
		Affinity4: &Affinity4,
		Affinity5: &Affinity5,
		Affinity6: &Affinity6,
		Affinity7: &Affinity7,
		Affinity8: &Affinity8,
	}

	return t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8[key], nil
}

// NewNewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 creates a new entry in the NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 list of the
// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes) NewNewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9(AffinityType E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity, Affinity1 string, Affinity2 string, Affinity3 string, Affinity4 string, Affinity5 string, Affinity6 string, Affinity7 string, Affinity8 string, Affinity9 string) (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 == nil {
		t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 = make(map[Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9_Key]*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9)
	}

	key := Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9_Key{
		AffinityType: AffinityType,
		Affinity1: Affinity1,
		Affinity2: Affinity2,
		Affinity3: Affinity3,
		Affinity4: Affinity4,
		Affinity5: Affinity5,
		Affinity6: Affinity6,
		Affinity7: Affinity7,
		Affinity8: Affinity8,
		Affinity9: Affinity9,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9", key)
	}

	t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9[key] = &Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9{
		AffinityType: AffinityType,
		Affinity1: &Affinity1,
		Affinity2: &Affinity2,
		Affinity3: &Affinity3,
		Affinity4: &Affinity4,
		Affinity5: &Affinity5,
		Affinity6: &Affinity6,
		Affinity7: &Affinity7,
		Affinity8: &Affinity8,
		Affinity9: &Affinity9,
	}

	return t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9[key], nil
}

// NewNewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 creates a new entry in the NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 list of the
// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes) NewNewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10(AffinityType E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity, Affinity1 string, Affinity2 string, Affinity3 string, Affinity4 string, Affinity5 string, Affinity6 string, Affinity7 string, Affinity8 string, Affinity9 string, Affinity10 string) (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 == nil {
		t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 = make(map[Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10_Key]*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10)
	}

	key := Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10_Key{
		AffinityType: AffinityType,
		Affinity1: Affinity1,
		Affinity2: Affinity2,
		Affinity3: Affinity3,
		Affinity4: Affinity4,
		Affinity5: Affinity5,
		Affinity6: Affinity6,
		Affinity7: Affinity7,
		Affinity8: Affinity8,
		Affinity9: Affinity9,
		Affinity10: Affinity10,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10", key)
	}

	t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10[key] = &Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10{
		AffinityType: AffinityType,
		Affinity1: &Affinity1,
		Affinity2: &Affinity2,
		Affinity3: &Affinity3,
		Affinity4: &Affinity4,
		Affinity5: &Affinity5,
		Affinity6: &Affinity6,
		Affinity7: &Affinity7,
		Affinity8: &Affinity8,
		Affinity9: &Affinity9,
		Affinity10: &Affinity10,
	}

	return t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/auto-backup-attributes/auto-backup-attribute/new-style-affinity-affinity-types/new-style-affinity-affinity-type YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType struct {
	AffinityType	E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity	`path:"affinity-type" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType struct, which is a YANG list entry.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"affinity-type": t.AffinityType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1 represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/auto-backup-attributes/auto-backup-attribute/new-style-affinity-affinity-types/new-style-affinity-affinity-type-affinity1 YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1 struct {
	AffinityType	E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity	`path:"affinity-type" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity1	*string	`path:"affinity1" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1 struct, which is a YANG list entry.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1) ΛListKeyMap() (map[string]interface{}, error) {

	if t.Affinity1 == nil {
		return nil, fmt.Errorf("nil value for key Affinity1")
	}

	return map[string]interface{}{
		"affinity-type": t.AffinityType,
		"affinity1": *t.Affinity1,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2 represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/auto-backup-attributes/auto-backup-attribute/new-style-affinity-affinity-types/new-style-affinity-affinity-type-affinity1-affinity2 YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2 struct {
	AffinityType	E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity	`path:"affinity-type" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity1	*string	`path:"affinity1" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity2	*string	`path:"affinity2" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2 struct, which is a YANG list entry.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2) ΛListKeyMap() (map[string]interface{}, error) {

	if t.Affinity1 == nil {
		return nil, fmt.Errorf("nil value for key Affinity1")
	}

	if t.Affinity2 == nil {
		return nil, fmt.Errorf("nil value for key Affinity2")
	}

	return map[string]interface{}{
		"affinity-type": t.AffinityType,
		"affinity1": *t.Affinity1,
		"affinity2": *t.Affinity2,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/auto-backup-attributes/auto-backup-attribute/new-style-affinity-affinity-types/new-style-affinity-affinity-type-affinity1-affinity2-affinity3 YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 struct {
	AffinityType	E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity	`path:"affinity-type" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity1	*string	`path:"affinity1" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity2	*string	`path:"affinity2" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity3	*string	`path:"affinity3" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 struct, which is a YANG list entry.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3) ΛListKeyMap() (map[string]interface{}, error) {

	if t.Affinity1 == nil {
		return nil, fmt.Errorf("nil value for key Affinity1")
	}

	if t.Affinity2 == nil {
		return nil, fmt.Errorf("nil value for key Affinity2")
	}

	if t.Affinity3 == nil {
		return nil, fmt.Errorf("nil value for key Affinity3")
	}

	return map[string]interface{}{
		"affinity-type": t.AffinityType,
		"affinity1": *t.Affinity1,
		"affinity2": *t.Affinity2,
		"affinity3": *t.Affinity3,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/auto-backup-attributes/auto-backup-attribute/new-style-affinity-affinity-types/new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4 YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 struct {
	AffinityType	E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity	`path:"affinity-type" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity1	*string	`path:"affinity1" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity2	*string	`path:"affinity2" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity3	*string	`path:"affinity3" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity4	*string	`path:"affinity4" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 struct, which is a YANG list entry.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4) ΛListKeyMap() (map[string]interface{}, error) {

	if t.Affinity1 == nil {
		return nil, fmt.Errorf("nil value for key Affinity1")
	}

	if t.Affinity2 == nil {
		return nil, fmt.Errorf("nil value for key Affinity2")
	}

	if t.Affinity3 == nil {
		return nil, fmt.Errorf("nil value for key Affinity3")
	}

	if t.Affinity4 == nil {
		return nil, fmt.Errorf("nil value for key Affinity4")
	}

	return map[string]interface{}{
		"affinity-type": t.AffinityType,
		"affinity1": *t.Affinity1,
		"affinity2": *t.Affinity2,
		"affinity3": *t.Affinity3,
		"affinity4": *t.Affinity4,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/auto-backup-attributes/auto-backup-attribute/new-style-affinity-affinity-types/new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5 YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 struct {
	AffinityType	E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity	`path:"affinity-type" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity1	*string	`path:"affinity1" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity2	*string	`path:"affinity2" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity3	*string	`path:"affinity3" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity4	*string	`path:"affinity4" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity5	*string	`path:"affinity5" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 struct, which is a YANG list entry.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5) ΛListKeyMap() (map[string]interface{}, error) {

	if t.Affinity1 == nil {
		return nil, fmt.Errorf("nil value for key Affinity1")
	}

	if t.Affinity2 == nil {
		return nil, fmt.Errorf("nil value for key Affinity2")
	}

	if t.Affinity3 == nil {
		return nil, fmt.Errorf("nil value for key Affinity3")
	}

	if t.Affinity4 == nil {
		return nil, fmt.Errorf("nil value for key Affinity4")
	}

	if t.Affinity5 == nil {
		return nil, fmt.Errorf("nil value for key Affinity5")
	}

	return map[string]interface{}{
		"affinity-type": t.AffinityType,
		"affinity1": *t.Affinity1,
		"affinity2": *t.Affinity2,
		"affinity3": *t.Affinity3,
		"affinity4": *t.Affinity4,
		"affinity5": *t.Affinity5,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/auto-backup-attributes/auto-backup-attribute/new-style-affinity-affinity-types/new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6 YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 struct {
	AffinityType	E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity	`path:"affinity-type" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity1	*string	`path:"affinity1" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity2	*string	`path:"affinity2" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity3	*string	`path:"affinity3" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity4	*string	`path:"affinity4" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity5	*string	`path:"affinity5" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity6	*string	`path:"affinity6" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 struct, which is a YANG list entry.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6) ΛListKeyMap() (map[string]interface{}, error) {

	if t.Affinity1 == nil {
		return nil, fmt.Errorf("nil value for key Affinity1")
	}

	if t.Affinity2 == nil {
		return nil, fmt.Errorf("nil value for key Affinity2")
	}

	if t.Affinity3 == nil {
		return nil, fmt.Errorf("nil value for key Affinity3")
	}

	if t.Affinity4 == nil {
		return nil, fmt.Errorf("nil value for key Affinity4")
	}

	if t.Affinity5 == nil {
		return nil, fmt.Errorf("nil value for key Affinity5")
	}

	if t.Affinity6 == nil {
		return nil, fmt.Errorf("nil value for key Affinity6")
	}

	return map[string]interface{}{
		"affinity-type": t.AffinityType,
		"affinity1": *t.Affinity1,
		"affinity2": *t.Affinity2,
		"affinity3": *t.Affinity3,
		"affinity4": *t.Affinity4,
		"affinity5": *t.Affinity5,
		"affinity6": *t.Affinity6,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/auto-backup-attributes/auto-backup-attribute/new-style-affinity-affinity-types/new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7 YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 struct {
	AffinityType	E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity	`path:"affinity-type" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity1	*string	`path:"affinity1" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity2	*string	`path:"affinity2" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity3	*string	`path:"affinity3" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity4	*string	`path:"affinity4" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity5	*string	`path:"affinity5" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity6	*string	`path:"affinity6" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity7	*string	`path:"affinity7" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 struct, which is a YANG list entry.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7) ΛListKeyMap() (map[string]interface{}, error) {

	if t.Affinity1 == nil {
		return nil, fmt.Errorf("nil value for key Affinity1")
	}

	if t.Affinity2 == nil {
		return nil, fmt.Errorf("nil value for key Affinity2")
	}

	if t.Affinity3 == nil {
		return nil, fmt.Errorf("nil value for key Affinity3")
	}

	if t.Affinity4 == nil {
		return nil, fmt.Errorf("nil value for key Affinity4")
	}

	if t.Affinity5 == nil {
		return nil, fmt.Errorf("nil value for key Affinity5")
	}

	if t.Affinity6 == nil {
		return nil, fmt.Errorf("nil value for key Affinity6")
	}

	if t.Affinity7 == nil {
		return nil, fmt.Errorf("nil value for key Affinity7")
	}

	return map[string]interface{}{
		"affinity-type": t.AffinityType,
		"affinity1": *t.Affinity1,
		"affinity2": *t.Affinity2,
		"affinity3": *t.Affinity3,
		"affinity4": *t.Affinity4,
		"affinity5": *t.Affinity5,
		"affinity6": *t.Affinity6,
		"affinity7": *t.Affinity7,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/auto-backup-attributes/auto-backup-attribute/new-style-affinity-affinity-types/new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8 YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 struct {
	AffinityType	E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity	`path:"affinity-type" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity1	*string	`path:"affinity1" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity2	*string	`path:"affinity2" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity3	*string	`path:"affinity3" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity4	*string	`path:"affinity4" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity5	*string	`path:"affinity5" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity6	*string	`path:"affinity6" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity7	*string	`path:"affinity7" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity8	*string	`path:"affinity8" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 struct, which is a YANG list entry.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8) ΛListKeyMap() (map[string]interface{}, error) {

	if t.Affinity1 == nil {
		return nil, fmt.Errorf("nil value for key Affinity1")
	}

	if t.Affinity2 == nil {
		return nil, fmt.Errorf("nil value for key Affinity2")
	}

	if t.Affinity3 == nil {
		return nil, fmt.Errorf("nil value for key Affinity3")
	}

	if t.Affinity4 == nil {
		return nil, fmt.Errorf("nil value for key Affinity4")
	}

	if t.Affinity5 == nil {
		return nil, fmt.Errorf("nil value for key Affinity5")
	}

	if t.Affinity6 == nil {
		return nil, fmt.Errorf("nil value for key Affinity6")
	}

	if t.Affinity7 == nil {
		return nil, fmt.Errorf("nil value for key Affinity7")
	}

	if t.Affinity8 == nil {
		return nil, fmt.Errorf("nil value for key Affinity8")
	}

	return map[string]interface{}{
		"affinity-type": t.AffinityType,
		"affinity1": *t.Affinity1,
		"affinity2": *t.Affinity2,
		"affinity3": *t.Affinity3,
		"affinity4": *t.Affinity4,
		"affinity5": *t.Affinity5,
		"affinity6": *t.Affinity6,
		"affinity7": *t.Affinity7,
		"affinity8": *t.Affinity8,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/auto-backup-attributes/auto-backup-attribute/new-style-affinity-affinity-types/new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8-affinity9 YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 struct {
	AffinityType	E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity	`path:"affinity-type" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity1	*string	`path:"affinity1" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity2	*string	`path:"affinity2" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity3	*string	`path:"affinity3" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity4	*string	`path:"affinity4" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity5	*string	`path:"affinity5" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity6	*string	`path:"affinity6" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity7	*string	`path:"affinity7" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity8	*string	`path:"affinity8" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity9	*string	`path:"affinity9" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 struct, which is a YANG list entry.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9) ΛListKeyMap() (map[string]interface{}, error) {

	if t.Affinity1 == nil {
		return nil, fmt.Errorf("nil value for key Affinity1")
	}

	if t.Affinity2 == nil {
		return nil, fmt.Errorf("nil value for key Affinity2")
	}

	if t.Affinity3 == nil {
		return nil, fmt.Errorf("nil value for key Affinity3")
	}

	if t.Affinity4 == nil {
		return nil, fmt.Errorf("nil value for key Affinity4")
	}

	if t.Affinity5 == nil {
		return nil, fmt.Errorf("nil value for key Affinity5")
	}

	if t.Affinity6 == nil {
		return nil, fmt.Errorf("nil value for key Affinity6")
	}

	if t.Affinity7 == nil {
		return nil, fmt.Errorf("nil value for key Affinity7")
	}

	if t.Affinity8 == nil {
		return nil, fmt.Errorf("nil value for key Affinity8")
	}

	if t.Affinity9 == nil {
		return nil, fmt.Errorf("nil value for key Affinity9")
	}

	return map[string]interface{}{
		"affinity-type": t.AffinityType,
		"affinity1": *t.Affinity1,
		"affinity2": *t.Affinity2,
		"affinity3": *t.Affinity3,
		"affinity4": *t.Affinity4,
		"affinity5": *t.Affinity5,
		"affinity6": *t.Affinity6,
		"affinity7": *t.Affinity7,
		"affinity8": *t.Affinity8,
		"affinity9": *t.Affinity9,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/auto-backup-attributes/auto-backup-attribute/new-style-affinity-affinity-types/new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8-affinity9-affinity10 YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 struct {
	AffinityType	E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity	`path:"affinity-type" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity1	*string	`path:"affinity1" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity10	*string	`path:"affinity10" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity2	*string	`path:"affinity2" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity3	*string	`path:"affinity3" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity4	*string	`path:"affinity4" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity5	*string	`path:"affinity5" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity6	*string	`path:"affinity6" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity7	*string	`path:"affinity7" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity8	*string	`path:"affinity8" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity9	*string	`path:"affinity9" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 struct, which is a YANG list entry.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10) ΛListKeyMap() (map[string]interface{}, error) {

	if t.Affinity1 == nil {
		return nil, fmt.Errorf("nil value for key Affinity1")
	}

	if t.Affinity10 == nil {
		return nil, fmt.Errorf("nil value for key Affinity10")
	}

	if t.Affinity2 == nil {
		return nil, fmt.Errorf("nil value for key Affinity2")
	}

	if t.Affinity3 == nil {
		return nil, fmt.Errorf("nil value for key Affinity3")
	}

	if t.Affinity4 == nil {
		return nil, fmt.Errorf("nil value for key Affinity4")
	}

	if t.Affinity5 == nil {
		return nil, fmt.Errorf("nil value for key Affinity5")
	}

	if t.Affinity6 == nil {
		return nil, fmt.Errorf("nil value for key Affinity6")
	}

	if t.Affinity7 == nil {
		return nil, fmt.Errorf("nil value for key Affinity7")
	}

	if t.Affinity8 == nil {
		return nil, fmt.Errorf("nil value for key Affinity8")
	}

	if t.Affinity9 == nil {
		return nil, fmt.Errorf("nil value for key Affinity9")
	}

	return map[string]interface{}{
		"affinity-type": t.AffinityType,
		"affinity1": *t.Affinity1,
		"affinity10": *t.Affinity10,
		"affinity2": *t.Affinity2,
		"affinity3": *t.Affinity3,
		"affinity4": *t.Affinity4,
		"affinity5": *t.Affinity5,
		"affinity6": *t.Affinity6,
		"affinity7": *t.Affinity7,
		"affinity8": *t.Affinity8,
		"affinity9": *t.Affinity9,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_PathSelection represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/auto-backup-attributes/auto-backup-attribute/path-selection YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_PathSelection struct {
	Enable	YANGEmpty	`path:"enable" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_PathSelection implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_PathSelection) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_PathSelection) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_PathSelection"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_PathSelection) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_PathSelection) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_PathSelection.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_PathSelection) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_PolicyClasses represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/auto-backup-attributes/auto-backup-attribute/policy-classes YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_PolicyClasses struct {
	PolicyClass	[]uint32	`path:"policy-class" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_PolicyClasses implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_PolicyClasses) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_PolicyClasses) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_PolicyClasses"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_PolicyClasses) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_PolicyClasses) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_PolicyClasses.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_PolicyClasses) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_Priority represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/auto-backup-attributes/auto-backup-attribute/priority YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_Priority struct {
	HoldPriority	*uint32	`path:"hold-priority" module:"Cisco-IOS-XR-mpls-te-cfg"`
	SetupPriority	*uint32	`path:"setup-priority" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_Priority implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_Priority) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_Priority) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_Priority"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_Priority) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_Priority) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_Priority.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_Priority) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_SignalledName represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/auto-backup-attributes/auto-backup-attribute/signalled-name YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_SignalledName struct {
	MpAddress	*bool	`path:"mp-address" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Name	*string	`path:"name" module:"Cisco-IOS-XR-mpls-te-cfg"`
	ProtectedInterfaceType	E_Cisco_IOS_XRMplsTeCfg_MplsTeSigNameOption	`path:"protected-interface-type" module:"Cisco-IOS-XR-mpls-te-cfg"`
	SourceType	E_Cisco_IOS_XRMplsTeCfg_MplsTeSigNameOption	`path:"source-type" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_SignalledName implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_SignalledName) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_SignalledName) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_SignalledName"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_SignalledName) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_SignalledName) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_SignalledName.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_SignalledName) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/auto-mesh-attributes YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes struct {
	AutoMeshAttribute	map[string]*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute	`path:"auto-mesh-attribute" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes) IsYANGGoStruct() {}

// NewAutoMeshAttribute creates a new entry in the AutoMeshAttribute list of the
// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes) NewAutoMeshAttribute(AttributeSetName string) (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AutoMeshAttribute == nil {
		t.AutoMeshAttribute = make(map[string]*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute)
	}

	key := AttributeSetName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.AutoMeshAttribute[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list AutoMeshAttribute", key)
	}

	t.AutoMeshAttribute[key] = &Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute{
		AttributeSetName: &AttributeSetName,
	}

	return t.AutoMeshAttribute[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/auto-mesh-attributes/auto-mesh-attribute YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute struct {
	AffinityMask	*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_AffinityMask	`path:"affinity-mask" module:"Cisco-IOS-XR-mpls-te-cfg"`
	AttributeSetName	*string	`path:"attribute-set-name" module:"Cisco-IOS-XR-mpls-te-cfg"`
	AutoMeshLogging	*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_AutoMeshLogging	`path:"auto-mesh-logging" module:"Cisco-IOS-XR-mpls-te-cfg"`
	AutorouteAnnounce	YANGEmpty	`path:"autoroute-announce" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Bandwidth	*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_Bandwidth	`path:"bandwidth" module:"Cisco-IOS-XR-mpls-te-cfg"`
	CollectionOnly	YANGEmpty	`path:"collection-only" module:"Cisco-IOS-XR-mpls-te-cfg"`
	FastReroute	*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_FastReroute	`path:"fast-reroute" module:"Cisco-IOS-XR-mpls-te-cfg"`
	ForwardClass	*uint32	`path:"forward-class" module:"Cisco-IOS-XR-mpls-te-cfg"`
	InterfaceBandwidth	*uint32	`path:"interface-bandwidth" module:"Cisco-IOS-XR-mpls-te-cfg"`
	LoadShare	*uint32	`path:"load-share" module:"Cisco-IOS-XR-mpls-te-cfg"`
	NewStyleAffinityAffinityTypes	*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes	`path:"new-style-affinity-affinity-types" module:"Cisco-IOS-XR-mpls-te-cfg"`
	PathSelection	*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_PathSelection	`path:"path-selection" module:"Cisco-IOS-XR-mpls-te-cfg"`
	PolicyClasses	*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_PolicyClasses	`path:"policy-classes" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Priority	*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_Priority	`path:"priority" module:"Cisco-IOS-XR-mpls-te-cfg"`
	RecordRoute	YANGEmpty	`path:"record-route" module:"Cisco-IOS-XR-mpls-te-cfg"`
	SoftPreemption	YANGEmpty	`path:"soft-preemption" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute struct, which is a YANG list entry.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute) ΛListKeyMap() (map[string]interface{}, error) {
	if t.AttributeSetName == nil {
		return nil, fmt.Errorf("nil value for key AttributeSetName")
	}

	return map[string]interface{}{
		"attribute-set-name": *t.AttributeSetName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_AffinityMask represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/auto-mesh-attributes/auto-mesh-attribute/affinity-mask YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_AffinityMask struct {
	Affinity	*string	`path:"affinity" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Mask	*string	`path:"mask" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_AffinityMask implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_AffinityMask) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_AffinityMask) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_AffinityMask"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_AffinityMask) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_AffinityMask) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_AffinityMask.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_AffinityMask) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_AutoMeshLogging represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/auto-mesh-attributes/auto-mesh-attribute/auto-mesh-logging YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_AutoMeshLogging struct {
	BandwidthChangeMessage	YANGEmpty	`path:"bandwidth-change-message" module:"Cisco-IOS-XR-mpls-te-cfg"`
	InsufficientBwMessage	YANGEmpty	`path:"insufficient-bw-message" module:"Cisco-IOS-XR-mpls-te-cfg"`
	PathErrorMessage	YANGEmpty	`path:"path-error-message" module:"Cisco-IOS-XR-mpls-te-cfg"`
	PcalcFailureMessage	YANGEmpty	`path:"pcalc-failure-message" module:"Cisco-IOS-XR-mpls-te-cfg"`
	ReoptimizeAttemptsMessage	YANGEmpty	`path:"reoptimize-attempts-message" module:"Cisco-IOS-XR-mpls-te-cfg"`
	ReoptimizedMessage	YANGEmpty	`path:"reoptimized-message" module:"Cisco-IOS-XR-mpls-te-cfg"`
	RerouteMesssage	YANGEmpty	`path:"reroute-messsage" module:"Cisco-IOS-XR-mpls-te-cfg"`
	StateMessage	YANGEmpty	`path:"state-message" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_AutoMeshLogging implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_AutoMeshLogging) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_AutoMeshLogging) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_AutoMeshLogging"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_AutoMeshLogging) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_AutoMeshLogging) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_AutoMeshLogging.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_AutoMeshLogging) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_Bandwidth represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/auto-mesh-attributes/auto-mesh-attribute/bandwidth YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_Bandwidth struct {
	Bandwidth	*uint32	`path:"bandwidth" module:"Cisco-IOS-XR-mpls-te-cfg"`
	ClassOrPoolType	*uint32	`path:"class-or-pool-type" module:"Cisco-IOS-XR-mpls-te-cfg"`
	DsteType	E_Cisco_IOS_XRMplsTeCfg_MplsTeBandwidthDste	`path:"dste-type" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_Bandwidth implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_Bandwidth) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_Bandwidth) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_Bandwidth"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_Bandwidth) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_Bandwidth) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_Bandwidth.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_Bandwidth) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_FastReroute represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/auto-mesh-attributes/auto-mesh-attribute/fast-reroute YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_FastReroute struct {
	BandwidthProtection	*uint32	`path:"bandwidth-protection" module:"Cisco-IOS-XR-mpls-te-cfg"`
	NodeProtection	*uint32	`path:"node-protection" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_FastReroute implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_FastReroute) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_FastReroute) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_FastReroute"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_FastReroute) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_FastReroute) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_FastReroute.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_FastReroute) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/auto-mesh-attributes/auto-mesh-attribute/new-style-affinity-affinity-types YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes struct {
	NewStyleAffinityAffinityType	map[E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity]*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType	`path:"new-style-affinity-affinity-type" module:"Cisco-IOS-XR-mpls-te-cfg"`
	NewStyleAffinityAffinityTypeAffinity1	map[Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1_Key]*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1	`path:"new-style-affinity-affinity-type-affinity1" module:"Cisco-IOS-XR-mpls-te-cfg"`
	NewStyleAffinityAffinityTypeAffinity1Affinity2	map[Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2_Key]*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2	`path:"new-style-affinity-affinity-type-affinity1-affinity2" module:"Cisco-IOS-XR-mpls-te-cfg"`
	NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3	map[Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3_Key]*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3	`path:"new-style-affinity-affinity-type-affinity1-affinity2-affinity3" module:"Cisco-IOS-XR-mpls-te-cfg"`
	NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4	map[Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4_Key]*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4	`path:"new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4" module:"Cisco-IOS-XR-mpls-te-cfg"`
	NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5	map[Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5_Key]*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5	`path:"new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5" module:"Cisco-IOS-XR-mpls-te-cfg"`
	NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6	map[Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6_Key]*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6	`path:"new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6" module:"Cisco-IOS-XR-mpls-te-cfg"`
	NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7	map[Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7_Key]*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7	`path:"new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7" module:"Cisco-IOS-XR-mpls-te-cfg"`
	NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8	map[Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8_Key]*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8	`path:"new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8" module:"Cisco-IOS-XR-mpls-te-cfg"`
	NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9	map[Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9_Key]*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9	`path:"new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8-affinity9" module:"Cisco-IOS-XR-mpls-te-cfg"`
	NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10	map[Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10_Key]*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10	`path:"new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8-affinity9-affinity10" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes) IsYANGGoStruct() {}

// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1_Key represents the key for list NewStyleAffinityAffinityTypeAffinity1 of element /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/auto-mesh-attributes/auto-mesh-attribute/new-style-affinity-affinity-types.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1_Key struct {
	AffinityType	E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity	`path:"affinity-type"`
	Affinity1	string	`path:"affinity1"`
}

// IsYANGGoKeyStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1_Key) IsYANGGoKeyStruct() {}

// ΛListKeyMap returns the values of the Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1_Key key struct.
func (t Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"affinity-type": t.AffinityType,
		"affinity1": t.Affinity1,
	}, nil
}

// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2_Key represents the key for list NewStyleAffinityAffinityTypeAffinity1Affinity2 of element /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/auto-mesh-attributes/auto-mesh-attribute/new-style-affinity-affinity-types.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2_Key struct {
	AffinityType	E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity	`path:"affinity-type"`
	Affinity1	string	`path:"affinity1"`
	Affinity2	string	`path:"affinity2"`
}

// IsYANGGoKeyStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2_Key) IsYANGGoKeyStruct() {}

// ΛListKeyMap returns the values of the Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2_Key key struct.
func (t Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"affinity-type": t.AffinityType,
		"affinity1": t.Affinity1,
		"affinity2": t.Affinity2,
	}, nil
}

// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3_Key represents the key for list NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 of element /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/auto-mesh-attributes/auto-mesh-attribute/new-style-affinity-affinity-types.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3_Key struct {
	AffinityType	E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity	`path:"affinity-type"`
	Affinity1	string	`path:"affinity1"`
	Affinity2	string	`path:"affinity2"`
	Affinity3	string	`path:"affinity3"`
}

// IsYANGGoKeyStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3_Key) IsYANGGoKeyStruct() {}

// ΛListKeyMap returns the values of the Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3_Key key struct.
func (t Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"affinity-type": t.AffinityType,
		"affinity1": t.Affinity1,
		"affinity2": t.Affinity2,
		"affinity3": t.Affinity3,
	}, nil
}

// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4_Key represents the key for list NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 of element /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/auto-mesh-attributes/auto-mesh-attribute/new-style-affinity-affinity-types.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4_Key struct {
	AffinityType	E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity	`path:"affinity-type"`
	Affinity1	string	`path:"affinity1"`
	Affinity2	string	`path:"affinity2"`
	Affinity3	string	`path:"affinity3"`
	Affinity4	string	`path:"affinity4"`
}

// IsYANGGoKeyStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4_Key) IsYANGGoKeyStruct() {}

// ΛListKeyMap returns the values of the Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4_Key key struct.
func (t Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"affinity-type": t.AffinityType,
		"affinity1": t.Affinity1,
		"affinity2": t.Affinity2,
		"affinity3": t.Affinity3,
		"affinity4": t.Affinity4,
	}, nil
}

// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5_Key represents the key for list NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 of element /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/auto-mesh-attributes/auto-mesh-attribute/new-style-affinity-affinity-types.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5_Key struct {
	AffinityType	E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity	`path:"affinity-type"`
	Affinity1	string	`path:"affinity1"`
	Affinity2	string	`path:"affinity2"`
	Affinity3	string	`path:"affinity3"`
	Affinity4	string	`path:"affinity4"`
	Affinity5	string	`path:"affinity5"`
}

// IsYANGGoKeyStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5_Key) IsYANGGoKeyStruct() {}

// ΛListKeyMap returns the values of the Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5_Key key struct.
func (t Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"affinity-type": t.AffinityType,
		"affinity1": t.Affinity1,
		"affinity2": t.Affinity2,
		"affinity3": t.Affinity3,
		"affinity4": t.Affinity4,
		"affinity5": t.Affinity5,
	}, nil
}

// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6_Key represents the key for list NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 of element /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/auto-mesh-attributes/auto-mesh-attribute/new-style-affinity-affinity-types.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6_Key struct {
	AffinityType	E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity	`path:"affinity-type"`
	Affinity1	string	`path:"affinity1"`
	Affinity2	string	`path:"affinity2"`
	Affinity3	string	`path:"affinity3"`
	Affinity4	string	`path:"affinity4"`
	Affinity5	string	`path:"affinity5"`
	Affinity6	string	`path:"affinity6"`
}

// IsYANGGoKeyStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6_Key) IsYANGGoKeyStruct() {}

// ΛListKeyMap returns the values of the Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6_Key key struct.
func (t Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"affinity-type": t.AffinityType,
		"affinity1": t.Affinity1,
		"affinity2": t.Affinity2,
		"affinity3": t.Affinity3,
		"affinity4": t.Affinity4,
		"affinity5": t.Affinity5,
		"affinity6": t.Affinity6,
	}, nil
}

// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7_Key represents the key for list NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 of element /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/auto-mesh-attributes/auto-mesh-attribute/new-style-affinity-affinity-types.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7_Key struct {
	AffinityType	E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity	`path:"affinity-type"`
	Affinity1	string	`path:"affinity1"`
	Affinity2	string	`path:"affinity2"`
	Affinity3	string	`path:"affinity3"`
	Affinity4	string	`path:"affinity4"`
	Affinity5	string	`path:"affinity5"`
	Affinity6	string	`path:"affinity6"`
	Affinity7	string	`path:"affinity7"`
}

// IsYANGGoKeyStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7_Key) IsYANGGoKeyStruct() {}

// ΛListKeyMap returns the values of the Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7_Key key struct.
func (t Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"affinity-type": t.AffinityType,
		"affinity1": t.Affinity1,
		"affinity2": t.Affinity2,
		"affinity3": t.Affinity3,
		"affinity4": t.Affinity4,
		"affinity5": t.Affinity5,
		"affinity6": t.Affinity6,
		"affinity7": t.Affinity7,
	}, nil
}

// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8_Key represents the key for list NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 of element /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/auto-mesh-attributes/auto-mesh-attribute/new-style-affinity-affinity-types.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8_Key struct {
	AffinityType	E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity	`path:"affinity-type"`
	Affinity1	string	`path:"affinity1"`
	Affinity2	string	`path:"affinity2"`
	Affinity3	string	`path:"affinity3"`
	Affinity4	string	`path:"affinity4"`
	Affinity5	string	`path:"affinity5"`
	Affinity6	string	`path:"affinity6"`
	Affinity7	string	`path:"affinity7"`
	Affinity8	string	`path:"affinity8"`
}

// IsYANGGoKeyStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8_Key) IsYANGGoKeyStruct() {}

// ΛListKeyMap returns the values of the Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8_Key key struct.
func (t Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"affinity-type": t.AffinityType,
		"affinity1": t.Affinity1,
		"affinity2": t.Affinity2,
		"affinity3": t.Affinity3,
		"affinity4": t.Affinity4,
		"affinity5": t.Affinity5,
		"affinity6": t.Affinity6,
		"affinity7": t.Affinity7,
		"affinity8": t.Affinity8,
	}, nil
}

// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9_Key represents the key for list NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 of element /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/auto-mesh-attributes/auto-mesh-attribute/new-style-affinity-affinity-types.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9_Key struct {
	AffinityType	E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity	`path:"affinity-type"`
	Affinity1	string	`path:"affinity1"`
	Affinity2	string	`path:"affinity2"`
	Affinity3	string	`path:"affinity3"`
	Affinity4	string	`path:"affinity4"`
	Affinity5	string	`path:"affinity5"`
	Affinity6	string	`path:"affinity6"`
	Affinity7	string	`path:"affinity7"`
	Affinity8	string	`path:"affinity8"`
	Affinity9	string	`path:"affinity9"`
}

// IsYANGGoKeyStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9_Key) IsYANGGoKeyStruct() {}

// ΛListKeyMap returns the values of the Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9_Key key struct.
func (t Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"affinity-type": t.AffinityType,
		"affinity1": t.Affinity1,
		"affinity2": t.Affinity2,
		"affinity3": t.Affinity3,
		"affinity4": t.Affinity4,
		"affinity5": t.Affinity5,
		"affinity6": t.Affinity6,
		"affinity7": t.Affinity7,
		"affinity8": t.Affinity8,
		"affinity9": t.Affinity9,
	}, nil
}

// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10_Key represents the key for list NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 of element /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/auto-mesh-attributes/auto-mesh-attribute/new-style-affinity-affinity-types.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10_Key struct {
	AffinityType	E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity	`path:"affinity-type"`
	Affinity1	string	`path:"affinity1"`
	Affinity2	string	`path:"affinity2"`
	Affinity3	string	`path:"affinity3"`
	Affinity4	string	`path:"affinity4"`
	Affinity5	string	`path:"affinity5"`
	Affinity6	string	`path:"affinity6"`
	Affinity7	string	`path:"affinity7"`
	Affinity8	string	`path:"affinity8"`
	Affinity9	string	`path:"affinity9"`
	Affinity10	string	`path:"affinity10"`
}

// IsYANGGoKeyStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10_Key) IsYANGGoKeyStruct() {}

// ΛListKeyMap returns the values of the Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10_Key key struct.
func (t Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"affinity-type": t.AffinityType,
		"affinity1": t.Affinity1,
		"affinity2": t.Affinity2,
		"affinity3": t.Affinity3,
		"affinity4": t.Affinity4,
		"affinity5": t.Affinity5,
		"affinity6": t.Affinity6,
		"affinity7": t.Affinity7,
		"affinity8": t.Affinity8,
		"affinity9": t.Affinity9,
		"affinity10": t.Affinity10,
	}, nil
}

// NewNewStyleAffinityAffinityType creates a new entry in the NewStyleAffinityAffinityType list of the
// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes) NewNewStyleAffinityAffinityType(AffinityType E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity) (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NewStyleAffinityAffinityType == nil {
		t.NewStyleAffinityAffinityType = make(map[E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity]*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType)
	}

	key := AffinityType

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NewStyleAffinityAffinityType[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NewStyleAffinityAffinityType", key)
	}

	t.NewStyleAffinityAffinityType[key] = &Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType{
		AffinityType: AffinityType,
	}

	return t.NewStyleAffinityAffinityType[key], nil
}

// NewNewStyleAffinityAffinityTypeAffinity1 creates a new entry in the NewStyleAffinityAffinityTypeAffinity1 list of the
// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes) NewNewStyleAffinityAffinityTypeAffinity1(AffinityType E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity, Affinity1 string) (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NewStyleAffinityAffinityTypeAffinity1 == nil {
		t.NewStyleAffinityAffinityTypeAffinity1 = make(map[Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1_Key]*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1)
	}

	key := Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1_Key{
		AffinityType: AffinityType,
		Affinity1: Affinity1,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NewStyleAffinityAffinityTypeAffinity1[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NewStyleAffinityAffinityTypeAffinity1", key)
	}

	t.NewStyleAffinityAffinityTypeAffinity1[key] = &Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1{
		AffinityType: AffinityType,
		Affinity1: &Affinity1,
	}

	return t.NewStyleAffinityAffinityTypeAffinity1[key], nil
}

// NewNewStyleAffinityAffinityTypeAffinity1Affinity2 creates a new entry in the NewStyleAffinityAffinityTypeAffinity1Affinity2 list of the
// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes) NewNewStyleAffinityAffinityTypeAffinity1Affinity2(AffinityType E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity, Affinity1 string, Affinity2 string) (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NewStyleAffinityAffinityTypeAffinity1Affinity2 == nil {
		t.NewStyleAffinityAffinityTypeAffinity1Affinity2 = make(map[Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2_Key]*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2)
	}

	key := Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2_Key{
		AffinityType: AffinityType,
		Affinity1: Affinity1,
		Affinity2: Affinity2,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NewStyleAffinityAffinityTypeAffinity1Affinity2[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NewStyleAffinityAffinityTypeAffinity1Affinity2", key)
	}

	t.NewStyleAffinityAffinityTypeAffinity1Affinity2[key] = &Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2{
		AffinityType: AffinityType,
		Affinity1: &Affinity1,
		Affinity2: &Affinity2,
	}

	return t.NewStyleAffinityAffinityTypeAffinity1Affinity2[key], nil
}

// NewNewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 creates a new entry in the NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 list of the
// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes) NewNewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3(AffinityType E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity, Affinity1 string, Affinity2 string, Affinity3 string) (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 == nil {
		t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 = make(map[Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3_Key]*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3)
	}

	key := Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3_Key{
		AffinityType: AffinityType,
		Affinity1: Affinity1,
		Affinity2: Affinity2,
		Affinity3: Affinity3,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3", key)
	}

	t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3[key] = &Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3{
		AffinityType: AffinityType,
		Affinity1: &Affinity1,
		Affinity2: &Affinity2,
		Affinity3: &Affinity3,
	}

	return t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3[key], nil
}

// NewNewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 creates a new entry in the NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 list of the
// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes) NewNewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4(AffinityType E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity, Affinity1 string, Affinity2 string, Affinity3 string, Affinity4 string) (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 == nil {
		t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 = make(map[Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4_Key]*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4)
	}

	key := Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4_Key{
		AffinityType: AffinityType,
		Affinity1: Affinity1,
		Affinity2: Affinity2,
		Affinity3: Affinity3,
		Affinity4: Affinity4,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4", key)
	}

	t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4[key] = &Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4{
		AffinityType: AffinityType,
		Affinity1: &Affinity1,
		Affinity2: &Affinity2,
		Affinity3: &Affinity3,
		Affinity4: &Affinity4,
	}

	return t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4[key], nil
}

// NewNewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 creates a new entry in the NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 list of the
// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes) NewNewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5(AffinityType E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity, Affinity1 string, Affinity2 string, Affinity3 string, Affinity4 string, Affinity5 string) (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 == nil {
		t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 = make(map[Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5_Key]*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5)
	}

	key := Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5_Key{
		AffinityType: AffinityType,
		Affinity1: Affinity1,
		Affinity2: Affinity2,
		Affinity3: Affinity3,
		Affinity4: Affinity4,
		Affinity5: Affinity5,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5", key)
	}

	t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5[key] = &Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5{
		AffinityType: AffinityType,
		Affinity1: &Affinity1,
		Affinity2: &Affinity2,
		Affinity3: &Affinity3,
		Affinity4: &Affinity4,
		Affinity5: &Affinity5,
	}

	return t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5[key], nil
}

// NewNewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 creates a new entry in the NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 list of the
// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes) NewNewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6(AffinityType E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity, Affinity1 string, Affinity2 string, Affinity3 string, Affinity4 string, Affinity5 string, Affinity6 string) (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 == nil {
		t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 = make(map[Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6_Key]*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6)
	}

	key := Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6_Key{
		AffinityType: AffinityType,
		Affinity1: Affinity1,
		Affinity2: Affinity2,
		Affinity3: Affinity3,
		Affinity4: Affinity4,
		Affinity5: Affinity5,
		Affinity6: Affinity6,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6", key)
	}

	t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6[key] = &Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6{
		AffinityType: AffinityType,
		Affinity1: &Affinity1,
		Affinity2: &Affinity2,
		Affinity3: &Affinity3,
		Affinity4: &Affinity4,
		Affinity5: &Affinity5,
		Affinity6: &Affinity6,
	}

	return t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6[key], nil
}

// NewNewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 creates a new entry in the NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 list of the
// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes) NewNewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7(AffinityType E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity, Affinity1 string, Affinity2 string, Affinity3 string, Affinity4 string, Affinity5 string, Affinity6 string, Affinity7 string) (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 == nil {
		t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 = make(map[Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7_Key]*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7)
	}

	key := Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7_Key{
		AffinityType: AffinityType,
		Affinity1: Affinity1,
		Affinity2: Affinity2,
		Affinity3: Affinity3,
		Affinity4: Affinity4,
		Affinity5: Affinity5,
		Affinity6: Affinity6,
		Affinity7: Affinity7,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7", key)
	}

	t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7[key] = &Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7{
		AffinityType: AffinityType,
		Affinity1: &Affinity1,
		Affinity2: &Affinity2,
		Affinity3: &Affinity3,
		Affinity4: &Affinity4,
		Affinity5: &Affinity5,
		Affinity6: &Affinity6,
		Affinity7: &Affinity7,
	}

	return t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7[key], nil
}

// NewNewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 creates a new entry in the NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 list of the
// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes) NewNewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8(AffinityType E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity, Affinity1 string, Affinity2 string, Affinity3 string, Affinity4 string, Affinity5 string, Affinity6 string, Affinity7 string, Affinity8 string) (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 == nil {
		t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 = make(map[Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8_Key]*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8)
	}

	key := Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8_Key{
		AffinityType: AffinityType,
		Affinity1: Affinity1,
		Affinity2: Affinity2,
		Affinity3: Affinity3,
		Affinity4: Affinity4,
		Affinity5: Affinity5,
		Affinity6: Affinity6,
		Affinity7: Affinity7,
		Affinity8: Affinity8,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8", key)
	}

	t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8[key] = &Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8{
		AffinityType: AffinityType,
		Affinity1: &Affinity1,
		Affinity2: &Affinity2,
		Affinity3: &Affinity3,
		Affinity4: &Affinity4,
		Affinity5: &Affinity5,
		Affinity6: &Affinity6,
		Affinity7: &Affinity7,
		Affinity8: &Affinity8,
	}

	return t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8[key], nil
}

// NewNewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 creates a new entry in the NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 list of the
// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes) NewNewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9(AffinityType E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity, Affinity1 string, Affinity2 string, Affinity3 string, Affinity4 string, Affinity5 string, Affinity6 string, Affinity7 string, Affinity8 string, Affinity9 string) (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 == nil {
		t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 = make(map[Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9_Key]*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9)
	}

	key := Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9_Key{
		AffinityType: AffinityType,
		Affinity1: Affinity1,
		Affinity2: Affinity2,
		Affinity3: Affinity3,
		Affinity4: Affinity4,
		Affinity5: Affinity5,
		Affinity6: Affinity6,
		Affinity7: Affinity7,
		Affinity8: Affinity8,
		Affinity9: Affinity9,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9", key)
	}

	t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9[key] = &Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9{
		AffinityType: AffinityType,
		Affinity1: &Affinity1,
		Affinity2: &Affinity2,
		Affinity3: &Affinity3,
		Affinity4: &Affinity4,
		Affinity5: &Affinity5,
		Affinity6: &Affinity6,
		Affinity7: &Affinity7,
		Affinity8: &Affinity8,
		Affinity9: &Affinity9,
	}

	return t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9[key], nil
}

// NewNewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 creates a new entry in the NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 list of the
// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes) NewNewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10(AffinityType E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity, Affinity1 string, Affinity2 string, Affinity3 string, Affinity4 string, Affinity5 string, Affinity6 string, Affinity7 string, Affinity8 string, Affinity9 string, Affinity10 string) (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 == nil {
		t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 = make(map[Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10_Key]*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10)
	}

	key := Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10_Key{
		AffinityType: AffinityType,
		Affinity1: Affinity1,
		Affinity2: Affinity2,
		Affinity3: Affinity3,
		Affinity4: Affinity4,
		Affinity5: Affinity5,
		Affinity6: Affinity6,
		Affinity7: Affinity7,
		Affinity8: Affinity8,
		Affinity9: Affinity9,
		Affinity10: Affinity10,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10", key)
	}

	t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10[key] = &Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10{
		AffinityType: AffinityType,
		Affinity1: &Affinity1,
		Affinity2: &Affinity2,
		Affinity3: &Affinity3,
		Affinity4: &Affinity4,
		Affinity5: &Affinity5,
		Affinity6: &Affinity6,
		Affinity7: &Affinity7,
		Affinity8: &Affinity8,
		Affinity9: &Affinity9,
		Affinity10: &Affinity10,
	}

	return t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/auto-mesh-attributes/auto-mesh-attribute/new-style-affinity-affinity-types/new-style-affinity-affinity-type YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType struct {
	AffinityType	E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity	`path:"affinity-type" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType struct, which is a YANG list entry.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"affinity-type": t.AffinityType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1 represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/auto-mesh-attributes/auto-mesh-attribute/new-style-affinity-affinity-types/new-style-affinity-affinity-type-affinity1 YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1 struct {
	AffinityType	E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity	`path:"affinity-type" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity1	*string	`path:"affinity1" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1 struct, which is a YANG list entry.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1) ΛListKeyMap() (map[string]interface{}, error) {

	if t.Affinity1 == nil {
		return nil, fmt.Errorf("nil value for key Affinity1")
	}

	return map[string]interface{}{
		"affinity-type": t.AffinityType,
		"affinity1": *t.Affinity1,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2 represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/auto-mesh-attributes/auto-mesh-attribute/new-style-affinity-affinity-types/new-style-affinity-affinity-type-affinity1-affinity2 YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2 struct {
	AffinityType	E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity	`path:"affinity-type" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity1	*string	`path:"affinity1" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity2	*string	`path:"affinity2" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2 struct, which is a YANG list entry.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2) ΛListKeyMap() (map[string]interface{}, error) {

	if t.Affinity1 == nil {
		return nil, fmt.Errorf("nil value for key Affinity1")
	}

	if t.Affinity2 == nil {
		return nil, fmt.Errorf("nil value for key Affinity2")
	}

	return map[string]interface{}{
		"affinity-type": t.AffinityType,
		"affinity1": *t.Affinity1,
		"affinity2": *t.Affinity2,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/auto-mesh-attributes/auto-mesh-attribute/new-style-affinity-affinity-types/new-style-affinity-affinity-type-affinity1-affinity2-affinity3 YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 struct {
	AffinityType	E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity	`path:"affinity-type" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity1	*string	`path:"affinity1" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity2	*string	`path:"affinity2" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity3	*string	`path:"affinity3" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 struct, which is a YANG list entry.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3) ΛListKeyMap() (map[string]interface{}, error) {

	if t.Affinity1 == nil {
		return nil, fmt.Errorf("nil value for key Affinity1")
	}

	if t.Affinity2 == nil {
		return nil, fmt.Errorf("nil value for key Affinity2")
	}

	if t.Affinity3 == nil {
		return nil, fmt.Errorf("nil value for key Affinity3")
	}

	return map[string]interface{}{
		"affinity-type": t.AffinityType,
		"affinity1": *t.Affinity1,
		"affinity2": *t.Affinity2,
		"affinity3": *t.Affinity3,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/auto-mesh-attributes/auto-mesh-attribute/new-style-affinity-affinity-types/new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4 YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 struct {
	AffinityType	E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity	`path:"affinity-type" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity1	*string	`path:"affinity1" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity2	*string	`path:"affinity2" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity3	*string	`path:"affinity3" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity4	*string	`path:"affinity4" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 struct, which is a YANG list entry.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4) ΛListKeyMap() (map[string]interface{}, error) {

	if t.Affinity1 == nil {
		return nil, fmt.Errorf("nil value for key Affinity1")
	}

	if t.Affinity2 == nil {
		return nil, fmt.Errorf("nil value for key Affinity2")
	}

	if t.Affinity3 == nil {
		return nil, fmt.Errorf("nil value for key Affinity3")
	}

	if t.Affinity4 == nil {
		return nil, fmt.Errorf("nil value for key Affinity4")
	}

	return map[string]interface{}{
		"affinity-type": t.AffinityType,
		"affinity1": *t.Affinity1,
		"affinity2": *t.Affinity2,
		"affinity3": *t.Affinity3,
		"affinity4": *t.Affinity4,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/auto-mesh-attributes/auto-mesh-attribute/new-style-affinity-affinity-types/new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5 YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 struct {
	AffinityType	E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity	`path:"affinity-type" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity1	*string	`path:"affinity1" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity2	*string	`path:"affinity2" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity3	*string	`path:"affinity3" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity4	*string	`path:"affinity4" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity5	*string	`path:"affinity5" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 struct, which is a YANG list entry.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5) ΛListKeyMap() (map[string]interface{}, error) {

	if t.Affinity1 == nil {
		return nil, fmt.Errorf("nil value for key Affinity1")
	}

	if t.Affinity2 == nil {
		return nil, fmt.Errorf("nil value for key Affinity2")
	}

	if t.Affinity3 == nil {
		return nil, fmt.Errorf("nil value for key Affinity3")
	}

	if t.Affinity4 == nil {
		return nil, fmt.Errorf("nil value for key Affinity4")
	}

	if t.Affinity5 == nil {
		return nil, fmt.Errorf("nil value for key Affinity5")
	}

	return map[string]interface{}{
		"affinity-type": t.AffinityType,
		"affinity1": *t.Affinity1,
		"affinity2": *t.Affinity2,
		"affinity3": *t.Affinity3,
		"affinity4": *t.Affinity4,
		"affinity5": *t.Affinity5,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/auto-mesh-attributes/auto-mesh-attribute/new-style-affinity-affinity-types/new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6 YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 struct {
	AffinityType	E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity	`path:"affinity-type" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity1	*string	`path:"affinity1" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity2	*string	`path:"affinity2" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity3	*string	`path:"affinity3" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity4	*string	`path:"affinity4" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity5	*string	`path:"affinity5" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity6	*string	`path:"affinity6" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 struct, which is a YANG list entry.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6) ΛListKeyMap() (map[string]interface{}, error) {

	if t.Affinity1 == nil {
		return nil, fmt.Errorf("nil value for key Affinity1")
	}

	if t.Affinity2 == nil {
		return nil, fmt.Errorf("nil value for key Affinity2")
	}

	if t.Affinity3 == nil {
		return nil, fmt.Errorf("nil value for key Affinity3")
	}

	if t.Affinity4 == nil {
		return nil, fmt.Errorf("nil value for key Affinity4")
	}

	if t.Affinity5 == nil {
		return nil, fmt.Errorf("nil value for key Affinity5")
	}

	if t.Affinity6 == nil {
		return nil, fmt.Errorf("nil value for key Affinity6")
	}

	return map[string]interface{}{
		"affinity-type": t.AffinityType,
		"affinity1": *t.Affinity1,
		"affinity2": *t.Affinity2,
		"affinity3": *t.Affinity3,
		"affinity4": *t.Affinity4,
		"affinity5": *t.Affinity5,
		"affinity6": *t.Affinity6,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/auto-mesh-attributes/auto-mesh-attribute/new-style-affinity-affinity-types/new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7 YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 struct {
	AffinityType	E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity	`path:"affinity-type" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity1	*string	`path:"affinity1" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity2	*string	`path:"affinity2" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity3	*string	`path:"affinity3" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity4	*string	`path:"affinity4" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity5	*string	`path:"affinity5" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity6	*string	`path:"affinity6" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity7	*string	`path:"affinity7" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 struct, which is a YANG list entry.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7) ΛListKeyMap() (map[string]interface{}, error) {

	if t.Affinity1 == nil {
		return nil, fmt.Errorf("nil value for key Affinity1")
	}

	if t.Affinity2 == nil {
		return nil, fmt.Errorf("nil value for key Affinity2")
	}

	if t.Affinity3 == nil {
		return nil, fmt.Errorf("nil value for key Affinity3")
	}

	if t.Affinity4 == nil {
		return nil, fmt.Errorf("nil value for key Affinity4")
	}

	if t.Affinity5 == nil {
		return nil, fmt.Errorf("nil value for key Affinity5")
	}

	if t.Affinity6 == nil {
		return nil, fmt.Errorf("nil value for key Affinity6")
	}

	if t.Affinity7 == nil {
		return nil, fmt.Errorf("nil value for key Affinity7")
	}

	return map[string]interface{}{
		"affinity-type": t.AffinityType,
		"affinity1": *t.Affinity1,
		"affinity2": *t.Affinity2,
		"affinity3": *t.Affinity3,
		"affinity4": *t.Affinity4,
		"affinity5": *t.Affinity5,
		"affinity6": *t.Affinity6,
		"affinity7": *t.Affinity7,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/auto-mesh-attributes/auto-mesh-attribute/new-style-affinity-affinity-types/new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8 YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 struct {
	AffinityType	E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity	`path:"affinity-type" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity1	*string	`path:"affinity1" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity2	*string	`path:"affinity2" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity3	*string	`path:"affinity3" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity4	*string	`path:"affinity4" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity5	*string	`path:"affinity5" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity6	*string	`path:"affinity6" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity7	*string	`path:"affinity7" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity8	*string	`path:"affinity8" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 struct, which is a YANG list entry.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8) ΛListKeyMap() (map[string]interface{}, error) {

	if t.Affinity1 == nil {
		return nil, fmt.Errorf("nil value for key Affinity1")
	}

	if t.Affinity2 == nil {
		return nil, fmt.Errorf("nil value for key Affinity2")
	}

	if t.Affinity3 == nil {
		return nil, fmt.Errorf("nil value for key Affinity3")
	}

	if t.Affinity4 == nil {
		return nil, fmt.Errorf("nil value for key Affinity4")
	}

	if t.Affinity5 == nil {
		return nil, fmt.Errorf("nil value for key Affinity5")
	}

	if t.Affinity6 == nil {
		return nil, fmt.Errorf("nil value for key Affinity6")
	}

	if t.Affinity7 == nil {
		return nil, fmt.Errorf("nil value for key Affinity7")
	}

	if t.Affinity8 == nil {
		return nil, fmt.Errorf("nil value for key Affinity8")
	}

	return map[string]interface{}{
		"affinity-type": t.AffinityType,
		"affinity1": *t.Affinity1,
		"affinity2": *t.Affinity2,
		"affinity3": *t.Affinity3,
		"affinity4": *t.Affinity4,
		"affinity5": *t.Affinity5,
		"affinity6": *t.Affinity6,
		"affinity7": *t.Affinity7,
		"affinity8": *t.Affinity8,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/auto-mesh-attributes/auto-mesh-attribute/new-style-affinity-affinity-types/new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8-affinity9 YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 struct {
	AffinityType	E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity	`path:"affinity-type" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity1	*string	`path:"affinity1" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity2	*string	`path:"affinity2" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity3	*string	`path:"affinity3" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity4	*string	`path:"affinity4" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity5	*string	`path:"affinity5" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity6	*string	`path:"affinity6" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity7	*string	`path:"affinity7" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity8	*string	`path:"affinity8" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity9	*string	`path:"affinity9" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 struct, which is a YANG list entry.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9) ΛListKeyMap() (map[string]interface{}, error) {

	if t.Affinity1 == nil {
		return nil, fmt.Errorf("nil value for key Affinity1")
	}

	if t.Affinity2 == nil {
		return nil, fmt.Errorf("nil value for key Affinity2")
	}

	if t.Affinity3 == nil {
		return nil, fmt.Errorf("nil value for key Affinity3")
	}

	if t.Affinity4 == nil {
		return nil, fmt.Errorf("nil value for key Affinity4")
	}

	if t.Affinity5 == nil {
		return nil, fmt.Errorf("nil value for key Affinity5")
	}

	if t.Affinity6 == nil {
		return nil, fmt.Errorf("nil value for key Affinity6")
	}

	if t.Affinity7 == nil {
		return nil, fmt.Errorf("nil value for key Affinity7")
	}

	if t.Affinity8 == nil {
		return nil, fmt.Errorf("nil value for key Affinity8")
	}

	if t.Affinity9 == nil {
		return nil, fmt.Errorf("nil value for key Affinity9")
	}

	return map[string]interface{}{
		"affinity-type": t.AffinityType,
		"affinity1": *t.Affinity1,
		"affinity2": *t.Affinity2,
		"affinity3": *t.Affinity3,
		"affinity4": *t.Affinity4,
		"affinity5": *t.Affinity5,
		"affinity6": *t.Affinity6,
		"affinity7": *t.Affinity7,
		"affinity8": *t.Affinity8,
		"affinity9": *t.Affinity9,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/auto-mesh-attributes/auto-mesh-attribute/new-style-affinity-affinity-types/new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8-affinity9-affinity10 YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 struct {
	AffinityType	E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity	`path:"affinity-type" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity1	*string	`path:"affinity1" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity10	*string	`path:"affinity10" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity2	*string	`path:"affinity2" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity3	*string	`path:"affinity3" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity4	*string	`path:"affinity4" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity5	*string	`path:"affinity5" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity6	*string	`path:"affinity6" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity7	*string	`path:"affinity7" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity8	*string	`path:"affinity8" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity9	*string	`path:"affinity9" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 struct, which is a YANG list entry.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10) ΛListKeyMap() (map[string]interface{}, error) {

	if t.Affinity1 == nil {
		return nil, fmt.Errorf("nil value for key Affinity1")
	}

	if t.Affinity10 == nil {
		return nil, fmt.Errorf("nil value for key Affinity10")
	}

	if t.Affinity2 == nil {
		return nil, fmt.Errorf("nil value for key Affinity2")
	}

	if t.Affinity3 == nil {
		return nil, fmt.Errorf("nil value for key Affinity3")
	}

	if t.Affinity4 == nil {
		return nil, fmt.Errorf("nil value for key Affinity4")
	}

	if t.Affinity5 == nil {
		return nil, fmt.Errorf("nil value for key Affinity5")
	}

	if t.Affinity6 == nil {
		return nil, fmt.Errorf("nil value for key Affinity6")
	}

	if t.Affinity7 == nil {
		return nil, fmt.Errorf("nil value for key Affinity7")
	}

	if t.Affinity8 == nil {
		return nil, fmt.Errorf("nil value for key Affinity8")
	}

	if t.Affinity9 == nil {
		return nil, fmt.Errorf("nil value for key Affinity9")
	}

	return map[string]interface{}{
		"affinity-type": t.AffinityType,
		"affinity1": *t.Affinity1,
		"affinity10": *t.Affinity10,
		"affinity2": *t.Affinity2,
		"affinity3": *t.Affinity3,
		"affinity4": *t.Affinity4,
		"affinity5": *t.Affinity5,
		"affinity6": *t.Affinity6,
		"affinity7": *t.Affinity7,
		"affinity8": *t.Affinity8,
		"affinity9": *t.Affinity9,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_PathSelection represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/auto-mesh-attributes/auto-mesh-attribute/path-selection YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_PathSelection struct {
	Enable	YANGEmpty	`path:"enable" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_PathSelection implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_PathSelection) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_PathSelection) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_PathSelection"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_PathSelection) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_PathSelection) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_PathSelection.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_PathSelection) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_PolicyClasses represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/auto-mesh-attributes/auto-mesh-attribute/policy-classes YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_PolicyClasses struct {
	PolicyClass	[]uint32	`path:"policy-class" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_PolicyClasses implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_PolicyClasses) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_PolicyClasses) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_PolicyClasses"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_PolicyClasses) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_PolicyClasses) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_PolicyClasses.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_PolicyClasses) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_Priority represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/auto-mesh-attributes/auto-mesh-attribute/priority YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_Priority struct {
	HoldPriority	*uint32	`path:"hold-priority" module:"Cisco-IOS-XR-mpls-te-cfg"`
	SetupPriority	*uint32	`path:"setup-priority" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_Priority implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_Priority) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_Priority) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_Priority"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_Priority) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_Priority) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_Priority.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_Priority) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/otn-pp-attributes YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes struct {
	OtnPpAttribute	map[string]*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute	`path:"otn-pp-attribute" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes) IsYANGGoStruct() {}

// NewOtnPpAttribute creates a new entry in the OtnPpAttribute list of the
// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes) NewOtnPpAttribute(AttributeSetName string) (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.OtnPpAttribute == nil {
		t.OtnPpAttribute = make(map[string]*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute)
	}

	key := AttributeSetName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.OtnPpAttribute[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list OtnPpAttribute", key)
	}

	t.OtnPpAttribute[key] = &Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute{
		AttributeSetName: &AttributeSetName,
	}

	return t.OtnPpAttribute[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/otn-pp-attributes/otn-pp-attribute YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute struct {
	ApsProtectionMode	E_Cisco_IOS_XRMplsTeCfg_MplsTeOtnApsProtectionMode	`path:"aps-protection-mode" module:"Cisco-IOS-XR-mpls-te-cfg"`
	ApsProtectionType	E_Cisco_IOS_XRMplsTeCfg_MplsTeOtnApsProtection	`path:"aps-protection-type" module:"Cisco-IOS-XR-mpls-te-cfg"`
	ApsRestorationStyle	E_Cisco_IOS_XRMplsTeCfg_MplsTeOtnApsRestorationStyle	`path:"aps-restoration-style" module:"Cisco-IOS-XR-mpls-te-cfg"`
	AttributeSetName	*string	`path:"attribute-set-name" module:"Cisco-IOS-XR-mpls-te-cfg"`
	PathSelection	*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_PathSelection	`path:"path-selection" module:"Cisco-IOS-XR-mpls-te-cfg"`
	RevertScheduleNames	*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_RevertScheduleNames	`path:"revert-schedule-names" module:"Cisco-IOS-XR-mpls-te-cfg"`
	SubNetworkConnectionMode	*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_SubNetworkConnectionMode	`path:"sub-network-connection-mode" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Timers	*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_Timers	`path:"timers" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute struct, which is a YANG list entry.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute) ΛListKeyMap() (map[string]interface{}, error) {
	if t.AttributeSetName == nil {
		return nil, fmt.Errorf("nil value for key AttributeSetName")
	}

	return map[string]interface{}{
		"attribute-set-name": *t.AttributeSetName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_PathSelection represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/otn-pp-attributes/otn-pp-attribute/path-selection YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_PathSelection struct {
	Enable	YANGEmpty	`path:"enable" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_PathSelection implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_PathSelection) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_PathSelection) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_PathSelection"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_PathSelection) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_PathSelection) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_PathSelection.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_PathSelection) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_RevertScheduleNames represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/otn-pp-attributes/otn-pp-attribute/revert-schedule-names YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_RevertScheduleNames struct {
	RevertScheduleName	map[string]*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_RevertScheduleNames_RevertScheduleName	`path:"revert-schedule-name" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_RevertScheduleNames implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_RevertScheduleNames) IsYANGGoStruct() {}

// NewRevertScheduleName creates a new entry in the RevertScheduleName list of the
// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_RevertScheduleNames struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_RevertScheduleNames) NewRevertScheduleName(ScheduleName string) (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_RevertScheduleNames_RevertScheduleName, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RevertScheduleName == nil {
		t.RevertScheduleName = make(map[string]*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_RevertScheduleNames_RevertScheduleName)
	}

	key := ScheduleName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.RevertScheduleName[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list RevertScheduleName", key)
	}

	t.RevertScheduleName[key] = &Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_RevertScheduleNames_RevertScheduleName{
		ScheduleName: &ScheduleName,
	}

	return t.RevertScheduleName[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_RevertScheduleNames) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_RevertScheduleNames"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_RevertScheduleNames) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_RevertScheduleNames) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_RevertScheduleNames.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_RevertScheduleNames) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_RevertScheduleNames_RevertScheduleName represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/otn-pp-attributes/otn-pp-attribute/revert-schedule-names/revert-schedule-name YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_RevertScheduleNames_RevertScheduleName struct {
	RevertScheduleFrequency	*uint32	`path:"revert-schedule-frequency" module:"Cisco-IOS-XR-mpls-te-cfg"`
	RevertScheduleMaxTries	*uint32	`path:"revert-schedule-max-tries" module:"Cisco-IOS-XR-mpls-te-cfg"`
	SchNameEnable	YANGEmpty	`path:"sch-name-enable" module:"Cisco-IOS-XR-mpls-te-cfg"`
	ScheduleDate	*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_RevertScheduleNames_RevertScheduleName_ScheduleDate	`path:"schedule-date" module:"Cisco-IOS-XR-mpls-te-cfg"`
	ScheduleDuration	*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_RevertScheduleNames_RevertScheduleName_ScheduleDuration	`path:"schedule-duration" module:"Cisco-IOS-XR-mpls-te-cfg"`
	ScheduleName	*string	`path:"schedule-name" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_RevertScheduleNames_RevertScheduleName implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_RevertScheduleNames_RevertScheduleName) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_RevertScheduleNames_RevertScheduleName struct, which is a YANG list entry.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_RevertScheduleNames_RevertScheduleName) ΛListKeyMap() (map[string]interface{}, error) {
	if t.ScheduleName == nil {
		return nil, fmt.Errorf("nil value for key ScheduleName")
	}

	return map[string]interface{}{
		"schedule-name": *t.ScheduleName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_RevertScheduleNames_RevertScheduleName) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_RevertScheduleNames_RevertScheduleName"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_RevertScheduleNames_RevertScheduleName) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_RevertScheduleNames_RevertScheduleName) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_RevertScheduleNames_RevertScheduleName.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_RevertScheduleNames_RevertScheduleName) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_RevertScheduleNames_RevertScheduleName_ScheduleDate represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/otn-pp-attributes/otn-pp-attribute/revert-schedule-names/revert-schedule-name/schedule-date YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_RevertScheduleNames_RevertScheduleName_ScheduleDate struct {
	Day	*uint32	`path:"day" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Hour	*uint32	`path:"hour" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Minutes	*uint32	`path:"minutes" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Month	*uint32	`path:"month" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Year	*uint32	`path:"year" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_RevertScheduleNames_RevertScheduleName_ScheduleDate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_RevertScheduleNames_RevertScheduleName_ScheduleDate) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_RevertScheduleNames_RevertScheduleName_ScheduleDate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_RevertScheduleNames_RevertScheduleName_ScheduleDate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_RevertScheduleNames_RevertScheduleName_ScheduleDate) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_RevertScheduleNames_RevertScheduleName_ScheduleDate) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_RevertScheduleNames_RevertScheduleName_ScheduleDate.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_RevertScheduleNames_RevertScheduleName_ScheduleDate) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_RevertScheduleNames_RevertScheduleName_ScheduleDuration represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/otn-pp-attributes/otn-pp-attribute/revert-schedule-names/revert-schedule-name/schedule-duration YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_RevertScheduleNames_RevertScheduleName_ScheduleDuration struct {
	Hour	*uint32	`path:"hour" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Minutes	*uint32	`path:"minutes" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_RevertScheduleNames_RevertScheduleName_ScheduleDuration implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_RevertScheduleNames_RevertScheduleName_ScheduleDuration) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_RevertScheduleNames_RevertScheduleName_ScheduleDuration) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_RevertScheduleNames_RevertScheduleName_ScheduleDuration"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_RevertScheduleNames_RevertScheduleName_ScheduleDuration) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_RevertScheduleNames_RevertScheduleName_ScheduleDuration) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_RevertScheduleNames_RevertScheduleName_ScheduleDuration.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_RevertScheduleNames_RevertScheduleName_ScheduleDuration) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_SubNetworkConnectionMode represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/otn-pp-attributes/otn-pp-attribute/sub-network-connection-mode YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_SubNetworkConnectionMode struct {
	ConnectionMode	E_Cisco_IOS_XRMplsTeCfg_MplsTeOtnSncMode	`path:"connection-mode" module:"Cisco-IOS-XR-mpls-te-cfg"`
	ConnectionMonitoringMode	*uint32	`path:"connection-monitoring-mode" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_SubNetworkConnectionMode implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_SubNetworkConnectionMode) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_SubNetworkConnectionMode) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_SubNetworkConnectionMode"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_SubNetworkConnectionMode) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_SubNetworkConnectionMode) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_SubNetworkConnectionMode.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_SubNetworkConnectionMode) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_Timers represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/otn-pp-attributes/otn-pp-attribute/timers YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_Timers struct {
	ApsHoldOff	*uint32	`path:"aps-hold-off" module:"Cisco-IOS-XR-mpls-te-cfg"`
	ApsWaitToRestore	*uint32	`path:"aps-wait-to-restore" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_Timers implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_Timers) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_Timers) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_Timers"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_Timers) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_Timers) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_Timers.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_Timers) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/p2mpte-attributes YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes struct {
	P2MpteAttribute	map[string]*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute	`path:"p2mpte-attribute" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes) IsYANGGoStruct() {}

// NewP2MpteAttribute creates a new entry in the P2MpteAttribute list of the
// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes) NewP2MpteAttribute(AttributeSetName string) (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.P2MpteAttribute == nil {
		t.P2MpteAttribute = make(map[string]*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute)
	}

	key := AttributeSetName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.P2MpteAttribute[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list P2MpteAttribute", key)
	}

	t.P2MpteAttribute[key] = &Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute{
		AttributeSetName: &AttributeSetName,
	}

	return t.P2MpteAttribute[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/p2mpte-attributes/p2mpte-attribute YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute struct {
	AffinityMask	*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_AffinityMask	`path:"affinity-mask" module:"Cisco-IOS-XR-mpls-te-cfg"`
	AttributeSetName	*string	`path:"attribute-set-name" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Bandwidth	*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_Bandwidth	`path:"bandwidth" module:"Cisco-IOS-XR-mpls-te-cfg"`
	FastReroute	*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_FastReroute	`path:"fast-reroute" module:"Cisco-IOS-XR-mpls-te-cfg"`
	InterfaceBandwidth	*uint32	`path:"interface-bandwidth" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Logging	*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_Logging	`path:"logging" module:"Cisco-IOS-XR-mpls-te-cfg"`
	NewStyleAffinityAffinityTypes	*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes	`path:"new-style-affinity-affinity-types" module:"Cisco-IOS-XR-mpls-te-cfg"`
	PathSelection	*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_PathSelection	`path:"path-selection" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Priority	*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_Priority	`path:"priority" module:"Cisco-IOS-XR-mpls-te-cfg"`
	RecordRoute	YANGEmpty	`path:"record-route" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute struct, which is a YANG list entry.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute) ΛListKeyMap() (map[string]interface{}, error) {
	if t.AttributeSetName == nil {
		return nil, fmt.Errorf("nil value for key AttributeSetName")
	}

	return map[string]interface{}{
		"attribute-set-name": *t.AttributeSetName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_AffinityMask represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/p2mpte-attributes/p2mpte-attribute/affinity-mask YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_AffinityMask struct {
	Affinity	*string	`path:"affinity" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Mask	*string	`path:"mask" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_AffinityMask implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_AffinityMask) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_AffinityMask) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_AffinityMask"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_AffinityMask) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_AffinityMask) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_AffinityMask.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_AffinityMask) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_Bandwidth represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/p2mpte-attributes/p2mpte-attribute/bandwidth YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_Bandwidth struct {
	Bandwidth	*uint32	`path:"bandwidth" module:"Cisco-IOS-XR-mpls-te-cfg"`
	ClassOrPoolType	*uint32	`path:"class-or-pool-type" module:"Cisco-IOS-XR-mpls-te-cfg"`
	DsteType	E_Cisco_IOS_XRMplsTeCfg_MplsTeBandwidthDste	`path:"dste-type" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_Bandwidth implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_Bandwidth) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_Bandwidth) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_Bandwidth"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_Bandwidth) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_Bandwidth) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_Bandwidth.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_Bandwidth) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_FastReroute represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/p2mpte-attributes/p2mpte-attribute/fast-reroute YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_FastReroute struct {
	BandwidthProtection	*uint32	`path:"bandwidth-protection" module:"Cisco-IOS-XR-mpls-te-cfg"`
	NodeProtection	*uint32	`path:"node-protection" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_FastReroute implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_FastReroute) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_FastReroute) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_FastReroute"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_FastReroute) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_FastReroute) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_FastReroute.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_FastReroute) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_Logging represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/p2mpte-attributes/p2mpte-attribute/logging YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_Logging struct {
	All	YANGEmpty	`path:"all" module:"Cisco-IOS-XR-mpls-te-cfg"`
	BandwidthChangeMessage	YANGEmpty	`path:"bandwidth-change-message" module:"Cisco-IOS-XR-mpls-te-cfg"`
	InsufficientBwMessage	YANGEmpty	`path:"insufficient-bw-message" module:"Cisco-IOS-XR-mpls-te-cfg"`
	PcalcFailureMessage	YANGEmpty	`path:"pcalc-failure-message" module:"Cisco-IOS-XR-mpls-te-cfg"`
	ReoptimizeAttemptsMessage	YANGEmpty	`path:"reoptimize-attempts-message" module:"Cisco-IOS-XR-mpls-te-cfg"`
	ReoptimizedMessage	YANGEmpty	`path:"reoptimized-message" module:"Cisco-IOS-XR-mpls-te-cfg"`
	RerouteMesssage	YANGEmpty	`path:"reroute-messsage" module:"Cisco-IOS-XR-mpls-te-cfg"`
	StateMessage	YANGEmpty	`path:"state-message" module:"Cisco-IOS-XR-mpls-te-cfg"`
	SubLspStateMessage	YANGEmpty	`path:"sub-lsp-state-message" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_Logging implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_Logging) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_Logging) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_Logging"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_Logging) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_Logging) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_Logging.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_Logging) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/p2mpte-attributes/p2mpte-attribute/new-style-affinity-affinity-types YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes struct {
	NewStyleAffinityAffinityType	map[E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity]*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType	`path:"new-style-affinity-affinity-type" module:"Cisco-IOS-XR-mpls-te-cfg"`
	NewStyleAffinityAffinityTypeAffinity1	map[Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1_Key]*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1	`path:"new-style-affinity-affinity-type-affinity1" module:"Cisco-IOS-XR-mpls-te-cfg"`
	NewStyleAffinityAffinityTypeAffinity1Affinity2	map[Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2_Key]*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2	`path:"new-style-affinity-affinity-type-affinity1-affinity2" module:"Cisco-IOS-XR-mpls-te-cfg"`
	NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3	map[Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3_Key]*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3	`path:"new-style-affinity-affinity-type-affinity1-affinity2-affinity3" module:"Cisco-IOS-XR-mpls-te-cfg"`
	NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4	map[Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4_Key]*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4	`path:"new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4" module:"Cisco-IOS-XR-mpls-te-cfg"`
	NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5	map[Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5_Key]*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5	`path:"new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5" module:"Cisco-IOS-XR-mpls-te-cfg"`
	NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6	map[Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6_Key]*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6	`path:"new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6" module:"Cisco-IOS-XR-mpls-te-cfg"`
	NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7	map[Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7_Key]*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7	`path:"new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7" module:"Cisco-IOS-XR-mpls-te-cfg"`
	NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8	map[Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8_Key]*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8	`path:"new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8" module:"Cisco-IOS-XR-mpls-te-cfg"`
	NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9	map[Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9_Key]*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9	`path:"new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8-affinity9" module:"Cisco-IOS-XR-mpls-te-cfg"`
	NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10	map[Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10_Key]*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10	`path:"new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8-affinity9-affinity10" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes) IsYANGGoStruct() {}

// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1_Key represents the key for list NewStyleAffinityAffinityTypeAffinity1 of element /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/p2mpte-attributes/p2mpte-attribute/new-style-affinity-affinity-types.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1_Key struct {
	AffinityType	E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity	`path:"affinity-type"`
	Affinity1	string	`path:"affinity1"`
}

// IsYANGGoKeyStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1_Key) IsYANGGoKeyStruct() {}

// ΛListKeyMap returns the values of the Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1_Key key struct.
func (t Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"affinity-type": t.AffinityType,
		"affinity1": t.Affinity1,
	}, nil
}

// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2_Key represents the key for list NewStyleAffinityAffinityTypeAffinity1Affinity2 of element /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/p2mpte-attributes/p2mpte-attribute/new-style-affinity-affinity-types.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2_Key struct {
	AffinityType	E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity	`path:"affinity-type"`
	Affinity1	string	`path:"affinity1"`
	Affinity2	string	`path:"affinity2"`
}

// IsYANGGoKeyStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2_Key) IsYANGGoKeyStruct() {}

// ΛListKeyMap returns the values of the Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2_Key key struct.
func (t Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"affinity-type": t.AffinityType,
		"affinity1": t.Affinity1,
		"affinity2": t.Affinity2,
	}, nil
}

// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3_Key represents the key for list NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 of element /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/p2mpte-attributes/p2mpte-attribute/new-style-affinity-affinity-types.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3_Key struct {
	AffinityType	E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity	`path:"affinity-type"`
	Affinity1	string	`path:"affinity1"`
	Affinity2	string	`path:"affinity2"`
	Affinity3	string	`path:"affinity3"`
}

// IsYANGGoKeyStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3_Key) IsYANGGoKeyStruct() {}

// ΛListKeyMap returns the values of the Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3_Key key struct.
func (t Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"affinity-type": t.AffinityType,
		"affinity1": t.Affinity1,
		"affinity2": t.Affinity2,
		"affinity3": t.Affinity3,
	}, nil
}

// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4_Key represents the key for list NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 of element /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/p2mpte-attributes/p2mpte-attribute/new-style-affinity-affinity-types.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4_Key struct {
	AffinityType	E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity	`path:"affinity-type"`
	Affinity1	string	`path:"affinity1"`
	Affinity2	string	`path:"affinity2"`
	Affinity3	string	`path:"affinity3"`
	Affinity4	string	`path:"affinity4"`
}

// IsYANGGoKeyStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4_Key) IsYANGGoKeyStruct() {}

// ΛListKeyMap returns the values of the Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4_Key key struct.
func (t Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"affinity-type": t.AffinityType,
		"affinity1": t.Affinity1,
		"affinity2": t.Affinity2,
		"affinity3": t.Affinity3,
		"affinity4": t.Affinity4,
	}, nil
}

// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5_Key represents the key for list NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 of element /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/p2mpte-attributes/p2mpte-attribute/new-style-affinity-affinity-types.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5_Key struct {
	AffinityType	E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity	`path:"affinity-type"`
	Affinity1	string	`path:"affinity1"`
	Affinity2	string	`path:"affinity2"`
	Affinity3	string	`path:"affinity3"`
	Affinity4	string	`path:"affinity4"`
	Affinity5	string	`path:"affinity5"`
}

// IsYANGGoKeyStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5_Key) IsYANGGoKeyStruct() {}

// ΛListKeyMap returns the values of the Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5_Key key struct.
func (t Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"affinity-type": t.AffinityType,
		"affinity1": t.Affinity1,
		"affinity2": t.Affinity2,
		"affinity3": t.Affinity3,
		"affinity4": t.Affinity4,
		"affinity5": t.Affinity5,
	}, nil
}

// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6_Key represents the key for list NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 of element /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/p2mpte-attributes/p2mpte-attribute/new-style-affinity-affinity-types.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6_Key struct {
	AffinityType	E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity	`path:"affinity-type"`
	Affinity1	string	`path:"affinity1"`
	Affinity2	string	`path:"affinity2"`
	Affinity3	string	`path:"affinity3"`
	Affinity4	string	`path:"affinity4"`
	Affinity5	string	`path:"affinity5"`
	Affinity6	string	`path:"affinity6"`
}

// IsYANGGoKeyStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6_Key) IsYANGGoKeyStruct() {}

// ΛListKeyMap returns the values of the Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6_Key key struct.
func (t Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"affinity-type": t.AffinityType,
		"affinity1": t.Affinity1,
		"affinity2": t.Affinity2,
		"affinity3": t.Affinity3,
		"affinity4": t.Affinity4,
		"affinity5": t.Affinity5,
		"affinity6": t.Affinity6,
	}, nil
}

// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7_Key represents the key for list NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 of element /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/p2mpte-attributes/p2mpte-attribute/new-style-affinity-affinity-types.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7_Key struct {
	AffinityType	E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity	`path:"affinity-type"`
	Affinity1	string	`path:"affinity1"`
	Affinity2	string	`path:"affinity2"`
	Affinity3	string	`path:"affinity3"`
	Affinity4	string	`path:"affinity4"`
	Affinity5	string	`path:"affinity5"`
	Affinity6	string	`path:"affinity6"`
	Affinity7	string	`path:"affinity7"`
}

// IsYANGGoKeyStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7_Key) IsYANGGoKeyStruct() {}

// ΛListKeyMap returns the values of the Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7_Key key struct.
func (t Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"affinity-type": t.AffinityType,
		"affinity1": t.Affinity1,
		"affinity2": t.Affinity2,
		"affinity3": t.Affinity3,
		"affinity4": t.Affinity4,
		"affinity5": t.Affinity5,
		"affinity6": t.Affinity6,
		"affinity7": t.Affinity7,
	}, nil
}

// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8_Key represents the key for list NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 of element /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/p2mpte-attributes/p2mpte-attribute/new-style-affinity-affinity-types.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8_Key struct {
	AffinityType	E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity	`path:"affinity-type"`
	Affinity1	string	`path:"affinity1"`
	Affinity2	string	`path:"affinity2"`
	Affinity3	string	`path:"affinity3"`
	Affinity4	string	`path:"affinity4"`
	Affinity5	string	`path:"affinity5"`
	Affinity6	string	`path:"affinity6"`
	Affinity7	string	`path:"affinity7"`
	Affinity8	string	`path:"affinity8"`
}

// IsYANGGoKeyStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8_Key) IsYANGGoKeyStruct() {}

// ΛListKeyMap returns the values of the Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8_Key key struct.
func (t Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"affinity-type": t.AffinityType,
		"affinity1": t.Affinity1,
		"affinity2": t.Affinity2,
		"affinity3": t.Affinity3,
		"affinity4": t.Affinity4,
		"affinity5": t.Affinity5,
		"affinity6": t.Affinity6,
		"affinity7": t.Affinity7,
		"affinity8": t.Affinity8,
	}, nil
}

// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9_Key represents the key for list NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 of element /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/p2mpte-attributes/p2mpte-attribute/new-style-affinity-affinity-types.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9_Key struct {
	AffinityType	E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity	`path:"affinity-type"`
	Affinity1	string	`path:"affinity1"`
	Affinity2	string	`path:"affinity2"`
	Affinity3	string	`path:"affinity3"`
	Affinity4	string	`path:"affinity4"`
	Affinity5	string	`path:"affinity5"`
	Affinity6	string	`path:"affinity6"`
	Affinity7	string	`path:"affinity7"`
	Affinity8	string	`path:"affinity8"`
	Affinity9	string	`path:"affinity9"`
}

// IsYANGGoKeyStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9_Key) IsYANGGoKeyStruct() {}

// ΛListKeyMap returns the values of the Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9_Key key struct.
func (t Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"affinity-type": t.AffinityType,
		"affinity1": t.Affinity1,
		"affinity2": t.Affinity2,
		"affinity3": t.Affinity3,
		"affinity4": t.Affinity4,
		"affinity5": t.Affinity5,
		"affinity6": t.Affinity6,
		"affinity7": t.Affinity7,
		"affinity8": t.Affinity8,
		"affinity9": t.Affinity9,
	}, nil
}

// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10_Key represents the key for list NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 of element /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/p2mpte-attributes/p2mpte-attribute/new-style-affinity-affinity-types.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10_Key struct {
	AffinityType	E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity	`path:"affinity-type"`
	Affinity1	string	`path:"affinity1"`
	Affinity2	string	`path:"affinity2"`
	Affinity3	string	`path:"affinity3"`
	Affinity4	string	`path:"affinity4"`
	Affinity5	string	`path:"affinity5"`
	Affinity6	string	`path:"affinity6"`
	Affinity7	string	`path:"affinity7"`
	Affinity8	string	`path:"affinity8"`
	Affinity9	string	`path:"affinity9"`
	Affinity10	string	`path:"affinity10"`
}

// IsYANGGoKeyStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10_Key) IsYANGGoKeyStruct() {}

// ΛListKeyMap returns the values of the Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10_Key key struct.
func (t Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"affinity-type": t.AffinityType,
		"affinity1": t.Affinity1,
		"affinity2": t.Affinity2,
		"affinity3": t.Affinity3,
		"affinity4": t.Affinity4,
		"affinity5": t.Affinity5,
		"affinity6": t.Affinity6,
		"affinity7": t.Affinity7,
		"affinity8": t.Affinity8,
		"affinity9": t.Affinity9,
		"affinity10": t.Affinity10,
	}, nil
}

// NewNewStyleAffinityAffinityType creates a new entry in the NewStyleAffinityAffinityType list of the
// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes) NewNewStyleAffinityAffinityType(AffinityType E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity) (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NewStyleAffinityAffinityType == nil {
		t.NewStyleAffinityAffinityType = make(map[E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity]*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType)
	}

	key := AffinityType

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NewStyleAffinityAffinityType[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NewStyleAffinityAffinityType", key)
	}

	t.NewStyleAffinityAffinityType[key] = &Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType{
		AffinityType: AffinityType,
	}

	return t.NewStyleAffinityAffinityType[key], nil
}

// NewNewStyleAffinityAffinityTypeAffinity1 creates a new entry in the NewStyleAffinityAffinityTypeAffinity1 list of the
// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes) NewNewStyleAffinityAffinityTypeAffinity1(AffinityType E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity, Affinity1 string) (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NewStyleAffinityAffinityTypeAffinity1 == nil {
		t.NewStyleAffinityAffinityTypeAffinity1 = make(map[Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1_Key]*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1)
	}

	key := Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1_Key{
		AffinityType: AffinityType,
		Affinity1: Affinity1,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NewStyleAffinityAffinityTypeAffinity1[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NewStyleAffinityAffinityTypeAffinity1", key)
	}

	t.NewStyleAffinityAffinityTypeAffinity1[key] = &Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1{
		AffinityType: AffinityType,
		Affinity1: &Affinity1,
	}

	return t.NewStyleAffinityAffinityTypeAffinity1[key], nil
}

// NewNewStyleAffinityAffinityTypeAffinity1Affinity2 creates a new entry in the NewStyleAffinityAffinityTypeAffinity1Affinity2 list of the
// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes) NewNewStyleAffinityAffinityTypeAffinity1Affinity2(AffinityType E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity, Affinity1 string, Affinity2 string) (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NewStyleAffinityAffinityTypeAffinity1Affinity2 == nil {
		t.NewStyleAffinityAffinityTypeAffinity1Affinity2 = make(map[Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2_Key]*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2)
	}

	key := Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2_Key{
		AffinityType: AffinityType,
		Affinity1: Affinity1,
		Affinity2: Affinity2,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NewStyleAffinityAffinityTypeAffinity1Affinity2[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NewStyleAffinityAffinityTypeAffinity1Affinity2", key)
	}

	t.NewStyleAffinityAffinityTypeAffinity1Affinity2[key] = &Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2{
		AffinityType: AffinityType,
		Affinity1: &Affinity1,
		Affinity2: &Affinity2,
	}

	return t.NewStyleAffinityAffinityTypeAffinity1Affinity2[key], nil
}

// NewNewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 creates a new entry in the NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 list of the
// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes) NewNewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3(AffinityType E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity, Affinity1 string, Affinity2 string, Affinity3 string) (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 == nil {
		t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 = make(map[Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3_Key]*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3)
	}

	key := Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3_Key{
		AffinityType: AffinityType,
		Affinity1: Affinity1,
		Affinity2: Affinity2,
		Affinity3: Affinity3,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3", key)
	}

	t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3[key] = &Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3{
		AffinityType: AffinityType,
		Affinity1: &Affinity1,
		Affinity2: &Affinity2,
		Affinity3: &Affinity3,
	}

	return t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3[key], nil
}

// NewNewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 creates a new entry in the NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 list of the
// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes) NewNewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4(AffinityType E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity, Affinity1 string, Affinity2 string, Affinity3 string, Affinity4 string) (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 == nil {
		t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 = make(map[Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4_Key]*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4)
	}

	key := Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4_Key{
		AffinityType: AffinityType,
		Affinity1: Affinity1,
		Affinity2: Affinity2,
		Affinity3: Affinity3,
		Affinity4: Affinity4,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4", key)
	}

	t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4[key] = &Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4{
		AffinityType: AffinityType,
		Affinity1: &Affinity1,
		Affinity2: &Affinity2,
		Affinity3: &Affinity3,
		Affinity4: &Affinity4,
	}

	return t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4[key], nil
}

// NewNewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 creates a new entry in the NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 list of the
// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes) NewNewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5(AffinityType E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity, Affinity1 string, Affinity2 string, Affinity3 string, Affinity4 string, Affinity5 string) (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 == nil {
		t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 = make(map[Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5_Key]*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5)
	}

	key := Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5_Key{
		AffinityType: AffinityType,
		Affinity1: Affinity1,
		Affinity2: Affinity2,
		Affinity3: Affinity3,
		Affinity4: Affinity4,
		Affinity5: Affinity5,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5", key)
	}

	t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5[key] = &Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5{
		AffinityType: AffinityType,
		Affinity1: &Affinity1,
		Affinity2: &Affinity2,
		Affinity3: &Affinity3,
		Affinity4: &Affinity4,
		Affinity5: &Affinity5,
	}

	return t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5[key], nil
}

// NewNewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 creates a new entry in the NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 list of the
// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes) NewNewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6(AffinityType E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity, Affinity1 string, Affinity2 string, Affinity3 string, Affinity4 string, Affinity5 string, Affinity6 string) (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 == nil {
		t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 = make(map[Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6_Key]*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6)
	}

	key := Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6_Key{
		AffinityType: AffinityType,
		Affinity1: Affinity1,
		Affinity2: Affinity2,
		Affinity3: Affinity3,
		Affinity4: Affinity4,
		Affinity5: Affinity5,
		Affinity6: Affinity6,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6", key)
	}

	t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6[key] = &Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6{
		AffinityType: AffinityType,
		Affinity1: &Affinity1,
		Affinity2: &Affinity2,
		Affinity3: &Affinity3,
		Affinity4: &Affinity4,
		Affinity5: &Affinity5,
		Affinity6: &Affinity6,
	}

	return t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6[key], nil
}

// NewNewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 creates a new entry in the NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 list of the
// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes) NewNewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7(AffinityType E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity, Affinity1 string, Affinity2 string, Affinity3 string, Affinity4 string, Affinity5 string, Affinity6 string, Affinity7 string) (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 == nil {
		t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 = make(map[Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7_Key]*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7)
	}

	key := Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7_Key{
		AffinityType: AffinityType,
		Affinity1: Affinity1,
		Affinity2: Affinity2,
		Affinity3: Affinity3,
		Affinity4: Affinity4,
		Affinity5: Affinity5,
		Affinity6: Affinity6,
		Affinity7: Affinity7,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7", key)
	}

	t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7[key] = &Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7{
		AffinityType: AffinityType,
		Affinity1: &Affinity1,
		Affinity2: &Affinity2,
		Affinity3: &Affinity3,
		Affinity4: &Affinity4,
		Affinity5: &Affinity5,
		Affinity6: &Affinity6,
		Affinity7: &Affinity7,
	}

	return t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7[key], nil
}

// NewNewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 creates a new entry in the NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 list of the
// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes) NewNewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8(AffinityType E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity, Affinity1 string, Affinity2 string, Affinity3 string, Affinity4 string, Affinity5 string, Affinity6 string, Affinity7 string, Affinity8 string) (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 == nil {
		t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 = make(map[Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8_Key]*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8)
	}

	key := Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8_Key{
		AffinityType: AffinityType,
		Affinity1: Affinity1,
		Affinity2: Affinity2,
		Affinity3: Affinity3,
		Affinity4: Affinity4,
		Affinity5: Affinity5,
		Affinity6: Affinity6,
		Affinity7: Affinity7,
		Affinity8: Affinity8,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8", key)
	}

	t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8[key] = &Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8{
		AffinityType: AffinityType,
		Affinity1: &Affinity1,
		Affinity2: &Affinity2,
		Affinity3: &Affinity3,
		Affinity4: &Affinity4,
		Affinity5: &Affinity5,
		Affinity6: &Affinity6,
		Affinity7: &Affinity7,
		Affinity8: &Affinity8,
	}

	return t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8[key], nil
}

// NewNewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 creates a new entry in the NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 list of the
// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes) NewNewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9(AffinityType E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity, Affinity1 string, Affinity2 string, Affinity3 string, Affinity4 string, Affinity5 string, Affinity6 string, Affinity7 string, Affinity8 string, Affinity9 string) (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 == nil {
		t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 = make(map[Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9_Key]*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9)
	}

	key := Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9_Key{
		AffinityType: AffinityType,
		Affinity1: Affinity1,
		Affinity2: Affinity2,
		Affinity3: Affinity3,
		Affinity4: Affinity4,
		Affinity5: Affinity5,
		Affinity6: Affinity6,
		Affinity7: Affinity7,
		Affinity8: Affinity8,
		Affinity9: Affinity9,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9", key)
	}

	t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9[key] = &Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9{
		AffinityType: AffinityType,
		Affinity1: &Affinity1,
		Affinity2: &Affinity2,
		Affinity3: &Affinity3,
		Affinity4: &Affinity4,
		Affinity5: &Affinity5,
		Affinity6: &Affinity6,
		Affinity7: &Affinity7,
		Affinity8: &Affinity8,
		Affinity9: &Affinity9,
	}

	return t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9[key], nil
}

// NewNewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 creates a new entry in the NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 list of the
// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes) NewNewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10(AffinityType E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity, Affinity1 string, Affinity2 string, Affinity3 string, Affinity4 string, Affinity5 string, Affinity6 string, Affinity7 string, Affinity8 string, Affinity9 string, Affinity10 string) (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 == nil {
		t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 = make(map[Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10_Key]*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10)
	}

	key := Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10_Key{
		AffinityType: AffinityType,
		Affinity1: Affinity1,
		Affinity2: Affinity2,
		Affinity3: Affinity3,
		Affinity4: Affinity4,
		Affinity5: Affinity5,
		Affinity6: Affinity6,
		Affinity7: Affinity7,
		Affinity8: Affinity8,
		Affinity9: Affinity9,
		Affinity10: Affinity10,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10", key)
	}

	t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10[key] = &Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10{
		AffinityType: AffinityType,
		Affinity1: &Affinity1,
		Affinity2: &Affinity2,
		Affinity3: &Affinity3,
		Affinity4: &Affinity4,
		Affinity5: &Affinity5,
		Affinity6: &Affinity6,
		Affinity7: &Affinity7,
		Affinity8: &Affinity8,
		Affinity9: &Affinity9,
		Affinity10: &Affinity10,
	}

	return t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/p2mpte-attributes/p2mpte-attribute/new-style-affinity-affinity-types/new-style-affinity-affinity-type YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType struct {
	AffinityType	E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity	`path:"affinity-type" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType struct, which is a YANG list entry.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"affinity-type": t.AffinityType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1 represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/p2mpte-attributes/p2mpte-attribute/new-style-affinity-affinity-types/new-style-affinity-affinity-type-affinity1 YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1 struct {
	AffinityType	E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity	`path:"affinity-type" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity1	*string	`path:"affinity1" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1 struct, which is a YANG list entry.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1) ΛListKeyMap() (map[string]interface{}, error) {

	if t.Affinity1 == nil {
		return nil, fmt.Errorf("nil value for key Affinity1")
	}

	return map[string]interface{}{
		"affinity-type": t.AffinityType,
		"affinity1": *t.Affinity1,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2 represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/p2mpte-attributes/p2mpte-attribute/new-style-affinity-affinity-types/new-style-affinity-affinity-type-affinity1-affinity2 YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2 struct {
	AffinityType	E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity	`path:"affinity-type" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity1	*string	`path:"affinity1" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity2	*string	`path:"affinity2" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2 struct, which is a YANG list entry.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2) ΛListKeyMap() (map[string]interface{}, error) {

	if t.Affinity1 == nil {
		return nil, fmt.Errorf("nil value for key Affinity1")
	}

	if t.Affinity2 == nil {
		return nil, fmt.Errorf("nil value for key Affinity2")
	}

	return map[string]interface{}{
		"affinity-type": t.AffinityType,
		"affinity1": *t.Affinity1,
		"affinity2": *t.Affinity2,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/p2mpte-attributes/p2mpte-attribute/new-style-affinity-affinity-types/new-style-affinity-affinity-type-affinity1-affinity2-affinity3 YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 struct {
	AffinityType	E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity	`path:"affinity-type" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity1	*string	`path:"affinity1" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity2	*string	`path:"affinity2" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity3	*string	`path:"affinity3" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 struct, which is a YANG list entry.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3) ΛListKeyMap() (map[string]interface{}, error) {

	if t.Affinity1 == nil {
		return nil, fmt.Errorf("nil value for key Affinity1")
	}

	if t.Affinity2 == nil {
		return nil, fmt.Errorf("nil value for key Affinity2")
	}

	if t.Affinity3 == nil {
		return nil, fmt.Errorf("nil value for key Affinity3")
	}

	return map[string]interface{}{
		"affinity-type": t.AffinityType,
		"affinity1": *t.Affinity1,
		"affinity2": *t.Affinity2,
		"affinity3": *t.Affinity3,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/p2mpte-attributes/p2mpte-attribute/new-style-affinity-affinity-types/new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4 YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 struct {
	AffinityType	E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity	`path:"affinity-type" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity1	*string	`path:"affinity1" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity2	*string	`path:"affinity2" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity3	*string	`path:"affinity3" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity4	*string	`path:"affinity4" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 struct, which is a YANG list entry.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4) ΛListKeyMap() (map[string]interface{}, error) {

	if t.Affinity1 == nil {
		return nil, fmt.Errorf("nil value for key Affinity1")
	}

	if t.Affinity2 == nil {
		return nil, fmt.Errorf("nil value for key Affinity2")
	}

	if t.Affinity3 == nil {
		return nil, fmt.Errorf("nil value for key Affinity3")
	}

	if t.Affinity4 == nil {
		return nil, fmt.Errorf("nil value for key Affinity4")
	}

	return map[string]interface{}{
		"affinity-type": t.AffinityType,
		"affinity1": *t.Affinity1,
		"affinity2": *t.Affinity2,
		"affinity3": *t.Affinity3,
		"affinity4": *t.Affinity4,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/p2mpte-attributes/p2mpte-attribute/new-style-affinity-affinity-types/new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5 YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 struct {
	AffinityType	E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity	`path:"affinity-type" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity1	*string	`path:"affinity1" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity2	*string	`path:"affinity2" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity3	*string	`path:"affinity3" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity4	*string	`path:"affinity4" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity5	*string	`path:"affinity5" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 struct, which is a YANG list entry.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5) ΛListKeyMap() (map[string]interface{}, error) {

	if t.Affinity1 == nil {
		return nil, fmt.Errorf("nil value for key Affinity1")
	}

	if t.Affinity2 == nil {
		return nil, fmt.Errorf("nil value for key Affinity2")
	}

	if t.Affinity3 == nil {
		return nil, fmt.Errorf("nil value for key Affinity3")
	}

	if t.Affinity4 == nil {
		return nil, fmt.Errorf("nil value for key Affinity4")
	}

	if t.Affinity5 == nil {
		return nil, fmt.Errorf("nil value for key Affinity5")
	}

	return map[string]interface{}{
		"affinity-type": t.AffinityType,
		"affinity1": *t.Affinity1,
		"affinity2": *t.Affinity2,
		"affinity3": *t.Affinity3,
		"affinity4": *t.Affinity4,
		"affinity5": *t.Affinity5,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/p2mpte-attributes/p2mpte-attribute/new-style-affinity-affinity-types/new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6 YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 struct {
	AffinityType	E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity	`path:"affinity-type" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity1	*string	`path:"affinity1" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity2	*string	`path:"affinity2" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity3	*string	`path:"affinity3" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity4	*string	`path:"affinity4" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity5	*string	`path:"affinity5" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity6	*string	`path:"affinity6" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 struct, which is a YANG list entry.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6) ΛListKeyMap() (map[string]interface{}, error) {

	if t.Affinity1 == nil {
		return nil, fmt.Errorf("nil value for key Affinity1")
	}

	if t.Affinity2 == nil {
		return nil, fmt.Errorf("nil value for key Affinity2")
	}

	if t.Affinity3 == nil {
		return nil, fmt.Errorf("nil value for key Affinity3")
	}

	if t.Affinity4 == nil {
		return nil, fmt.Errorf("nil value for key Affinity4")
	}

	if t.Affinity5 == nil {
		return nil, fmt.Errorf("nil value for key Affinity5")
	}

	if t.Affinity6 == nil {
		return nil, fmt.Errorf("nil value for key Affinity6")
	}

	return map[string]interface{}{
		"affinity-type": t.AffinityType,
		"affinity1": *t.Affinity1,
		"affinity2": *t.Affinity2,
		"affinity3": *t.Affinity3,
		"affinity4": *t.Affinity4,
		"affinity5": *t.Affinity5,
		"affinity6": *t.Affinity6,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/p2mpte-attributes/p2mpte-attribute/new-style-affinity-affinity-types/new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7 YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 struct {
	AffinityType	E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity	`path:"affinity-type" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity1	*string	`path:"affinity1" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity2	*string	`path:"affinity2" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity3	*string	`path:"affinity3" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity4	*string	`path:"affinity4" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity5	*string	`path:"affinity5" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity6	*string	`path:"affinity6" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity7	*string	`path:"affinity7" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 struct, which is a YANG list entry.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7) ΛListKeyMap() (map[string]interface{}, error) {

	if t.Affinity1 == nil {
		return nil, fmt.Errorf("nil value for key Affinity1")
	}

	if t.Affinity2 == nil {
		return nil, fmt.Errorf("nil value for key Affinity2")
	}

	if t.Affinity3 == nil {
		return nil, fmt.Errorf("nil value for key Affinity3")
	}

	if t.Affinity4 == nil {
		return nil, fmt.Errorf("nil value for key Affinity4")
	}

	if t.Affinity5 == nil {
		return nil, fmt.Errorf("nil value for key Affinity5")
	}

	if t.Affinity6 == nil {
		return nil, fmt.Errorf("nil value for key Affinity6")
	}

	if t.Affinity7 == nil {
		return nil, fmt.Errorf("nil value for key Affinity7")
	}

	return map[string]interface{}{
		"affinity-type": t.AffinityType,
		"affinity1": *t.Affinity1,
		"affinity2": *t.Affinity2,
		"affinity3": *t.Affinity3,
		"affinity4": *t.Affinity4,
		"affinity5": *t.Affinity5,
		"affinity6": *t.Affinity6,
		"affinity7": *t.Affinity7,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/p2mpte-attributes/p2mpte-attribute/new-style-affinity-affinity-types/new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8 YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 struct {
	AffinityType	E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity	`path:"affinity-type" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity1	*string	`path:"affinity1" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity2	*string	`path:"affinity2" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity3	*string	`path:"affinity3" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity4	*string	`path:"affinity4" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity5	*string	`path:"affinity5" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity6	*string	`path:"affinity6" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity7	*string	`path:"affinity7" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity8	*string	`path:"affinity8" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 struct, which is a YANG list entry.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8) ΛListKeyMap() (map[string]interface{}, error) {

	if t.Affinity1 == nil {
		return nil, fmt.Errorf("nil value for key Affinity1")
	}

	if t.Affinity2 == nil {
		return nil, fmt.Errorf("nil value for key Affinity2")
	}

	if t.Affinity3 == nil {
		return nil, fmt.Errorf("nil value for key Affinity3")
	}

	if t.Affinity4 == nil {
		return nil, fmt.Errorf("nil value for key Affinity4")
	}

	if t.Affinity5 == nil {
		return nil, fmt.Errorf("nil value for key Affinity5")
	}

	if t.Affinity6 == nil {
		return nil, fmt.Errorf("nil value for key Affinity6")
	}

	if t.Affinity7 == nil {
		return nil, fmt.Errorf("nil value for key Affinity7")
	}

	if t.Affinity8 == nil {
		return nil, fmt.Errorf("nil value for key Affinity8")
	}

	return map[string]interface{}{
		"affinity-type": t.AffinityType,
		"affinity1": *t.Affinity1,
		"affinity2": *t.Affinity2,
		"affinity3": *t.Affinity3,
		"affinity4": *t.Affinity4,
		"affinity5": *t.Affinity5,
		"affinity6": *t.Affinity6,
		"affinity7": *t.Affinity7,
		"affinity8": *t.Affinity8,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/p2mpte-attributes/p2mpte-attribute/new-style-affinity-affinity-types/new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8-affinity9 YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 struct {
	AffinityType	E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity	`path:"affinity-type" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity1	*string	`path:"affinity1" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity2	*string	`path:"affinity2" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity3	*string	`path:"affinity3" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity4	*string	`path:"affinity4" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity5	*string	`path:"affinity5" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity6	*string	`path:"affinity6" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity7	*string	`path:"affinity7" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity8	*string	`path:"affinity8" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity9	*string	`path:"affinity9" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 struct, which is a YANG list entry.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9) ΛListKeyMap() (map[string]interface{}, error) {

	if t.Affinity1 == nil {
		return nil, fmt.Errorf("nil value for key Affinity1")
	}

	if t.Affinity2 == nil {
		return nil, fmt.Errorf("nil value for key Affinity2")
	}

	if t.Affinity3 == nil {
		return nil, fmt.Errorf("nil value for key Affinity3")
	}

	if t.Affinity4 == nil {
		return nil, fmt.Errorf("nil value for key Affinity4")
	}

	if t.Affinity5 == nil {
		return nil, fmt.Errorf("nil value for key Affinity5")
	}

	if t.Affinity6 == nil {
		return nil, fmt.Errorf("nil value for key Affinity6")
	}

	if t.Affinity7 == nil {
		return nil, fmt.Errorf("nil value for key Affinity7")
	}

	if t.Affinity8 == nil {
		return nil, fmt.Errorf("nil value for key Affinity8")
	}

	if t.Affinity9 == nil {
		return nil, fmt.Errorf("nil value for key Affinity9")
	}

	return map[string]interface{}{
		"affinity-type": t.AffinityType,
		"affinity1": *t.Affinity1,
		"affinity2": *t.Affinity2,
		"affinity3": *t.Affinity3,
		"affinity4": *t.Affinity4,
		"affinity5": *t.Affinity5,
		"affinity6": *t.Affinity6,
		"affinity7": *t.Affinity7,
		"affinity8": *t.Affinity8,
		"affinity9": *t.Affinity9,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/p2mpte-attributes/p2mpte-attribute/new-style-affinity-affinity-types/new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8-affinity9-affinity10 YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 struct {
	AffinityType	E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity	`path:"affinity-type" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity1	*string	`path:"affinity1" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity10	*string	`path:"affinity10" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity2	*string	`path:"affinity2" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity3	*string	`path:"affinity3" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity4	*string	`path:"affinity4" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity5	*string	`path:"affinity5" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity6	*string	`path:"affinity6" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity7	*string	`path:"affinity7" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity8	*string	`path:"affinity8" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity9	*string	`path:"affinity9" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 struct, which is a YANG list entry.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10) ΛListKeyMap() (map[string]interface{}, error) {

	if t.Affinity1 == nil {
		return nil, fmt.Errorf("nil value for key Affinity1")
	}

	if t.Affinity10 == nil {
		return nil, fmt.Errorf("nil value for key Affinity10")
	}

	if t.Affinity2 == nil {
		return nil, fmt.Errorf("nil value for key Affinity2")
	}

	if t.Affinity3 == nil {
		return nil, fmt.Errorf("nil value for key Affinity3")
	}

	if t.Affinity4 == nil {
		return nil, fmt.Errorf("nil value for key Affinity4")
	}

	if t.Affinity5 == nil {
		return nil, fmt.Errorf("nil value for key Affinity5")
	}

	if t.Affinity6 == nil {
		return nil, fmt.Errorf("nil value for key Affinity6")
	}

	if t.Affinity7 == nil {
		return nil, fmt.Errorf("nil value for key Affinity7")
	}

	if t.Affinity8 == nil {
		return nil, fmt.Errorf("nil value for key Affinity8")
	}

	if t.Affinity9 == nil {
		return nil, fmt.Errorf("nil value for key Affinity9")
	}

	return map[string]interface{}{
		"affinity-type": t.AffinityType,
		"affinity1": *t.Affinity1,
		"affinity10": *t.Affinity10,
		"affinity2": *t.Affinity2,
		"affinity3": *t.Affinity3,
		"affinity4": *t.Affinity4,
		"affinity5": *t.Affinity5,
		"affinity6": *t.Affinity6,
		"affinity7": *t.Affinity7,
		"affinity8": *t.Affinity8,
		"affinity9": *t.Affinity9,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_PathSelection represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/p2mpte-attributes/p2mpte-attribute/path-selection YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_PathSelection struct {
	Enable	YANGEmpty	`path:"enable" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_PathSelection implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_PathSelection) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_PathSelection) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_PathSelection"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_PathSelection) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_PathSelection) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_PathSelection.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_PathSelection) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_Priority represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/p2mpte-attributes/p2mpte-attribute/priority YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_Priority struct {
	HoldPriority	*uint32	`path:"hold-priority" module:"Cisco-IOS-XR-mpls-te-cfg"`
	SetupPriority	*uint32	`path:"setup-priority" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_Priority implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_Priority) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_Priority) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_Priority"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_Priority) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_Priority) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_Priority.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_Priority) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/p2p-te-attributes YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes struct {
	P2PTeAttribute	map[string]*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute	`path:"p2p-te-attribute" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes) IsYANGGoStruct() {}

// NewP2PTeAttribute creates a new entry in the P2PTeAttribute list of the
// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes) NewP2PTeAttribute(AttributeSetName string) (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.P2PTeAttribute == nil {
		t.P2PTeAttribute = make(map[string]*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute)
	}

	key := AttributeSetName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.P2PTeAttribute[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list P2PTeAttribute", key)
	}

	t.P2PTeAttribute[key] = &Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute{
		AttributeSetName: &AttributeSetName,
	}

	return t.P2PTeAttribute[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/p2p-te-attributes/p2p-te-attribute YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute struct {
	AffinityMask	*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_AffinityMask	`path:"affinity-mask" module:"Cisco-IOS-XR-mpls-te-cfg"`
	AttributeSetName	*string	`path:"attribute-set-name" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Logging	*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_Logging	`path:"logging" module:"Cisco-IOS-XR-mpls-te-cfg"`
	NewStyleAffinityAffinityTypes	*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes	`path:"new-style-affinity-affinity-types" module:"Cisco-IOS-XR-mpls-te-cfg"`
	PathSelection	*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_PathSelection	`path:"path-selection" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Pce	*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_Pce	`path:"pce" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute struct, which is a YANG list entry.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute) ΛListKeyMap() (map[string]interface{}, error) {
	if t.AttributeSetName == nil {
		return nil, fmt.Errorf("nil value for key AttributeSetName")
	}

	return map[string]interface{}{
		"attribute-set-name": *t.AttributeSetName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_AffinityMask represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/p2p-te-attributes/p2p-te-attribute/affinity-mask YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_AffinityMask struct {
	Affinity	*string	`path:"affinity" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Mask	*string	`path:"mask" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_AffinityMask implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_AffinityMask) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_AffinityMask) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_AffinityMask"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_AffinityMask) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_AffinityMask) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_AffinityMask.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_AffinityMask) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_Logging represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/p2p-te-attributes/p2p-te-attribute/logging YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_Logging struct {
	All	YANGEmpty	`path:"all" module:"Cisco-IOS-XR-mpls-te-cfg"`
	BandwidthChangeMessage	YANGEmpty	`path:"bandwidth-change-message" module:"Cisco-IOS-XR-mpls-te-cfg"`
	BfdStateMessage	YANGEmpty	`path:"bfd-state-message" module:"Cisco-IOS-XR-mpls-te-cfg"`
	InsufficientBwMessage	YANGEmpty	`path:"insufficient-bw-message" module:"Cisco-IOS-XR-mpls-te-cfg"`
	LspSwitchOverChangeMessage	YANGEmpty	`path:"lsp-switch-over-change-message" module:"Cisco-IOS-XR-mpls-te-cfg"`
	PathErrorMessage	YANGEmpty	`path:"path-error-message" module:"Cisco-IOS-XR-mpls-te-cfg"`
	PcalcFailureMessage	YANGEmpty	`path:"pcalc-failure-message" module:"Cisco-IOS-XR-mpls-te-cfg"`
	RecordRouteMesssage	YANGEmpty	`path:"record-route-messsage" module:"Cisco-IOS-XR-mpls-te-cfg"`
	ReoptimizeAttemptsMessage	YANGEmpty	`path:"reoptimize-attempts-message" module:"Cisco-IOS-XR-mpls-te-cfg"`
	ReoptimizedMessage	YANGEmpty	`path:"reoptimized-message" module:"Cisco-IOS-XR-mpls-te-cfg"`
	RerouteMesssage	YANGEmpty	`path:"reroute-messsage" module:"Cisco-IOS-XR-mpls-te-cfg"`
	StateMessage	YANGEmpty	`path:"state-message" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_Logging implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_Logging) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_Logging) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_Logging"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_Logging) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_Logging) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_Logging.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_Logging) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/p2p-te-attributes/p2p-te-attribute/new-style-affinity-affinity-types YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes struct {
	NewStyleAffinityAffinityType	map[E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity]*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType	`path:"new-style-affinity-affinity-type" module:"Cisco-IOS-XR-mpls-te-cfg"`
	NewStyleAffinityAffinityTypeAffinity1	map[Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1_Key]*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1	`path:"new-style-affinity-affinity-type-affinity1" module:"Cisco-IOS-XR-mpls-te-cfg"`
	NewStyleAffinityAffinityTypeAffinity1Affinity2	map[Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2_Key]*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2	`path:"new-style-affinity-affinity-type-affinity1-affinity2" module:"Cisco-IOS-XR-mpls-te-cfg"`
	NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3	map[Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3_Key]*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3	`path:"new-style-affinity-affinity-type-affinity1-affinity2-affinity3" module:"Cisco-IOS-XR-mpls-te-cfg"`
	NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4	map[Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4_Key]*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4	`path:"new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4" module:"Cisco-IOS-XR-mpls-te-cfg"`
	NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5	map[Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5_Key]*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5	`path:"new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5" module:"Cisco-IOS-XR-mpls-te-cfg"`
	NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6	map[Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6_Key]*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6	`path:"new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6" module:"Cisco-IOS-XR-mpls-te-cfg"`
	NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7	map[Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7_Key]*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7	`path:"new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7" module:"Cisco-IOS-XR-mpls-te-cfg"`
	NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8	map[Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8_Key]*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8	`path:"new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8" module:"Cisco-IOS-XR-mpls-te-cfg"`
	NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9	map[Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9_Key]*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9	`path:"new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8-affinity9" module:"Cisco-IOS-XR-mpls-te-cfg"`
	NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10	map[Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10_Key]*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10	`path:"new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8-affinity9-affinity10" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes) IsYANGGoStruct() {}

// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1_Key represents the key for list NewStyleAffinityAffinityTypeAffinity1 of element /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/p2p-te-attributes/p2p-te-attribute/new-style-affinity-affinity-types.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1_Key struct {
	AffinityType	E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity	`path:"affinity-type"`
	Affinity1	string	`path:"affinity1"`
}

// IsYANGGoKeyStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1_Key) IsYANGGoKeyStruct() {}

// ΛListKeyMap returns the values of the Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1_Key key struct.
func (t Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"affinity-type": t.AffinityType,
		"affinity1": t.Affinity1,
	}, nil
}

// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2_Key represents the key for list NewStyleAffinityAffinityTypeAffinity1Affinity2 of element /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/p2p-te-attributes/p2p-te-attribute/new-style-affinity-affinity-types.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2_Key struct {
	AffinityType	E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity	`path:"affinity-type"`
	Affinity1	string	`path:"affinity1"`
	Affinity2	string	`path:"affinity2"`
}

// IsYANGGoKeyStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2_Key) IsYANGGoKeyStruct() {}

// ΛListKeyMap returns the values of the Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2_Key key struct.
func (t Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"affinity-type": t.AffinityType,
		"affinity1": t.Affinity1,
		"affinity2": t.Affinity2,
	}, nil
}

// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3_Key represents the key for list NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 of element /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/p2p-te-attributes/p2p-te-attribute/new-style-affinity-affinity-types.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3_Key struct {
	AffinityType	E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity	`path:"affinity-type"`
	Affinity1	string	`path:"affinity1"`
	Affinity2	string	`path:"affinity2"`
	Affinity3	string	`path:"affinity3"`
}

// IsYANGGoKeyStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3_Key) IsYANGGoKeyStruct() {}

// ΛListKeyMap returns the values of the Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3_Key key struct.
func (t Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"affinity-type": t.AffinityType,
		"affinity1": t.Affinity1,
		"affinity2": t.Affinity2,
		"affinity3": t.Affinity3,
	}, nil
}

// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4_Key represents the key for list NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 of element /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/p2p-te-attributes/p2p-te-attribute/new-style-affinity-affinity-types.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4_Key struct {
	AffinityType	E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity	`path:"affinity-type"`
	Affinity1	string	`path:"affinity1"`
	Affinity2	string	`path:"affinity2"`
	Affinity3	string	`path:"affinity3"`
	Affinity4	string	`path:"affinity4"`
}

// IsYANGGoKeyStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4_Key) IsYANGGoKeyStruct() {}

// ΛListKeyMap returns the values of the Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4_Key key struct.
func (t Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"affinity-type": t.AffinityType,
		"affinity1": t.Affinity1,
		"affinity2": t.Affinity2,
		"affinity3": t.Affinity3,
		"affinity4": t.Affinity4,
	}, nil
}

// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5_Key represents the key for list NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 of element /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/p2p-te-attributes/p2p-te-attribute/new-style-affinity-affinity-types.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5_Key struct {
	AffinityType	E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity	`path:"affinity-type"`
	Affinity1	string	`path:"affinity1"`
	Affinity2	string	`path:"affinity2"`
	Affinity3	string	`path:"affinity3"`
	Affinity4	string	`path:"affinity4"`
	Affinity5	string	`path:"affinity5"`
}

// IsYANGGoKeyStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5_Key) IsYANGGoKeyStruct() {}

// ΛListKeyMap returns the values of the Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5_Key key struct.
func (t Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"affinity-type": t.AffinityType,
		"affinity1": t.Affinity1,
		"affinity2": t.Affinity2,
		"affinity3": t.Affinity3,
		"affinity4": t.Affinity4,
		"affinity5": t.Affinity5,
	}, nil
}

// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6_Key represents the key for list NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 of element /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/p2p-te-attributes/p2p-te-attribute/new-style-affinity-affinity-types.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6_Key struct {
	AffinityType	E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity	`path:"affinity-type"`
	Affinity1	string	`path:"affinity1"`
	Affinity2	string	`path:"affinity2"`
	Affinity3	string	`path:"affinity3"`
	Affinity4	string	`path:"affinity4"`
	Affinity5	string	`path:"affinity5"`
	Affinity6	string	`path:"affinity6"`
}

// IsYANGGoKeyStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6_Key) IsYANGGoKeyStruct() {}

// ΛListKeyMap returns the values of the Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6_Key key struct.
func (t Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"affinity-type": t.AffinityType,
		"affinity1": t.Affinity1,
		"affinity2": t.Affinity2,
		"affinity3": t.Affinity3,
		"affinity4": t.Affinity4,
		"affinity5": t.Affinity5,
		"affinity6": t.Affinity6,
	}, nil
}

// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7_Key represents the key for list NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 of element /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/p2p-te-attributes/p2p-te-attribute/new-style-affinity-affinity-types.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7_Key struct {
	AffinityType	E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity	`path:"affinity-type"`
	Affinity1	string	`path:"affinity1"`
	Affinity2	string	`path:"affinity2"`
	Affinity3	string	`path:"affinity3"`
	Affinity4	string	`path:"affinity4"`
	Affinity5	string	`path:"affinity5"`
	Affinity6	string	`path:"affinity6"`
	Affinity7	string	`path:"affinity7"`
}

// IsYANGGoKeyStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7_Key) IsYANGGoKeyStruct() {}

// ΛListKeyMap returns the values of the Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7_Key key struct.
func (t Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"affinity-type": t.AffinityType,
		"affinity1": t.Affinity1,
		"affinity2": t.Affinity2,
		"affinity3": t.Affinity3,
		"affinity4": t.Affinity4,
		"affinity5": t.Affinity5,
		"affinity6": t.Affinity6,
		"affinity7": t.Affinity7,
	}, nil
}

// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8_Key represents the key for list NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 of element /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/p2p-te-attributes/p2p-te-attribute/new-style-affinity-affinity-types.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8_Key struct {
	AffinityType	E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity	`path:"affinity-type"`
	Affinity1	string	`path:"affinity1"`
	Affinity2	string	`path:"affinity2"`
	Affinity3	string	`path:"affinity3"`
	Affinity4	string	`path:"affinity4"`
	Affinity5	string	`path:"affinity5"`
	Affinity6	string	`path:"affinity6"`
	Affinity7	string	`path:"affinity7"`
	Affinity8	string	`path:"affinity8"`
}

// IsYANGGoKeyStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8_Key) IsYANGGoKeyStruct() {}

// ΛListKeyMap returns the values of the Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8_Key key struct.
func (t Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"affinity-type": t.AffinityType,
		"affinity1": t.Affinity1,
		"affinity2": t.Affinity2,
		"affinity3": t.Affinity3,
		"affinity4": t.Affinity4,
		"affinity5": t.Affinity5,
		"affinity6": t.Affinity6,
		"affinity7": t.Affinity7,
		"affinity8": t.Affinity8,
	}, nil
}

// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9_Key represents the key for list NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 of element /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/p2p-te-attributes/p2p-te-attribute/new-style-affinity-affinity-types.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9_Key struct {
	AffinityType	E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity	`path:"affinity-type"`
	Affinity1	string	`path:"affinity1"`
	Affinity2	string	`path:"affinity2"`
	Affinity3	string	`path:"affinity3"`
	Affinity4	string	`path:"affinity4"`
	Affinity5	string	`path:"affinity5"`
	Affinity6	string	`path:"affinity6"`
	Affinity7	string	`path:"affinity7"`
	Affinity8	string	`path:"affinity8"`
	Affinity9	string	`path:"affinity9"`
}

// IsYANGGoKeyStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9_Key) IsYANGGoKeyStruct() {}

// ΛListKeyMap returns the values of the Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9_Key key struct.
func (t Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"affinity-type": t.AffinityType,
		"affinity1": t.Affinity1,
		"affinity2": t.Affinity2,
		"affinity3": t.Affinity3,
		"affinity4": t.Affinity4,
		"affinity5": t.Affinity5,
		"affinity6": t.Affinity6,
		"affinity7": t.Affinity7,
		"affinity8": t.Affinity8,
		"affinity9": t.Affinity9,
	}, nil
}

// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10_Key represents the key for list NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 of element /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/p2p-te-attributes/p2p-te-attribute/new-style-affinity-affinity-types.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10_Key struct {
	AffinityType	E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity	`path:"affinity-type"`
	Affinity1	string	`path:"affinity1"`
	Affinity2	string	`path:"affinity2"`
	Affinity3	string	`path:"affinity3"`
	Affinity4	string	`path:"affinity4"`
	Affinity5	string	`path:"affinity5"`
	Affinity6	string	`path:"affinity6"`
	Affinity7	string	`path:"affinity7"`
	Affinity8	string	`path:"affinity8"`
	Affinity9	string	`path:"affinity9"`
	Affinity10	string	`path:"affinity10"`
}

// IsYANGGoKeyStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10_Key) IsYANGGoKeyStruct() {}

// ΛListKeyMap returns the values of the Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10_Key key struct.
func (t Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"affinity-type": t.AffinityType,
		"affinity1": t.Affinity1,
		"affinity2": t.Affinity2,
		"affinity3": t.Affinity3,
		"affinity4": t.Affinity4,
		"affinity5": t.Affinity5,
		"affinity6": t.Affinity6,
		"affinity7": t.Affinity7,
		"affinity8": t.Affinity8,
		"affinity9": t.Affinity9,
		"affinity10": t.Affinity10,
	}, nil
}

// NewNewStyleAffinityAffinityType creates a new entry in the NewStyleAffinityAffinityType list of the
// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes) NewNewStyleAffinityAffinityType(AffinityType E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity) (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NewStyleAffinityAffinityType == nil {
		t.NewStyleAffinityAffinityType = make(map[E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity]*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType)
	}

	key := AffinityType

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NewStyleAffinityAffinityType[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NewStyleAffinityAffinityType", key)
	}

	t.NewStyleAffinityAffinityType[key] = &Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType{
		AffinityType: AffinityType,
	}

	return t.NewStyleAffinityAffinityType[key], nil
}

// NewNewStyleAffinityAffinityTypeAffinity1 creates a new entry in the NewStyleAffinityAffinityTypeAffinity1 list of the
// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes) NewNewStyleAffinityAffinityTypeAffinity1(AffinityType E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity, Affinity1 string) (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NewStyleAffinityAffinityTypeAffinity1 == nil {
		t.NewStyleAffinityAffinityTypeAffinity1 = make(map[Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1_Key]*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1)
	}

	key := Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1_Key{
		AffinityType: AffinityType,
		Affinity1: Affinity1,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NewStyleAffinityAffinityTypeAffinity1[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NewStyleAffinityAffinityTypeAffinity1", key)
	}

	t.NewStyleAffinityAffinityTypeAffinity1[key] = &Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1{
		AffinityType: AffinityType,
		Affinity1: &Affinity1,
	}

	return t.NewStyleAffinityAffinityTypeAffinity1[key], nil
}

// NewNewStyleAffinityAffinityTypeAffinity1Affinity2 creates a new entry in the NewStyleAffinityAffinityTypeAffinity1Affinity2 list of the
// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes) NewNewStyleAffinityAffinityTypeAffinity1Affinity2(AffinityType E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity, Affinity1 string, Affinity2 string) (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NewStyleAffinityAffinityTypeAffinity1Affinity2 == nil {
		t.NewStyleAffinityAffinityTypeAffinity1Affinity2 = make(map[Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2_Key]*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2)
	}

	key := Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2_Key{
		AffinityType: AffinityType,
		Affinity1: Affinity1,
		Affinity2: Affinity2,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NewStyleAffinityAffinityTypeAffinity1Affinity2[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NewStyleAffinityAffinityTypeAffinity1Affinity2", key)
	}

	t.NewStyleAffinityAffinityTypeAffinity1Affinity2[key] = &Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2{
		AffinityType: AffinityType,
		Affinity1: &Affinity1,
		Affinity2: &Affinity2,
	}

	return t.NewStyleAffinityAffinityTypeAffinity1Affinity2[key], nil
}

// NewNewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 creates a new entry in the NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 list of the
// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes) NewNewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3(AffinityType E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity, Affinity1 string, Affinity2 string, Affinity3 string) (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 == nil {
		t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 = make(map[Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3_Key]*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3)
	}

	key := Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3_Key{
		AffinityType: AffinityType,
		Affinity1: Affinity1,
		Affinity2: Affinity2,
		Affinity3: Affinity3,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3", key)
	}

	t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3[key] = &Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3{
		AffinityType: AffinityType,
		Affinity1: &Affinity1,
		Affinity2: &Affinity2,
		Affinity3: &Affinity3,
	}

	return t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3[key], nil
}

// NewNewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 creates a new entry in the NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 list of the
// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes) NewNewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4(AffinityType E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity, Affinity1 string, Affinity2 string, Affinity3 string, Affinity4 string) (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 == nil {
		t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 = make(map[Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4_Key]*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4)
	}

	key := Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4_Key{
		AffinityType: AffinityType,
		Affinity1: Affinity1,
		Affinity2: Affinity2,
		Affinity3: Affinity3,
		Affinity4: Affinity4,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4", key)
	}

	t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4[key] = &Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4{
		AffinityType: AffinityType,
		Affinity1: &Affinity1,
		Affinity2: &Affinity2,
		Affinity3: &Affinity3,
		Affinity4: &Affinity4,
	}

	return t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4[key], nil
}

// NewNewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 creates a new entry in the NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 list of the
// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes) NewNewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5(AffinityType E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity, Affinity1 string, Affinity2 string, Affinity3 string, Affinity4 string, Affinity5 string) (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 == nil {
		t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 = make(map[Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5_Key]*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5)
	}

	key := Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5_Key{
		AffinityType: AffinityType,
		Affinity1: Affinity1,
		Affinity2: Affinity2,
		Affinity3: Affinity3,
		Affinity4: Affinity4,
		Affinity5: Affinity5,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5", key)
	}

	t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5[key] = &Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5{
		AffinityType: AffinityType,
		Affinity1: &Affinity1,
		Affinity2: &Affinity2,
		Affinity3: &Affinity3,
		Affinity4: &Affinity4,
		Affinity5: &Affinity5,
	}

	return t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5[key], nil
}

// NewNewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 creates a new entry in the NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 list of the
// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes) NewNewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6(AffinityType E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity, Affinity1 string, Affinity2 string, Affinity3 string, Affinity4 string, Affinity5 string, Affinity6 string) (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 == nil {
		t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 = make(map[Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6_Key]*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6)
	}

	key := Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6_Key{
		AffinityType: AffinityType,
		Affinity1: Affinity1,
		Affinity2: Affinity2,
		Affinity3: Affinity3,
		Affinity4: Affinity4,
		Affinity5: Affinity5,
		Affinity6: Affinity6,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6", key)
	}

	t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6[key] = &Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6{
		AffinityType: AffinityType,
		Affinity1: &Affinity1,
		Affinity2: &Affinity2,
		Affinity3: &Affinity3,
		Affinity4: &Affinity4,
		Affinity5: &Affinity5,
		Affinity6: &Affinity6,
	}

	return t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6[key], nil
}

// NewNewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 creates a new entry in the NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 list of the
// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes) NewNewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7(AffinityType E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity, Affinity1 string, Affinity2 string, Affinity3 string, Affinity4 string, Affinity5 string, Affinity6 string, Affinity7 string) (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 == nil {
		t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 = make(map[Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7_Key]*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7)
	}

	key := Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7_Key{
		AffinityType: AffinityType,
		Affinity1: Affinity1,
		Affinity2: Affinity2,
		Affinity3: Affinity3,
		Affinity4: Affinity4,
		Affinity5: Affinity5,
		Affinity6: Affinity6,
		Affinity7: Affinity7,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7", key)
	}

	t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7[key] = &Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7{
		AffinityType: AffinityType,
		Affinity1: &Affinity1,
		Affinity2: &Affinity2,
		Affinity3: &Affinity3,
		Affinity4: &Affinity4,
		Affinity5: &Affinity5,
		Affinity6: &Affinity6,
		Affinity7: &Affinity7,
	}

	return t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7[key], nil
}

// NewNewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 creates a new entry in the NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 list of the
// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes) NewNewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8(AffinityType E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity, Affinity1 string, Affinity2 string, Affinity3 string, Affinity4 string, Affinity5 string, Affinity6 string, Affinity7 string, Affinity8 string) (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 == nil {
		t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 = make(map[Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8_Key]*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8)
	}

	key := Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8_Key{
		AffinityType: AffinityType,
		Affinity1: Affinity1,
		Affinity2: Affinity2,
		Affinity3: Affinity3,
		Affinity4: Affinity4,
		Affinity5: Affinity5,
		Affinity6: Affinity6,
		Affinity7: Affinity7,
		Affinity8: Affinity8,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8", key)
	}

	t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8[key] = &Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8{
		AffinityType: AffinityType,
		Affinity1: &Affinity1,
		Affinity2: &Affinity2,
		Affinity3: &Affinity3,
		Affinity4: &Affinity4,
		Affinity5: &Affinity5,
		Affinity6: &Affinity6,
		Affinity7: &Affinity7,
		Affinity8: &Affinity8,
	}

	return t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8[key], nil
}

// NewNewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 creates a new entry in the NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 list of the
// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes) NewNewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9(AffinityType E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity, Affinity1 string, Affinity2 string, Affinity3 string, Affinity4 string, Affinity5 string, Affinity6 string, Affinity7 string, Affinity8 string, Affinity9 string) (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 == nil {
		t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 = make(map[Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9_Key]*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9)
	}

	key := Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9_Key{
		AffinityType: AffinityType,
		Affinity1: Affinity1,
		Affinity2: Affinity2,
		Affinity3: Affinity3,
		Affinity4: Affinity4,
		Affinity5: Affinity5,
		Affinity6: Affinity6,
		Affinity7: Affinity7,
		Affinity8: Affinity8,
		Affinity9: Affinity9,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9", key)
	}

	t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9[key] = &Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9{
		AffinityType: AffinityType,
		Affinity1: &Affinity1,
		Affinity2: &Affinity2,
		Affinity3: &Affinity3,
		Affinity4: &Affinity4,
		Affinity5: &Affinity5,
		Affinity6: &Affinity6,
		Affinity7: &Affinity7,
		Affinity8: &Affinity8,
		Affinity9: &Affinity9,
	}

	return t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9[key], nil
}

// NewNewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 creates a new entry in the NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 list of the
// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes) NewNewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10(AffinityType E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity, Affinity1 string, Affinity2 string, Affinity3 string, Affinity4 string, Affinity5 string, Affinity6 string, Affinity7 string, Affinity8 string, Affinity9 string, Affinity10 string) (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 == nil {
		t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 = make(map[Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10_Key]*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10)
	}

	key := Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10_Key{
		AffinityType: AffinityType,
		Affinity1: Affinity1,
		Affinity2: Affinity2,
		Affinity3: Affinity3,
		Affinity4: Affinity4,
		Affinity5: Affinity5,
		Affinity6: Affinity6,
		Affinity7: Affinity7,
		Affinity8: Affinity8,
		Affinity9: Affinity9,
		Affinity10: Affinity10,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10", key)
	}

	t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10[key] = &Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10{
		AffinityType: AffinityType,
		Affinity1: &Affinity1,
		Affinity2: &Affinity2,
		Affinity3: &Affinity3,
		Affinity4: &Affinity4,
		Affinity5: &Affinity5,
		Affinity6: &Affinity6,
		Affinity7: &Affinity7,
		Affinity8: &Affinity8,
		Affinity9: &Affinity9,
		Affinity10: &Affinity10,
	}

	return t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/p2p-te-attributes/p2p-te-attribute/new-style-affinity-affinity-types/new-style-affinity-affinity-type YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType struct {
	AffinityType	E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity	`path:"affinity-type" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType struct, which is a YANG list entry.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"affinity-type": t.AffinityType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1 represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/p2p-te-attributes/p2p-te-attribute/new-style-affinity-affinity-types/new-style-affinity-affinity-type-affinity1 YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1 struct {
	AffinityType	E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity	`path:"affinity-type" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity1	*string	`path:"affinity1" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1 struct, which is a YANG list entry.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1) ΛListKeyMap() (map[string]interface{}, error) {

	if t.Affinity1 == nil {
		return nil, fmt.Errorf("nil value for key Affinity1")
	}

	return map[string]interface{}{
		"affinity-type": t.AffinityType,
		"affinity1": *t.Affinity1,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2 represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/p2p-te-attributes/p2p-te-attribute/new-style-affinity-affinity-types/new-style-affinity-affinity-type-affinity1-affinity2 YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2 struct {
	AffinityType	E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity	`path:"affinity-type" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity1	*string	`path:"affinity1" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity2	*string	`path:"affinity2" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2 struct, which is a YANG list entry.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2) ΛListKeyMap() (map[string]interface{}, error) {

	if t.Affinity1 == nil {
		return nil, fmt.Errorf("nil value for key Affinity1")
	}

	if t.Affinity2 == nil {
		return nil, fmt.Errorf("nil value for key Affinity2")
	}

	return map[string]interface{}{
		"affinity-type": t.AffinityType,
		"affinity1": *t.Affinity1,
		"affinity2": *t.Affinity2,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/p2p-te-attributes/p2p-te-attribute/new-style-affinity-affinity-types/new-style-affinity-affinity-type-affinity1-affinity2-affinity3 YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 struct {
	AffinityType	E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity	`path:"affinity-type" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity1	*string	`path:"affinity1" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity2	*string	`path:"affinity2" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity3	*string	`path:"affinity3" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 struct, which is a YANG list entry.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3) ΛListKeyMap() (map[string]interface{}, error) {

	if t.Affinity1 == nil {
		return nil, fmt.Errorf("nil value for key Affinity1")
	}

	if t.Affinity2 == nil {
		return nil, fmt.Errorf("nil value for key Affinity2")
	}

	if t.Affinity3 == nil {
		return nil, fmt.Errorf("nil value for key Affinity3")
	}

	return map[string]interface{}{
		"affinity-type": t.AffinityType,
		"affinity1": *t.Affinity1,
		"affinity2": *t.Affinity2,
		"affinity3": *t.Affinity3,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/p2p-te-attributes/p2p-te-attribute/new-style-affinity-affinity-types/new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4 YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 struct {
	AffinityType	E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity	`path:"affinity-type" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity1	*string	`path:"affinity1" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity2	*string	`path:"affinity2" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity3	*string	`path:"affinity3" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity4	*string	`path:"affinity4" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 struct, which is a YANG list entry.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4) ΛListKeyMap() (map[string]interface{}, error) {

	if t.Affinity1 == nil {
		return nil, fmt.Errorf("nil value for key Affinity1")
	}

	if t.Affinity2 == nil {
		return nil, fmt.Errorf("nil value for key Affinity2")
	}

	if t.Affinity3 == nil {
		return nil, fmt.Errorf("nil value for key Affinity3")
	}

	if t.Affinity4 == nil {
		return nil, fmt.Errorf("nil value for key Affinity4")
	}

	return map[string]interface{}{
		"affinity-type": t.AffinityType,
		"affinity1": *t.Affinity1,
		"affinity2": *t.Affinity2,
		"affinity3": *t.Affinity3,
		"affinity4": *t.Affinity4,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/p2p-te-attributes/p2p-te-attribute/new-style-affinity-affinity-types/new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5 YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 struct {
	AffinityType	E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity	`path:"affinity-type" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity1	*string	`path:"affinity1" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity2	*string	`path:"affinity2" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity3	*string	`path:"affinity3" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity4	*string	`path:"affinity4" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity5	*string	`path:"affinity5" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 struct, which is a YANG list entry.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5) ΛListKeyMap() (map[string]interface{}, error) {

	if t.Affinity1 == nil {
		return nil, fmt.Errorf("nil value for key Affinity1")
	}

	if t.Affinity2 == nil {
		return nil, fmt.Errorf("nil value for key Affinity2")
	}

	if t.Affinity3 == nil {
		return nil, fmt.Errorf("nil value for key Affinity3")
	}

	if t.Affinity4 == nil {
		return nil, fmt.Errorf("nil value for key Affinity4")
	}

	if t.Affinity5 == nil {
		return nil, fmt.Errorf("nil value for key Affinity5")
	}

	return map[string]interface{}{
		"affinity-type": t.AffinityType,
		"affinity1": *t.Affinity1,
		"affinity2": *t.Affinity2,
		"affinity3": *t.Affinity3,
		"affinity4": *t.Affinity4,
		"affinity5": *t.Affinity5,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/p2p-te-attributes/p2p-te-attribute/new-style-affinity-affinity-types/new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6 YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 struct {
	AffinityType	E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity	`path:"affinity-type" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity1	*string	`path:"affinity1" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity2	*string	`path:"affinity2" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity3	*string	`path:"affinity3" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity4	*string	`path:"affinity4" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity5	*string	`path:"affinity5" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity6	*string	`path:"affinity6" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 struct, which is a YANG list entry.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6) ΛListKeyMap() (map[string]interface{}, error) {

	if t.Affinity1 == nil {
		return nil, fmt.Errorf("nil value for key Affinity1")
	}

	if t.Affinity2 == nil {
		return nil, fmt.Errorf("nil value for key Affinity2")
	}

	if t.Affinity3 == nil {
		return nil, fmt.Errorf("nil value for key Affinity3")
	}

	if t.Affinity4 == nil {
		return nil, fmt.Errorf("nil value for key Affinity4")
	}

	if t.Affinity5 == nil {
		return nil, fmt.Errorf("nil value for key Affinity5")
	}

	if t.Affinity6 == nil {
		return nil, fmt.Errorf("nil value for key Affinity6")
	}

	return map[string]interface{}{
		"affinity-type": t.AffinityType,
		"affinity1": *t.Affinity1,
		"affinity2": *t.Affinity2,
		"affinity3": *t.Affinity3,
		"affinity4": *t.Affinity4,
		"affinity5": *t.Affinity5,
		"affinity6": *t.Affinity6,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/p2p-te-attributes/p2p-te-attribute/new-style-affinity-affinity-types/new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7 YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 struct {
	AffinityType	E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity	`path:"affinity-type" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity1	*string	`path:"affinity1" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity2	*string	`path:"affinity2" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity3	*string	`path:"affinity3" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity4	*string	`path:"affinity4" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity5	*string	`path:"affinity5" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity6	*string	`path:"affinity6" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity7	*string	`path:"affinity7" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 struct, which is a YANG list entry.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7) ΛListKeyMap() (map[string]interface{}, error) {

	if t.Affinity1 == nil {
		return nil, fmt.Errorf("nil value for key Affinity1")
	}

	if t.Affinity2 == nil {
		return nil, fmt.Errorf("nil value for key Affinity2")
	}

	if t.Affinity3 == nil {
		return nil, fmt.Errorf("nil value for key Affinity3")
	}

	if t.Affinity4 == nil {
		return nil, fmt.Errorf("nil value for key Affinity4")
	}

	if t.Affinity5 == nil {
		return nil, fmt.Errorf("nil value for key Affinity5")
	}

	if t.Affinity6 == nil {
		return nil, fmt.Errorf("nil value for key Affinity6")
	}

	if t.Affinity7 == nil {
		return nil, fmt.Errorf("nil value for key Affinity7")
	}

	return map[string]interface{}{
		"affinity-type": t.AffinityType,
		"affinity1": *t.Affinity1,
		"affinity2": *t.Affinity2,
		"affinity3": *t.Affinity3,
		"affinity4": *t.Affinity4,
		"affinity5": *t.Affinity5,
		"affinity6": *t.Affinity6,
		"affinity7": *t.Affinity7,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/p2p-te-attributes/p2p-te-attribute/new-style-affinity-affinity-types/new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8 YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 struct {
	AffinityType	E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity	`path:"affinity-type" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity1	*string	`path:"affinity1" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity2	*string	`path:"affinity2" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity3	*string	`path:"affinity3" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity4	*string	`path:"affinity4" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity5	*string	`path:"affinity5" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity6	*string	`path:"affinity6" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity7	*string	`path:"affinity7" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity8	*string	`path:"affinity8" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 struct, which is a YANG list entry.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8) ΛListKeyMap() (map[string]interface{}, error) {

	if t.Affinity1 == nil {
		return nil, fmt.Errorf("nil value for key Affinity1")
	}

	if t.Affinity2 == nil {
		return nil, fmt.Errorf("nil value for key Affinity2")
	}

	if t.Affinity3 == nil {
		return nil, fmt.Errorf("nil value for key Affinity3")
	}

	if t.Affinity4 == nil {
		return nil, fmt.Errorf("nil value for key Affinity4")
	}

	if t.Affinity5 == nil {
		return nil, fmt.Errorf("nil value for key Affinity5")
	}

	if t.Affinity6 == nil {
		return nil, fmt.Errorf("nil value for key Affinity6")
	}

	if t.Affinity7 == nil {
		return nil, fmt.Errorf("nil value for key Affinity7")
	}

	if t.Affinity8 == nil {
		return nil, fmt.Errorf("nil value for key Affinity8")
	}

	return map[string]interface{}{
		"affinity-type": t.AffinityType,
		"affinity1": *t.Affinity1,
		"affinity2": *t.Affinity2,
		"affinity3": *t.Affinity3,
		"affinity4": *t.Affinity4,
		"affinity5": *t.Affinity5,
		"affinity6": *t.Affinity6,
		"affinity7": *t.Affinity7,
		"affinity8": *t.Affinity8,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/p2p-te-attributes/p2p-te-attribute/new-style-affinity-affinity-types/new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8-affinity9 YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 struct {
	AffinityType	E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity	`path:"affinity-type" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity1	*string	`path:"affinity1" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity2	*string	`path:"affinity2" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity3	*string	`path:"affinity3" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity4	*string	`path:"affinity4" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity5	*string	`path:"affinity5" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity6	*string	`path:"affinity6" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity7	*string	`path:"affinity7" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity8	*string	`path:"affinity8" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity9	*string	`path:"affinity9" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 struct, which is a YANG list entry.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9) ΛListKeyMap() (map[string]interface{}, error) {

	if t.Affinity1 == nil {
		return nil, fmt.Errorf("nil value for key Affinity1")
	}

	if t.Affinity2 == nil {
		return nil, fmt.Errorf("nil value for key Affinity2")
	}

	if t.Affinity3 == nil {
		return nil, fmt.Errorf("nil value for key Affinity3")
	}

	if t.Affinity4 == nil {
		return nil, fmt.Errorf("nil value for key Affinity4")
	}

	if t.Affinity5 == nil {
		return nil, fmt.Errorf("nil value for key Affinity5")
	}

	if t.Affinity6 == nil {
		return nil, fmt.Errorf("nil value for key Affinity6")
	}

	if t.Affinity7 == nil {
		return nil, fmt.Errorf("nil value for key Affinity7")
	}

	if t.Affinity8 == nil {
		return nil, fmt.Errorf("nil value for key Affinity8")
	}

	if t.Affinity9 == nil {
		return nil, fmt.Errorf("nil value for key Affinity9")
	}

	return map[string]interface{}{
		"affinity-type": t.AffinityType,
		"affinity1": *t.Affinity1,
		"affinity2": *t.Affinity2,
		"affinity3": *t.Affinity3,
		"affinity4": *t.Affinity4,
		"affinity5": *t.Affinity5,
		"affinity6": *t.Affinity6,
		"affinity7": *t.Affinity7,
		"affinity8": *t.Affinity8,
		"affinity9": *t.Affinity9,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/p2p-te-attributes/p2p-te-attribute/new-style-affinity-affinity-types/new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8-affinity9-affinity10 YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 struct {
	AffinityType	E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity	`path:"affinity-type" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity1	*string	`path:"affinity1" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity10	*string	`path:"affinity10" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity2	*string	`path:"affinity2" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity3	*string	`path:"affinity3" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity4	*string	`path:"affinity4" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity5	*string	`path:"affinity5" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity6	*string	`path:"affinity6" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity7	*string	`path:"affinity7" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity8	*string	`path:"affinity8" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity9	*string	`path:"affinity9" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 struct, which is a YANG list entry.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10) ΛListKeyMap() (map[string]interface{}, error) {

	if t.Affinity1 == nil {
		return nil, fmt.Errorf("nil value for key Affinity1")
	}

	if t.Affinity10 == nil {
		return nil, fmt.Errorf("nil value for key Affinity10")
	}

	if t.Affinity2 == nil {
		return nil, fmt.Errorf("nil value for key Affinity2")
	}

	if t.Affinity3 == nil {
		return nil, fmt.Errorf("nil value for key Affinity3")
	}

	if t.Affinity4 == nil {
		return nil, fmt.Errorf("nil value for key Affinity4")
	}

	if t.Affinity5 == nil {
		return nil, fmt.Errorf("nil value for key Affinity5")
	}

	if t.Affinity6 == nil {
		return nil, fmt.Errorf("nil value for key Affinity6")
	}

	if t.Affinity7 == nil {
		return nil, fmt.Errorf("nil value for key Affinity7")
	}

	if t.Affinity8 == nil {
		return nil, fmt.Errorf("nil value for key Affinity8")
	}

	if t.Affinity9 == nil {
		return nil, fmt.Errorf("nil value for key Affinity9")
	}

	return map[string]interface{}{
		"affinity-type": t.AffinityType,
		"affinity1": *t.Affinity1,
		"affinity10": *t.Affinity10,
		"affinity2": *t.Affinity2,
		"affinity3": *t.Affinity3,
		"affinity4": *t.Affinity4,
		"affinity5": *t.Affinity5,
		"affinity6": *t.Affinity6,
		"affinity7": *t.Affinity7,
		"affinity8": *t.Affinity8,
		"affinity9": *t.Affinity9,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_PathSelection represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/p2p-te-attributes/p2p-te-attribute/path-selection YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_PathSelection struct {
	Enable	YANGEmpty	`path:"enable" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Invalidation	*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_PathSelection_Invalidation	`path:"invalidation" module:"Cisco-IOS-XR-mpls-te-cfg"`
	PathSelectionMetric	E_Cisco_IOS_XRMplsTeCfg_MplsTePathSelectionMetric	`path:"path-selection-metric" module:"Cisco-IOS-XR-mpls-te-cfg"`
	PathSelectionSegmentRoutingAdjacencyProtection	E_Cisco_IOS_XRMplsTeCfg_MplsTePathSelectionSegmentRoutingAdjacencyProtection	`path:"path-selection-segment-routing-adjacency-protection" module:"Cisco-IOS-XR-mpls-te-cfg"`
	SegmentRoutingPrepend	*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_PathSelection_SegmentRoutingPrepend	`path:"segment-routing-prepend" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_PathSelection implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_PathSelection) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_PathSelection) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_PathSelection"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_PathSelection) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_PathSelection) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_PathSelection.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_PathSelection) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_PathSelection_Invalidation represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/p2p-te-attributes/p2p-te-attribute/path-selection/invalidation YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_PathSelection_Invalidation struct {
	InvalidationTimer	*uint32	`path:"invalidation-timer" module:"Cisco-IOS-XR-mpls-te-cfg"`
	InvalidationTimerExpireType	E_Cisco_IOS_XRMplsTeCfg_MplsTePathSelectionInvalidationTimerExpire	`path:"invalidation-timer-expire-type" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_PathSelection_Invalidation implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_PathSelection_Invalidation) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_PathSelection_Invalidation) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_PathSelection_Invalidation"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_PathSelection_Invalidation) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_PathSelection_Invalidation) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_PathSelection_Invalidation.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_PathSelection_Invalidation) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_PathSelection_SegmentRoutingPrepend represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/p2p-te-attributes/p2p-te-attribute/path-selection/segment-routing-prepend YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_PathSelection_SegmentRoutingPrepend struct {
	Enable	YANGEmpty	`path:"enable" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Indexes	*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_PathSelection_SegmentRoutingPrepend_Indexes	`path:"indexes" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_PathSelection_SegmentRoutingPrepend implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_PathSelection_SegmentRoutingPrepend) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_PathSelection_SegmentRoutingPrepend) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_PathSelection_SegmentRoutingPrepend"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_PathSelection_SegmentRoutingPrepend) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_PathSelection_SegmentRoutingPrepend) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_PathSelection_SegmentRoutingPrepend.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_PathSelection_SegmentRoutingPrepend) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_PathSelection_SegmentRoutingPrepend_Indexes represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/p2p-te-attributes/p2p-te-attribute/path-selection/segment-routing-prepend/indexes YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_PathSelection_SegmentRoutingPrepend_Indexes struct {
	Index	map[uint32]*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_PathSelection_SegmentRoutingPrepend_Indexes_Index	`path:"index" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_PathSelection_SegmentRoutingPrepend_Indexes implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_PathSelection_SegmentRoutingPrepend_Indexes) IsYANGGoStruct() {}

// NewIndex creates a new entry in the Index list of the
// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_PathSelection_SegmentRoutingPrepend_Indexes struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_PathSelection_SegmentRoutingPrepend_Indexes) NewIndex(IndexNumber uint32) (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_PathSelection_SegmentRoutingPrepend_Indexes_Index, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Index == nil {
		t.Index = make(map[uint32]*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_PathSelection_SegmentRoutingPrepend_Indexes_Index)
	}

	key := IndexNumber

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Index[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Index", key)
	}

	t.Index[key] = &Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_PathSelection_SegmentRoutingPrepend_Indexes_Index{
		IndexNumber: &IndexNumber,
	}

	return t.Index[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_PathSelection_SegmentRoutingPrepend_Indexes) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_PathSelection_SegmentRoutingPrepend_Indexes"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_PathSelection_SegmentRoutingPrepend_Indexes) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_PathSelection_SegmentRoutingPrepend_Indexes) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_PathSelection_SegmentRoutingPrepend_Indexes.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_PathSelection_SegmentRoutingPrepend_Indexes) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_PathSelection_SegmentRoutingPrepend_Indexes_Index represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/p2p-te-attributes/p2p-te-attribute/path-selection/segment-routing-prepend/indexes/index YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_PathSelection_SegmentRoutingPrepend_Indexes_Index struct {
	IndexNumber	*uint32	`path:"index-number" module:"Cisco-IOS-XR-mpls-te-cfg"`
	MplsLabel	*uint32	`path:"mpls-label" module:"Cisco-IOS-XR-mpls-te-cfg"`
	PrependType	E_Cisco_IOS_XRMplsTeCfg_SrPrepend	`path:"prepend-type" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_PathSelection_SegmentRoutingPrepend_Indexes_Index implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_PathSelection_SegmentRoutingPrepend_Indexes_Index) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_PathSelection_SegmentRoutingPrepend_Indexes_Index struct, which is a YANG list entry.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_PathSelection_SegmentRoutingPrepend_Indexes_Index) ΛListKeyMap() (map[string]interface{}, error) {
	if t.IndexNumber == nil {
		return nil, fmt.Errorf("nil value for key IndexNumber")
	}

	return map[string]interface{}{
		"index-number": *t.IndexNumber,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_PathSelection_SegmentRoutingPrepend_Indexes_Index) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_PathSelection_SegmentRoutingPrepend_Indexes_Index"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_PathSelection_SegmentRoutingPrepend_Indexes_Index) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_PathSelection_SegmentRoutingPrepend_Indexes_Index) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_PathSelection_SegmentRoutingPrepend_Indexes_Index.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_PathSelection_SegmentRoutingPrepend_Indexes_Index) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_Pce represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/p2p-te-attributes/p2p-te-attribute/pce YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_Pce struct {
	Bidirectional	*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_Pce_Bidirectional	`path:"bidirectional" module:"Cisco-IOS-XR-mpls-te-cfg"`
	DisjointPath	*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_Pce_DisjointPath	`path:"disjoint-path" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Enable	YANGEmpty	`path:"enable" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_Pce implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_Pce) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_Pce) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_Pce"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_Pce) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_Pce) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_Pce.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_Pce) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_Pce_Bidirectional represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/p2p-te-attributes/p2p-te-attribute/pce/bidirectional YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_Pce_Bidirectional struct {
	BdGroupId	*uint32	`path:"bd-group-id" module:"Cisco-IOS-XR-mpls-te-cfg"`
	BdSourceAddress	*string	`path:"bd-source-address" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_Pce_Bidirectional implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_Pce_Bidirectional) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_Pce_Bidirectional) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_Pce_Bidirectional"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_Pce_Bidirectional) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_Pce_Bidirectional) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_Pce_Bidirectional.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_Pce_Bidirectional) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_Pce_DisjointPath represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/p2p-te-attributes/p2p-te-attribute/pce/disjoint-path YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_Pce_DisjointPath struct {
	DpGroupId	*uint32	`path:"dp-group-id" module:"Cisco-IOS-XR-mpls-te-cfg"`
	DpSourceAddress	*string	`path:"dp-source-address" module:"Cisco-IOS-XR-mpls-te-cfg"`
	DpType	*uint32	`path:"dp-type" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_Pce_DisjointPath implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_Pce_DisjointPath) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_Pce_DisjointPath) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_Pce_DisjointPath"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_Pce_DisjointPath) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_Pce_DisjointPath) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_Pce_DisjointPath.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_Pce_DisjointPath) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/path-option-attributes YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes struct {
	PathOptionAttribute	map[string]*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute	`path:"path-option-attribute" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes) IsYANGGoStruct() {}

// NewPathOptionAttribute creates a new entry in the PathOptionAttribute list of the
// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes) NewPathOptionAttribute(AttributeSetName string) (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PathOptionAttribute == nil {
		t.PathOptionAttribute = make(map[string]*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute)
	}

	key := AttributeSetName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.PathOptionAttribute[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list PathOptionAttribute", key)
	}

	t.PathOptionAttribute[key] = &Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute{
		AttributeSetName: &AttributeSetName,
	}

	return t.PathOptionAttribute[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/path-option-attributes/path-option-attribute YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute struct {
	AffinityMask	*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_AffinityMask	`path:"affinity-mask" module:"Cisco-IOS-XR-mpls-te-cfg"`
	AttPathOptionPathSelection	*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_AttPathOptionPathSelection	`path:"att-path-option-path-selection" module:"Cisco-IOS-XR-mpls-te-cfg"`
	AttributeSetName	*string	`path:"attribute-set-name" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Bandwidth	*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_Bandwidth	`path:"bandwidth" module:"Cisco-IOS-XR-mpls-te-cfg"`
	BfdReversePath	*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_BfdReversePath	`path:"bfd-reverse-path" module:"Cisco-IOS-XR-mpls-te-cfg"`
	NewStyleAffinityAffinityTypes	*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes	`path:"new-style-affinity-affinity-types" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Pce	*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_Pce	`path:"pce" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute struct, which is a YANG list entry.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute) ΛListKeyMap() (map[string]interface{}, error) {
	if t.AttributeSetName == nil {
		return nil, fmt.Errorf("nil value for key AttributeSetName")
	}

	return map[string]interface{}{
		"attribute-set-name": *t.AttributeSetName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_AffinityMask represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/path-option-attributes/path-option-attribute/affinity-mask YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_AffinityMask struct {
	Affinity	*string	`path:"affinity" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Mask	*string	`path:"mask" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_AffinityMask implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_AffinityMask) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_AffinityMask) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_AffinityMask"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_AffinityMask) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_AffinityMask) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_AffinityMask.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_AffinityMask) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_AttPathOptionPathSelection represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/path-option-attributes/path-option-attribute/att-path-option-path-selection YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_AttPathOptionPathSelection struct {
	Enable	YANGEmpty	`path:"enable" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Invalidation	*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_AttPathOptionPathSelection_Invalidation	`path:"invalidation" module:"Cisco-IOS-XR-mpls-te-cfg"`
	PathSelectionCostLimit	*uint32	`path:"path-selection-cost-limit" module:"Cisco-IOS-XR-mpls-te-cfg"`
	PathSelectionDelayLimit	*uint32	`path:"path-selection-delay-limit" module:"Cisco-IOS-XR-mpls-te-cfg"`
	PathSelectionExcludeList	*string	`path:"path-selection-exclude-list" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_AttPathOptionPathSelection implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_AttPathOptionPathSelection) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_AttPathOptionPathSelection) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_AttPathOptionPathSelection"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_AttPathOptionPathSelection) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_AttPathOptionPathSelection) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_AttPathOptionPathSelection.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_AttPathOptionPathSelection) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_AttPathOptionPathSelection_Invalidation represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/path-option-attributes/path-option-attribute/att-path-option-path-selection/invalidation YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_AttPathOptionPathSelection_Invalidation struct {
	PathInvalidationAction	E_Cisco_IOS_XRMplsTeCfg_PathInvalidationAction	`path:"path-invalidation-action" module:"Cisco-IOS-XR-mpls-te-cfg"`
	PathInvalidationTimeout	*uint32	`path:"path-invalidation-timeout" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_AttPathOptionPathSelection_Invalidation implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_AttPathOptionPathSelection_Invalidation) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_AttPathOptionPathSelection_Invalidation) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_AttPathOptionPathSelection_Invalidation"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_AttPathOptionPathSelection_Invalidation) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_AttPathOptionPathSelection_Invalidation) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_AttPathOptionPathSelection_Invalidation.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_AttPathOptionPathSelection_Invalidation) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_Bandwidth represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/path-option-attributes/path-option-attribute/bandwidth YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_Bandwidth struct {
	Bandwidth	*uint32	`path:"bandwidth" module:"Cisco-IOS-XR-mpls-te-cfg"`
	ClassOrPoolType	*uint32	`path:"class-or-pool-type" module:"Cisco-IOS-XR-mpls-te-cfg"`
	DsteType	E_Cisco_IOS_XRMplsTeCfg_MplsTeBandwidthDste	`path:"dste-type" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_Bandwidth implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_Bandwidth) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_Bandwidth) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_Bandwidth"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_Bandwidth) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_Bandwidth) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_Bandwidth.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_Bandwidth) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_BfdReversePath represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/path-option-attributes/path-option-attribute/bfd-reverse-path YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_BfdReversePath struct {
	BfdReversePathType	E_Cisco_IOS_XRMplsTeCfg_BfdReversePath	`path:"bfd-reverse-path-type" module:"Cisco-IOS-XR-mpls-te-cfg"`
	BindingLabel	*uint32	`path:"binding-label" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_BfdReversePath implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_BfdReversePath) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_BfdReversePath) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_BfdReversePath"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_BfdReversePath) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_BfdReversePath) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_BfdReversePath.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_BfdReversePath) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/path-option-attributes/path-option-attribute/new-style-affinity-affinity-types YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes struct {
	NewStyleAffinityAffinityType	map[E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity]*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType	`path:"new-style-affinity-affinity-type" module:"Cisco-IOS-XR-mpls-te-cfg"`
	NewStyleAffinityAffinityTypeAffinity1	map[Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1_Key]*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1	`path:"new-style-affinity-affinity-type-affinity1" module:"Cisco-IOS-XR-mpls-te-cfg"`
	NewStyleAffinityAffinityTypeAffinity1Affinity2	map[Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2_Key]*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2	`path:"new-style-affinity-affinity-type-affinity1-affinity2" module:"Cisco-IOS-XR-mpls-te-cfg"`
	NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3	map[Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3_Key]*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3	`path:"new-style-affinity-affinity-type-affinity1-affinity2-affinity3" module:"Cisco-IOS-XR-mpls-te-cfg"`
	NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4	map[Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4_Key]*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4	`path:"new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4" module:"Cisco-IOS-XR-mpls-te-cfg"`
	NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5	map[Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5_Key]*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5	`path:"new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5" module:"Cisco-IOS-XR-mpls-te-cfg"`
	NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6	map[Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6_Key]*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6	`path:"new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6" module:"Cisco-IOS-XR-mpls-te-cfg"`
	NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7	map[Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7_Key]*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7	`path:"new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7" module:"Cisco-IOS-XR-mpls-te-cfg"`
	NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8	map[Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8_Key]*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8	`path:"new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8" module:"Cisco-IOS-XR-mpls-te-cfg"`
	NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9	map[Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9_Key]*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9	`path:"new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8-affinity9" module:"Cisco-IOS-XR-mpls-te-cfg"`
	NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10	map[Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10_Key]*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10	`path:"new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8-affinity9-affinity10" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes) IsYANGGoStruct() {}

// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1_Key represents the key for list NewStyleAffinityAffinityTypeAffinity1 of element /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/path-option-attributes/path-option-attribute/new-style-affinity-affinity-types.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1_Key struct {
	AffinityType	E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity	`path:"affinity-type"`
	Affinity1	string	`path:"affinity1"`
}

// IsYANGGoKeyStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1_Key) IsYANGGoKeyStruct() {}

// ΛListKeyMap returns the values of the Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1_Key key struct.
func (t Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"affinity-type": t.AffinityType,
		"affinity1": t.Affinity1,
	}, nil
}

// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2_Key represents the key for list NewStyleAffinityAffinityTypeAffinity1Affinity2 of element /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/path-option-attributes/path-option-attribute/new-style-affinity-affinity-types.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2_Key struct {
	AffinityType	E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity	`path:"affinity-type"`
	Affinity1	string	`path:"affinity1"`
	Affinity2	string	`path:"affinity2"`
}

// IsYANGGoKeyStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2_Key) IsYANGGoKeyStruct() {}

// ΛListKeyMap returns the values of the Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2_Key key struct.
func (t Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"affinity-type": t.AffinityType,
		"affinity1": t.Affinity1,
		"affinity2": t.Affinity2,
	}, nil
}

// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3_Key represents the key for list NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 of element /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/path-option-attributes/path-option-attribute/new-style-affinity-affinity-types.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3_Key struct {
	AffinityType	E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity	`path:"affinity-type"`
	Affinity1	string	`path:"affinity1"`
	Affinity2	string	`path:"affinity2"`
	Affinity3	string	`path:"affinity3"`
}

// IsYANGGoKeyStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3_Key) IsYANGGoKeyStruct() {}

// ΛListKeyMap returns the values of the Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3_Key key struct.
func (t Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"affinity-type": t.AffinityType,
		"affinity1": t.Affinity1,
		"affinity2": t.Affinity2,
		"affinity3": t.Affinity3,
	}, nil
}

// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4_Key represents the key for list NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 of element /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/path-option-attributes/path-option-attribute/new-style-affinity-affinity-types.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4_Key struct {
	AffinityType	E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity	`path:"affinity-type"`
	Affinity1	string	`path:"affinity1"`
	Affinity2	string	`path:"affinity2"`
	Affinity3	string	`path:"affinity3"`
	Affinity4	string	`path:"affinity4"`
}

// IsYANGGoKeyStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4_Key) IsYANGGoKeyStruct() {}

// ΛListKeyMap returns the values of the Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4_Key key struct.
func (t Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"affinity-type": t.AffinityType,
		"affinity1": t.Affinity1,
		"affinity2": t.Affinity2,
		"affinity3": t.Affinity3,
		"affinity4": t.Affinity4,
	}, nil
}

// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5_Key represents the key for list NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 of element /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/path-option-attributes/path-option-attribute/new-style-affinity-affinity-types.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5_Key struct {
	AffinityType	E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity	`path:"affinity-type"`
	Affinity1	string	`path:"affinity1"`
	Affinity2	string	`path:"affinity2"`
	Affinity3	string	`path:"affinity3"`
	Affinity4	string	`path:"affinity4"`
	Affinity5	string	`path:"affinity5"`
}

// IsYANGGoKeyStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5_Key) IsYANGGoKeyStruct() {}

// ΛListKeyMap returns the values of the Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5_Key key struct.
func (t Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"affinity-type": t.AffinityType,
		"affinity1": t.Affinity1,
		"affinity2": t.Affinity2,
		"affinity3": t.Affinity3,
		"affinity4": t.Affinity4,
		"affinity5": t.Affinity5,
	}, nil
}

// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6_Key represents the key for list NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 of element /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/path-option-attributes/path-option-attribute/new-style-affinity-affinity-types.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6_Key struct {
	AffinityType	E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity	`path:"affinity-type"`
	Affinity1	string	`path:"affinity1"`
	Affinity2	string	`path:"affinity2"`
	Affinity3	string	`path:"affinity3"`
	Affinity4	string	`path:"affinity4"`
	Affinity5	string	`path:"affinity5"`
	Affinity6	string	`path:"affinity6"`
}

// IsYANGGoKeyStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6_Key) IsYANGGoKeyStruct() {}

// ΛListKeyMap returns the values of the Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6_Key key struct.
func (t Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"affinity-type": t.AffinityType,
		"affinity1": t.Affinity1,
		"affinity2": t.Affinity2,
		"affinity3": t.Affinity3,
		"affinity4": t.Affinity4,
		"affinity5": t.Affinity5,
		"affinity6": t.Affinity6,
	}, nil
}

// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7_Key represents the key for list NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 of element /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/path-option-attributes/path-option-attribute/new-style-affinity-affinity-types.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7_Key struct {
	AffinityType	E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity	`path:"affinity-type"`
	Affinity1	string	`path:"affinity1"`
	Affinity2	string	`path:"affinity2"`
	Affinity3	string	`path:"affinity3"`
	Affinity4	string	`path:"affinity4"`
	Affinity5	string	`path:"affinity5"`
	Affinity6	string	`path:"affinity6"`
	Affinity7	string	`path:"affinity7"`
}

// IsYANGGoKeyStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7_Key) IsYANGGoKeyStruct() {}

// ΛListKeyMap returns the values of the Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7_Key key struct.
func (t Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"affinity-type": t.AffinityType,
		"affinity1": t.Affinity1,
		"affinity2": t.Affinity2,
		"affinity3": t.Affinity3,
		"affinity4": t.Affinity4,
		"affinity5": t.Affinity5,
		"affinity6": t.Affinity6,
		"affinity7": t.Affinity7,
	}, nil
}

// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8_Key represents the key for list NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 of element /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/path-option-attributes/path-option-attribute/new-style-affinity-affinity-types.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8_Key struct {
	AffinityType	E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity	`path:"affinity-type"`
	Affinity1	string	`path:"affinity1"`
	Affinity2	string	`path:"affinity2"`
	Affinity3	string	`path:"affinity3"`
	Affinity4	string	`path:"affinity4"`
	Affinity5	string	`path:"affinity5"`
	Affinity6	string	`path:"affinity6"`
	Affinity7	string	`path:"affinity7"`
	Affinity8	string	`path:"affinity8"`
}

// IsYANGGoKeyStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8_Key) IsYANGGoKeyStruct() {}

// ΛListKeyMap returns the values of the Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8_Key key struct.
func (t Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"affinity-type": t.AffinityType,
		"affinity1": t.Affinity1,
		"affinity2": t.Affinity2,
		"affinity3": t.Affinity3,
		"affinity4": t.Affinity4,
		"affinity5": t.Affinity5,
		"affinity6": t.Affinity6,
		"affinity7": t.Affinity7,
		"affinity8": t.Affinity8,
	}, nil
}

// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9_Key represents the key for list NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 of element /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/path-option-attributes/path-option-attribute/new-style-affinity-affinity-types.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9_Key struct {
	AffinityType	E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity	`path:"affinity-type"`
	Affinity1	string	`path:"affinity1"`
	Affinity2	string	`path:"affinity2"`
	Affinity3	string	`path:"affinity3"`
	Affinity4	string	`path:"affinity4"`
	Affinity5	string	`path:"affinity5"`
	Affinity6	string	`path:"affinity6"`
	Affinity7	string	`path:"affinity7"`
	Affinity8	string	`path:"affinity8"`
	Affinity9	string	`path:"affinity9"`
}

// IsYANGGoKeyStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9_Key) IsYANGGoKeyStruct() {}

// ΛListKeyMap returns the values of the Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9_Key key struct.
func (t Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"affinity-type": t.AffinityType,
		"affinity1": t.Affinity1,
		"affinity2": t.Affinity2,
		"affinity3": t.Affinity3,
		"affinity4": t.Affinity4,
		"affinity5": t.Affinity5,
		"affinity6": t.Affinity6,
		"affinity7": t.Affinity7,
		"affinity8": t.Affinity8,
		"affinity9": t.Affinity9,
	}, nil
}

// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10_Key represents the key for list NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 of element /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/path-option-attributes/path-option-attribute/new-style-affinity-affinity-types.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10_Key struct {
	AffinityType	E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity	`path:"affinity-type"`
	Affinity1	string	`path:"affinity1"`
	Affinity2	string	`path:"affinity2"`
	Affinity3	string	`path:"affinity3"`
	Affinity4	string	`path:"affinity4"`
	Affinity5	string	`path:"affinity5"`
	Affinity6	string	`path:"affinity6"`
	Affinity7	string	`path:"affinity7"`
	Affinity8	string	`path:"affinity8"`
	Affinity9	string	`path:"affinity9"`
	Affinity10	string	`path:"affinity10"`
}

// IsYANGGoKeyStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10_Key) IsYANGGoKeyStruct() {}

// ΛListKeyMap returns the values of the Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10_Key key struct.
func (t Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"affinity-type": t.AffinityType,
		"affinity1": t.Affinity1,
		"affinity2": t.Affinity2,
		"affinity3": t.Affinity3,
		"affinity4": t.Affinity4,
		"affinity5": t.Affinity5,
		"affinity6": t.Affinity6,
		"affinity7": t.Affinity7,
		"affinity8": t.Affinity8,
		"affinity9": t.Affinity9,
		"affinity10": t.Affinity10,
	}, nil
}

// NewNewStyleAffinityAffinityType creates a new entry in the NewStyleAffinityAffinityType list of the
// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes) NewNewStyleAffinityAffinityType(AffinityType E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity) (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NewStyleAffinityAffinityType == nil {
		t.NewStyleAffinityAffinityType = make(map[E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity]*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType)
	}

	key := AffinityType

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NewStyleAffinityAffinityType[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NewStyleAffinityAffinityType", key)
	}

	t.NewStyleAffinityAffinityType[key] = &Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType{
		AffinityType: AffinityType,
	}

	return t.NewStyleAffinityAffinityType[key], nil
}

// NewNewStyleAffinityAffinityTypeAffinity1 creates a new entry in the NewStyleAffinityAffinityTypeAffinity1 list of the
// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes) NewNewStyleAffinityAffinityTypeAffinity1(AffinityType E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity, Affinity1 string) (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NewStyleAffinityAffinityTypeAffinity1 == nil {
		t.NewStyleAffinityAffinityTypeAffinity1 = make(map[Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1_Key]*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1)
	}

	key := Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1_Key{
		AffinityType: AffinityType,
		Affinity1: Affinity1,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NewStyleAffinityAffinityTypeAffinity1[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NewStyleAffinityAffinityTypeAffinity1", key)
	}

	t.NewStyleAffinityAffinityTypeAffinity1[key] = &Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1{
		AffinityType: AffinityType,
		Affinity1: &Affinity1,
	}

	return t.NewStyleAffinityAffinityTypeAffinity1[key], nil
}

// NewNewStyleAffinityAffinityTypeAffinity1Affinity2 creates a new entry in the NewStyleAffinityAffinityTypeAffinity1Affinity2 list of the
// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes) NewNewStyleAffinityAffinityTypeAffinity1Affinity2(AffinityType E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity, Affinity1 string, Affinity2 string) (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NewStyleAffinityAffinityTypeAffinity1Affinity2 == nil {
		t.NewStyleAffinityAffinityTypeAffinity1Affinity2 = make(map[Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2_Key]*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2)
	}

	key := Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2_Key{
		AffinityType: AffinityType,
		Affinity1: Affinity1,
		Affinity2: Affinity2,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NewStyleAffinityAffinityTypeAffinity1Affinity2[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NewStyleAffinityAffinityTypeAffinity1Affinity2", key)
	}

	t.NewStyleAffinityAffinityTypeAffinity1Affinity2[key] = &Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2{
		AffinityType: AffinityType,
		Affinity1: &Affinity1,
		Affinity2: &Affinity2,
	}

	return t.NewStyleAffinityAffinityTypeAffinity1Affinity2[key], nil
}

// NewNewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 creates a new entry in the NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 list of the
// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes) NewNewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3(AffinityType E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity, Affinity1 string, Affinity2 string, Affinity3 string) (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 == nil {
		t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 = make(map[Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3_Key]*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3)
	}

	key := Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3_Key{
		AffinityType: AffinityType,
		Affinity1: Affinity1,
		Affinity2: Affinity2,
		Affinity3: Affinity3,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3", key)
	}

	t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3[key] = &Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3{
		AffinityType: AffinityType,
		Affinity1: &Affinity1,
		Affinity2: &Affinity2,
		Affinity3: &Affinity3,
	}

	return t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3[key], nil
}

// NewNewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 creates a new entry in the NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 list of the
// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes) NewNewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4(AffinityType E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity, Affinity1 string, Affinity2 string, Affinity3 string, Affinity4 string) (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 == nil {
		t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 = make(map[Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4_Key]*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4)
	}

	key := Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4_Key{
		AffinityType: AffinityType,
		Affinity1: Affinity1,
		Affinity2: Affinity2,
		Affinity3: Affinity3,
		Affinity4: Affinity4,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4", key)
	}

	t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4[key] = &Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4{
		AffinityType: AffinityType,
		Affinity1: &Affinity1,
		Affinity2: &Affinity2,
		Affinity3: &Affinity3,
		Affinity4: &Affinity4,
	}

	return t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4[key], nil
}

// NewNewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 creates a new entry in the NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 list of the
// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes) NewNewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5(AffinityType E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity, Affinity1 string, Affinity2 string, Affinity3 string, Affinity4 string, Affinity5 string) (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 == nil {
		t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 = make(map[Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5_Key]*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5)
	}

	key := Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5_Key{
		AffinityType: AffinityType,
		Affinity1: Affinity1,
		Affinity2: Affinity2,
		Affinity3: Affinity3,
		Affinity4: Affinity4,
		Affinity5: Affinity5,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5", key)
	}

	t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5[key] = &Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5{
		AffinityType: AffinityType,
		Affinity1: &Affinity1,
		Affinity2: &Affinity2,
		Affinity3: &Affinity3,
		Affinity4: &Affinity4,
		Affinity5: &Affinity5,
	}

	return t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5[key], nil
}

// NewNewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 creates a new entry in the NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 list of the
// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes) NewNewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6(AffinityType E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity, Affinity1 string, Affinity2 string, Affinity3 string, Affinity4 string, Affinity5 string, Affinity6 string) (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 == nil {
		t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 = make(map[Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6_Key]*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6)
	}

	key := Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6_Key{
		AffinityType: AffinityType,
		Affinity1: Affinity1,
		Affinity2: Affinity2,
		Affinity3: Affinity3,
		Affinity4: Affinity4,
		Affinity5: Affinity5,
		Affinity6: Affinity6,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6", key)
	}

	t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6[key] = &Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6{
		AffinityType: AffinityType,
		Affinity1: &Affinity1,
		Affinity2: &Affinity2,
		Affinity3: &Affinity3,
		Affinity4: &Affinity4,
		Affinity5: &Affinity5,
		Affinity6: &Affinity6,
	}

	return t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6[key], nil
}

// NewNewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 creates a new entry in the NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 list of the
// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes) NewNewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7(AffinityType E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity, Affinity1 string, Affinity2 string, Affinity3 string, Affinity4 string, Affinity5 string, Affinity6 string, Affinity7 string) (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 == nil {
		t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 = make(map[Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7_Key]*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7)
	}

	key := Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7_Key{
		AffinityType: AffinityType,
		Affinity1: Affinity1,
		Affinity2: Affinity2,
		Affinity3: Affinity3,
		Affinity4: Affinity4,
		Affinity5: Affinity5,
		Affinity6: Affinity6,
		Affinity7: Affinity7,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7", key)
	}

	t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7[key] = &Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7{
		AffinityType: AffinityType,
		Affinity1: &Affinity1,
		Affinity2: &Affinity2,
		Affinity3: &Affinity3,
		Affinity4: &Affinity4,
		Affinity5: &Affinity5,
		Affinity6: &Affinity6,
		Affinity7: &Affinity7,
	}

	return t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7[key], nil
}

// NewNewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 creates a new entry in the NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 list of the
// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes) NewNewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8(AffinityType E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity, Affinity1 string, Affinity2 string, Affinity3 string, Affinity4 string, Affinity5 string, Affinity6 string, Affinity7 string, Affinity8 string) (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 == nil {
		t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 = make(map[Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8_Key]*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8)
	}

	key := Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8_Key{
		AffinityType: AffinityType,
		Affinity1: Affinity1,
		Affinity2: Affinity2,
		Affinity3: Affinity3,
		Affinity4: Affinity4,
		Affinity5: Affinity5,
		Affinity6: Affinity6,
		Affinity7: Affinity7,
		Affinity8: Affinity8,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8", key)
	}

	t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8[key] = &Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8{
		AffinityType: AffinityType,
		Affinity1: &Affinity1,
		Affinity2: &Affinity2,
		Affinity3: &Affinity3,
		Affinity4: &Affinity4,
		Affinity5: &Affinity5,
		Affinity6: &Affinity6,
		Affinity7: &Affinity7,
		Affinity8: &Affinity8,
	}

	return t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8[key], nil
}

// NewNewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 creates a new entry in the NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 list of the
// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes) NewNewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9(AffinityType E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity, Affinity1 string, Affinity2 string, Affinity3 string, Affinity4 string, Affinity5 string, Affinity6 string, Affinity7 string, Affinity8 string, Affinity9 string) (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 == nil {
		t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 = make(map[Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9_Key]*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9)
	}

	key := Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9_Key{
		AffinityType: AffinityType,
		Affinity1: Affinity1,
		Affinity2: Affinity2,
		Affinity3: Affinity3,
		Affinity4: Affinity4,
		Affinity5: Affinity5,
		Affinity6: Affinity6,
		Affinity7: Affinity7,
		Affinity8: Affinity8,
		Affinity9: Affinity9,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9", key)
	}

	t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9[key] = &Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9{
		AffinityType: AffinityType,
		Affinity1: &Affinity1,
		Affinity2: &Affinity2,
		Affinity3: &Affinity3,
		Affinity4: &Affinity4,
		Affinity5: &Affinity5,
		Affinity6: &Affinity6,
		Affinity7: &Affinity7,
		Affinity8: &Affinity8,
		Affinity9: &Affinity9,
	}

	return t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9[key], nil
}

// NewNewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 creates a new entry in the NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 list of the
// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes) NewNewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10(AffinityType E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity, Affinity1 string, Affinity2 string, Affinity3 string, Affinity4 string, Affinity5 string, Affinity6 string, Affinity7 string, Affinity8 string, Affinity9 string, Affinity10 string) (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 == nil {
		t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 = make(map[Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10_Key]*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10)
	}

	key := Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10_Key{
		AffinityType: AffinityType,
		Affinity1: Affinity1,
		Affinity2: Affinity2,
		Affinity3: Affinity3,
		Affinity4: Affinity4,
		Affinity5: Affinity5,
		Affinity6: Affinity6,
		Affinity7: Affinity7,
		Affinity8: Affinity8,
		Affinity9: Affinity9,
		Affinity10: Affinity10,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10", key)
	}

	t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10[key] = &Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10{
		AffinityType: AffinityType,
		Affinity1: &Affinity1,
		Affinity2: &Affinity2,
		Affinity3: &Affinity3,
		Affinity4: &Affinity4,
		Affinity5: &Affinity5,
		Affinity6: &Affinity6,
		Affinity7: &Affinity7,
		Affinity8: &Affinity8,
		Affinity9: &Affinity9,
		Affinity10: &Affinity10,
	}

	return t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/path-option-attributes/path-option-attribute/new-style-affinity-affinity-types/new-style-affinity-affinity-type YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType struct {
	AffinityType	E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity	`path:"affinity-type" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType struct, which is a YANG list entry.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"affinity-type": t.AffinityType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1 represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/path-option-attributes/path-option-attribute/new-style-affinity-affinity-types/new-style-affinity-affinity-type-affinity1 YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1 struct {
	AffinityType	E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity	`path:"affinity-type" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity1	*string	`path:"affinity1" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1 struct, which is a YANG list entry.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1) ΛListKeyMap() (map[string]interface{}, error) {

	if t.Affinity1 == nil {
		return nil, fmt.Errorf("nil value for key Affinity1")
	}

	return map[string]interface{}{
		"affinity-type": t.AffinityType,
		"affinity1": *t.Affinity1,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2 represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/path-option-attributes/path-option-attribute/new-style-affinity-affinity-types/new-style-affinity-affinity-type-affinity1-affinity2 YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2 struct {
	AffinityType	E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity	`path:"affinity-type" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity1	*string	`path:"affinity1" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity2	*string	`path:"affinity2" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2 struct, which is a YANG list entry.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2) ΛListKeyMap() (map[string]interface{}, error) {

	if t.Affinity1 == nil {
		return nil, fmt.Errorf("nil value for key Affinity1")
	}

	if t.Affinity2 == nil {
		return nil, fmt.Errorf("nil value for key Affinity2")
	}

	return map[string]interface{}{
		"affinity-type": t.AffinityType,
		"affinity1": *t.Affinity1,
		"affinity2": *t.Affinity2,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/path-option-attributes/path-option-attribute/new-style-affinity-affinity-types/new-style-affinity-affinity-type-affinity1-affinity2-affinity3 YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 struct {
	AffinityType	E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity	`path:"affinity-type" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity1	*string	`path:"affinity1" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity2	*string	`path:"affinity2" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity3	*string	`path:"affinity3" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 struct, which is a YANG list entry.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3) ΛListKeyMap() (map[string]interface{}, error) {

	if t.Affinity1 == nil {
		return nil, fmt.Errorf("nil value for key Affinity1")
	}

	if t.Affinity2 == nil {
		return nil, fmt.Errorf("nil value for key Affinity2")
	}

	if t.Affinity3 == nil {
		return nil, fmt.Errorf("nil value for key Affinity3")
	}

	return map[string]interface{}{
		"affinity-type": t.AffinityType,
		"affinity1": *t.Affinity1,
		"affinity2": *t.Affinity2,
		"affinity3": *t.Affinity3,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/path-option-attributes/path-option-attribute/new-style-affinity-affinity-types/new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4 YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 struct {
	AffinityType	E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity	`path:"affinity-type" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity1	*string	`path:"affinity1" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity2	*string	`path:"affinity2" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity3	*string	`path:"affinity3" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity4	*string	`path:"affinity4" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 struct, which is a YANG list entry.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4) ΛListKeyMap() (map[string]interface{}, error) {

	if t.Affinity1 == nil {
		return nil, fmt.Errorf("nil value for key Affinity1")
	}

	if t.Affinity2 == nil {
		return nil, fmt.Errorf("nil value for key Affinity2")
	}

	if t.Affinity3 == nil {
		return nil, fmt.Errorf("nil value for key Affinity3")
	}

	if t.Affinity4 == nil {
		return nil, fmt.Errorf("nil value for key Affinity4")
	}

	return map[string]interface{}{
		"affinity-type": t.AffinityType,
		"affinity1": *t.Affinity1,
		"affinity2": *t.Affinity2,
		"affinity3": *t.Affinity3,
		"affinity4": *t.Affinity4,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/path-option-attributes/path-option-attribute/new-style-affinity-affinity-types/new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5 YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 struct {
	AffinityType	E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity	`path:"affinity-type" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity1	*string	`path:"affinity1" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity2	*string	`path:"affinity2" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity3	*string	`path:"affinity3" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity4	*string	`path:"affinity4" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity5	*string	`path:"affinity5" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 struct, which is a YANG list entry.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5) ΛListKeyMap() (map[string]interface{}, error) {

	if t.Affinity1 == nil {
		return nil, fmt.Errorf("nil value for key Affinity1")
	}

	if t.Affinity2 == nil {
		return nil, fmt.Errorf("nil value for key Affinity2")
	}

	if t.Affinity3 == nil {
		return nil, fmt.Errorf("nil value for key Affinity3")
	}

	if t.Affinity4 == nil {
		return nil, fmt.Errorf("nil value for key Affinity4")
	}

	if t.Affinity5 == nil {
		return nil, fmt.Errorf("nil value for key Affinity5")
	}

	return map[string]interface{}{
		"affinity-type": t.AffinityType,
		"affinity1": *t.Affinity1,
		"affinity2": *t.Affinity2,
		"affinity3": *t.Affinity3,
		"affinity4": *t.Affinity4,
		"affinity5": *t.Affinity5,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/path-option-attributes/path-option-attribute/new-style-affinity-affinity-types/new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6 YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 struct {
	AffinityType	E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity	`path:"affinity-type" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity1	*string	`path:"affinity1" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity2	*string	`path:"affinity2" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity3	*string	`path:"affinity3" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity4	*string	`path:"affinity4" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity5	*string	`path:"affinity5" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity6	*string	`path:"affinity6" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 struct, which is a YANG list entry.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6) ΛListKeyMap() (map[string]interface{}, error) {

	if t.Affinity1 == nil {
		return nil, fmt.Errorf("nil value for key Affinity1")
	}

	if t.Affinity2 == nil {
		return nil, fmt.Errorf("nil value for key Affinity2")
	}

	if t.Affinity3 == nil {
		return nil, fmt.Errorf("nil value for key Affinity3")
	}

	if t.Affinity4 == nil {
		return nil, fmt.Errorf("nil value for key Affinity4")
	}

	if t.Affinity5 == nil {
		return nil, fmt.Errorf("nil value for key Affinity5")
	}

	if t.Affinity6 == nil {
		return nil, fmt.Errorf("nil value for key Affinity6")
	}

	return map[string]interface{}{
		"affinity-type": t.AffinityType,
		"affinity1": *t.Affinity1,
		"affinity2": *t.Affinity2,
		"affinity3": *t.Affinity3,
		"affinity4": *t.Affinity4,
		"affinity5": *t.Affinity5,
		"affinity6": *t.Affinity6,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/path-option-attributes/path-option-attribute/new-style-affinity-affinity-types/new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7 YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 struct {
	AffinityType	E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity	`path:"affinity-type" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity1	*string	`path:"affinity1" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity2	*string	`path:"affinity2" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity3	*string	`path:"affinity3" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity4	*string	`path:"affinity4" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity5	*string	`path:"affinity5" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity6	*string	`path:"affinity6" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity7	*string	`path:"affinity7" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 struct, which is a YANG list entry.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7) ΛListKeyMap() (map[string]interface{}, error) {

	if t.Affinity1 == nil {
		return nil, fmt.Errorf("nil value for key Affinity1")
	}

	if t.Affinity2 == nil {
		return nil, fmt.Errorf("nil value for key Affinity2")
	}

	if t.Affinity3 == nil {
		return nil, fmt.Errorf("nil value for key Affinity3")
	}

	if t.Affinity4 == nil {
		return nil, fmt.Errorf("nil value for key Affinity4")
	}

	if t.Affinity5 == nil {
		return nil, fmt.Errorf("nil value for key Affinity5")
	}

	if t.Affinity6 == nil {
		return nil, fmt.Errorf("nil value for key Affinity6")
	}

	if t.Affinity7 == nil {
		return nil, fmt.Errorf("nil value for key Affinity7")
	}

	return map[string]interface{}{
		"affinity-type": t.AffinityType,
		"affinity1": *t.Affinity1,
		"affinity2": *t.Affinity2,
		"affinity3": *t.Affinity3,
		"affinity4": *t.Affinity4,
		"affinity5": *t.Affinity5,
		"affinity6": *t.Affinity6,
		"affinity7": *t.Affinity7,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/path-option-attributes/path-option-attribute/new-style-affinity-affinity-types/new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8 YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 struct {
	AffinityType	E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity	`path:"affinity-type" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity1	*string	`path:"affinity1" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity2	*string	`path:"affinity2" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity3	*string	`path:"affinity3" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity4	*string	`path:"affinity4" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity5	*string	`path:"affinity5" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity6	*string	`path:"affinity6" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity7	*string	`path:"affinity7" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity8	*string	`path:"affinity8" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 struct, which is a YANG list entry.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8) ΛListKeyMap() (map[string]interface{}, error) {

	if t.Affinity1 == nil {
		return nil, fmt.Errorf("nil value for key Affinity1")
	}

	if t.Affinity2 == nil {
		return nil, fmt.Errorf("nil value for key Affinity2")
	}

	if t.Affinity3 == nil {
		return nil, fmt.Errorf("nil value for key Affinity3")
	}

	if t.Affinity4 == nil {
		return nil, fmt.Errorf("nil value for key Affinity4")
	}

	if t.Affinity5 == nil {
		return nil, fmt.Errorf("nil value for key Affinity5")
	}

	if t.Affinity6 == nil {
		return nil, fmt.Errorf("nil value for key Affinity6")
	}

	if t.Affinity7 == nil {
		return nil, fmt.Errorf("nil value for key Affinity7")
	}

	if t.Affinity8 == nil {
		return nil, fmt.Errorf("nil value for key Affinity8")
	}

	return map[string]interface{}{
		"affinity-type": t.AffinityType,
		"affinity1": *t.Affinity1,
		"affinity2": *t.Affinity2,
		"affinity3": *t.Affinity3,
		"affinity4": *t.Affinity4,
		"affinity5": *t.Affinity5,
		"affinity6": *t.Affinity6,
		"affinity7": *t.Affinity7,
		"affinity8": *t.Affinity8,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/path-option-attributes/path-option-attribute/new-style-affinity-affinity-types/new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8-affinity9 YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 struct {
	AffinityType	E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity	`path:"affinity-type" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity1	*string	`path:"affinity1" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity2	*string	`path:"affinity2" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity3	*string	`path:"affinity3" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity4	*string	`path:"affinity4" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity5	*string	`path:"affinity5" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity6	*string	`path:"affinity6" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity7	*string	`path:"affinity7" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity8	*string	`path:"affinity8" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity9	*string	`path:"affinity9" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 struct, which is a YANG list entry.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9) ΛListKeyMap() (map[string]interface{}, error) {

	if t.Affinity1 == nil {
		return nil, fmt.Errorf("nil value for key Affinity1")
	}

	if t.Affinity2 == nil {
		return nil, fmt.Errorf("nil value for key Affinity2")
	}

	if t.Affinity3 == nil {
		return nil, fmt.Errorf("nil value for key Affinity3")
	}

	if t.Affinity4 == nil {
		return nil, fmt.Errorf("nil value for key Affinity4")
	}

	if t.Affinity5 == nil {
		return nil, fmt.Errorf("nil value for key Affinity5")
	}

	if t.Affinity6 == nil {
		return nil, fmt.Errorf("nil value for key Affinity6")
	}

	if t.Affinity7 == nil {
		return nil, fmt.Errorf("nil value for key Affinity7")
	}

	if t.Affinity8 == nil {
		return nil, fmt.Errorf("nil value for key Affinity8")
	}

	if t.Affinity9 == nil {
		return nil, fmt.Errorf("nil value for key Affinity9")
	}

	return map[string]interface{}{
		"affinity-type": t.AffinityType,
		"affinity1": *t.Affinity1,
		"affinity2": *t.Affinity2,
		"affinity3": *t.Affinity3,
		"affinity4": *t.Affinity4,
		"affinity5": *t.Affinity5,
		"affinity6": *t.Affinity6,
		"affinity7": *t.Affinity7,
		"affinity8": *t.Affinity8,
		"affinity9": *t.Affinity9,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/path-option-attributes/path-option-attribute/new-style-affinity-affinity-types/new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8-affinity9-affinity10 YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 struct {
	AffinityType	E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity	`path:"affinity-type" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity1	*string	`path:"affinity1" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity10	*string	`path:"affinity10" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity2	*string	`path:"affinity2" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity3	*string	`path:"affinity3" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity4	*string	`path:"affinity4" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity5	*string	`path:"affinity5" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity6	*string	`path:"affinity6" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity7	*string	`path:"affinity7" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity8	*string	`path:"affinity8" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity9	*string	`path:"affinity9" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 struct, which is a YANG list entry.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10) ΛListKeyMap() (map[string]interface{}, error) {

	if t.Affinity1 == nil {
		return nil, fmt.Errorf("nil value for key Affinity1")
	}

	if t.Affinity10 == nil {
		return nil, fmt.Errorf("nil value for key Affinity10")
	}

	if t.Affinity2 == nil {
		return nil, fmt.Errorf("nil value for key Affinity2")
	}

	if t.Affinity3 == nil {
		return nil, fmt.Errorf("nil value for key Affinity3")
	}

	if t.Affinity4 == nil {
		return nil, fmt.Errorf("nil value for key Affinity4")
	}

	if t.Affinity5 == nil {
		return nil, fmt.Errorf("nil value for key Affinity5")
	}

	if t.Affinity6 == nil {
		return nil, fmt.Errorf("nil value for key Affinity6")
	}

	if t.Affinity7 == nil {
		return nil, fmt.Errorf("nil value for key Affinity7")
	}

	if t.Affinity8 == nil {
		return nil, fmt.Errorf("nil value for key Affinity8")
	}

	if t.Affinity9 == nil {
		return nil, fmt.Errorf("nil value for key Affinity9")
	}

	return map[string]interface{}{
		"affinity-type": t.AffinityType,
		"affinity1": *t.Affinity1,
		"affinity10": *t.Affinity10,
		"affinity2": *t.Affinity2,
		"affinity3": *t.Affinity3,
		"affinity4": *t.Affinity4,
		"affinity5": *t.Affinity5,
		"affinity6": *t.Affinity6,
		"affinity7": *t.Affinity7,
		"affinity8": *t.Affinity8,
		"affinity9": *t.Affinity9,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_Pce represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/path-option-attributes/path-option-attribute/pce YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_Pce struct {
	Bidirectional	*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_Pce_Bidirectional	`path:"bidirectional" module:"Cisco-IOS-XR-mpls-te-cfg"`
	DisjointPath	*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_Pce_DisjointPath	`path:"disjoint-path" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Enable	YANGEmpty	`path:"enable" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_Pce implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_Pce) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_Pce) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_Pce"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_Pce) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_Pce) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_Pce.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_Pce) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_Pce_Bidirectional represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/path-option-attributes/path-option-attribute/pce/bidirectional YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_Pce_Bidirectional struct {
	BdGroupId	*uint32	`path:"bd-group-id" module:"Cisco-IOS-XR-mpls-te-cfg"`
	BdSourceAddress	*string	`path:"bd-source-address" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_Pce_Bidirectional implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_Pce_Bidirectional) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_Pce_Bidirectional) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_Pce_Bidirectional"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_Pce_Bidirectional) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_Pce_Bidirectional) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_Pce_Bidirectional.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_Pce_Bidirectional) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_Pce_DisjointPath represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/path-option-attributes/path-option-attribute/pce/disjoint-path YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_Pce_DisjointPath struct {
	DpGroupId	*uint32	`path:"dp-group-id" module:"Cisco-IOS-XR-mpls-te-cfg"`
	DpSourceAddress	*string	`path:"dp-source-address" module:"Cisco-IOS-XR-mpls-te-cfg"`
	DpType	*uint32	`path:"dp-type" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_Pce_DisjointPath implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_Pce_DisjointPath) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_Pce_DisjointPath) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_Pce_DisjointPath"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_Pce_DisjointPath) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_Pce_DisjointPath) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_Pce_DisjointPath.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_Pce_DisjointPath) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_UniPAttributes represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/uni-p-attributes YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_UniPAttributes struct {
	UniPAttribute	map[string]*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_UniPAttributes_UniPAttribute	`path:"uni-p-attribute" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_UniPAttributes implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_UniPAttributes) IsYANGGoStruct() {}

// NewUniPAttribute creates a new entry in the UniPAttribute list of the
// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_UniPAttributes struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_UniPAttributes) NewUniPAttribute(AttributeSetName string) (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_UniPAttributes_UniPAttribute, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UniPAttribute == nil {
		t.UniPAttribute = make(map[string]*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_UniPAttributes_UniPAttribute)
	}

	key := AttributeSetName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.UniPAttribute[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list UniPAttribute", key)
	}

	t.UniPAttribute[key] = &Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_UniPAttributes_UniPAttribute{
		AttributeSetName: &AttributeSetName,
	}

	return t.UniPAttribute[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_UniPAttributes) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_UniPAttributes"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_UniPAttributes) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_UniPAttributes) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_UniPAttributes.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_UniPAttributes) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_UniPAttributes_UniPAttribute represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/uni-p-attributes/uni-p-attribute YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_UniPAttributes_UniPAttribute struct {
	AttributeSetName	*string	`path:"attribute-set-name" module:"Cisco-IOS-XR-mpls-te-cfg"`
	InPlaceBit	E_Cisco_IOS_XRMplsTeCfg_MplsTeUniInPlaceBit	`path:"in-place-bit" module:"Cisco-IOS-XR-mpls-te-cfg"`
	LspFlag	E_Cisco_IOS_XRMplsTeCfg_MplsTeUniLspSegFlag	`path:"lsp-flag" module:"Cisco-IOS-XR-mpls-te-cfg"`
	PathSelection	*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_UniPAttributes_UniPAttribute_PathSelection	`path:"path-selection" module:"Cisco-IOS-XR-mpls-te-cfg"`
	RequiredBit	E_Cisco_IOS_XRMplsTeCfg_MplsTeUniRequiredBit	`path:"required-bit" module:"Cisco-IOS-XR-mpls-te-cfg"`
	SegFlag	E_Cisco_IOS_XRMplsTeCfg_MplsTeUniLspSegFlag	`path:"seg-flag" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_UniPAttributes_UniPAttribute implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_UniPAttributes_UniPAttribute) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_UniPAttributes_UniPAttribute struct, which is a YANG list entry.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_UniPAttributes_UniPAttribute) ΛListKeyMap() (map[string]interface{}, error) {
	if t.AttributeSetName == nil {
		return nil, fmt.Errorf("nil value for key AttributeSetName")
	}

	return map[string]interface{}{
		"attribute-set-name": *t.AttributeSetName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_UniPAttributes_UniPAttribute) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_UniPAttributes_UniPAttribute"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_UniPAttributes_UniPAttribute) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_UniPAttributes_UniPAttribute) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_UniPAttributes_UniPAttribute.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_UniPAttributes_UniPAttribute) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_UniPAttributes_UniPAttribute_PathSelection represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/uni-p-attributes/uni-p-attribute/path-selection YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_UniPAttributes_UniPAttribute_PathSelection struct {
	Enable	YANGEmpty	`path:"enable" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_UniPAttributes_UniPAttribute_PathSelection implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_UniPAttributes_UniPAttribute_PathSelection) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_UniPAttributes_UniPAttribute_PathSelection) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_UniPAttributes_UniPAttribute_PathSelection"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_UniPAttributes_UniPAttribute_PathSelection) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_UniPAttributes_UniPAttribute_PathSelection) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_UniPAttributes_UniPAttribute_PathSelection.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_UniPAttributes_UniPAttribute_PathSelection) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_XroAttributes represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/xro-attributes YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_XroAttributes struct {
	XroAttribute	map[string]*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute	`path:"xro-attribute" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_XroAttributes implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_XroAttributes) IsYANGGoStruct() {}

// NewXroAttribute creates a new entry in the XroAttribute list of the
// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_XroAttributes struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_XroAttributes) NewXroAttribute(AttributeSetName string) (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.XroAttribute == nil {
		t.XroAttribute = make(map[string]*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute)
	}

	key := AttributeSetName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.XroAttribute[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list XroAttribute", key)
	}

	t.XroAttribute[key] = &Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute{
		AttributeSetName: &AttributeSetName,
	}

	return t.XroAttribute[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_XroAttributes) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_XroAttributes"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_XroAttributes) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_XroAttributes) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_XroAttributes.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_XroAttributes) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/xro-attributes/xro-attribute YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute struct {
	AttributeSetName	*string	`path:"attribute-set-name" module:"Cisco-IOS-XR-mpls-te-cfg"`
	PathDiversity	*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity	`path:"path-diversity" module:"Cisco-IOS-XR-mpls-te-cfg"`
	PathSelection	*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathSelection	`path:"path-selection" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute struct, which is a YANG list entry.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute) ΛListKeyMap() (map[string]interface{}, error) {
	if t.AttributeSetName == nil {
		return nil, fmt.Errorf("nil value for key AttributeSetName")
	}

	return map[string]interface{}{
		"attribute-set-name": *t.AttributeSetName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/xro-attributes/xro-attribute/path-diversity YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity struct {
	Lsp	*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity_Lsp	`path:"lsp" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Srlgs	*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity_Srlgs	`path:"srlgs" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity_Lsp represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/xro-attributes/xro-attribute/path-diversity/lsp YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity_Lsp struct {
	Fecs	*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity_Lsp_Fecs	`path:"fecs" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity_Lsp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity_Lsp) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity_Lsp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity_Lsp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity_Lsp) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity_Lsp) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity_Lsp.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity_Lsp) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity_Lsp_Fecs represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/xro-attributes/xro-attribute/path-diversity/lsp/fecs YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity_Lsp_Fecs struct {
	Fec	map[Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity_Lsp_Fecs_Fec_Key]*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity_Lsp_Fecs_Fec	`path:"fec" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity_Lsp_Fecs implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity_Lsp_Fecs) IsYANGGoStruct() {}

// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity_Lsp_Fecs_Fec_Key represents the key for list Fec of element /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/xro-attributes/xro-attribute/path-diversity/lsp/fecs.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity_Lsp_Fecs_Fec_Key struct {
	Source	string	`path:"source"`
	Destination	string	`path:"destination"`
	TunnelId	uint32	`path:"tunnel-id"`
	ExtendedTunnelId	string	`path:"extended-tunnel-id"`
	LspId	uint32	`path:"lsp-id"`
}

// IsYANGGoKeyStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity_Lsp_Fecs_Fec_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity_Lsp_Fecs_Fec_Key) IsYANGGoKeyStruct() {}

// ΛListKeyMap returns the values of the Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity_Lsp_Fecs_Fec_Key key struct.
func (t Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity_Lsp_Fecs_Fec_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"source": t.Source,
		"destination": t.Destination,
		"tunnel-id": t.TunnelId,
		"extended-tunnel-id": t.ExtendedTunnelId,
		"lsp-id": t.LspId,
	}, nil
}

// NewFec creates a new entry in the Fec list of the
// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity_Lsp_Fecs struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity_Lsp_Fecs) NewFec(Source string, Destination string, TunnelId uint32, ExtendedTunnelId string, LspId uint32) (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity_Lsp_Fecs_Fec, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Fec == nil {
		t.Fec = make(map[Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity_Lsp_Fecs_Fec_Key]*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity_Lsp_Fecs_Fec)
	}

	key := Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity_Lsp_Fecs_Fec_Key{
		Source: Source,
		Destination: Destination,
		TunnelId: TunnelId,
		ExtendedTunnelId: ExtendedTunnelId,
		LspId: LspId,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Fec[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Fec", key)
	}

	t.Fec[key] = &Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity_Lsp_Fecs_Fec{
		Source: &Source,
		Destination: &Destination,
		TunnelId: &TunnelId,
		ExtendedTunnelId: &ExtendedTunnelId,
		LspId: &LspId,
	}

	return t.Fec[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity_Lsp_Fecs) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity_Lsp_Fecs"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity_Lsp_Fecs) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity_Lsp_Fecs) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity_Lsp_Fecs.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity_Lsp_Fecs) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity_Lsp_Fecs_Fec represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/xro-attributes/xro-attribute/path-diversity/lsp/fecs/fec YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity_Lsp_Fecs_Fec struct {
	Conformance	E_Cisco_IOS_XRMplsTeCfg_MplsTePathDiversityConformance	`path:"conformance" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Destination	*string	`path:"destination" module:"Cisco-IOS-XR-mpls-te-cfg"`
	ExtendedTunnelId	*string	`path:"extended-tunnel-id" module:"Cisco-IOS-XR-mpls-te-cfg"`
	LspId	*uint32	`path:"lsp-id" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Source	*string	`path:"source" module:"Cisco-IOS-XR-mpls-te-cfg"`
	TunnelId	*uint32	`path:"tunnel-id" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity_Lsp_Fecs_Fec implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity_Lsp_Fecs_Fec) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity_Lsp_Fecs_Fec struct, which is a YANG list entry.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity_Lsp_Fecs_Fec) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Destination == nil {
		return nil, fmt.Errorf("nil value for key Destination")
	}

	if t.ExtendedTunnelId == nil {
		return nil, fmt.Errorf("nil value for key ExtendedTunnelId")
	}

	if t.LspId == nil {
		return nil, fmt.Errorf("nil value for key LspId")
	}

	if t.Source == nil {
		return nil, fmt.Errorf("nil value for key Source")
	}

	if t.TunnelId == nil {
		return nil, fmt.Errorf("nil value for key TunnelId")
	}

	return map[string]interface{}{
		"destination": *t.Destination,
		"extended-tunnel-id": *t.ExtendedTunnelId,
		"lsp-id": *t.LspId,
		"source": *t.Source,
		"tunnel-id": *t.TunnelId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity_Lsp_Fecs_Fec) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity_Lsp_Fecs_Fec"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity_Lsp_Fecs_Fec) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity_Lsp_Fecs_Fec) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity_Lsp_Fecs_Fec.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity_Lsp_Fecs_Fec) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity_Srlgs represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/xro-attributes/xro-attribute/path-diversity/srlgs YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity_Srlgs struct {
	Srlg	map[uint32]*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity_Srlgs_Srlg	`path:"srlg" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity_Srlgs implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity_Srlgs) IsYANGGoStruct() {}

// NewSrlg creates a new entry in the Srlg list of the
// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity_Srlgs struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity_Srlgs) NewSrlg(Srlg uint32) (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity_Srlgs_Srlg, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Srlg == nil {
		t.Srlg = make(map[uint32]*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity_Srlgs_Srlg)
	}

	key := Srlg

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Srlg[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Srlg", key)
	}

	t.Srlg[key] = &Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity_Srlgs_Srlg{
		Srlg: &Srlg,
	}

	return t.Srlg[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity_Srlgs) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity_Srlgs"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity_Srlgs) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity_Srlgs) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity_Srlgs.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity_Srlgs) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity_Srlgs_Srlg represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/xro-attributes/xro-attribute/path-diversity/srlgs/srlg YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity_Srlgs_Srlg struct {
	Conformance	E_Cisco_IOS_XRMplsTeCfg_MplsTePathDiversityConformance	`path:"conformance" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Srlg	*uint32	`path:"srlg" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity_Srlgs_Srlg implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity_Srlgs_Srlg) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity_Srlgs_Srlg struct, which is a YANG list entry.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity_Srlgs_Srlg) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Srlg == nil {
		return nil, fmt.Errorf("nil value for key Srlg")
	}

	return map[string]interface{}{
		"srlg": *t.Srlg,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity_Srlgs_Srlg) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity_Srlgs_Srlg"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity_Srlgs_Srlg) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity_Srlgs_Srlg) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity_Srlgs_Srlg.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity_Srlgs_Srlg) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathSelection represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/attribute-set/xro-attributes/xro-attribute/path-selection YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathSelection struct {
	Enable	YANGEmpty	`path:"enable" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathSelection implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathSelection) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathSelection) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathSelection"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathSelection) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathSelection) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathSelection.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathSelection) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/auto-tunnel YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel struct {
	Backup	*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_Backup	`path:"backup" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Mesh	*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_Mesh	`path:"mesh" module:"Cisco-IOS-XR-mpls-te-cfg"`
	P2MpAutoTunnel	*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_P2MpAutoTunnel	`path:"p2mp-auto-tunnel" module:"Cisco-IOS-XR-mpls-te-cfg"`
	P2PAutoTunnel	*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_P2PAutoTunnel	`path:"p2p-auto-tunnel" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Pcc	*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_Pcc	`path:"pcc" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_Backup represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/auto-tunnel/backup YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_Backup struct {
	AffinityIgnore	YANGEmpty	`path:"affinity-ignore" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Timers	*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_Backup_Timers	`path:"timers" module:"Cisco-IOS-XR-mpls-te-cfg"`
	TunnelRange	*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_Backup_TunnelRange	`path:"tunnel-range" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_Backup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_Backup) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_Backup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_Backup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_Backup) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_Backup) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_Backup.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_Backup) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_Backup_Timers represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/auto-tunnel/backup/timers YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_Backup_Timers struct {
	Removal	*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_Backup_Timers_Removal	`path:"removal" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_Backup_Timers implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_Backup_Timers) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_Backup_Timers) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_Backup_Timers"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_Backup_Timers) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_Backup_Timers) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_Backup_Timers.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_Backup_Timers) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_Backup_Timers_Removal represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/auto-tunnel/backup/timers/removal YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_Backup_Timers_Removal struct {
	Unused	*uint32	`path:"unused" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_Backup_Timers_Removal implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_Backup_Timers_Removal) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_Backup_Timers_Removal) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_Backup_Timers_Removal"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_Backup_Timers_Removal) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_Backup_Timers_Removal) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_Backup_Timers_Removal.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_Backup_Timers_Removal) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_Backup_TunnelRange represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/auto-tunnel/backup/tunnel-range YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_Backup_TunnelRange struct {
	MaxTunnelId	*uint32	`path:"max-tunnel-id" module:"Cisco-IOS-XR-mpls-te-cfg"`
	MinTunnelId	*uint32	`path:"min-tunnel-id" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_Backup_TunnelRange implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_Backup_TunnelRange) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_Backup_TunnelRange) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_Backup_TunnelRange"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_Backup_TunnelRange) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_Backup_TunnelRange) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_Backup_TunnelRange.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_Backup_TunnelRange) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_Mesh represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/auto-tunnel/mesh YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_Mesh struct {
	MeshGroups	*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_Mesh_MeshGroups	`path:"mesh-groups" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Timers	*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_Mesh_Timers	`path:"timers" module:"Cisco-IOS-XR-mpls-te-cfg"`
	TunnelRange	*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_Mesh_TunnelRange	`path:"tunnel-range" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_Mesh implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_Mesh) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_Mesh) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_Mesh"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_Mesh) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_Mesh) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_Mesh.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_Mesh) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_Mesh_MeshGroups represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/auto-tunnel/mesh/mesh-groups YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_Mesh_MeshGroups struct {
	MeshGroup	map[uint32]*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_Mesh_MeshGroups_MeshGroup	`path:"mesh-group" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_Mesh_MeshGroups implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_Mesh_MeshGroups) IsYANGGoStruct() {}

// NewMeshGroup creates a new entry in the MeshGroup list of the
// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_Mesh_MeshGroups struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_Mesh_MeshGroups) NewMeshGroup(MeshGroupId uint32) (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_Mesh_MeshGroups_MeshGroup, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MeshGroup == nil {
		t.MeshGroup = make(map[uint32]*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_Mesh_MeshGroups_MeshGroup)
	}

	key := MeshGroupId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.MeshGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list MeshGroup", key)
	}

	t.MeshGroup[key] = &Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_Mesh_MeshGroups_MeshGroup{
		MeshGroupId: &MeshGroupId,
	}

	return t.MeshGroup[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_Mesh_MeshGroups) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_Mesh_MeshGroups"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_Mesh_MeshGroups) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_Mesh_MeshGroups) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_Mesh_MeshGroups.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_Mesh_MeshGroups) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_Mesh_MeshGroups_MeshGroup represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/auto-tunnel/mesh/mesh-groups/mesh-group YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_Mesh_MeshGroups_MeshGroup struct {
	AttributeSet	*string	`path:"attribute-set" module:"Cisco-IOS-XR-mpls-te-cfg"`
	DestinationList	*string	`path:"destination-list" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Disable	YANGEmpty	`path:"disable" module:"Cisco-IOS-XR-mpls-te-cfg"`
	MeshGroupId	*uint32	`path:"mesh-group-id" module:"Cisco-IOS-XR-mpls-te-cfg"`
	OneHop	YANGEmpty	`path:"one-hop" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_Mesh_MeshGroups_MeshGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_Mesh_MeshGroups_MeshGroup) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_Mesh_MeshGroups_MeshGroup struct, which is a YANG list entry.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_Mesh_MeshGroups_MeshGroup) ΛListKeyMap() (map[string]interface{}, error) {
	if t.MeshGroupId == nil {
		return nil, fmt.Errorf("nil value for key MeshGroupId")
	}

	return map[string]interface{}{
		"mesh-group-id": *t.MeshGroupId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_Mesh_MeshGroups_MeshGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_Mesh_MeshGroups_MeshGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_Mesh_MeshGroups_MeshGroup) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_Mesh_MeshGroups_MeshGroup) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_Mesh_MeshGroups_MeshGroup.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_Mesh_MeshGroups_MeshGroup) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_Mesh_Timers represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/auto-tunnel/mesh/timers YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_Mesh_Timers struct {
	Removal	*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_Mesh_Timers_Removal	`path:"removal" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_Mesh_Timers implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_Mesh_Timers) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_Mesh_Timers) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_Mesh_Timers"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_Mesh_Timers) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_Mesh_Timers) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_Mesh_Timers.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_Mesh_Timers) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_Mesh_Timers_Removal represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/auto-tunnel/mesh/timers/removal YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_Mesh_Timers_Removal struct {
	Unused	*uint32	`path:"unused" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_Mesh_Timers_Removal implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_Mesh_Timers_Removal) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_Mesh_Timers_Removal) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_Mesh_Timers_Removal"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_Mesh_Timers_Removal) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_Mesh_Timers_Removal) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_Mesh_Timers_Removal.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_Mesh_Timers_Removal) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_Mesh_TunnelRange represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/auto-tunnel/mesh/tunnel-range YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_Mesh_TunnelRange struct {
	MaxTunnelId	*uint32	`path:"max-tunnel-id" module:"Cisco-IOS-XR-mpls-te-cfg"`
	MinTunnelId	*uint32	`path:"min-tunnel-id" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_Mesh_TunnelRange implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_Mesh_TunnelRange) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_Mesh_TunnelRange) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_Mesh_TunnelRange"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_Mesh_TunnelRange) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_Mesh_TunnelRange) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_Mesh_TunnelRange.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_Mesh_TunnelRange) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_P2MpAutoTunnel represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/auto-tunnel/p2mp-auto-tunnel YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_P2MpAutoTunnel struct {
	TunnelRange	*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_P2MpAutoTunnel_TunnelRange	`path:"tunnel-range" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_P2MpAutoTunnel implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_P2MpAutoTunnel) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_P2MpAutoTunnel) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_P2MpAutoTunnel"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_P2MpAutoTunnel) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_P2MpAutoTunnel) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_P2MpAutoTunnel.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_P2MpAutoTunnel) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_P2MpAutoTunnel_TunnelRange represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/auto-tunnel/p2mp-auto-tunnel/tunnel-range YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_P2MpAutoTunnel_TunnelRange struct {
	MaxTunnelId	*uint32	`path:"max-tunnel-id" module:"Cisco-IOS-XR-mpls-te-cfg"`
	MinTunnelId	*uint32	`path:"min-tunnel-id" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_P2MpAutoTunnel_TunnelRange implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_P2MpAutoTunnel_TunnelRange) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_P2MpAutoTunnel_TunnelRange) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_P2MpAutoTunnel_TunnelRange"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_P2MpAutoTunnel_TunnelRange) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_P2MpAutoTunnel_TunnelRange) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_P2MpAutoTunnel_TunnelRange.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_P2MpAutoTunnel_TunnelRange) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_P2PAutoTunnel represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/auto-tunnel/p2p-auto-tunnel YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_P2PAutoTunnel struct {
	TunnelRange	*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_P2PAutoTunnel_TunnelRange	`path:"tunnel-range" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_P2PAutoTunnel implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_P2PAutoTunnel) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_P2PAutoTunnel) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_P2PAutoTunnel"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_P2PAutoTunnel) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_P2PAutoTunnel) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_P2PAutoTunnel.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_P2PAutoTunnel) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_P2PAutoTunnel_TunnelRange represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/auto-tunnel/p2p-auto-tunnel/tunnel-range YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_P2PAutoTunnel_TunnelRange struct {
	MaxTunnelId	*uint32	`path:"max-tunnel-id" module:"Cisco-IOS-XR-mpls-te-cfg"`
	MinTunnelId	*uint32	`path:"min-tunnel-id" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_P2PAutoTunnel_TunnelRange implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_P2PAutoTunnel_TunnelRange) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_P2PAutoTunnel_TunnelRange) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_P2PAutoTunnel_TunnelRange"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_P2PAutoTunnel_TunnelRange) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_P2PAutoTunnel_TunnelRange) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_P2PAutoTunnel_TunnelRange.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_P2PAutoTunnel_TunnelRange) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_Pcc represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/auto-tunnel/pcc YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_Pcc struct {
	TunnelRange	*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_Pcc_TunnelRange	`path:"tunnel-range" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_Pcc implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_Pcc) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_Pcc) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_Pcc"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_Pcc) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_Pcc) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_Pcc.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_Pcc) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_Pcc_TunnelRange represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/auto-tunnel/pcc/tunnel-range YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_Pcc_TunnelRange struct {
	MaxTunnelId	*uint32	`path:"max-tunnel-id" module:"Cisco-IOS-XR-mpls-te-cfg"`
	MinTunnelId	*uint32	`path:"min-tunnel-id" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_Pcc_TunnelRange implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_Pcc_TunnelRange) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_Pcc_TunnelRange) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_Pcc_TunnelRange"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_Pcc_TunnelRange) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_Pcc_TunnelRange) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_Pcc_TunnelRange.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_AutoTunnel_Pcc_TunnelRange) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_BackoffTimer represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/backoff-timer YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_BackoffTimer struct {
	FinalInterval	*uint32	`path:"final-interval" module:"Cisco-IOS-XR-mpls-te-cfg"`
	InitialInterval	*uint32	`path:"initial-interval" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_BackoffTimer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_BackoffTimer) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_BackoffTimer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_BackoffTimer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_BackoffTimer) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_BackoffTimer) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_BackoffTimer.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_BackoffTimer) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_BandwidthAccounting represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/bandwidth-accounting YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_BandwidthAccounting struct {
	AccountFloodingThreshold	*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_BandwidthAccounting_AccountFloodingThreshold	`path:"account-flooding-threshold" module:"Cisco-IOS-XR-mpls-te-cfg"`
	AdjustmentFactor	*uint32	`path:"adjustment-factor" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Application	*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_BandwidthAccounting_Application	`path:"application" module:"Cisco-IOS-XR-mpls-te-cfg"`
	CollectionTypeRsvpTe	*bool	`path:"collection-type-rsvp-te" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Enable	YANGEmpty	`path:"enable" module:"Cisco-IOS-XR-mpls-te-cfg"`
	SamplingInterval	*uint32	`path:"sampling-interval" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_BandwidthAccounting implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_BandwidthAccounting) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_BandwidthAccounting) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_BandwidthAccounting"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_BandwidthAccounting) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_BandwidthAccounting) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_BandwidthAccounting.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_BandwidthAccounting) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_BandwidthAccounting_AccountFloodingThreshold represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/bandwidth-accounting/account-flooding-threshold YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_BandwidthAccounting_AccountFloodingThreshold struct {
	DownThreshold	*uint32	`path:"down-threshold" module:"Cisco-IOS-XR-mpls-te-cfg"`
	UpThreshold	*uint32	`path:"up-threshold" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_BandwidthAccounting_AccountFloodingThreshold implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_BandwidthAccounting_AccountFloodingThreshold) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_BandwidthAccounting_AccountFloodingThreshold) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_BandwidthAccounting_AccountFloodingThreshold"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_BandwidthAccounting_AccountFloodingThreshold) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_BandwidthAccounting_AccountFloodingThreshold) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_BandwidthAccounting_AccountFloodingThreshold.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_BandwidthAccounting_AccountFloodingThreshold) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_BandwidthAccounting_Application represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/bandwidth-accounting/application YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_BandwidthAccounting_Application struct {
	ApplicationEnforced	*bool	`path:"application-enforced" module:"Cisco-IOS-XR-mpls-te-cfg"`
	ApplicationInterval	*uint32	`path:"application-interval" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_BandwidthAccounting_Application implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_BandwidthAccounting_Application) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_BandwidthAccounting_Application) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_BandwidthAccounting_Application"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_BandwidthAccounting_Application) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_BandwidthAccounting_Application) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_BandwidthAccounting_Application.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_BandwidthAccounting_Application) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_BfdOverLsp represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/bfd-over-lsp YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_BfdOverLsp struct {
	Head	*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_BfdOverLsp_Head	`path:"head" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Tail	*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_BfdOverLsp_Tail	`path:"tail" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_BfdOverLsp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_BfdOverLsp) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_BfdOverLsp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_BfdOverLsp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_BfdOverLsp) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_BfdOverLsp) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_BfdOverLsp.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_BfdOverLsp) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_BfdOverLsp_Head represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/bfd-over-lsp/head YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_BfdOverLsp_Head struct {
	DownAction	E_Cisco_IOS_XRMplsTeCfg_MplsTeBfdSessionDownAction	`path:"down-action" module:"Cisco-IOS-XR-mpls-te-cfg"`
	ReoptTimeout	*uint32	`path:"reopt-timeout" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_BfdOverLsp_Head implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_BfdOverLsp_Head) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_BfdOverLsp_Head) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_BfdOverLsp_Head"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_BfdOverLsp_Head) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_BfdOverLsp_Head) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_BfdOverLsp_Head.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_BfdOverLsp_Head) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_BfdOverLsp_Tail represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/bfd-over-lsp/tail YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_BfdOverLsp_Tail struct {
	MinimumInterval	*uint32	`path:"minimum-interval" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Multiplier	*uint32	`path:"multiplier" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_BfdOverLsp_Tail implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_BfdOverLsp_Tail) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_BfdOverLsp_Tail) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_BfdOverLsp_Tail"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_BfdOverLsp_Tail) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_BfdOverLsp_Tail) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_BfdOverLsp_Tail.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_BfdOverLsp_Tail) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_FastReroute represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/fast-reroute YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_FastReroute struct {
	Timers	*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_FastReroute_Timers	`path:"timers" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_FastReroute implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_FastReroute) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_FastReroute) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_FastReroute"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_FastReroute) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_FastReroute) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_FastReroute.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_FastReroute) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_FastReroute_Timers represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/fast-reroute/timers YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_FastReroute_Timers struct {
	HoldBackup	*uint32	`path:"hold-backup" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Promotion	*uint32	`path:"promotion" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_FastReroute_Timers implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_FastReroute_Timers) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_FastReroute_Timers) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_FastReroute_Timers"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_FastReroute_Timers) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_FastReroute_Timers) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_FastReroute_Timers.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_FastReroute_Timers) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_HardwareOutOfResource represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/hardware-out-of-resource YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_HardwareOutOfResource struct {
	OorGreenState	*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_HardwareOutOfResource_OorGreenState	`path:"oor-green-state" module:"Cisco-IOS-XR-mpls-te-cfg"`
	OorRedState	*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_HardwareOutOfResource_OorRedState	`path:"oor-red-state" module:"Cisco-IOS-XR-mpls-te-cfg"`
	OorYellowState	*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_HardwareOutOfResource_OorYellowState	`path:"oor-yellow-state" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_HardwareOutOfResource implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_HardwareOutOfResource) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_HardwareOutOfResource) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_HardwareOutOfResource"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_HardwareOutOfResource) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_HardwareOutOfResource) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_HardwareOutOfResource.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_HardwareOutOfResource) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_HardwareOutOfResource_OorGreenState represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/hardware-out-of-resource/oor-green-state YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_HardwareOutOfResource_OorGreenState struct {
	OorAcceptLspMinBandwidth	*uint32	`path:"oor-accept-lsp-min-bandwidth" module:"Cisco-IOS-XR-mpls-te-cfg"`
	OorAcceptReoptLsp	YANGEmpty	`path:"oor-accept-reopt-lsp" module:"Cisco-IOS-XR-mpls-te-cfg"`
	OorAvailableBandwidthPercentage	*uint32	`path:"oor-available-bandwidth-percentage" module:"Cisco-IOS-XR-mpls-te-cfg"`
	OorMetricTePenalty	*uint32	`path:"oor-metric-te-penalty" module:"Cisco-IOS-XR-mpls-te-cfg"`
	OorNodeProtectionDisable	YANGEmpty	`path:"oor-node-protection-disable" module:"Cisco-IOS-XR-mpls-te-cfg"`
	OorRecoveryDuration	*uint32	`path:"oor-recovery-duration" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_HardwareOutOfResource_OorGreenState implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_HardwareOutOfResource_OorGreenState) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_HardwareOutOfResource_OorGreenState) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_HardwareOutOfResource_OorGreenState"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_HardwareOutOfResource_OorGreenState) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_HardwareOutOfResource_OorGreenState) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_HardwareOutOfResource_OorGreenState.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_HardwareOutOfResource_OorGreenState) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_HardwareOutOfResource_OorRedState represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/hardware-out-of-resource/oor-red-state YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_HardwareOutOfResource_OorRedState struct {
	OorAcceptLspMinBandwidth	*uint32	`path:"oor-accept-lsp-min-bandwidth" module:"Cisco-IOS-XR-mpls-te-cfg"`
	OorAcceptReoptLsp	YANGEmpty	`path:"oor-accept-reopt-lsp" module:"Cisco-IOS-XR-mpls-te-cfg"`
	OorAvailableBandwidthPercentage	*uint32	`path:"oor-available-bandwidth-percentage" module:"Cisco-IOS-XR-mpls-te-cfg"`
	OorMetricTePenalty	*uint32	`path:"oor-metric-te-penalty" module:"Cisco-IOS-XR-mpls-te-cfg"`
	OorNodeProtectionDisable	YANGEmpty	`path:"oor-node-protection-disable" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_HardwareOutOfResource_OorRedState implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_HardwareOutOfResource_OorRedState) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_HardwareOutOfResource_OorRedState) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_HardwareOutOfResource_OorRedState"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_HardwareOutOfResource_OorRedState) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_HardwareOutOfResource_OorRedState) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_HardwareOutOfResource_OorRedState.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_HardwareOutOfResource_OorRedState) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_HardwareOutOfResource_OorYellowState represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/hardware-out-of-resource/oor-yellow-state YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_HardwareOutOfResource_OorYellowState struct {
	OorAcceptLspMinBandwidth	*uint32	`path:"oor-accept-lsp-min-bandwidth" module:"Cisco-IOS-XR-mpls-te-cfg"`
	OorAcceptReoptLsp	YANGEmpty	`path:"oor-accept-reopt-lsp" module:"Cisco-IOS-XR-mpls-te-cfg"`
	OorAvailableBandwidthPercentage	*uint32	`path:"oor-available-bandwidth-percentage" module:"Cisco-IOS-XR-mpls-te-cfg"`
	OorMetricTePenalty	*uint32	`path:"oor-metric-te-penalty" module:"Cisco-IOS-XR-mpls-te-cfg"`
	OorNodeProtectionDisable	YANGEmpty	`path:"oor-node-protection-disable" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_HardwareOutOfResource_OorYellowState implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_HardwareOutOfResource_OorYellowState) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_HardwareOutOfResource_OorYellowState) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_HardwareOutOfResource_OorYellowState"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_HardwareOutOfResource_OorYellowState) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_HardwareOutOfResource_OorYellowState) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_HardwareOutOfResource_OorYellowState.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_HardwareOutOfResource_OorYellowState) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_LspOutOfResource represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/lsp-out-of-resource YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_LspOutOfResource struct {
	LspOorGreenState	*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_LspOutOfResource_LspOorGreenState	`path:"lsp-oor-green-state" module:"Cisco-IOS-XR-mpls-te-cfg"`
	LspOorRedState	*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_LspOutOfResource_LspOorRedState	`path:"lsp-oor-red-state" module:"Cisco-IOS-XR-mpls-te-cfg"`
	LspOorYellowState	*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_LspOutOfResource_LspOorYellowState	`path:"lsp-oor-yellow-state" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_LspOutOfResource implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_LspOutOfResource) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_LspOutOfResource) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_LspOutOfResource"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_LspOutOfResource) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_LspOutOfResource) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_LspOutOfResource.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_LspOutOfResource) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_LspOutOfResource_LspOorGreenState represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/lsp-out-of-resource/lsp-oor-green-state YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_LspOutOfResource_LspOorGreenState struct {
	OorAcceptLspMinBandwidth	*uint32	`path:"oor-accept-lsp-min-bandwidth" module:"Cisco-IOS-XR-mpls-te-cfg"`
	OorAcceptReoptLsp	YANGEmpty	`path:"oor-accept-reopt-lsp" module:"Cisco-IOS-XR-mpls-te-cfg"`
	OorAvailableBandwidthPercentage	*uint32	`path:"oor-available-bandwidth-percentage" module:"Cisco-IOS-XR-mpls-te-cfg"`
	OorMetricTePenalty	*uint32	`path:"oor-metric-te-penalty" module:"Cisco-IOS-XR-mpls-te-cfg"`
	OorRecoveryDuration	*uint32	`path:"oor-recovery-duration" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_LspOutOfResource_LspOorGreenState implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_LspOutOfResource_LspOorGreenState) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_LspOutOfResource_LspOorGreenState) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_LspOutOfResource_LspOorGreenState"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_LspOutOfResource_LspOorGreenState) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_LspOutOfResource_LspOorGreenState) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_LspOutOfResource_LspOorGreenState.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_LspOutOfResource_LspOorGreenState) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_LspOutOfResource_LspOorRedState represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/lsp-out-of-resource/lsp-oor-red-state YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_LspOutOfResource_LspOorRedState struct {
	AllTransitLspThreshold	*uint32	`path:"all-transit-lsp-threshold" module:"Cisco-IOS-XR-mpls-te-cfg"`
	OorAcceptLspMinBandwidth	*uint32	`path:"oor-accept-lsp-min-bandwidth" module:"Cisco-IOS-XR-mpls-te-cfg"`
	OorAcceptReoptLsp	YANGEmpty	`path:"oor-accept-reopt-lsp" module:"Cisco-IOS-XR-mpls-te-cfg"`
	OorAvailableBandwidthPercentage	*uint32	`path:"oor-available-bandwidth-percentage" module:"Cisco-IOS-XR-mpls-te-cfg"`
	OorMetricTePenalty	*uint32	`path:"oor-metric-te-penalty" module:"Cisco-IOS-XR-mpls-te-cfg"`
	UnprotectedTransitLspThreshold	*uint32	`path:"unprotected-transit-lsp-threshold" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_LspOutOfResource_LspOorRedState implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_LspOutOfResource_LspOorRedState) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_LspOutOfResource_LspOorRedState) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_LspOutOfResource_LspOorRedState"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_LspOutOfResource_LspOorRedState) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_LspOutOfResource_LspOorRedState) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_LspOutOfResource_LspOorRedState.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_LspOutOfResource_LspOorRedState) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_LspOutOfResource_LspOorYellowState represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/lsp-out-of-resource/lsp-oor-yellow-state YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_LspOutOfResource_LspOorYellowState struct {
	AllTransitLspThreshold	*uint32	`path:"all-transit-lsp-threshold" module:"Cisco-IOS-XR-mpls-te-cfg"`
	OorAcceptLspMinBandwidth	*uint32	`path:"oor-accept-lsp-min-bandwidth" module:"Cisco-IOS-XR-mpls-te-cfg"`
	OorAcceptReoptLsp	YANGEmpty	`path:"oor-accept-reopt-lsp" module:"Cisco-IOS-XR-mpls-te-cfg"`
	OorAvailableBandwidthPercentage	*uint32	`path:"oor-available-bandwidth-percentage" module:"Cisco-IOS-XR-mpls-te-cfg"`
	OorMetricTePenalty	*uint32	`path:"oor-metric-te-penalty" module:"Cisco-IOS-XR-mpls-te-cfg"`
	UnprotectedTransitLspThreshold	*uint32	`path:"unprotected-transit-lsp-threshold" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_LspOutOfResource_LspOorYellowState implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_LspOutOfResource_LspOorYellowState) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_LspOutOfResource_LspOorYellowState) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_LspOutOfResource_LspOorYellowState"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_LspOutOfResource_LspOorYellowState) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_LspOutOfResource_LspOorYellowState) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_LspOutOfResource_LspOorYellowState.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_LspOutOfResource_LspOorYellowState) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_Mib represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/mib YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_Mib struct {
	MidpointLspStatsCollectionDisable	YANGEmpty	`path:"midpoint-lsp-stats-collection-disable" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_Mib implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_Mib) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_Mib) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_Mib"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_Mib) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_Mib) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_Mib.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_Mib) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PathSelection represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/path-selection YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PathSelection struct {
	CostLimit	*uint32	`path:"cost-limit" module:"Cisco-IOS-XR-mpls-te-cfg"`
	DelayLimit	*uint32	`path:"delay-limit" module:"Cisco-IOS-XR-mpls-te-cfg"`
	IgnoreOverloadRole	*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PathSelection_IgnoreOverloadRole	`path:"ignore-overload-role" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Invalidation	*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PathSelection_Invalidation	`path:"invalidation" module:"Cisco-IOS-XR-mpls-te-cfg"`
	LooseAffinities	*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PathSelection_LooseAffinities	`path:"loose-affinities" module:"Cisco-IOS-XR-mpls-te-cfg"`
	LooseDomainMatch	*bool	`path:"loose-domain-match" module:"Cisco-IOS-XR-mpls-te-cfg"`
	LooseMetrics	*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PathSelection_LooseMetrics	`path:"loose-metrics" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Metric	E_Cisco_IOS_XRMplsTeCfg_MplsTePathSelectionMetric	`path:"metric" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Tiebreaker	E_Cisco_IOS_XRMplsTeCfg_MplsTePathSelectionTiebreaker	`path:"tiebreaker" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PathSelection implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PathSelection) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PathSelection) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PathSelection"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PathSelection) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PathSelection) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PathSelection.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PathSelection) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PathSelection_IgnoreOverloadRole represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/path-selection/ignore-overload-role YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PathSelection_IgnoreOverloadRole struct {
	Head	*bool	`path:"head" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Mid	*bool	`path:"mid" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Tail	*bool	`path:"tail" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PathSelection_IgnoreOverloadRole implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PathSelection_IgnoreOverloadRole) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PathSelection_IgnoreOverloadRole) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PathSelection_IgnoreOverloadRole"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PathSelection_IgnoreOverloadRole) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PathSelection_IgnoreOverloadRole) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PathSelection_IgnoreOverloadRole.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PathSelection_IgnoreOverloadRole) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PathSelection_Invalidation represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/path-selection/invalidation YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PathSelection_Invalidation struct {
	PathInvalidationAction	E_Cisco_IOS_XRMplsTeCfg_PathInvalidationAction	`path:"path-invalidation-action" module:"Cisco-IOS-XR-mpls-te-cfg"`
	PathInvalidationTimeout	*uint32	`path:"path-invalidation-timeout" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PathSelection_Invalidation implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PathSelection_Invalidation) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PathSelection_Invalidation) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PathSelection_Invalidation"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PathSelection_Invalidation) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PathSelection_Invalidation) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PathSelection_Invalidation.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PathSelection_Invalidation) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PathSelection_LooseAffinities represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/path-selection/loose-affinities YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PathSelection_LooseAffinities struct {
	LooseAffinity	map[uint32]*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PathSelection_LooseAffinities_LooseAffinity	`path:"loose-affinity" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PathSelection_LooseAffinities implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PathSelection_LooseAffinities) IsYANGGoStruct() {}

// NewLooseAffinity creates a new entry in the LooseAffinity list of the
// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PathSelection_LooseAffinities struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PathSelection_LooseAffinities) NewLooseAffinity(ClassType uint32) (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PathSelection_LooseAffinities_LooseAffinity, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.LooseAffinity == nil {
		t.LooseAffinity = make(map[uint32]*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PathSelection_LooseAffinities_LooseAffinity)
	}

	key := ClassType

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.LooseAffinity[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list LooseAffinity", key)
	}

	t.LooseAffinity[key] = &Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PathSelection_LooseAffinities_LooseAffinity{
		ClassType: &ClassType,
	}

	return t.LooseAffinity[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PathSelection_LooseAffinities) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PathSelection_LooseAffinities"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PathSelection_LooseAffinities) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PathSelection_LooseAffinities) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PathSelection_LooseAffinities.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PathSelection_LooseAffinities) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PathSelection_LooseAffinities_LooseAffinity represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/path-selection/loose-affinities/loose-affinity YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PathSelection_LooseAffinities_LooseAffinity struct {
	Affinity	*string	`path:"affinity" module:"Cisco-IOS-XR-mpls-te-cfg"`
	ClassType	*uint32	`path:"class-type" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Mask	*string	`path:"mask" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PathSelection_LooseAffinities_LooseAffinity implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PathSelection_LooseAffinities_LooseAffinity) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PathSelection_LooseAffinities_LooseAffinity struct, which is a YANG list entry.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PathSelection_LooseAffinities_LooseAffinity) ΛListKeyMap() (map[string]interface{}, error) {
	if t.ClassType == nil {
		return nil, fmt.Errorf("nil value for key ClassType")
	}

	return map[string]interface{}{
		"class-type": *t.ClassType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PathSelection_LooseAffinities_LooseAffinity) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PathSelection_LooseAffinities_LooseAffinity"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PathSelection_LooseAffinities_LooseAffinity) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PathSelection_LooseAffinities_LooseAffinity) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PathSelection_LooseAffinities_LooseAffinity.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PathSelection_LooseAffinities_LooseAffinity) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PathSelection_LooseMetrics represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/path-selection/loose-metrics YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PathSelection_LooseMetrics struct {
	LooseMetric	map[uint32]*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PathSelection_LooseMetrics_LooseMetric	`path:"loose-metric" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PathSelection_LooseMetrics implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PathSelection_LooseMetrics) IsYANGGoStruct() {}

// NewLooseMetric creates a new entry in the LooseMetric list of the
// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PathSelection_LooseMetrics struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PathSelection_LooseMetrics) NewLooseMetric(ClassType uint32) (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PathSelection_LooseMetrics_LooseMetric, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.LooseMetric == nil {
		t.LooseMetric = make(map[uint32]*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PathSelection_LooseMetrics_LooseMetric)
	}

	key := ClassType

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.LooseMetric[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list LooseMetric", key)
	}

	t.LooseMetric[key] = &Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PathSelection_LooseMetrics_LooseMetric{
		ClassType: &ClassType,
	}

	return t.LooseMetric[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PathSelection_LooseMetrics) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PathSelection_LooseMetrics"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PathSelection_LooseMetrics) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PathSelection_LooseMetrics) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PathSelection_LooseMetrics.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PathSelection_LooseMetrics) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PathSelection_LooseMetrics_LooseMetric represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/path-selection/loose-metrics/loose-metric YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PathSelection_LooseMetrics_LooseMetric struct {
	ClassType	*uint32	`path:"class-type" module:"Cisco-IOS-XR-mpls-te-cfg"`
	MetricType	E_Cisco_IOS_XRMplsTeCfg_MplsTePathSelectionMetric	`path:"metric-type" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PathSelection_LooseMetrics_LooseMetric implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PathSelection_LooseMetrics_LooseMetric) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PathSelection_LooseMetrics_LooseMetric struct, which is a YANG list entry.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PathSelection_LooseMetrics_LooseMetric) ΛListKeyMap() (map[string]interface{}, error) {
	if t.ClassType == nil {
		return nil, fmt.Errorf("nil value for key ClassType")
	}

	return map[string]interface{}{
		"class-type": *t.ClassType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PathSelection_LooseMetrics_LooseMetric) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PathSelection_LooseMetrics_LooseMetric"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PathSelection_LooseMetrics_LooseMetric) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PathSelection_LooseMetrics_LooseMetric) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PathSelection_LooseMetrics_LooseMetric.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PathSelection_LooseMetrics_LooseMetric) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PceAttributes represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/pce-attributes YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PceAttributes struct {
	Address	*string	`path:"address" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Deadtimer	*uint32	`path:"deadtimer" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Keepalive	*uint32	`path:"keepalive" module:"Cisco-IOS-XR-mpls-te-cfg"`
	KeepaliveTolerance	*uint32	`path:"keepalive-tolerance" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Keychain	*string	`path:"keychain" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Logging	*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PceAttributes_Logging	`path:"logging" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Password	*string	`path:"password" module:"Cisco-IOS-XR-mpls-te-cfg"`
	PceStateful	*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PceAttributes_PceStateful	`path:"pce-stateful" module:"Cisco-IOS-XR-mpls-te-cfg"`
	PeerSourceAddr	*string	`path:"peer-source-addr" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Peers	*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PceAttributes_Peers	`path:"peers" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Precedence	*uint32	`path:"precedence" module:"Cisco-IOS-XR-mpls-te-cfg"`
	ReoptimizePeriod	*uint32	`path:"reoptimize-period" module:"Cisco-IOS-XR-mpls-te-cfg"`
	RequestTimeout	*uint32	`path:"request-timeout" module:"Cisco-IOS-XR-mpls-te-cfg"`
	SegmentRouting	YANGEmpty	`path:"segment-routing" module:"Cisco-IOS-XR-mpls-te-cfg"`
	SpeakerEntityId	*string	`path:"speaker-entity-id" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Timer	*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PceAttributes_Timer	`path:"timer" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PceAttributes implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PceAttributes) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PceAttributes) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PceAttributes"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PceAttributes) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PceAttributes) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PceAttributes.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PceAttributes) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PceAttributes_Logging represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/pce-attributes/logging YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PceAttributes_Logging struct {
	Events	*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PceAttributes_Logging_Events	`path:"events" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PceAttributes_Logging implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PceAttributes_Logging) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PceAttributes_Logging) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PceAttributes_Logging"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PceAttributes_Logging) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PceAttributes_Logging) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PceAttributes_Logging.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PceAttributes_Logging) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PceAttributes_Logging_Events represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/pce-attributes/logging/events YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PceAttributes_Logging_Events struct {
	PeerStatus	YANGEmpty	`path:"peer-status" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PceAttributes_Logging_Events implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PceAttributes_Logging_Events) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PceAttributes_Logging_Events) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PceAttributes_Logging_Events"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PceAttributes_Logging_Events) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PceAttributes_Logging_Events) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PceAttributes_Logging_Events.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PceAttributes_Logging_Events) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PceAttributes_PceStateful represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/pce-attributes/pce-stateful YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PceAttributes_PceStateful struct {
	AutorouteAnnounce	YANGEmpty	`path:"autoroute-announce" module:"Cisco-IOS-XR-mpls-te-cfg"`
	CiscoExtension	YANGEmpty	`path:"cisco-extension" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Delegation	YANGEmpty	`path:"delegation" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Enable	YANGEmpty	`path:"enable" module:"Cisco-IOS-XR-mpls-te-cfg"`
	FastRepair	YANGEmpty	`path:"fast-repair" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Instantiation	YANGEmpty	`path:"instantiation" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Redundancy	*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PceAttributes_PceStateful_Redundancy	`path:"redundancy" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Report	YANGEmpty	`path:"report" module:"Cisco-IOS-XR-mpls-te-cfg"`
	StatefulTimers	*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PceAttributes_PceStateful_StatefulTimers	`path:"stateful-timers" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PceAttributes_PceStateful implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PceAttributes_PceStateful) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PceAttributes_PceStateful) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PceAttributes_PceStateful"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PceAttributes_PceStateful) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PceAttributes_PceStateful) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PceAttributes_PceStateful.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PceAttributes_PceStateful) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PceAttributes_PceStateful_Redundancy represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/pce-attributes/pce-stateful/redundancy YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PceAttributes_PceStateful_Redundancy struct {
	PccCentric	YANGEmpty	`path:"pcc-centric" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PceAttributes_PceStateful_Redundancy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PceAttributes_PceStateful_Redundancy) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PceAttributes_PceStateful_Redundancy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PceAttributes_PceStateful_Redundancy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PceAttributes_PceStateful_Redundancy) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PceAttributes_PceStateful_Redundancy) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PceAttributes_PceStateful_Redundancy.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PceAttributes_PceStateful_Redundancy) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PceAttributes_PceStateful_StatefulTimers represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/pce-attributes/pce-stateful/stateful-timers YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PceAttributes_PceStateful_StatefulTimers struct {
	RedelegationTimeout	*uint32	`path:"redelegation-timeout" module:"Cisco-IOS-XR-mpls-te-cfg"`
	StateTimeout	*uint32	`path:"state-timeout" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PceAttributes_PceStateful_StatefulTimers implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PceAttributes_PceStateful_StatefulTimers) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PceAttributes_PceStateful_StatefulTimers) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PceAttributes_PceStateful_StatefulTimers"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PceAttributes_PceStateful_StatefulTimers) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PceAttributes_PceStateful_StatefulTimers) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PceAttributes_PceStateful_StatefulTimers.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PceAttributes_PceStateful_StatefulTimers) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PceAttributes_Peers represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/pce-attributes/peers YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PceAttributes_Peers struct {
	Peer	map[string]*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PceAttributes_Peers_Peer	`path:"peer" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PceAttributes_Peers implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PceAttributes_Peers) IsYANGGoStruct() {}

// NewPeer creates a new entry in the Peer list of the
// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PceAttributes_Peers struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PceAttributes_Peers) NewPeer(PcePeerAddress string) (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PceAttributes_Peers_Peer, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Peer == nil {
		t.Peer = make(map[string]*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PceAttributes_Peers_Peer)
	}

	key := PcePeerAddress

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Peer[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Peer", key)
	}

	t.Peer[key] = &Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PceAttributes_Peers_Peer{
		PcePeerAddress: &PcePeerAddress,
	}

	return t.Peer[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PceAttributes_Peers) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PceAttributes_Peers"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PceAttributes_Peers) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PceAttributes_Peers) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PceAttributes_Peers.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PceAttributes_Peers) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PceAttributes_Peers_Peer represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/pce-attributes/peers/peer YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PceAttributes_Peers_Peer struct {
	Keychain	*string	`path:"keychain" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Password	*string	`path:"password" module:"Cisco-IOS-XR-mpls-te-cfg"`
	PcePeerAddress	*string	`path:"pce-peer-address" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Precedence	*uint32	`path:"precedence" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PceAttributes_Peers_Peer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PceAttributes_Peers_Peer) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PceAttributes_Peers_Peer struct, which is a YANG list entry.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PceAttributes_Peers_Peer) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PcePeerAddress == nil {
		return nil, fmt.Errorf("nil value for key PcePeerAddress")
	}

	return map[string]interface{}{
		"pce-peer-address": *t.PcePeerAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PceAttributes_Peers_Peer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PceAttributes_Peers_Peer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PceAttributes_Peers_Peer) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PceAttributes_Peers_Peer) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PceAttributes_Peers_Peer.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PceAttributes_Peers_Peer) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PceAttributes_Timer represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/pce-attributes/timer YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PceAttributes_Timer struct {
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PceAttributes_Timer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PceAttributes_Timer) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PceAttributes_Timer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PceAttributes_Timer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PceAttributes_Timer) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PceAttributes_Timer) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PceAttributes_Timer.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_PceAttributes_Timer) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_Queues represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/queues YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_Queues struct {
	Queue	map[E_Cisco_IOS_XRMplsTeCfg_RoutePriorityRole]*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_Queues_Queue	`path:"queue" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_Queues implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_Queues) IsYANGGoStruct() {}

// NewQueue creates a new entry in the Queue list of the
// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_Queues struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_Queues) NewQueue(Role E_Cisco_IOS_XRMplsTeCfg_RoutePriorityRole) (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_Queues_Queue, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[E_Cisco_IOS_XRMplsTeCfg_RoutePriorityRole]*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_Queues_Queue)
	}

	key := Role

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Queue[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Queue", key)
	}

	t.Queue[key] = &Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_Queues_Queue{
		Role: Role,
	}

	return t.Queue[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_Queues) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_Queues"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_Queues) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_Queues) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_Queues.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_Queues) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_Queues_Queue represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/queues/queue YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_Queues_Queue struct {
	Role	E_Cisco_IOS_XRMplsTeCfg_RoutePriorityRole	`path:"role" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Value	*uint32	`path:"value" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_Queues_Queue implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_Queues_Queue) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_Queues_Queue struct, which is a YANG list entry.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_Queues_Queue) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"role": t.Role,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_Queues_Queue) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_Queues_Queue"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_Queues_Queue) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_Queues_Queue) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_Queues_Queue.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_Queues_Queue) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_SecondaryRouterIds represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/secondary-router-ids YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_SecondaryRouterIds struct {
	SecondaryRouterId	map[string]*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_SecondaryRouterIds_SecondaryRouterId	`path:"secondary-router-id" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_SecondaryRouterIds implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_SecondaryRouterIds) IsYANGGoStruct() {}

// NewSecondaryRouterId creates a new entry in the SecondaryRouterId list of the
// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_SecondaryRouterIds struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_SecondaryRouterIds) NewSecondaryRouterId(SecondaryRouterIdValue string) (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_SecondaryRouterIds_SecondaryRouterId, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SecondaryRouterId == nil {
		t.SecondaryRouterId = make(map[string]*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_SecondaryRouterIds_SecondaryRouterId)
	}

	key := SecondaryRouterIdValue

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SecondaryRouterId[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SecondaryRouterId", key)
	}

	t.SecondaryRouterId[key] = &Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_SecondaryRouterIds_SecondaryRouterId{
		SecondaryRouterIdValue: &SecondaryRouterIdValue,
	}

	return t.SecondaryRouterId[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_SecondaryRouterIds) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_SecondaryRouterIds"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_SecondaryRouterIds) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_SecondaryRouterIds) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_SecondaryRouterIds.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_SecondaryRouterIds) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_SecondaryRouterIds_SecondaryRouterId represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/secondary-router-ids/secondary-router-id YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_SecondaryRouterIds_SecondaryRouterId struct {
	SecondaryRouterIdValue	*string	`path:"secondary-router-id-value" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_SecondaryRouterIds_SecondaryRouterId implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_SecondaryRouterIds_SecondaryRouterId) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_SecondaryRouterIds_SecondaryRouterId struct, which is a YANG list entry.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_SecondaryRouterIds_SecondaryRouterId) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SecondaryRouterIdValue == nil {
		return nil, fmt.Errorf("nil value for key SecondaryRouterIdValue")
	}

	return map[string]interface{}{
		"secondary-router-id-value": *t.SecondaryRouterIdValue,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_SecondaryRouterIds_SecondaryRouterId) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_SecondaryRouterIds_SecondaryRouterId"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_SecondaryRouterIds_SecondaryRouterId) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_SecondaryRouterIds_SecondaryRouterId) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_SecondaryRouterIds_SecondaryRouterId.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_SecondaryRouterIds_SecondaryRouterId) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_SoftPreemption represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/soft-preemption YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_SoftPreemption struct {
	Enable	*bool	`path:"enable" module:"Cisco-IOS-XR-mpls-te-cfg"`
	FrrRewrite	YANGEmpty	`path:"frr-rewrite" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Timeout	*uint32	`path:"timeout" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_SoftPreemption implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_SoftPreemption) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_SoftPreemption) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_SoftPreemption"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_SoftPreemption) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_SoftPreemption) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_SoftPreemption.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_SoftPreemption) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_Srlg represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/srlg YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_Srlg struct {
	DefaultAdminWeight	*uint32	`path:"default-admin-weight" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Enable	YANGEmpty	`path:"enable" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Names	*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_Srlg_Names	`path:"names" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_Srlg implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_Srlg) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_Srlg) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_Srlg"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_Srlg) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_Srlg) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_Srlg.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_Srlg) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_Srlg_Names represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/srlg/names YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_Srlg_Names struct {
	Name	map[string]*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_Srlg_Names_Name	`path:"name" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_Srlg_Names implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_Srlg_Names) IsYANGGoStruct() {}

// NewName creates a new entry in the Name list of the
// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_Srlg_Names struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_Srlg_Names) NewName(SrlgName string) (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_Srlg_Names_Name, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Name == nil {
		t.Name = make(map[string]*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_Srlg_Names_Name)
	}

	key := SrlgName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Name[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Name", key)
	}

	t.Name[key] = &Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_Srlg_Names_Name{
		SrlgName: &SrlgName,
	}

	return t.Name[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_Srlg_Names) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_Srlg_Names"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_Srlg_Names) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_Srlg_Names) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_Srlg_Names.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_Srlg_Names) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_Srlg_Names_Name represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/srlg/names/name YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_Srlg_Names_Name struct {
	AdminWeight	*uint32	`path:"admin-weight" module:"Cisco-IOS-XR-mpls-te-cfg"`
	SrlgName	*string	`path:"srlg-name" module:"Cisco-IOS-XR-mpls-te-cfg"`
	StaticSrlgMembers	*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_Srlg_Names_Name_StaticSrlgMembers	`path:"static-srlg-members" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_Srlg_Names_Name implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_Srlg_Names_Name) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_Srlg_Names_Name struct, which is a YANG list entry.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_Srlg_Names_Name) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SrlgName == nil {
		return nil, fmt.Errorf("nil value for key SrlgName")
	}

	return map[string]interface{}{
		"srlg-name": *t.SrlgName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_Srlg_Names_Name) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_Srlg_Names_Name"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_Srlg_Names_Name) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_Srlg_Names_Name) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_Srlg_Names_Name.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_Srlg_Names_Name) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_Srlg_Names_Name_StaticSrlgMembers represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/srlg/names/name/static-srlg-members YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_Srlg_Names_Name_StaticSrlgMembers struct {
	StaticSrlgMember	map[string]*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_Srlg_Names_Name_StaticSrlgMembers_StaticSrlgMember	`path:"static-srlg-member" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_Srlg_Names_Name_StaticSrlgMembers implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_Srlg_Names_Name_StaticSrlgMembers) IsYANGGoStruct() {}

// NewStaticSrlgMember creates a new entry in the StaticSrlgMember list of the
// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_Srlg_Names_Name_StaticSrlgMembers struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_Srlg_Names_Name_StaticSrlgMembers) NewStaticSrlgMember(FromAddress string) (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_Srlg_Names_Name_StaticSrlgMembers_StaticSrlgMember, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.StaticSrlgMember == nil {
		t.StaticSrlgMember = make(map[string]*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_Srlg_Names_Name_StaticSrlgMembers_StaticSrlgMember)
	}

	key := FromAddress

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.StaticSrlgMember[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list StaticSrlgMember", key)
	}

	t.StaticSrlgMember[key] = &Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_Srlg_Names_Name_StaticSrlgMembers_StaticSrlgMember{
		FromAddress: &FromAddress,
	}

	return t.StaticSrlgMember[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_Srlg_Names_Name_StaticSrlgMembers) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_Srlg_Names_Name_StaticSrlgMembers"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_Srlg_Names_Name_StaticSrlgMembers) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_Srlg_Names_Name_StaticSrlgMembers) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_Srlg_Names_Name_StaticSrlgMembers.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_Srlg_Names_Name_StaticSrlgMembers) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_Srlg_Names_Name_StaticSrlgMembers_StaticSrlgMember represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/global-attributes/srlg/names/name/static-srlg-members/static-srlg-member YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_Srlg_Names_Name_StaticSrlgMembers_StaticSrlgMember struct {
	FromAddress	*string	`path:"from-address" module:"Cisco-IOS-XR-mpls-te-cfg"`
	ToAddress	*string	`path:"to-address" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_Srlg_Names_Name_StaticSrlgMembers_StaticSrlgMember implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_Srlg_Names_Name_StaticSrlgMembers_StaticSrlgMember) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_Srlg_Names_Name_StaticSrlgMembers_StaticSrlgMember struct, which is a YANG list entry.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_Srlg_Names_Name_StaticSrlgMembers_StaticSrlgMember) ΛListKeyMap() (map[string]interface{}, error) {
	if t.FromAddress == nil {
		return nil, fmt.Errorf("nil value for key FromAddress")
	}

	return map[string]interface{}{
		"from-address": *t.FromAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_Srlg_Names_Name_StaticSrlgMembers_StaticSrlgMember) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_Srlg_Names_Name_StaticSrlgMembers_StaticSrlgMember"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_Srlg_Names_Name_StaticSrlgMembers_StaticSrlgMember) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_Srlg_Names_Name_StaticSrlgMembers_StaticSrlgMember) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_Srlg_Names_Name_StaticSrlgMembers_StaticSrlgMember.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GlobalAttributes_Srlg_Names_Name_StaticSrlgMembers_StaticSrlgMember) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/gmpls-nni YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni struct {
	EnableGmplsNni	YANGEmpty	`path:"enable-gmpls-nni" module:"Cisco-IOS-XR-mpls-te-cfg"`
	PathSelectionMetric	E_Cisco_IOS_XRMplsTeCfg_MplsTePathSelectionMetric	`path:"path-selection-metric" module:"Cisco-IOS-XR-mpls-te-cfg"`
	TopologyInstances	*Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances	`path:"topology-instances" module:"Cisco-IOS-XR-mpls-te-cfg"`
	TunnelHeads	*Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TunnelHeads	`path:"tunnel-heads" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/gmpls-nni/topology-instances YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances struct {
	TopologyInstance	map[Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances_TopologyInstance_Key]*Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances_TopologyInstance	`path:"topology-instance" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances) IsYANGGoStruct() {}

// Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances_TopologyInstance_Key represents the key for list TopologyInstance of element /Cisco-IOS-XR-mpls-te-cfg/mpls-te/gmpls-nni/topology-instances.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances_TopologyInstance_Key struct {
	OspfAreaType	E_Cisco_IOS_XRMplsTeCfg_OspfAreaMode	`path:"ospf-area-type"`
	IgpInstanceName	string	`path:"igp-instance-name"`
	IgpType	E_Cisco_IOS_XRMplsTeCfg_MplsTeIgpProtocol	`path:"igp-type"`
}

// IsYANGGoKeyStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances_TopologyInstance_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances_TopologyInstance_Key) IsYANGGoKeyStruct() {}

// ΛListKeyMap returns the values of the Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances_TopologyInstance_Key key struct.
func (t Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances_TopologyInstance_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"ospf-area-type": t.OspfAreaType,
		"igp-instance-name": t.IgpInstanceName,
		"igp-type": t.IgpType,
	}, nil
}

// NewTopologyInstance creates a new entry in the TopologyInstance list of the
// Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances) NewTopologyInstance(OspfAreaType E_Cisco_IOS_XRMplsTeCfg_OspfAreaMode, IgpInstanceName string, IgpType E_Cisco_IOS_XRMplsTeCfg_MplsTeIgpProtocol) (*Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances_TopologyInstance, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.TopologyInstance == nil {
		t.TopologyInstance = make(map[Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances_TopologyInstance_Key]*Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances_TopologyInstance)
	}

	key := Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances_TopologyInstance_Key{
		OspfAreaType: OspfAreaType,
		IgpInstanceName: IgpInstanceName,
		IgpType: IgpType,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.TopologyInstance[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list TopologyInstance", key)
	}

	t.TopologyInstance[key] = &Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances_TopologyInstance{
		OspfAreaType: OspfAreaType,
		IgpInstanceName: &IgpInstanceName,
		IgpType: IgpType,
	}

	return t.TopologyInstance[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances_TopologyInstance represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/gmpls-nni/topology-instances/topology-instance YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances_TopologyInstance struct {
	IgpInstanceName	*string	`path:"igp-instance-name" module:"Cisco-IOS-XR-mpls-te-cfg"`
	IgpType	E_Cisco_IOS_XRMplsTeCfg_MplsTeIgpProtocol	`path:"igp-type" module:"Cisco-IOS-XR-mpls-te-cfg"`
	OspfAreaType	E_Cisco_IOS_XRMplsTeCfg_OspfAreaMode	`path:"ospf-area-type" module:"Cisco-IOS-XR-mpls-te-cfg"`
	OspfInt	map[uint32]*Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfInt	`path:"ospf-int" module:"Cisco-IOS-XR-mpls-te-cfg"`
	OspfipAddr	map[string]*Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfipAddr	`path:"ospfip-addr" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances_TopologyInstance implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances_TopologyInstance) IsYANGGoStruct() {}

// NewOspfInt creates a new entry in the OspfInt list of the
// Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances_TopologyInstance struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances_TopologyInstance) NewOspfInt(IgpArea uint32) (*Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfInt, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.OspfInt == nil {
		t.OspfInt = make(map[uint32]*Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfInt)
	}

	key := IgpArea

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.OspfInt[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list OspfInt", key)
	}

	t.OspfInt[key] = &Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfInt{
		IgpArea: &IgpArea,
	}

	return t.OspfInt[key], nil
}

// NewOspfipAddr creates a new entry in the OspfipAddr list of the
// Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances_TopologyInstance struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances_TopologyInstance) NewOspfipAddr(Address string) (*Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfipAddr, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.OspfipAddr == nil {
		t.OspfipAddr = make(map[string]*Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfipAddr)
	}

	key := Address

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.OspfipAddr[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list OspfipAddr", key)
	}

	t.OspfipAddr[key] = &Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfipAddr{
		Address: &Address,
	}

	return t.OspfipAddr[key], nil
}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances_TopologyInstance struct, which is a YANG list entry.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances_TopologyInstance) ΛListKeyMap() (map[string]interface{}, error) {
	if t.IgpInstanceName == nil {
		return nil, fmt.Errorf("nil value for key IgpInstanceName")
	}



	return map[string]interface{}{
		"igp-instance-name": *t.IgpInstanceName,
		"igp-type": t.IgpType,
		"ospf-area-type": t.OspfAreaType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances_TopologyInstance) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances_TopologyInstance"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances_TopologyInstance) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances_TopologyInstance) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances_TopologyInstance.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances_TopologyInstance) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfInt represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/gmpls-nni/topology-instances/topology-instance/ospf-int YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfInt struct {
	Controllers	*Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfInt_Controllers	`path:"controllers" module:"Cisco-IOS-XR-mpls-te-cfg"`
	IgpArea	*uint32	`path:"igp-area" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfInt implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfInt) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfInt struct, which is a YANG list entry.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfInt) ΛListKeyMap() (map[string]interface{}, error) {
	if t.IgpArea == nil {
		return nil, fmt.Errorf("nil value for key IgpArea")
	}

	return map[string]interface{}{
		"igp-area": *t.IgpArea,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfInt) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfInt"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfInt) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfInt) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfInt.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfInt) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfInt_Controllers represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/gmpls-nni/topology-instances/topology-instance/ospf-int/controllers YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfInt_Controllers struct {
	Controller	map[string]*Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfInt_Controllers_Controller	`path:"controller" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfInt_Controllers implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfInt_Controllers) IsYANGGoStruct() {}

// NewController creates a new entry in the Controller list of the
// Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfInt_Controllers struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfInt_Controllers) NewController(ControllerName string) (*Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfInt_Controllers_Controller, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Controller == nil {
		t.Controller = make(map[string]*Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfInt_Controllers_Controller)
	}

	key := ControllerName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Controller[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Controller", key)
	}

	t.Controller[key] = &Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfInt_Controllers_Controller{
		ControllerName: &ControllerName,
	}

	return t.Controller[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfInt_Controllers) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfInt_Controllers"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfInt_Controllers) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfInt_Controllers) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfInt_Controllers.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfInt_Controllers) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfInt_Controllers_Controller represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/gmpls-nni/topology-instances/topology-instance/ospf-int/controllers/controller YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfInt_Controllers_Controller struct {
	AdminWeight	*uint32	`path:"admin-weight" module:"Cisco-IOS-XR-mpls-te-cfg"`
	AffinityNames	*Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfInt_Controllers_Controller_AffinityNames	`path:"affinity-names" module:"Cisco-IOS-XR-mpls-te-cfg"`
	ControllerName	*string	`path:"controller-name" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Delay	*uint32	`path:"delay" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Enable	YANGEmpty	`path:"enable" module:"Cisco-IOS-XR-mpls-te-cfg"`
	TtiMode	*Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfInt_Controllers_Controller_TtiMode	`path:"tti-mode" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfInt_Controllers_Controller implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfInt_Controllers_Controller) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfInt_Controllers_Controller struct, which is a YANG list entry.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfInt_Controllers_Controller) ΛListKeyMap() (map[string]interface{}, error) {
	if t.ControllerName == nil {
		return nil, fmt.Errorf("nil value for key ControllerName")
	}

	return map[string]interface{}{
		"controller-name": *t.ControllerName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfInt_Controllers_Controller) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfInt_Controllers_Controller"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfInt_Controllers_Controller) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfInt_Controllers_Controller) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfInt_Controllers_Controller.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfInt_Controllers_Controller) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfInt_Controllers_Controller_AffinityNames represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/gmpls-nni/topology-instances/topology-instance/ospf-int/controllers/controller/affinity-names YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfInt_Controllers_Controller_AffinityNames struct {
	AffinityName	[]string	`path:"affinity-name" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfInt_Controllers_Controller_AffinityNames implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfInt_Controllers_Controller_AffinityNames) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfInt_Controllers_Controller_AffinityNames) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfInt_Controllers_Controller_AffinityNames"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfInt_Controllers_Controller_AffinityNames) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfInt_Controllers_Controller_AffinityNames) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfInt_Controllers_Controller_AffinityNames.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfInt_Controllers_Controller_AffinityNames) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfInt_Controllers_Controller_TtiMode represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/gmpls-nni/topology-instances/topology-instance/ospf-int/controllers/controller/tti-mode YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfInt_Controllers_Controller_TtiMode struct {
	Tcmid	*uint32	`path:"tcmid" module:"Cisco-IOS-XR-mpls-te-cfg"`
	TtiModeType	E_Cisco_IOS_XRMplsTeCfg_GmplsttiMode	`path:"tti-mode-type" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfInt_Controllers_Controller_TtiMode implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfInt_Controllers_Controller_TtiMode) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfInt_Controllers_Controller_TtiMode) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfInt_Controllers_Controller_TtiMode"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfInt_Controllers_Controller_TtiMode) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfInt_Controllers_Controller_TtiMode) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfInt_Controllers_Controller_TtiMode.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfInt_Controllers_Controller_TtiMode) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfipAddr represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/gmpls-nni/topology-instances/topology-instance/ospfip-addr YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfipAddr struct {
	Address	*string	`path:"address" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Controllers	*Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfipAddr_Controllers	`path:"controllers" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfipAddr implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfipAddr) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfipAddr struct, which is a YANG list entry.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfipAddr) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Address == nil {
		return nil, fmt.Errorf("nil value for key Address")
	}

	return map[string]interface{}{
		"address": *t.Address,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfipAddr) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfipAddr"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfipAddr) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfipAddr) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfipAddr.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfipAddr) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfipAddr_Controllers represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/gmpls-nni/topology-instances/topology-instance/ospfip-addr/controllers YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfipAddr_Controllers struct {
	Controller	map[string]*Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfipAddr_Controllers_Controller	`path:"controller" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfipAddr_Controllers implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfipAddr_Controllers) IsYANGGoStruct() {}

// NewController creates a new entry in the Controller list of the
// Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfipAddr_Controllers struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfipAddr_Controllers) NewController(ControllerName string) (*Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfipAddr_Controllers_Controller, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Controller == nil {
		t.Controller = make(map[string]*Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfipAddr_Controllers_Controller)
	}

	key := ControllerName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Controller[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Controller", key)
	}

	t.Controller[key] = &Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfipAddr_Controllers_Controller{
		ControllerName: &ControllerName,
	}

	return t.Controller[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfipAddr_Controllers) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfipAddr_Controllers"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfipAddr_Controllers) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfipAddr_Controllers) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfipAddr_Controllers.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfipAddr_Controllers) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfipAddr_Controllers_Controller represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/gmpls-nni/topology-instances/topology-instance/ospfip-addr/controllers/controller YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfipAddr_Controllers_Controller struct {
	AdminWeight	*uint32	`path:"admin-weight" module:"Cisco-IOS-XR-mpls-te-cfg"`
	AffinityNames	*Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfipAddr_Controllers_Controller_AffinityNames	`path:"affinity-names" module:"Cisco-IOS-XR-mpls-te-cfg"`
	ControllerName	*string	`path:"controller-name" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Delay	*uint32	`path:"delay" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Enable	YANGEmpty	`path:"enable" module:"Cisco-IOS-XR-mpls-te-cfg"`
	TtiMode	*Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfipAddr_Controllers_Controller_TtiMode	`path:"tti-mode" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfipAddr_Controllers_Controller implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfipAddr_Controllers_Controller) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfipAddr_Controllers_Controller struct, which is a YANG list entry.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfipAddr_Controllers_Controller) ΛListKeyMap() (map[string]interface{}, error) {
	if t.ControllerName == nil {
		return nil, fmt.Errorf("nil value for key ControllerName")
	}

	return map[string]interface{}{
		"controller-name": *t.ControllerName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfipAddr_Controllers_Controller) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfipAddr_Controllers_Controller"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfipAddr_Controllers_Controller) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfipAddr_Controllers_Controller) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfipAddr_Controllers_Controller.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfipAddr_Controllers_Controller) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfipAddr_Controllers_Controller_AffinityNames represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/gmpls-nni/topology-instances/topology-instance/ospfip-addr/controllers/controller/affinity-names YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfipAddr_Controllers_Controller_AffinityNames struct {
	AffinityName	[]string	`path:"affinity-name" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfipAddr_Controllers_Controller_AffinityNames implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfipAddr_Controllers_Controller_AffinityNames) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfipAddr_Controllers_Controller_AffinityNames) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfipAddr_Controllers_Controller_AffinityNames"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfipAddr_Controllers_Controller_AffinityNames) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfipAddr_Controllers_Controller_AffinityNames) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfipAddr_Controllers_Controller_AffinityNames.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfipAddr_Controllers_Controller_AffinityNames) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfipAddr_Controllers_Controller_TtiMode represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/gmpls-nni/topology-instances/topology-instance/ospfip-addr/controllers/controller/tti-mode YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfipAddr_Controllers_Controller_TtiMode struct {
	Tcmid	*uint32	`path:"tcmid" module:"Cisco-IOS-XR-mpls-te-cfg"`
	TtiModeType	E_Cisco_IOS_XRMplsTeCfg_GmplsttiMode	`path:"tti-mode-type" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfipAddr_Controllers_Controller_TtiMode implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfipAddr_Controllers_Controller_TtiMode) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfipAddr_Controllers_Controller_TtiMode) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfipAddr_Controllers_Controller_TtiMode"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfipAddr_Controllers_Controller_TtiMode) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfipAddr_Controllers_Controller_TtiMode) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfipAddr_Controllers_Controller_TtiMode.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfipAddr_Controllers_Controller_TtiMode) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TunnelHeads represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/gmpls-nni/tunnel-heads YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TunnelHeads struct {
	TunnelHead	map[uint32]*Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TunnelHeads_TunnelHead	`path:"tunnel-head" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TunnelHeads implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TunnelHeads) IsYANGGoStruct() {}

// NewTunnelHead creates a new entry in the TunnelHead list of the
// Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TunnelHeads struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TunnelHeads) NewTunnelHead(TunnelId uint32) (*Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TunnelHeads_TunnelHead, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.TunnelHead == nil {
		t.TunnelHead = make(map[uint32]*Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TunnelHeads_TunnelHead)
	}

	key := TunnelId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.TunnelHead[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list TunnelHead", key)
	}

	t.TunnelHead[key] = &Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TunnelHeads_TunnelHead{
		TunnelId: &TunnelId,
	}

	return t.TunnelHead[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TunnelHeads) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TunnelHeads"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TunnelHeads) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TunnelHeads) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TunnelHeads.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TunnelHeads) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TunnelHeads_TunnelHead represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/gmpls-nni/tunnel-heads/tunnel-head YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TunnelHeads_TunnelHead struct {
	AnnounceSrlg	YANGEmpty	`path:"announce-srlg" module:"Cisco-IOS-XR-mpls-te-cfg"`
	CurrentLspShutdown	YANGEmpty	`path:"current-lsp-shutdown" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Destination	*Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TunnelHeads_TunnelHead_Destination	`path:"destination" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Enable	YANGEmpty	`path:"enable" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Logging	*Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TunnelHeads_TunnelHead_Logging	`path:"logging" module:"Cisco-IOS-XR-mpls-te-cfg"`
	PathOptions	*Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TunnelHeads_TunnelHead_PathOptions	`path:"path-options" module:"Cisco-IOS-XR-mpls-te-cfg"`
	PathProtectionAttributeSetProfile	*string	`path:"path-protection-attribute-set-profile" module:"Cisco-IOS-XR-mpls-te-cfg"`
	PathSelectionMetric	E_Cisco_IOS_XRMplsTeCfg_MplsTePathSelectionMetric	`path:"path-selection-metric" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Payload	E_Cisco_IOS_XRMplsTeCfg_OtnPayload	`path:"payload" module:"Cisco-IOS-XR-mpls-te-cfg"`
	ProtectionSwitching	*Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TunnelHeads_TunnelHead_ProtectionSwitching	`path:"protection-switching" module:"Cisco-IOS-XR-mpls-te-cfg"`
	RecordRoute	YANGEmpty	`path:"record-route" module:"Cisco-IOS-XR-mpls-te-cfg"`
	RestoreLspShutdown	YANGEmpty	`path:"restore-lsp-shutdown" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Shutdown	YANGEmpty	`path:"shutdown" module:"Cisco-IOS-XR-mpls-te-cfg"`
	SignalledBandwidth	*Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TunnelHeads_TunnelHead_SignalledBandwidth	`path:"signalled-bandwidth" module:"Cisco-IOS-XR-mpls-te-cfg"`
	SignalledName	*string	`path:"signalled-name" module:"Cisco-IOS-XR-mpls-te-cfg"`
	StandbyLspShutdown	YANGEmpty	`path:"standby-lsp-shutdown" module:"Cisco-IOS-XR-mpls-te-cfg"`
	StaticUni	*Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TunnelHeads_TunnelHead_StaticUni	`path:"static-uni" module:"Cisco-IOS-XR-mpls-te-cfg"`
	TunnelId	*uint32	`path:"tunnel-id" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TunnelHeads_TunnelHead implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TunnelHeads_TunnelHead) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TunnelHeads_TunnelHead struct, which is a YANG list entry.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TunnelHeads_TunnelHead) ΛListKeyMap() (map[string]interface{}, error) {
	if t.TunnelId == nil {
		return nil, fmt.Errorf("nil value for key TunnelId")
	}

	return map[string]interface{}{
		"tunnel-id": *t.TunnelId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TunnelHeads_TunnelHead) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TunnelHeads_TunnelHead"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TunnelHeads_TunnelHead) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TunnelHeads_TunnelHead) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TunnelHeads_TunnelHead.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TunnelHeads_TunnelHead) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TunnelHeads_TunnelHead_Destination represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/gmpls-nni/tunnel-heads/tunnel-head/destination YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TunnelHeads_TunnelHead_Destination struct {
	Destination	*string	`path:"destination" module:"Cisco-IOS-XR-mpls-te-cfg"`
	DestinationType	E_Cisco_IOS_XRMplsTeCfg_OtnDestination	`path:"destination-type" module:"Cisco-IOS-XR-mpls-te-cfg"`
	InterfaceIfIndex	*uint32	`path:"interface-if-index" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TunnelHeads_TunnelHead_Destination implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TunnelHeads_TunnelHead_Destination) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TunnelHeads_TunnelHead_Destination) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TunnelHeads_TunnelHead_Destination"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TunnelHeads_TunnelHead_Destination) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TunnelHeads_TunnelHead_Destination) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TunnelHeads_TunnelHead_Destination.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TunnelHeads_TunnelHead_Destination) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TunnelHeads_TunnelHead_Logging represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/gmpls-nni/tunnel-heads/tunnel-head/logging YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TunnelHeads_TunnelHead_Logging struct {
	ActiveLspMessage	YANGEmpty	`path:"active-lsp-message" module:"Cisco-IOS-XR-mpls-te-cfg"`
	HomepathStateMessage	YANGEmpty	`path:"homepath-state-message" module:"Cisco-IOS-XR-mpls-te-cfg"`
	InsufficientBwMessage	YANGEmpty	`path:"insufficient-bw-message" module:"Cisco-IOS-XR-mpls-te-cfg"`
	PathChangeMessage	YANGEmpty	`path:"path-change-message" module:"Cisco-IOS-XR-mpls-te-cfg"`
	SignallingStateMessage	YANGEmpty	`path:"signalling-state-message" module:"Cisco-IOS-XR-mpls-te-cfg"`
	StaticCrossConnectMessage	YANGEmpty	`path:"static-cross-connect-message" module:"Cisco-IOS-XR-mpls-te-cfg"`
	TunnelStateMessage	YANGEmpty	`path:"tunnel-state-message" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TunnelHeads_TunnelHead_Logging implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TunnelHeads_TunnelHead_Logging) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TunnelHeads_TunnelHead_Logging) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TunnelHeads_TunnelHead_Logging"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TunnelHeads_TunnelHead_Logging) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TunnelHeads_TunnelHead_Logging) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TunnelHeads_TunnelHead_Logging.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TunnelHeads_TunnelHead_Logging) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TunnelHeads_TunnelHead_PathOptions represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/gmpls-nni/tunnel-heads/tunnel-head/path-options YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TunnelHeads_TunnelHead_PathOptions struct {
	PathOption	map[uint32]*Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TunnelHeads_TunnelHead_PathOptions_PathOption	`path:"path-option" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TunnelHeads_TunnelHead_PathOptions implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TunnelHeads_TunnelHead_PathOptions) IsYANGGoStruct() {}

// NewPathOption creates a new entry in the PathOption list of the
// Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TunnelHeads_TunnelHead_PathOptions struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TunnelHeads_TunnelHead_PathOptions) NewPathOption(PreferenceLevel uint32) (*Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TunnelHeads_TunnelHead_PathOptions_PathOption, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PathOption == nil {
		t.PathOption = make(map[uint32]*Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TunnelHeads_TunnelHead_PathOptions_PathOption)
	}

	key := PreferenceLevel

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.PathOption[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list PathOption", key)
	}

	t.PathOption[key] = &Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TunnelHeads_TunnelHead_PathOptions_PathOption{
		PreferenceLevel: &PreferenceLevel,
	}

	return t.PathOption[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TunnelHeads_TunnelHead_PathOptions) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TunnelHeads_TunnelHead_PathOptions"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TunnelHeads_TunnelHead_PathOptions) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TunnelHeads_TunnelHead_PathOptions) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TunnelHeads_TunnelHead_PathOptions.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TunnelHeads_TunnelHead_PathOptions) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TunnelHeads_TunnelHead_PathOptions_PathOption represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/gmpls-nni/tunnel-heads/tunnel-head/path-options/path-option YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TunnelHeads_TunnelHead_PathOptions_PathOption struct {
	AffinityAttributeSetName	*string	`path:"affinity-attribute-set-name" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Lockdown	E_Cisco_IOS_XRMplsTeCfg_MplsTePathOptionProperty	`path:"lockdown" module:"Cisco-IOS-XR-mpls-te-cfg"`
	PathId	*uint32	`path:"path-id" module:"Cisco-IOS-XR-mpls-te-cfg"`
	PathName	*string	`path:"path-name" module:"Cisco-IOS-XR-mpls-te-cfg"`
	PathType	E_Cisco_IOS_XRMplsTeCfg_MplsTePathOption	`path:"path-type" module:"Cisco-IOS-XR-mpls-te-cfg"`
	PreferenceLevel	*uint32	`path:"preference-level" module:"Cisco-IOS-XR-mpls-te-cfg"`
	ProtectedByPreferenceLevel	*uint32	`path:"protected-by-preference-level" module:"Cisco-IOS-XR-mpls-te-cfg"`
	RestoreByPreferenceLevel	*uint32	`path:"restore-by-preference-level" module:"Cisco-IOS-XR-mpls-te-cfg"`
	XroAttributeSetName	*string	`path:"xro-attribute-set-name" module:"Cisco-IOS-XR-mpls-te-cfg"`
	XroType	E_Cisco_IOS_XRMplsTeCfg_MplsTePathOptionXro	`path:"xro-type" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TunnelHeads_TunnelHead_PathOptions_PathOption implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TunnelHeads_TunnelHead_PathOptions_PathOption) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TunnelHeads_TunnelHead_PathOptions_PathOption struct, which is a YANG list entry.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TunnelHeads_TunnelHead_PathOptions_PathOption) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PreferenceLevel == nil {
		return nil, fmt.Errorf("nil value for key PreferenceLevel")
	}

	return map[string]interface{}{
		"preference-level": *t.PreferenceLevel,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TunnelHeads_TunnelHead_PathOptions_PathOption) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TunnelHeads_TunnelHead_PathOptions_PathOption"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TunnelHeads_TunnelHead_PathOptions_PathOption) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TunnelHeads_TunnelHead_PathOptions_PathOption) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TunnelHeads_TunnelHead_PathOptions_PathOption.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TunnelHeads_TunnelHead_PathOptions_PathOption) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TunnelHeads_TunnelHead_ProtectionSwitching represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/gmpls-nni/tunnel-heads/tunnel-head/protection-switching YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TunnelHeads_TunnelHead_ProtectionSwitching struct {
	Lockout	E_Cisco_IOS_XRMplsTeCfg_OtnProtectionSwitchLockout	`path:"lockout" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TunnelHeads_TunnelHead_ProtectionSwitching implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TunnelHeads_TunnelHead_ProtectionSwitching) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TunnelHeads_TunnelHead_ProtectionSwitching) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TunnelHeads_TunnelHead_ProtectionSwitching"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TunnelHeads_TunnelHead_ProtectionSwitching) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TunnelHeads_TunnelHead_ProtectionSwitching) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TunnelHeads_TunnelHead_ProtectionSwitching.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TunnelHeads_TunnelHead_ProtectionSwitching) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TunnelHeads_TunnelHead_SignalledBandwidth represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/gmpls-nni/tunnel-heads/tunnel-head/signalled-bandwidth YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TunnelHeads_TunnelHead_SignalledBandwidth struct {
	Bitrate	*uint32	`path:"bitrate" module:"Cisco-IOS-XR-mpls-te-cfg"`
	OdUflexFramingType	E_Cisco_IOS_XRMplsTeCfg_OtnSignaledBandwidthFlexFraming	`path:"od-uflex-framing-type" module:"Cisco-IOS-XR-mpls-te-cfg"`
	SignalledBandwidthType	E_Cisco_IOS_XRMplsTeCfg_OtnSignaledBandwidth	`path:"signalled-bandwidth-type" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TunnelHeads_TunnelHead_SignalledBandwidth implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TunnelHeads_TunnelHead_SignalledBandwidth) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TunnelHeads_TunnelHead_SignalledBandwidth) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TunnelHeads_TunnelHead_SignalledBandwidth"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TunnelHeads_TunnelHead_SignalledBandwidth) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TunnelHeads_TunnelHead_SignalledBandwidth) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TunnelHeads_TunnelHead_SignalledBandwidth.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TunnelHeads_TunnelHead_SignalledBandwidth) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TunnelHeads_TunnelHead_StaticUni represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/gmpls-nni/tunnel-heads/tunnel-head/static-uni YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TunnelHeads_TunnelHead_StaticUni struct {
	EgressControllerIfIndex	*uint32	`path:"egress-controller-if-index" module:"Cisco-IOS-XR-mpls-te-cfg"`
	EgressType	E_Cisco_IOS_XRMplsTeCfg_OtnStaticUni	`path:"egress-type" module:"Cisco-IOS-XR-mpls-te-cfg"`
	IngressControllerName	*string	`path:"ingress-controller-name" module:"Cisco-IOS-XR-mpls-te-cfg"`
	IngressType	E_Cisco_IOS_XRMplsTeCfg_OtnStaticUni	`path:"ingress-type" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TunnelHeads_TunnelHead_StaticUni implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TunnelHeads_TunnelHead_StaticUni) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TunnelHeads_TunnelHead_StaticUni) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TunnelHeads_TunnelHead_StaticUni"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TunnelHeads_TunnelHead_StaticUni) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TunnelHeads_TunnelHead_StaticUni) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TunnelHeads_TunnelHead_StaticUni.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsNni_TunnelHeads_TunnelHead_StaticUni) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsUni represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/gmpls-uni YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsUni struct {
	Controllers	*Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsUni_Controllers	`path:"controllers" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Timers	*Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsUni_Timers	`path:"timers" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsUni implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsUni) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsUni) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsUni"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsUni) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsUni) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsUni.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsUni) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsUni_Controllers represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/gmpls-uni/controllers YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsUni_Controllers struct {
	Controller	map[string]*Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsUni_Controllers_Controller	`path:"controller" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsUni_Controllers implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsUni_Controllers) IsYANGGoStruct() {}

// NewController creates a new entry in the Controller list of the
// Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsUni_Controllers struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsUni_Controllers) NewController(ControllerName string) (*Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsUni_Controllers_Controller, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Controller == nil {
		t.Controller = make(map[string]*Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsUni_Controllers_Controller)
	}

	key := ControllerName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Controller[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Controller", key)
	}

	t.Controller[key] = &Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsUni_Controllers_Controller{
		ControllerName: &ControllerName,
	}

	return t.Controller[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsUni_Controllers) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsUni_Controllers"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsUni_Controllers) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsUni_Controllers) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsUni_Controllers.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsUni_Controllers) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsUni_Controllers_Controller represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/gmpls-uni/controllers/controller YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsUni_Controllers_Controller struct {
	Announce	*Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsUni_Controllers_Controller_Announce	`path:"announce" module:"Cisco-IOS-XR-mpls-te-cfg"`
	ControllerLogging	*Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsUni_Controllers_Controller_ControllerLogging	`path:"controller-logging" module:"Cisco-IOS-XR-mpls-te-cfg"`
	ControllerName	*string	`path:"controller-name" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Enable	YANGEmpty	`path:"enable" module:"Cisco-IOS-XR-mpls-te-cfg"`
	GmplsUnitunnelHead	*Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead	`path:"gmpls-unitunnel-head" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Mtu	*uint32	`path:"mtu" module:"Cisco-IOS-XR-mpls-te-cfg"`
	SwitchingType	E_Cisco_IOS_XRMplsTeCfg_MplsTeLspSwitch	`path:"switching-type" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsUni_Controllers_Controller implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsUni_Controllers_Controller) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsUni_Controllers_Controller struct, which is a YANG list entry.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsUni_Controllers_Controller) ΛListKeyMap() (map[string]interface{}, error) {
	if t.ControllerName == nil {
		return nil, fmt.Errorf("nil value for key ControllerName")
	}

	return map[string]interface{}{
		"controller-name": *t.ControllerName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsUni_Controllers_Controller) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsUni_Controllers_Controller"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsUni_Controllers_Controller) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsUni_Controllers_Controller) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsUni_Controllers_Controller.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsUni_Controllers_Controller) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsUni_Controllers_Controller_Announce represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/gmpls-uni/controllers/controller/announce YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsUni_Controllers_Controller_Announce struct {
	SrlGs	YANGEmpty	`path:"srl-gs" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsUni_Controllers_Controller_Announce implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsUni_Controllers_Controller_Announce) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsUni_Controllers_Controller_Announce) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsUni_Controllers_Controller_Announce"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsUni_Controllers_Controller_Announce) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsUni_Controllers_Controller_Announce) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsUni_Controllers_Controller_Announce.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsUni_Controllers_Controller_Announce) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsUni_Controllers_Controller_ControllerLogging represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/gmpls-uni/controllers/controller/controller-logging YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsUni_Controllers_Controller_ControllerLogging struct {
	DiscoveredSrlgChangeLogging	YANGEmpty	`path:"discovered-srlg-change-logging" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsUni_Controllers_Controller_ControllerLogging implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsUni_Controllers_Controller_ControllerLogging) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsUni_Controllers_Controller_ControllerLogging) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsUni_Controllers_Controller_ControllerLogging"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsUni_Controllers_Controller_ControllerLogging) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsUni_Controllers_Controller_ControllerLogging) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsUni_Controllers_Controller_ControllerLogging.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsUni_Controllers_Controller_ControllerLogging) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/gmpls-uni/controllers/controller/gmpls-unitunnel-head YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead struct {
	Destination	*string	`path:"destination" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Enable	YANGEmpty	`path:"enable" module:"Cisco-IOS-XR-mpls-te-cfg"`
	EncType	E_Cisco_IOS_XRMplsTeCfg_MplsTeLspEnc	`path:"enc-type" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Gpid	*uint32	`path:"gpid" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Logging	*Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead_Logging	`path:"logging" module:"Cisco-IOS-XR-mpls-te-cfg"`
	PathOptions	*Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead_PathOptions	`path:"path-options" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Priority	*Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead_Priority	`path:"priority" module:"Cisco-IOS-XR-mpls-te-cfg"`
	ProtectionAttributeSet	*string	`path:"protection-attribute-set" module:"Cisco-IOS-XR-mpls-te-cfg"`
	RecordRoute	YANGEmpty	`path:"record-route" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Recording	*Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead_Recording	`path:"recording" module:"Cisco-IOS-XR-mpls-te-cfg"`
	SignalledName	*string	`path:"signalled-name" module:"Cisco-IOS-XR-mpls-te-cfg"`
	TunnelId	*uint32	`path:"tunnel-id" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead_Logging represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/gmpls-uni/controllers/controller/gmpls-unitunnel-head/logging YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead_Logging struct {
	StateMessage	YANGEmpty	`path:"state-message" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead_Logging implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead_Logging) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead_Logging) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead_Logging"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead_Logging) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead_Logging) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead_Logging.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead_Logging) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead_PathOptions represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/gmpls-uni/controllers/controller/gmpls-unitunnel-head/path-options YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead_PathOptions struct {
	PathOption	map[uint32]*Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead_PathOptions_PathOption	`path:"path-option" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead_PathOptions implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead_PathOptions) IsYANGGoStruct() {}

// NewPathOption creates a new entry in the PathOption list of the
// Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead_PathOptions struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead_PathOptions) NewPathOption(PreferenceLevel uint32) (*Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead_PathOptions_PathOption, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PathOption == nil {
		t.PathOption = make(map[uint32]*Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead_PathOptions_PathOption)
	}

	key := PreferenceLevel

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.PathOption[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list PathOption", key)
	}

	t.PathOption[key] = &Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead_PathOptions_PathOption{
		PreferenceLevel: &PreferenceLevel,
	}

	return t.PathOption[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead_PathOptions) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead_PathOptions"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead_PathOptions) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead_PathOptions) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead_PathOptions.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead_PathOptions) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead_PathOptions_PathOption represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/gmpls-uni/controllers/controller/gmpls-unitunnel-head/path-options/path-option YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead_PathOptions_PathOption struct {
	DwdmChannel	*uint32	`path:"dwdm-channel" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Lockdown	E_Cisco_IOS_XRMplsTeCfg_MplsTePathOptionProperty	`path:"lockdown" module:"Cisco-IOS-XR-mpls-te-cfg"`
	PathId	*uint32	`path:"path-id" module:"Cisco-IOS-XR-mpls-te-cfg"`
	PathName	*string	`path:"path-name" module:"Cisco-IOS-XR-mpls-te-cfg"`
	PathType	E_Cisco_IOS_XRMplsTeCfg_MplsTePathOption	`path:"path-type" module:"Cisco-IOS-XR-mpls-te-cfg"`
	PreferenceLevel	*uint32	`path:"preference-level" module:"Cisco-IOS-XR-mpls-te-cfg"`
	SignaledLabel	E_Cisco_IOS_XRMplsTeCfg_MplsTeSignaledLabel	`path:"signaled-label" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Verbatim	E_Cisco_IOS_XRMplsTeCfg_MplsTePathOptionProperty	`path:"verbatim" module:"Cisco-IOS-XR-mpls-te-cfg"`
	XroAttributeSetName	*string	`path:"xro-attribute-set-name" module:"Cisco-IOS-XR-mpls-te-cfg"`
	XroType	E_Cisco_IOS_XRMplsTeCfg_MplsTePathOptionXro	`path:"xro-type" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead_PathOptions_PathOption implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead_PathOptions_PathOption) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead_PathOptions_PathOption struct, which is a YANG list entry.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead_PathOptions_PathOption) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PreferenceLevel == nil {
		return nil, fmt.Errorf("nil value for key PreferenceLevel")
	}

	return map[string]interface{}{
		"preference-level": *t.PreferenceLevel,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead_PathOptions_PathOption) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead_PathOptions_PathOption"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead_PathOptions_PathOption) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead_PathOptions_PathOption) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead_PathOptions_PathOption.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead_PathOptions_PathOption) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead_Priority represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/gmpls-uni/controllers/controller/gmpls-unitunnel-head/priority YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead_Priority struct {
	HoldPriority	*uint32	`path:"hold-priority" module:"Cisco-IOS-XR-mpls-te-cfg"`
	SetupPriority	*uint32	`path:"setup-priority" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead_Priority implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead_Priority) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead_Priority) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead_Priority"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead_Priority) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead_Priority) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead_Priority.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead_Priority) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead_Recording represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/gmpls-uni/controllers/controller/gmpls-unitunnel-head/recording YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead_Recording struct {
	Srlg	YANGEmpty	`path:"srlg" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead_Recording implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead_Recording) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead_Recording) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead_Recording"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead_Recording) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead_Recording) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead_Recording.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead_Recording) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsUni_Timers represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/gmpls-uni/timers YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsUni_Timers struct {
	PathOptionTimers	*Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsUni_Timers_PathOptionTimers	`path:"path-option-timers" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsUni_Timers implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsUni_Timers) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsUni_Timers) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsUni_Timers"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsUni_Timers) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsUni_Timers) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsUni_Timers.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsUni_Timers) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsUni_Timers_PathOptionTimers represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/gmpls-uni/timers/path-option-timers YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsUni_Timers_PathOptionTimers struct {
	Holddown	*Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsUni_Timers_PathOptionTimers_Holddown	`path:"holddown" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsUni_Timers_PathOptionTimers implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsUni_Timers_PathOptionTimers) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsUni_Timers_PathOptionTimers) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsUni_Timers_PathOptionTimers"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsUni_Timers_PathOptionTimers) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsUni_Timers_PathOptionTimers) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsUni_Timers_PathOptionTimers.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsUni_Timers_PathOptionTimers) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsUni_Timers_PathOptionTimers_Holddown represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/gmpls-uni/timers/path-option-timers/holddown YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsUni_Timers_PathOptionTimers_Holddown struct {
	Maximum	*uint32	`path:"maximum" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Minimum	*uint32	`path:"minimum" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsUni_Timers_PathOptionTimers_Holddown implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsUni_Timers_PathOptionTimers_Holddown) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsUni_Timers_PathOptionTimers_Holddown) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsUni_Timers_PathOptionTimers_Holddown"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsUni_Timers_PathOptionTimers_Holddown) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsUni_Timers_PathOptionTimers_Holddown) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsUni_Timers_PathOptionTimers_Holddown.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_GmplsUni_Timers_PathOptionTimers_Holddown) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/interfaces YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces struct {
	Interface	map[string]*Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface	`path:"interface" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces) IsYANGGoStruct() {}

// NewInterface creates a new entry in the Interface list of the
// Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces) NewInterface(InterfaceName string) (*Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface)
	}

	key := InterfaceName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Interface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Interface", key)
	}

	t.Interface[key] = &Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface{
		InterfaceName: &InterfaceName,
	}

	return t.Interface[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/interfaces/interface YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface struct {
	GlobalAttributes	*Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_GlobalAttributes	`path:"global-attributes" module:"Cisco-IOS-XR-mpls-te-cfg"`
	InterfaceName	*string	`path:"interface-name" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Lcac	*Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac	`path:"lcac" module:"Cisco-IOS-XR-mpls-te-cfg"`
	TransportProfileLink	*Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_TransportProfileLink	`path:"transport-profile-link" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface struct, which is a YANG list entry.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.InterfaceName == nil {
		return nil, fmt.Errorf("nil value for key InterfaceName")
	}

	return map[string]interface{}{
		"interface-name": *t.InterfaceName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_GlobalAttributes represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/interfaces/interface/global-attributes YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_GlobalAttributes struct {
	AutoTunnel	*Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_GlobalAttributes_AutoTunnel	`path:"auto-tunnel" module:"Cisco-IOS-XR-mpls-te-cfg"`
	BackupPaths	*Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_GlobalAttributes_BackupPaths	`path:"backup-paths" module:"Cisco-IOS-XR-mpls-te-cfg"`
	BackupTunnels	*Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_GlobalAttributes_BackupTunnels	`path:"backup-tunnels" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_GlobalAttributes implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_GlobalAttributes) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_GlobalAttributes) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_GlobalAttributes"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_GlobalAttributes) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_GlobalAttributes) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_GlobalAttributes.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_GlobalAttributes) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_GlobalAttributes_AutoTunnel represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/interfaces/interface/global-attributes/auto-tunnel YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_GlobalAttributes_AutoTunnel struct {
	Backup	*Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_GlobalAttributes_AutoTunnel_Backup	`path:"backup" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_GlobalAttributes_AutoTunnel implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_GlobalAttributes_AutoTunnel) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_GlobalAttributes_AutoTunnel) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_GlobalAttributes_AutoTunnel"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_GlobalAttributes_AutoTunnel) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_GlobalAttributes_AutoTunnel) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_GlobalAttributes_AutoTunnel.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_GlobalAttributes_AutoTunnel) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_GlobalAttributes_AutoTunnel_Backup represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/interfaces/interface/global-attributes/auto-tunnel/backup YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_GlobalAttributes_AutoTunnel_Backup struct {
	AttributeSet	*string	`path:"attribute-set" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Enable	YANGEmpty	`path:"enable" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Exclude	*Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_GlobalAttributes_AutoTunnel_Backup_Exclude	`path:"exclude" module:"Cisco-IOS-XR-mpls-te-cfg"`
	NextHopOnly	YANGEmpty	`path:"next-hop-only" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_GlobalAttributes_AutoTunnel_Backup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_GlobalAttributes_AutoTunnel_Backup) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_GlobalAttributes_AutoTunnel_Backup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_GlobalAttributes_AutoTunnel_Backup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_GlobalAttributes_AutoTunnel_Backup) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_GlobalAttributes_AutoTunnel_Backup) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_GlobalAttributes_AutoTunnel_Backup.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_GlobalAttributes_AutoTunnel_Backup) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_GlobalAttributes_AutoTunnel_Backup_Exclude represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/interfaces/interface/global-attributes/auto-tunnel/backup/exclude YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_GlobalAttributes_AutoTunnel_Backup_Exclude struct {
	SrlgMode	E_Cisco_IOS_XRMplsTeCfg_MplsTesrlgExclude	`path:"srlg-mode" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_GlobalAttributes_AutoTunnel_Backup_Exclude implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_GlobalAttributes_AutoTunnel_Backup_Exclude) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_GlobalAttributes_AutoTunnel_Backup_Exclude) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_GlobalAttributes_AutoTunnel_Backup_Exclude"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_GlobalAttributes_AutoTunnel_Backup_Exclude) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_GlobalAttributes_AutoTunnel_Backup_Exclude) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_GlobalAttributes_AutoTunnel_Backup_Exclude.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_GlobalAttributes_AutoTunnel_Backup_Exclude) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_GlobalAttributes_BackupPaths represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/interfaces/interface/global-attributes/backup-paths YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_GlobalAttributes_BackupPaths struct {
	BackupPath	map[uint32]*Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_GlobalAttributes_BackupPaths_BackupPath	`path:"backup-path" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_GlobalAttributes_BackupPaths implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_GlobalAttributes_BackupPaths) IsYANGGoStruct() {}

// NewBackupPath creates a new entry in the BackupPath list of the
// Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_GlobalAttributes_BackupPaths struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_GlobalAttributes_BackupPaths) NewBackupPath(TunnelNumber uint32) (*Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_GlobalAttributes_BackupPaths_BackupPath, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.BackupPath == nil {
		t.BackupPath = make(map[uint32]*Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_GlobalAttributes_BackupPaths_BackupPath)
	}

	key := TunnelNumber

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.BackupPath[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list BackupPath", key)
	}

	t.BackupPath[key] = &Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_GlobalAttributes_BackupPaths_BackupPath{
		TunnelNumber: &TunnelNumber,
	}

	return t.BackupPath[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_GlobalAttributes_BackupPaths) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_GlobalAttributes_BackupPaths"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_GlobalAttributes_BackupPaths) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_GlobalAttributes_BackupPaths) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_GlobalAttributes_BackupPaths.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_GlobalAttributes_BackupPaths) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_GlobalAttributes_BackupPaths_BackupPath represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/interfaces/interface/global-attributes/backup-paths/backup-path YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_GlobalAttributes_BackupPaths_BackupPath struct {
	TunnelNumber	*uint32	`path:"tunnel-number" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_GlobalAttributes_BackupPaths_BackupPath implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_GlobalAttributes_BackupPaths_BackupPath) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_GlobalAttributes_BackupPaths_BackupPath struct, which is a YANG list entry.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_GlobalAttributes_BackupPaths_BackupPath) ΛListKeyMap() (map[string]interface{}, error) {
	if t.TunnelNumber == nil {
		return nil, fmt.Errorf("nil value for key TunnelNumber")
	}

	return map[string]interface{}{
		"tunnel-number": *t.TunnelNumber,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_GlobalAttributes_BackupPaths_BackupPath) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_GlobalAttributes_BackupPaths_BackupPath"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_GlobalAttributes_BackupPaths_BackupPath) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_GlobalAttributes_BackupPaths_BackupPath) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_GlobalAttributes_BackupPaths_BackupPath.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_GlobalAttributes_BackupPaths_BackupPath) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_GlobalAttributes_BackupTunnels represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/interfaces/interface/global-attributes/backup-tunnels YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_GlobalAttributes_BackupTunnels struct {
	BackupTunnel	map[string]*Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_GlobalAttributes_BackupTunnels_BackupTunnel	`path:"backup-tunnel" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_GlobalAttributes_BackupTunnels implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_GlobalAttributes_BackupTunnels) IsYANGGoStruct() {}

// NewBackupTunnel creates a new entry in the BackupTunnel list of the
// Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_GlobalAttributes_BackupTunnels struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_GlobalAttributes_BackupTunnels) NewBackupTunnel(TunnelName string) (*Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_GlobalAttributes_BackupTunnels_BackupTunnel, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.BackupTunnel == nil {
		t.BackupTunnel = make(map[string]*Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_GlobalAttributes_BackupTunnels_BackupTunnel)
	}

	key := TunnelName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.BackupTunnel[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list BackupTunnel", key)
	}

	t.BackupTunnel[key] = &Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_GlobalAttributes_BackupTunnels_BackupTunnel{
		TunnelName: &TunnelName,
	}

	return t.BackupTunnel[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_GlobalAttributes_BackupTunnels) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_GlobalAttributes_BackupTunnels"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_GlobalAttributes_BackupTunnels) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_GlobalAttributes_BackupTunnels) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_GlobalAttributes_BackupTunnels.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_GlobalAttributes_BackupTunnels) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_GlobalAttributes_BackupTunnels_BackupTunnel represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/interfaces/interface/global-attributes/backup-tunnels/backup-tunnel YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_GlobalAttributes_BackupTunnels_BackupTunnel struct {
	TunnelName	*string	`path:"tunnel-name" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_GlobalAttributes_BackupTunnels_BackupTunnel implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_GlobalAttributes_BackupTunnels_BackupTunnel) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_GlobalAttributes_BackupTunnels_BackupTunnel struct, which is a YANG list entry.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_GlobalAttributes_BackupTunnels_BackupTunnel) ΛListKeyMap() (map[string]interface{}, error) {
	if t.TunnelName == nil {
		return nil, fmt.Errorf("nil value for key TunnelName")
	}

	return map[string]interface{}{
		"tunnel-name": *t.TunnelName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_GlobalAttributes_BackupTunnels_BackupTunnel) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_GlobalAttributes_BackupTunnels_BackupTunnel"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_GlobalAttributes_BackupTunnels_BackupTunnel) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_GlobalAttributes_BackupTunnels_BackupTunnel) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_GlobalAttributes_BackupTunnels_BackupTunnel.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_GlobalAttributes_BackupTunnels_BackupTunnel) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/interfaces/interface/lcac YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac struct {
	AdminWeight	*uint32	`path:"admin-weight" module:"Cisco-IOS-XR-mpls-te-cfg"`
	AttributeFlags	*string	`path:"attribute-flags" module:"Cisco-IOS-XR-mpls-te-cfg"`
	AttributeNameXr	*Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_AttributeNameXr	`path:"attribute-name-xr" module:"Cisco-IOS-XR-mpls-te-cfg"`
	AttributeNames	*Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_AttributeNames	`path:"attribute-names" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Bfd	YANGEmpty	`path:"bfd" module:"Cisco-IOS-XR-mpls-te-cfg"`
	DownThresholds	*Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_DownThresholds	`path:"down-thresholds" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Enable	YANGEmpty	`path:"enable" module:"Cisco-IOS-XR-mpls-te-cfg"`
	FaultOamLockout	YANGEmpty	`path:"fault-oam-lockout" module:"Cisco-IOS-XR-mpls-te-cfg"`
	FloodArea	*Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_FloodArea	`path:"flood-area" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Srlgs	*Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_Srlgs	`path:"srlgs" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Switchings	*Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_Switchings	`path:"switchings" module:"Cisco-IOS-XR-mpls-te-cfg"`
	UpThresholds	*Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_UpThresholds	`path:"up-thresholds" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_AttributeNameXr represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/interfaces/interface/lcac/attribute-name-xr YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_AttributeNameXr struct {
	AttributeName	[]string	`path:"attribute-name" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_AttributeNameXr implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_AttributeNameXr) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_AttributeNameXr) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_AttributeNameXr"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_AttributeNameXr) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_AttributeNameXr) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_AttributeNameXr.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_AttributeNameXr) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_AttributeNames represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/interfaces/interface/lcac/attribute-names YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_AttributeNames struct {
	AttributeName	map[uint32]*Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_AttributeNames_AttributeName	`path:"attribute-name" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_AttributeNames implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_AttributeNames) IsYANGGoStruct() {}

// NewAttributeName creates a new entry in the AttributeName list of the
// Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_AttributeNames struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_AttributeNames) NewAttributeName(AffinityIndex uint32) (*Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_AttributeNames_AttributeName, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AttributeName == nil {
		t.AttributeName = make(map[uint32]*Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_AttributeNames_AttributeName)
	}

	key := AffinityIndex

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.AttributeName[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list AttributeName", key)
	}

	t.AttributeName[key] = &Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_AttributeNames_AttributeName{
		AffinityIndex: &AffinityIndex,
	}

	return t.AttributeName[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_AttributeNames) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_AttributeNames"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_AttributeNames) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_AttributeNames) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_AttributeNames.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_AttributeNames) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_AttributeNames_AttributeName represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/interfaces/interface/lcac/attribute-names/attribute-name YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_AttributeNames_AttributeName struct {
	AffinityIndex	*uint32	`path:"affinity-index" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Value	[]string	`path:"value" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_AttributeNames_AttributeName implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_AttributeNames_AttributeName) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_AttributeNames_AttributeName struct, which is a YANG list entry.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_AttributeNames_AttributeName) ΛListKeyMap() (map[string]interface{}, error) {
	if t.AffinityIndex == nil {
		return nil, fmt.Errorf("nil value for key AffinityIndex")
	}

	return map[string]interface{}{
		"affinity-index": *t.AffinityIndex,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_AttributeNames_AttributeName) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_AttributeNames_AttributeName"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_AttributeNames_AttributeName) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_AttributeNames_AttributeName) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_AttributeNames_AttributeName.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_AttributeNames_AttributeName) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_DownThresholds represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/interfaces/interface/lcac/down-thresholds YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_DownThresholds struct {
	DownThreshold	[]uint32	`path:"down-threshold" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_DownThresholds implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_DownThresholds) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_DownThresholds) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_DownThresholds"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_DownThresholds) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_DownThresholds) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_DownThresholds.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_DownThresholds) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_FloodArea represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/interfaces/interface/lcac/flood-area YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_FloodArea struct {
	AreaId	*uint32	`path:"area-id" module:"Cisco-IOS-XR-mpls-te-cfg"`
	IgpType	E_Cisco_IOS_XRMplsTeCfg_MplsLcacFloodingIgp	`path:"igp-type" module:"Cisco-IOS-XR-mpls-te-cfg"`
	ProcessName	*string	`path:"process-name" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_FloodArea implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_FloodArea) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_FloodArea) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_FloodArea"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_FloodArea) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_FloodArea) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_FloodArea.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_FloodArea) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_Srlgs represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/interfaces/interface/lcac/srlgs YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_Srlgs struct {
	Srlg	map[uint32]*Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_Srlgs_Srlg	`path:"srlg" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_Srlgs implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_Srlgs) IsYANGGoStruct() {}

// NewSrlg creates a new entry in the Srlg list of the
// Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_Srlgs struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_Srlgs) NewSrlg(SrlgNumber uint32) (*Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_Srlgs_Srlg, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Srlg == nil {
		t.Srlg = make(map[uint32]*Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_Srlgs_Srlg)
	}

	key := SrlgNumber

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Srlg[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Srlg", key)
	}

	t.Srlg[key] = &Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_Srlgs_Srlg{
		SrlgNumber: &SrlgNumber,
	}

	return t.Srlg[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_Srlgs) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_Srlgs"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_Srlgs) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_Srlgs) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_Srlgs.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_Srlgs) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_Srlgs_Srlg represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/interfaces/interface/lcac/srlgs/srlg YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_Srlgs_Srlg struct {
	SrlgNumber	*uint32	`path:"srlg-number" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_Srlgs_Srlg implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_Srlgs_Srlg) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_Srlgs_Srlg struct, which is a YANG list entry.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_Srlgs_Srlg) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SrlgNumber == nil {
		return nil, fmt.Errorf("nil value for key SrlgNumber")
	}

	return map[string]interface{}{
		"srlg-number": *t.SrlgNumber,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_Srlgs_Srlg) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_Srlgs_Srlg"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_Srlgs_Srlg) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_Srlgs_Srlg) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_Srlgs_Srlg.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_Srlgs_Srlg) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_Switchings represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/interfaces/interface/lcac/switchings YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_Switchings struct {
	Switching	map[Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_Switchings_Switching_SwitchingId_Union]*Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_Switchings_Switching	`path:"switching" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_Switchings implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_Switchings) IsYANGGoStruct() {}

// NewSwitching creates a new entry in the Switching list of the
// Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_Switchings struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_Switchings) NewSwitching(SwitchingId Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_Switchings_Switching_SwitchingId_Union) (*Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_Switchings_Switching, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Switching == nil {
		t.Switching = make(map[Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_Switchings_Switching_SwitchingId_Union]*Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_Switchings_Switching)
	}

	key := SwitchingId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Switching[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Switching", key)
	}

	t.Switching[key] = &Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_Switchings_Switching{
		SwitchingId: SwitchingId,
	}

	return t.Switching[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_Switchings) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_Switchings"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_Switchings) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_Switchings) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_Switchings.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_Switchings) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_Switchings_Switching represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/interfaces/interface/lcac/switchings/switching YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_Switchings_Switching struct {
	Capability	E_Cisco_IOS_XRMplsTeCfg_MplsTeSwitchingCap	`path:"capability" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Encoding	E_Cisco_IOS_XRMplsTeCfg_MplsTeSwitchingEncoding	`path:"encoding" module:"Cisco-IOS-XR-mpls-te-cfg"`
	SwitchingId	Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_Switchings_Switching_SwitchingId_Union	`path:"switching-id" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_Switchings_Switching implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_Switchings_Switching) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_Switchings_Switching struct, which is a YANG list entry.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_Switchings_Switching) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"switching-id": t.SwitchingId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_Switchings_Switching) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_Switchings_Switching"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_Switchings_Switching) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_Switchings_Switching) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_Switchings_Switching.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_Switchings_Switching) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}

// Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_Switchings_Switching_SwitchingId_Union is an interface that is implemented by valid types for the union
// for the leaf /Cisco-IOS-XR-mpls-te-cfg/mpls-te/interfaces/interface/lcac/switchings/switching/switching-id within the YANG schema.
type Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_Switchings_Switching_SwitchingId_Union interface {
	Is_Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_Switchings_Switching_SwitchingId_Union()
}

// Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_Switchings_Switching_SwitchingId_Union_E_Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_Switchings_Switching_SwitchingId is used when /Cisco-IOS-XR-mpls-te-cfg/mpls-te/interfaces/interface/lcac/switchings/switching/switching-id
// is to be set to a E_Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_Switchings_Switching_SwitchingId value.
type Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_Switchings_Switching_SwitchingId_Union_E_Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_Switchings_Switching_SwitchingId struct {
	E_Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_Switchings_Switching_SwitchingId	E_Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_Switchings_Switching_SwitchingId
}

// Is_Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_Switchings_Switching_SwitchingId_Union ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_Switchings_Switching_SwitchingId_Union_E_Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_Switchings_Switching_SwitchingId
// implements the Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_Switchings_Switching_SwitchingId_Union interface.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_Switchings_Switching_SwitchingId_Union_E_Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_Switchings_Switching_SwitchingId) Is_Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_Switchings_Switching_SwitchingId_Union() {}

// Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_Switchings_Switching_SwitchingId_Union_Uint32 is used when /Cisco-IOS-XR-mpls-te-cfg/mpls-te/interfaces/interface/lcac/switchings/switching/switching-id
// is to be set to a uint32 value.
type Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_Switchings_Switching_SwitchingId_Union_Uint32 struct {
	Uint32	uint32
}

// Is_Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_Switchings_Switching_SwitchingId_Union ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_Switchings_Switching_SwitchingId_Union_Uint32
// implements the Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_Switchings_Switching_SwitchingId_Union interface.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_Switchings_Switching_SwitchingId_Union_Uint32) Is_Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_Switchings_Switching_SwitchingId_Union() {}

// To_Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_Switchings_Switching_SwitchingId_Union takes an input interface{} and attempts to convert it to a struct
// which implements the Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_Switchings_Switching_SwitchingId_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_Switchings_Switching) To_Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_Switchings_Switching_SwitchingId_Union(i interface{}) (Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_Switchings_Switching_SwitchingId_Union, error) {
	switch v := i.(type) {
	case E_Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_Switchings_Switching_SwitchingId:
		return &Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_Switchings_Switching_SwitchingId_Union_E_Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_Switchings_Switching_SwitchingId{v}, nil
	case uint32:
		return &Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_Switchings_Switching_SwitchingId_Union_Uint32{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_Switchings_Switching_SwitchingId_Union, unknown union type, got: %T, want any of [E_Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_Switchings_Switching_SwitchingId, uint32]", i, i)
	}
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_UpThresholds represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/interfaces/interface/lcac/up-thresholds YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_UpThresholds struct {
	UpThreshold	[]uint32	`path:"up-threshold" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_UpThresholds implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_UpThresholds) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_UpThresholds) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_UpThresholds"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_UpThresholds) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_UpThresholds) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_UpThresholds.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_UpThresholds) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_TransportProfileLink represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/interfaces/interface/transport-profile-link YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_TransportProfileLink struct {
	Links	*Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_TransportProfileLink_Links	`path:"links" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_TransportProfileLink implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_TransportProfileLink) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_TransportProfileLink) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_TransportProfileLink"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_TransportProfileLink) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_TransportProfileLink) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_TransportProfileLink.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_TransportProfileLink) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_TransportProfileLink_Links represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/interfaces/interface/transport-profile-link/links YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_TransportProfileLink_Links struct {
	Link	map[uint32]*Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_TransportProfileLink_Links_Link	`path:"link" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_TransportProfileLink_Links implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_TransportProfileLink_Links) IsYANGGoStruct() {}

// NewLink creates a new entry in the Link list of the
// Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_TransportProfileLink_Links struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_TransportProfileLink_Links) NewLink(LinkId uint32) (*Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_TransportProfileLink_Links_Link, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Link == nil {
		t.Link = make(map[uint32]*Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_TransportProfileLink_Links_Link)
	}

	key := LinkId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Link[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Link", key)
	}

	t.Link[key] = &Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_TransportProfileLink_Links_Link{
		LinkId: &LinkId,
	}

	return t.Link[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_TransportProfileLink_Links) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_TransportProfileLink_Links"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_TransportProfileLink_Links) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_TransportProfileLink_Links) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_TransportProfileLink_Links.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_TransportProfileLink_Links) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_TransportProfileLink_Links_Link represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/interfaces/interface/transport-profile-link/links/link YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_TransportProfileLink_Links_Link struct {
	LinkId	*uint32	`path:"link-id" module:"Cisco-IOS-XR-mpls-te-cfg"`
	NextHopAddress	*string	`path:"next-hop-address" module:"Cisco-IOS-XR-mpls-te-cfg"`
	NextHopType	E_Cisco_IOS_XRMplsTeCfg_LinkNextHop	`path:"next-hop-type" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_TransportProfileLink_Links_Link implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_TransportProfileLink_Links_Link) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_TransportProfileLink_Links_Link struct, which is a YANG list entry.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_TransportProfileLink_Links_Link) ΛListKeyMap() (map[string]interface{}, error) {
	if t.LinkId == nil {
		return nil, fmt.Errorf("nil value for key LinkId")
	}

	return map[string]interface{}{
		"link-id": *t.LinkId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_TransportProfileLink_Links_Link) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_TransportProfileLink_Links_Link"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_TransportProfileLink_Links_Link) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_TransportProfileLink_Links_Link) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_TransportProfileLink_Links_Link.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_TransportProfileLink_Links_Link) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_Lcac represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/lcac YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_Lcac struct {
	BandwidthHoldTimer	*uint32	`path:"bandwidth-hold-timer" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Bfd	*Cisco_IOS_XRMplsTeCfg_MplsTe_Lcac_Bfd	`path:"bfd" module:"Cisco-IOS-XR-mpls-te-cfg"`
	DelayPreemptBundleCapacityTimer	*uint32	`path:"delay-preempt-bundle-capacity-timer" module:"Cisco-IOS-XR-mpls-te-cfg"`
	FloodingThreshold	*Cisco_IOS_XRMplsTeCfg_MplsTe_Lcac_FloodingThreshold	`path:"flooding-threshold" module:"Cisco-IOS-XR-mpls-te-cfg"`
	PeriodicFloodingTimer	*uint32	`path:"periodic-flooding-timer" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_Lcac implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_Lcac) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_Lcac) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_Lcac"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_Lcac) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_Lcac) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_Lcac.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_Lcac) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_Lcac_Bfd represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/lcac/bfd YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_Lcac_Bfd struct {
	DetectionMultiplier	*uint32	`path:"detection-multiplier" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Interval	*uint32	`path:"interval" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_Lcac_Bfd implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_Lcac_Bfd) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_Lcac_Bfd) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_Lcac_Bfd"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_Lcac_Bfd) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_Lcac_Bfd) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_Lcac_Bfd.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_Lcac_Bfd) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_Lcac_FloodingThreshold represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/lcac/flooding-threshold YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_Lcac_FloodingThreshold struct {
	DownStream	*uint32	`path:"down-stream" module:"Cisco-IOS-XR-mpls-te-cfg"`
	UpStream	*uint32	`path:"up-stream" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_Lcac_FloodingThreshold implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_Lcac_FloodingThreshold) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_Lcac_FloodingThreshold) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_Lcac_FloodingThreshold"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_Lcac_FloodingThreshold) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_Lcac_FloodingThreshold) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_Lcac_FloodingThreshold.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_Lcac_FloodingThreshold) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/named-tunnels YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels struct {
	Enable	YANGEmpty	`path:"enable" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Tunnels	*Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels	`path:"tunnels" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/named-tunnels/tunnels YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels struct {
	Tunnel	map[Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_Key]*Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel	`path:"tunnel" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels) IsYANGGoStruct() {}

// Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_Key represents the key for list Tunnel of element /Cisco-IOS-XR-mpls-te-cfg/mpls-te/named-tunnels/tunnels.
type Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_Key struct {
	TunnelName	string	`path:"tunnel-name"`
	TunnelType	E_Cisco_IOS_XRMplsTeCfg_MplsTeConfigTunnel	`path:"tunnel-type"`
}

// IsYANGGoKeyStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_Key) IsYANGGoKeyStruct() {}

// ΛListKeyMap returns the values of the Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_Key key struct.
func (t Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"tunnel-name": t.TunnelName,
		"tunnel-type": t.TunnelType,
	}, nil
}

// NewTunnel creates a new entry in the Tunnel list of the
// Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels) NewTunnel(TunnelName string, TunnelType E_Cisco_IOS_XRMplsTeCfg_MplsTeConfigTunnel) (*Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Tunnel == nil {
		t.Tunnel = make(map[Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_Key]*Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel)
	}

	key := Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_Key{
		TunnelName: TunnelName,
		TunnelType: TunnelType,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Tunnel[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Tunnel", key)
	}

	t.Tunnel[key] = &Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel{
		TunnelName: &TunnelName,
		TunnelType: TunnelType,
	}

	return t.Tunnel[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/named-tunnels/tunnels/tunnel YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel struct {
	TunnelAttributes	*Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes	`path:"tunnel-attributes" module:"Cisco-IOS-XR-mpls-te-cfg"`
	TunnelId	*Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelId	`path:"tunnel-id" module:"Cisco-IOS-XR-mpls-te-cfg"`
	TunnelName	*string	`path:"tunnel-name" module:"Cisco-IOS-XR-mpls-te-cfg"`
	TunnelType	E_Cisco_IOS_XRMplsTeCfg_MplsTeConfigTunnel	`path:"tunnel-type" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel struct, which is a YANG list entry.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel) ΛListKeyMap() (map[string]interface{}, error) {
	if t.TunnelName == nil {
		return nil, fmt.Errorf("nil value for key TunnelName")
	}


	return map[string]interface{}{
		"tunnel-name": *t.TunnelName,
		"tunnel-type": t.TunnelType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/named-tunnels/tunnels/tunnel/tunnel-attributes YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes struct {
	AffinityMask	*Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_AffinityMask	`path:"affinity-mask" module:"Cisco-IOS-XR-mpls-te-cfg"`
	AutoBandwidth	*Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_AutoBandwidth	`path:"auto-bandwidth" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Autoroute	*Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute	`path:"autoroute" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Bandwidth	*Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Bandwidth	`path:"bandwidth" module:"Cisco-IOS-XR-mpls-te-cfg"`
	DelayMeasurement	YANGEmpty	`path:"delay-measurement" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Destination	*string	`path:"destination" module:"Cisco-IOS-XR-mpls-te-cfg"`
	FastReroute	*Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_FastReroute	`path:"fast-reroute" module:"Cisco-IOS-XR-mpls-te-cfg"`
	ForwardClass	*uint32	`path:"forward-class" module:"Cisco-IOS-XR-mpls-te-cfg"`
	ForwardingAdjacency	*Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_ForwardingAdjacency	`path:"forwarding-adjacency" module:"Cisco-IOS-XR-mpls-te-cfg"`
	LoadShare	*uint32	`path:"load-share" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Logging	*Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Logging	`path:"logging" module:"Cisco-IOS-XR-mpls-te-cfg"`
	NewStyleAffinityAffinityTypes	*Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes	`path:"new-style-affinity-affinity-types" module:"Cisco-IOS-XR-mpls-te-cfg"`
	PathSelectionMetric	E_Cisco_IOS_XRMplsTeCfg_MplsTePathSelectionMetric	`path:"path-selection-metric" module:"Cisco-IOS-XR-mpls-te-cfg"`
	PathSetups	*Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_PathSetups	`path:"path-setups" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Priority	*Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Priority	`path:"priority" module:"Cisco-IOS-XR-mpls-te-cfg"`
	RecordRoute	YANGEmpty	`path:"record-route" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Shutdown	YANGEmpty	`path:"shutdown" module:"Cisco-IOS-XR-mpls-te-cfg"`
	SoftPreemption	YANGEmpty	`path:"soft-preemption" module:"Cisco-IOS-XR-mpls-te-cfg"`
	TunnelPathSelection	*Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_TunnelPathSelection	`path:"tunnel-path-selection" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_AffinityMask represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/named-tunnels/tunnels/tunnel/tunnel-attributes/affinity-mask YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_AffinityMask struct {
	Affinity	*string	`path:"affinity" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Mask	*string	`path:"mask" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_AffinityMask implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_AffinityMask) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_AffinityMask) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_AffinityMask"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_AffinityMask) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_AffinityMask) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_AffinityMask.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_AffinityMask) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_AutoBandwidth represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/named-tunnels/tunnels/tunnel/tunnel-attributes/auto-bandwidth YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_AutoBandwidth struct {
	AdjustmentThreshold	*Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_AutoBandwidth_AdjustmentThreshold	`path:"adjustment-threshold" module:"Cisco-IOS-XR-mpls-te-cfg"`
	ApplicationFrequency	*uint32	`path:"application-frequency" module:"Cisco-IOS-XR-mpls-te-cfg"`
	AutoCapacity	*Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_AutoBandwidth_AutoCapacity	`path:"auto-capacity" module:"Cisco-IOS-XR-mpls-te-cfg"`
	BandwidthLimits	*Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_AutoBandwidth_BandwidthLimits	`path:"bandwidth-limits" module:"Cisco-IOS-XR-mpls-te-cfg"`
	CollectionOnly	YANGEmpty	`path:"collection-only" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Enabled	*bool	`path:"enabled" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Overflow	*Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_AutoBandwidth_Overflow	`path:"overflow" module:"Cisco-IOS-XR-mpls-te-cfg"`
	OverflowEnable	*bool	`path:"overflow-enable" module:"Cisco-IOS-XR-mpls-te-cfg"`
	ResignalLastBandwidthTimeOut	*uint32	`path:"resignal-last-bandwidth-time-out" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Underflow	*Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_AutoBandwidth_Underflow	`path:"underflow" module:"Cisco-IOS-XR-mpls-te-cfg"`
	UnderflowEnable	*bool	`path:"underflow-enable" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_AutoBandwidth implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_AutoBandwidth) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_AutoBandwidth) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_AutoBandwidth"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_AutoBandwidth) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_AutoBandwidth) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_AutoBandwidth.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_AutoBandwidth) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_AutoBandwidth_AdjustmentThreshold represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/named-tunnels/tunnels/tunnel/tunnel-attributes/auto-bandwidth/adjustment-threshold YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_AutoBandwidth_AdjustmentThreshold struct {
	AdjustmentThresholdPercent	*uint32	`path:"adjustment-threshold-percent" module:"Cisco-IOS-XR-mpls-te-cfg"`
	AdjustmentThresholdValue	*uint32	`path:"adjustment-threshold-value" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_AutoBandwidth_AdjustmentThreshold implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_AutoBandwidth_AdjustmentThreshold) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_AutoBandwidth_AdjustmentThreshold) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_AutoBandwidth_AdjustmentThreshold"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_AutoBandwidth_AdjustmentThreshold) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_AutoBandwidth_AdjustmentThreshold) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_AutoBandwidth_AdjustmentThreshold.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_AutoBandwidth_AdjustmentThreshold) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_AutoBandwidth_AutoCapacity represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/named-tunnels/tunnels/tunnel/tunnel-attributes/auto-bandwidth/auto-capacity YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_AutoBandwidth_AutoCapacity struct {
	ClonesMaximum	*uint32	`path:"clones-maximum" module:"Cisco-IOS-XR-mpls-te-cfg"`
	ClonesMinimum	*uint32	`path:"clones-minimum" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Enable	*bool	`path:"enable" module:"Cisco-IOS-XR-mpls-te-cfg"`
	MergeBandwidth	*uint32	`path:"merge-bandwidth" module:"Cisco-IOS-XR-mpls-te-cfg"`
	NominalBandwidth	*uint32	`path:"nominal-bandwidth" module:"Cisco-IOS-XR-mpls-te-cfg"`
	SplitBandwidth	*uint32	`path:"split-bandwidth" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_AutoBandwidth_AutoCapacity implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_AutoBandwidth_AutoCapacity) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_AutoBandwidth_AutoCapacity) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_AutoBandwidth_AutoCapacity"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_AutoBandwidth_AutoCapacity) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_AutoBandwidth_AutoCapacity) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_AutoBandwidth_AutoCapacity.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_AutoBandwidth_AutoCapacity) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_AutoBandwidth_BandwidthLimits represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/named-tunnels/tunnels/tunnel/tunnel-attributes/auto-bandwidth/bandwidth-limits YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_AutoBandwidth_BandwidthLimits struct {
	BandwidthMaxLimit	*uint32	`path:"bandwidth-max-limit" module:"Cisco-IOS-XR-mpls-te-cfg"`
	BandwidthMinLimit	*uint32	`path:"bandwidth-min-limit" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_AutoBandwidth_BandwidthLimits implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_AutoBandwidth_BandwidthLimits) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_AutoBandwidth_BandwidthLimits) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_AutoBandwidth_BandwidthLimits"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_AutoBandwidth_BandwidthLimits) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_AutoBandwidth_BandwidthLimits) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_AutoBandwidth_BandwidthLimits.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_AutoBandwidth_BandwidthLimits) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_AutoBandwidth_Overflow represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/named-tunnels/tunnels/tunnel/tunnel-attributes/auto-bandwidth/overflow YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_AutoBandwidth_Overflow struct {
	OverflowThresholdLimit	*uint32	`path:"overflow-threshold-limit" module:"Cisco-IOS-XR-mpls-te-cfg"`
	OverflowThresholdPercent	*uint32	`path:"overflow-threshold-percent" module:"Cisco-IOS-XR-mpls-te-cfg"`
	OverflowThresholdValue	*uint32	`path:"overflow-threshold-value" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_AutoBandwidth_Overflow implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_AutoBandwidth_Overflow) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_AutoBandwidth_Overflow) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_AutoBandwidth_Overflow"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_AutoBandwidth_Overflow) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_AutoBandwidth_Overflow) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_AutoBandwidth_Overflow.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_AutoBandwidth_Overflow) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_AutoBandwidth_Underflow represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/named-tunnels/tunnels/tunnel/tunnel-attributes/auto-bandwidth/underflow YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_AutoBandwidth_Underflow struct {
	UnderflowThresholdLimit	*uint32	`path:"underflow-threshold-limit" module:"Cisco-IOS-XR-mpls-te-cfg"`
	UnderflowThresholdPercent	*uint32	`path:"underflow-threshold-percent" module:"Cisco-IOS-XR-mpls-te-cfg"`
	UnderflowThresholdValue	*uint32	`path:"underflow-threshold-value" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_AutoBandwidth_Underflow implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_AutoBandwidth_Underflow) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_AutoBandwidth_Underflow) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_AutoBandwidth_Underflow"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_AutoBandwidth_Underflow) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_AutoBandwidth_Underflow) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_AutoBandwidth_Underflow.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_AutoBandwidth_Underflow) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/named-tunnels/tunnels/tunnel/tunnel-attributes/autoroute YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute struct {
	AutorouteAnnounce	*Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute_AutorouteAnnounce	`path:"autoroute-announce" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Destinations	*Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute_Destinations	`path:"destinations" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute_AutorouteAnnounce represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/named-tunnels/tunnels/tunnel/tunnel-attributes/autoroute/autoroute-announce YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute_AutorouteAnnounce struct {
	Enable	YANGEmpty	`path:"enable" module:"Cisco-IOS-XR-mpls-te-cfg"`
	ExcludeTraffic	*Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute_AutorouteAnnounce_ExcludeTraffic	`path:"exclude-traffic" module:"Cisco-IOS-XR-mpls-te-cfg"`
	IncludeIpv6	YANGEmpty	`path:"include-ipv6" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Metric	*Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute_AutorouteAnnounce_Metric	`path:"metric" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute_AutorouteAnnounce implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute_AutorouteAnnounce) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute_AutorouteAnnounce) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute_AutorouteAnnounce"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute_AutorouteAnnounce) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute_AutorouteAnnounce) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute_AutorouteAnnounce.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute_AutorouteAnnounce) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute_AutorouteAnnounce_ExcludeTraffic represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/named-tunnels/tunnels/tunnel/tunnel-attributes/autoroute/autoroute-announce/exclude-traffic YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute_AutorouteAnnounce_ExcludeTraffic struct {
	SegmentRouting	YANGEmpty	`path:"segment-routing" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute_AutorouteAnnounce_ExcludeTraffic implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute_AutorouteAnnounce_ExcludeTraffic) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute_AutorouteAnnounce_ExcludeTraffic) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute_AutorouteAnnounce_ExcludeTraffic"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute_AutorouteAnnounce_ExcludeTraffic) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute_AutorouteAnnounce_ExcludeTraffic) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute_AutorouteAnnounce_ExcludeTraffic.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute_AutorouteAnnounce_ExcludeTraffic) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute_AutorouteAnnounce_Metric represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/named-tunnels/tunnels/tunnel/tunnel-attributes/autoroute/autoroute-announce/metric YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute_AutorouteAnnounce_Metric struct {
	AbsoluteMetric	*uint32	`path:"absolute-metric" module:"Cisco-IOS-XR-mpls-te-cfg"`
	ConstantMetric	*uint32	`path:"constant-metric" module:"Cisco-IOS-XR-mpls-te-cfg"`
	MetricType	E_Cisco_IOS_XRMplsTeCfg_MplsTeAutorouteMetric	`path:"metric-type" module:"Cisco-IOS-XR-mpls-te-cfg"`
	RelativeMetric	*int32	`path:"relative-metric" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute_AutorouteAnnounce_Metric implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute_AutorouteAnnounce_Metric) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute_AutorouteAnnounce_Metric) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute_AutorouteAnnounce_Metric"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute_AutorouteAnnounce_Metric) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute_AutorouteAnnounce_Metric) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute_AutorouteAnnounce_Metric.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute_AutorouteAnnounce_Metric) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute_Destinations represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/named-tunnels/tunnels/tunnel/tunnel-attributes/autoroute/destinations YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute_Destinations struct {
	Destination	map[string]*Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute_Destinations_Destination	`path:"destination" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute_Destinations implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute_Destinations) IsYANGGoStruct() {}

// NewDestination creates a new entry in the Destination list of the
// Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute_Destinations struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute_Destinations) NewDestination(DestinationAddress string) (*Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute_Destinations_Destination, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Destination == nil {
		t.Destination = make(map[string]*Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute_Destinations_Destination)
	}

	key := DestinationAddress

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Destination[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Destination", key)
	}

	t.Destination[key] = &Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute_Destinations_Destination{
		DestinationAddress: &DestinationAddress,
	}

	return t.Destination[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute_Destinations) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute_Destinations"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute_Destinations) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute_Destinations) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute_Destinations.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute_Destinations) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute_Destinations_Destination represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/named-tunnels/tunnels/tunnel/tunnel-attributes/autoroute/destinations/destination YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute_Destinations_Destination struct {
	DestinationAddress	*string	`path:"destination-address" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute_Destinations_Destination implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute_Destinations_Destination) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute_Destinations_Destination struct, which is a YANG list entry.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute_Destinations_Destination) ΛListKeyMap() (map[string]interface{}, error) {
	if t.DestinationAddress == nil {
		return nil, fmt.Errorf("nil value for key DestinationAddress")
	}

	return map[string]interface{}{
		"destination-address": *t.DestinationAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute_Destinations_Destination) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute_Destinations_Destination"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute_Destinations_Destination) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute_Destinations_Destination) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute_Destinations_Destination.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute_Destinations_Destination) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Bandwidth represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/named-tunnels/tunnels/tunnel/tunnel-attributes/bandwidth YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Bandwidth struct {
	Bandwidth	*uint32	`path:"bandwidth" module:"Cisco-IOS-XR-mpls-te-cfg"`
	ClassOrPoolType	*uint32	`path:"class-or-pool-type" module:"Cisco-IOS-XR-mpls-te-cfg"`
	DsteType	E_Cisco_IOS_XRMplsTeCfg_MplsTeBandwidthDste	`path:"dste-type" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Bandwidth implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Bandwidth) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Bandwidth) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Bandwidth"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Bandwidth) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Bandwidth) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Bandwidth.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Bandwidth) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_FastReroute represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/named-tunnels/tunnels/tunnel/tunnel-attributes/fast-reroute YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_FastReroute struct {
	BandwidthProtection	*uint32	`path:"bandwidth-protection" module:"Cisco-IOS-XR-mpls-te-cfg"`
	NodeProtection	*uint32	`path:"node-protection" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_FastReroute implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_FastReroute) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_FastReroute) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_FastReroute"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_FastReroute) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_FastReroute) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_FastReroute.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_FastReroute) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_ForwardingAdjacency represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/named-tunnels/tunnels/tunnel/tunnel-attributes/forwarding-adjacency YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_ForwardingAdjacency struct {
	Enable	YANGEmpty	`path:"enable" module:"Cisco-IOS-XR-mpls-te-cfg"`
	HoldTime	*uint32	`path:"hold-time" module:"Cisco-IOS-XR-mpls-te-cfg"`
	IncludeIpv6	YANGEmpty	`path:"include-ipv6" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_ForwardingAdjacency implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_ForwardingAdjacency) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_ForwardingAdjacency) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_ForwardingAdjacency"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_ForwardingAdjacency) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_ForwardingAdjacency) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_ForwardingAdjacency.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_ForwardingAdjacency) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Logging represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/named-tunnels/tunnels/tunnel/tunnel-attributes/logging YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Logging struct {
	All	YANGEmpty	`path:"all" module:"Cisco-IOS-XR-mpls-te-cfg"`
	BandwidthChangeMessage	YANGEmpty	`path:"bandwidth-change-message" module:"Cisco-IOS-XR-mpls-te-cfg"`
	BfdStateMessage	YANGEmpty	`path:"bfd-state-message" module:"Cisco-IOS-XR-mpls-te-cfg"`
	InsufficientBwMessage	YANGEmpty	`path:"insufficient-bw-message" module:"Cisco-IOS-XR-mpls-te-cfg"`
	LspSwitchOverChangeMessage	YANGEmpty	`path:"lsp-switch-over-change-message" module:"Cisco-IOS-XR-mpls-te-cfg"`
	PathErrorMessage	YANGEmpty	`path:"path-error-message" module:"Cisco-IOS-XR-mpls-te-cfg"`
	PcalcFailureMessage	YANGEmpty	`path:"pcalc-failure-message" module:"Cisco-IOS-XR-mpls-te-cfg"`
	RecordRouteMesssage	YANGEmpty	`path:"record-route-messsage" module:"Cisco-IOS-XR-mpls-te-cfg"`
	ReoptimizeAttemptsMessage	YANGEmpty	`path:"reoptimize-attempts-message" module:"Cisco-IOS-XR-mpls-te-cfg"`
	ReoptimizedMessage	YANGEmpty	`path:"reoptimized-message" module:"Cisco-IOS-XR-mpls-te-cfg"`
	RerouteMesssage	YANGEmpty	`path:"reroute-messsage" module:"Cisco-IOS-XR-mpls-te-cfg"`
	StateMessage	YANGEmpty	`path:"state-message" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Logging implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Logging) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Logging) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Logging"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Logging) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Logging) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Logging.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Logging) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/named-tunnels/tunnels/tunnel/tunnel-attributes/new-style-affinity-affinity-types YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes struct {
	NewStyleAffinityAffinityType	map[E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity]*Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType	`path:"new-style-affinity-affinity-type" module:"Cisco-IOS-XR-mpls-te-cfg"`
	NewStyleAffinityAffinityTypeAffinity1	map[Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1_Key]*Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1	`path:"new-style-affinity-affinity-type-affinity1" module:"Cisco-IOS-XR-mpls-te-cfg"`
	NewStyleAffinityAffinityTypeAffinity1Affinity2	map[Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2_Key]*Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2	`path:"new-style-affinity-affinity-type-affinity1-affinity2" module:"Cisco-IOS-XR-mpls-te-cfg"`
	NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3	map[Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3_Key]*Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3	`path:"new-style-affinity-affinity-type-affinity1-affinity2-affinity3" module:"Cisco-IOS-XR-mpls-te-cfg"`
	NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4	map[Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4_Key]*Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4	`path:"new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4" module:"Cisco-IOS-XR-mpls-te-cfg"`
	NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5	map[Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5_Key]*Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5	`path:"new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5" module:"Cisco-IOS-XR-mpls-te-cfg"`
	NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6	map[Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6_Key]*Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6	`path:"new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6" module:"Cisco-IOS-XR-mpls-te-cfg"`
	NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7	map[Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7_Key]*Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7	`path:"new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7" module:"Cisco-IOS-XR-mpls-te-cfg"`
	NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8	map[Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8_Key]*Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8	`path:"new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8" module:"Cisco-IOS-XR-mpls-te-cfg"`
	NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9	map[Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9_Key]*Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9	`path:"new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8-affinity9" module:"Cisco-IOS-XR-mpls-te-cfg"`
	NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10	map[Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10_Key]*Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10	`path:"new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8-affinity9-affinity10" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes) IsYANGGoStruct() {}

// Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1_Key represents the key for list NewStyleAffinityAffinityTypeAffinity1 of element /Cisco-IOS-XR-mpls-te-cfg/mpls-te/named-tunnels/tunnels/tunnel/tunnel-attributes/new-style-affinity-affinity-types.
type Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1_Key struct {
	AffinityType	E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity	`path:"affinity-type"`
	Affinity1	string	`path:"affinity1"`
}

// IsYANGGoKeyStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1_Key) IsYANGGoKeyStruct() {}

// ΛListKeyMap returns the values of the Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1_Key key struct.
func (t Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"affinity-type": t.AffinityType,
		"affinity1": t.Affinity1,
	}, nil
}

// Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2_Key represents the key for list NewStyleAffinityAffinityTypeAffinity1Affinity2 of element /Cisco-IOS-XR-mpls-te-cfg/mpls-te/named-tunnels/tunnels/tunnel/tunnel-attributes/new-style-affinity-affinity-types.
type Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2_Key struct {
	AffinityType	E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity	`path:"affinity-type"`
	Affinity1	string	`path:"affinity1"`
	Affinity2	string	`path:"affinity2"`
}

// IsYANGGoKeyStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2_Key) IsYANGGoKeyStruct() {}

// ΛListKeyMap returns the values of the Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2_Key key struct.
func (t Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"affinity-type": t.AffinityType,
		"affinity1": t.Affinity1,
		"affinity2": t.Affinity2,
	}, nil
}

// Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3_Key represents the key for list NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 of element /Cisco-IOS-XR-mpls-te-cfg/mpls-te/named-tunnels/tunnels/tunnel/tunnel-attributes/new-style-affinity-affinity-types.
type Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3_Key struct {
	AffinityType	E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity	`path:"affinity-type"`
	Affinity1	string	`path:"affinity1"`
	Affinity2	string	`path:"affinity2"`
	Affinity3	string	`path:"affinity3"`
}

// IsYANGGoKeyStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3_Key) IsYANGGoKeyStruct() {}

// ΛListKeyMap returns the values of the Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3_Key key struct.
func (t Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"affinity-type": t.AffinityType,
		"affinity1": t.Affinity1,
		"affinity2": t.Affinity2,
		"affinity3": t.Affinity3,
	}, nil
}

// Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4_Key represents the key for list NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 of element /Cisco-IOS-XR-mpls-te-cfg/mpls-te/named-tunnels/tunnels/tunnel/tunnel-attributes/new-style-affinity-affinity-types.
type Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4_Key struct {
	AffinityType	E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity	`path:"affinity-type"`
	Affinity1	string	`path:"affinity1"`
	Affinity2	string	`path:"affinity2"`
	Affinity3	string	`path:"affinity3"`
	Affinity4	string	`path:"affinity4"`
}

// IsYANGGoKeyStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4_Key) IsYANGGoKeyStruct() {}

// ΛListKeyMap returns the values of the Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4_Key key struct.
func (t Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"affinity-type": t.AffinityType,
		"affinity1": t.Affinity1,
		"affinity2": t.Affinity2,
		"affinity3": t.Affinity3,
		"affinity4": t.Affinity4,
	}, nil
}

// Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5_Key represents the key for list NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 of element /Cisco-IOS-XR-mpls-te-cfg/mpls-te/named-tunnels/tunnels/tunnel/tunnel-attributes/new-style-affinity-affinity-types.
type Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5_Key struct {
	AffinityType	E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity	`path:"affinity-type"`
	Affinity1	string	`path:"affinity1"`
	Affinity2	string	`path:"affinity2"`
	Affinity3	string	`path:"affinity3"`
	Affinity4	string	`path:"affinity4"`
	Affinity5	string	`path:"affinity5"`
}

// IsYANGGoKeyStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5_Key) IsYANGGoKeyStruct() {}

// ΛListKeyMap returns the values of the Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5_Key key struct.
func (t Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"affinity-type": t.AffinityType,
		"affinity1": t.Affinity1,
		"affinity2": t.Affinity2,
		"affinity3": t.Affinity3,
		"affinity4": t.Affinity4,
		"affinity5": t.Affinity5,
	}, nil
}

// Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6_Key represents the key for list NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 of element /Cisco-IOS-XR-mpls-te-cfg/mpls-te/named-tunnels/tunnels/tunnel/tunnel-attributes/new-style-affinity-affinity-types.
type Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6_Key struct {
	AffinityType	E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity	`path:"affinity-type"`
	Affinity1	string	`path:"affinity1"`
	Affinity2	string	`path:"affinity2"`
	Affinity3	string	`path:"affinity3"`
	Affinity4	string	`path:"affinity4"`
	Affinity5	string	`path:"affinity5"`
	Affinity6	string	`path:"affinity6"`
}

// IsYANGGoKeyStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6_Key) IsYANGGoKeyStruct() {}

// ΛListKeyMap returns the values of the Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6_Key key struct.
func (t Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"affinity-type": t.AffinityType,
		"affinity1": t.Affinity1,
		"affinity2": t.Affinity2,
		"affinity3": t.Affinity3,
		"affinity4": t.Affinity4,
		"affinity5": t.Affinity5,
		"affinity6": t.Affinity6,
	}, nil
}

// Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7_Key represents the key for list NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 of element /Cisco-IOS-XR-mpls-te-cfg/mpls-te/named-tunnels/tunnels/tunnel/tunnel-attributes/new-style-affinity-affinity-types.
type Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7_Key struct {
	AffinityType	E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity	`path:"affinity-type"`
	Affinity1	string	`path:"affinity1"`
	Affinity2	string	`path:"affinity2"`
	Affinity3	string	`path:"affinity3"`
	Affinity4	string	`path:"affinity4"`
	Affinity5	string	`path:"affinity5"`
	Affinity6	string	`path:"affinity6"`
	Affinity7	string	`path:"affinity7"`
}

// IsYANGGoKeyStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7_Key) IsYANGGoKeyStruct() {}

// ΛListKeyMap returns the values of the Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7_Key key struct.
func (t Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"affinity-type": t.AffinityType,
		"affinity1": t.Affinity1,
		"affinity2": t.Affinity2,
		"affinity3": t.Affinity3,
		"affinity4": t.Affinity4,
		"affinity5": t.Affinity5,
		"affinity6": t.Affinity6,
		"affinity7": t.Affinity7,
	}, nil
}

// Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8_Key represents the key for list NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 of element /Cisco-IOS-XR-mpls-te-cfg/mpls-te/named-tunnels/tunnels/tunnel/tunnel-attributes/new-style-affinity-affinity-types.
type Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8_Key struct {
	AffinityType	E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity	`path:"affinity-type"`
	Affinity1	string	`path:"affinity1"`
	Affinity2	string	`path:"affinity2"`
	Affinity3	string	`path:"affinity3"`
	Affinity4	string	`path:"affinity4"`
	Affinity5	string	`path:"affinity5"`
	Affinity6	string	`path:"affinity6"`
	Affinity7	string	`path:"affinity7"`
	Affinity8	string	`path:"affinity8"`
}

// IsYANGGoKeyStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8_Key) IsYANGGoKeyStruct() {}

// ΛListKeyMap returns the values of the Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8_Key key struct.
func (t Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"affinity-type": t.AffinityType,
		"affinity1": t.Affinity1,
		"affinity2": t.Affinity2,
		"affinity3": t.Affinity3,
		"affinity4": t.Affinity4,
		"affinity5": t.Affinity5,
		"affinity6": t.Affinity6,
		"affinity7": t.Affinity7,
		"affinity8": t.Affinity8,
	}, nil
}

// Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9_Key represents the key for list NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 of element /Cisco-IOS-XR-mpls-te-cfg/mpls-te/named-tunnels/tunnels/tunnel/tunnel-attributes/new-style-affinity-affinity-types.
type Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9_Key struct {
	AffinityType	E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity	`path:"affinity-type"`
	Affinity1	string	`path:"affinity1"`
	Affinity2	string	`path:"affinity2"`
	Affinity3	string	`path:"affinity3"`
	Affinity4	string	`path:"affinity4"`
	Affinity5	string	`path:"affinity5"`
	Affinity6	string	`path:"affinity6"`
	Affinity7	string	`path:"affinity7"`
	Affinity8	string	`path:"affinity8"`
	Affinity9	string	`path:"affinity9"`
}

// IsYANGGoKeyStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9_Key) IsYANGGoKeyStruct() {}

// ΛListKeyMap returns the values of the Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9_Key key struct.
func (t Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"affinity-type": t.AffinityType,
		"affinity1": t.Affinity1,
		"affinity2": t.Affinity2,
		"affinity3": t.Affinity3,
		"affinity4": t.Affinity4,
		"affinity5": t.Affinity5,
		"affinity6": t.Affinity6,
		"affinity7": t.Affinity7,
		"affinity8": t.Affinity8,
		"affinity9": t.Affinity9,
	}, nil
}

// Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10_Key represents the key for list NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 of element /Cisco-IOS-XR-mpls-te-cfg/mpls-te/named-tunnels/tunnels/tunnel/tunnel-attributes/new-style-affinity-affinity-types.
type Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10_Key struct {
	AffinityType	E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity	`path:"affinity-type"`
	Affinity1	string	`path:"affinity1"`
	Affinity2	string	`path:"affinity2"`
	Affinity3	string	`path:"affinity3"`
	Affinity4	string	`path:"affinity4"`
	Affinity5	string	`path:"affinity5"`
	Affinity6	string	`path:"affinity6"`
	Affinity7	string	`path:"affinity7"`
	Affinity8	string	`path:"affinity8"`
	Affinity9	string	`path:"affinity9"`
	Affinity10	string	`path:"affinity10"`
}

// IsYANGGoKeyStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10_Key) IsYANGGoKeyStruct() {}

// ΛListKeyMap returns the values of the Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10_Key key struct.
func (t Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"affinity-type": t.AffinityType,
		"affinity1": t.Affinity1,
		"affinity2": t.Affinity2,
		"affinity3": t.Affinity3,
		"affinity4": t.Affinity4,
		"affinity5": t.Affinity5,
		"affinity6": t.Affinity6,
		"affinity7": t.Affinity7,
		"affinity8": t.Affinity8,
		"affinity9": t.Affinity9,
		"affinity10": t.Affinity10,
	}, nil
}

// NewNewStyleAffinityAffinityType creates a new entry in the NewStyleAffinityAffinityType list of the
// Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes) NewNewStyleAffinityAffinityType(AffinityType E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity) (*Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NewStyleAffinityAffinityType == nil {
		t.NewStyleAffinityAffinityType = make(map[E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity]*Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType)
	}

	key := AffinityType

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NewStyleAffinityAffinityType[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NewStyleAffinityAffinityType", key)
	}

	t.NewStyleAffinityAffinityType[key] = &Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType{
		AffinityType: AffinityType,
	}

	return t.NewStyleAffinityAffinityType[key], nil
}

// NewNewStyleAffinityAffinityTypeAffinity1 creates a new entry in the NewStyleAffinityAffinityTypeAffinity1 list of the
// Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes) NewNewStyleAffinityAffinityTypeAffinity1(AffinityType E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity, Affinity1 string) (*Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NewStyleAffinityAffinityTypeAffinity1 == nil {
		t.NewStyleAffinityAffinityTypeAffinity1 = make(map[Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1_Key]*Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1)
	}

	key := Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1_Key{
		AffinityType: AffinityType,
		Affinity1: Affinity1,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NewStyleAffinityAffinityTypeAffinity1[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NewStyleAffinityAffinityTypeAffinity1", key)
	}

	t.NewStyleAffinityAffinityTypeAffinity1[key] = &Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1{
		AffinityType: AffinityType,
		Affinity1: &Affinity1,
	}

	return t.NewStyleAffinityAffinityTypeAffinity1[key], nil
}

// NewNewStyleAffinityAffinityTypeAffinity1Affinity2 creates a new entry in the NewStyleAffinityAffinityTypeAffinity1Affinity2 list of the
// Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes) NewNewStyleAffinityAffinityTypeAffinity1Affinity2(AffinityType E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity, Affinity1 string, Affinity2 string) (*Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NewStyleAffinityAffinityTypeAffinity1Affinity2 == nil {
		t.NewStyleAffinityAffinityTypeAffinity1Affinity2 = make(map[Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2_Key]*Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2)
	}

	key := Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2_Key{
		AffinityType: AffinityType,
		Affinity1: Affinity1,
		Affinity2: Affinity2,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NewStyleAffinityAffinityTypeAffinity1Affinity2[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NewStyleAffinityAffinityTypeAffinity1Affinity2", key)
	}

	t.NewStyleAffinityAffinityTypeAffinity1Affinity2[key] = &Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2{
		AffinityType: AffinityType,
		Affinity1: &Affinity1,
		Affinity2: &Affinity2,
	}

	return t.NewStyleAffinityAffinityTypeAffinity1Affinity2[key], nil
}

// NewNewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 creates a new entry in the NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 list of the
// Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes) NewNewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3(AffinityType E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity, Affinity1 string, Affinity2 string, Affinity3 string) (*Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 == nil {
		t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 = make(map[Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3_Key]*Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3)
	}

	key := Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3_Key{
		AffinityType: AffinityType,
		Affinity1: Affinity1,
		Affinity2: Affinity2,
		Affinity3: Affinity3,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3", key)
	}

	t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3[key] = &Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3{
		AffinityType: AffinityType,
		Affinity1: &Affinity1,
		Affinity2: &Affinity2,
		Affinity3: &Affinity3,
	}

	return t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3[key], nil
}

// NewNewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 creates a new entry in the NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 list of the
// Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes) NewNewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4(AffinityType E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity, Affinity1 string, Affinity2 string, Affinity3 string, Affinity4 string) (*Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 == nil {
		t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 = make(map[Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4_Key]*Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4)
	}

	key := Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4_Key{
		AffinityType: AffinityType,
		Affinity1: Affinity1,
		Affinity2: Affinity2,
		Affinity3: Affinity3,
		Affinity4: Affinity4,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4", key)
	}

	t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4[key] = &Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4{
		AffinityType: AffinityType,
		Affinity1: &Affinity1,
		Affinity2: &Affinity2,
		Affinity3: &Affinity3,
		Affinity4: &Affinity4,
	}

	return t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4[key], nil
}

// NewNewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 creates a new entry in the NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 list of the
// Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes) NewNewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5(AffinityType E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity, Affinity1 string, Affinity2 string, Affinity3 string, Affinity4 string, Affinity5 string) (*Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 == nil {
		t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 = make(map[Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5_Key]*Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5)
	}

	key := Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5_Key{
		AffinityType: AffinityType,
		Affinity1: Affinity1,
		Affinity2: Affinity2,
		Affinity3: Affinity3,
		Affinity4: Affinity4,
		Affinity5: Affinity5,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5", key)
	}

	t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5[key] = &Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5{
		AffinityType: AffinityType,
		Affinity1: &Affinity1,
		Affinity2: &Affinity2,
		Affinity3: &Affinity3,
		Affinity4: &Affinity4,
		Affinity5: &Affinity5,
	}

	return t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5[key], nil
}

// NewNewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 creates a new entry in the NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 list of the
// Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes) NewNewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6(AffinityType E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity, Affinity1 string, Affinity2 string, Affinity3 string, Affinity4 string, Affinity5 string, Affinity6 string) (*Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 == nil {
		t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 = make(map[Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6_Key]*Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6)
	}

	key := Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6_Key{
		AffinityType: AffinityType,
		Affinity1: Affinity1,
		Affinity2: Affinity2,
		Affinity3: Affinity3,
		Affinity4: Affinity4,
		Affinity5: Affinity5,
		Affinity6: Affinity6,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6", key)
	}

	t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6[key] = &Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6{
		AffinityType: AffinityType,
		Affinity1: &Affinity1,
		Affinity2: &Affinity2,
		Affinity3: &Affinity3,
		Affinity4: &Affinity4,
		Affinity5: &Affinity5,
		Affinity6: &Affinity6,
	}

	return t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6[key], nil
}

// NewNewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 creates a new entry in the NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 list of the
// Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes) NewNewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7(AffinityType E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity, Affinity1 string, Affinity2 string, Affinity3 string, Affinity4 string, Affinity5 string, Affinity6 string, Affinity7 string) (*Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 == nil {
		t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 = make(map[Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7_Key]*Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7)
	}

	key := Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7_Key{
		AffinityType: AffinityType,
		Affinity1: Affinity1,
		Affinity2: Affinity2,
		Affinity3: Affinity3,
		Affinity4: Affinity4,
		Affinity5: Affinity5,
		Affinity6: Affinity6,
		Affinity7: Affinity7,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7", key)
	}

	t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7[key] = &Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7{
		AffinityType: AffinityType,
		Affinity1: &Affinity1,
		Affinity2: &Affinity2,
		Affinity3: &Affinity3,
		Affinity4: &Affinity4,
		Affinity5: &Affinity5,
		Affinity6: &Affinity6,
		Affinity7: &Affinity7,
	}

	return t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7[key], nil
}

// NewNewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 creates a new entry in the NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 list of the
// Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes) NewNewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8(AffinityType E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity, Affinity1 string, Affinity2 string, Affinity3 string, Affinity4 string, Affinity5 string, Affinity6 string, Affinity7 string, Affinity8 string) (*Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 == nil {
		t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 = make(map[Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8_Key]*Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8)
	}

	key := Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8_Key{
		AffinityType: AffinityType,
		Affinity1: Affinity1,
		Affinity2: Affinity2,
		Affinity3: Affinity3,
		Affinity4: Affinity4,
		Affinity5: Affinity5,
		Affinity6: Affinity6,
		Affinity7: Affinity7,
		Affinity8: Affinity8,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8", key)
	}

	t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8[key] = &Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8{
		AffinityType: AffinityType,
		Affinity1: &Affinity1,
		Affinity2: &Affinity2,
		Affinity3: &Affinity3,
		Affinity4: &Affinity4,
		Affinity5: &Affinity5,
		Affinity6: &Affinity6,
		Affinity7: &Affinity7,
		Affinity8: &Affinity8,
	}

	return t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8[key], nil
}

// NewNewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 creates a new entry in the NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 list of the
// Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes) NewNewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9(AffinityType E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity, Affinity1 string, Affinity2 string, Affinity3 string, Affinity4 string, Affinity5 string, Affinity6 string, Affinity7 string, Affinity8 string, Affinity9 string) (*Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 == nil {
		t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 = make(map[Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9_Key]*Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9)
	}

	key := Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9_Key{
		AffinityType: AffinityType,
		Affinity1: Affinity1,
		Affinity2: Affinity2,
		Affinity3: Affinity3,
		Affinity4: Affinity4,
		Affinity5: Affinity5,
		Affinity6: Affinity6,
		Affinity7: Affinity7,
		Affinity8: Affinity8,
		Affinity9: Affinity9,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9", key)
	}

	t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9[key] = &Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9{
		AffinityType: AffinityType,
		Affinity1: &Affinity1,
		Affinity2: &Affinity2,
		Affinity3: &Affinity3,
		Affinity4: &Affinity4,
		Affinity5: &Affinity5,
		Affinity6: &Affinity6,
		Affinity7: &Affinity7,
		Affinity8: &Affinity8,
		Affinity9: &Affinity9,
	}

	return t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9[key], nil
}

// NewNewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 creates a new entry in the NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 list of the
// Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes) NewNewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10(AffinityType E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity, Affinity1 string, Affinity2 string, Affinity3 string, Affinity4 string, Affinity5 string, Affinity6 string, Affinity7 string, Affinity8 string, Affinity9 string, Affinity10 string) (*Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 == nil {
		t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 = make(map[Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10_Key]*Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10)
	}

	key := Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10_Key{
		AffinityType: AffinityType,
		Affinity1: Affinity1,
		Affinity2: Affinity2,
		Affinity3: Affinity3,
		Affinity4: Affinity4,
		Affinity5: Affinity5,
		Affinity6: Affinity6,
		Affinity7: Affinity7,
		Affinity8: Affinity8,
		Affinity9: Affinity9,
		Affinity10: Affinity10,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10", key)
	}

	t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10[key] = &Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10{
		AffinityType: AffinityType,
		Affinity1: &Affinity1,
		Affinity2: &Affinity2,
		Affinity3: &Affinity3,
		Affinity4: &Affinity4,
		Affinity5: &Affinity5,
		Affinity6: &Affinity6,
		Affinity7: &Affinity7,
		Affinity8: &Affinity8,
		Affinity9: &Affinity9,
		Affinity10: &Affinity10,
	}

	return t.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/named-tunnels/tunnels/tunnel/tunnel-attributes/new-style-affinity-affinity-types/new-style-affinity-affinity-type YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType struct {
	AffinityType	E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity	`path:"affinity-type" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType struct, which is a YANG list entry.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"affinity-type": t.AffinityType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1 represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/named-tunnels/tunnels/tunnel/tunnel-attributes/new-style-affinity-affinity-types/new-style-affinity-affinity-type-affinity1 YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1 struct {
	AffinityType	E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity	`path:"affinity-type" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity1	*string	`path:"affinity1" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1 struct, which is a YANG list entry.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1) ΛListKeyMap() (map[string]interface{}, error) {

	if t.Affinity1 == nil {
		return nil, fmt.Errorf("nil value for key Affinity1")
	}

	return map[string]interface{}{
		"affinity-type": t.AffinityType,
		"affinity1": *t.Affinity1,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2 represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/named-tunnels/tunnels/tunnel/tunnel-attributes/new-style-affinity-affinity-types/new-style-affinity-affinity-type-affinity1-affinity2 YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2 struct {
	AffinityType	E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity	`path:"affinity-type" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity1	*string	`path:"affinity1" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity2	*string	`path:"affinity2" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2 struct, which is a YANG list entry.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2) ΛListKeyMap() (map[string]interface{}, error) {

	if t.Affinity1 == nil {
		return nil, fmt.Errorf("nil value for key Affinity1")
	}

	if t.Affinity2 == nil {
		return nil, fmt.Errorf("nil value for key Affinity2")
	}

	return map[string]interface{}{
		"affinity-type": t.AffinityType,
		"affinity1": *t.Affinity1,
		"affinity2": *t.Affinity2,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/named-tunnels/tunnels/tunnel/tunnel-attributes/new-style-affinity-affinity-types/new-style-affinity-affinity-type-affinity1-affinity2-affinity3 YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 struct {
	AffinityType	E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity	`path:"affinity-type" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity1	*string	`path:"affinity1" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity2	*string	`path:"affinity2" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity3	*string	`path:"affinity3" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 struct, which is a YANG list entry.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3) ΛListKeyMap() (map[string]interface{}, error) {

	if t.Affinity1 == nil {
		return nil, fmt.Errorf("nil value for key Affinity1")
	}

	if t.Affinity2 == nil {
		return nil, fmt.Errorf("nil value for key Affinity2")
	}

	if t.Affinity3 == nil {
		return nil, fmt.Errorf("nil value for key Affinity3")
	}

	return map[string]interface{}{
		"affinity-type": t.AffinityType,
		"affinity1": *t.Affinity1,
		"affinity2": *t.Affinity2,
		"affinity3": *t.Affinity3,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/named-tunnels/tunnels/tunnel/tunnel-attributes/new-style-affinity-affinity-types/new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4 YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 struct {
	AffinityType	E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity	`path:"affinity-type" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity1	*string	`path:"affinity1" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity2	*string	`path:"affinity2" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity3	*string	`path:"affinity3" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity4	*string	`path:"affinity4" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 struct, which is a YANG list entry.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4) ΛListKeyMap() (map[string]interface{}, error) {

	if t.Affinity1 == nil {
		return nil, fmt.Errorf("nil value for key Affinity1")
	}

	if t.Affinity2 == nil {
		return nil, fmt.Errorf("nil value for key Affinity2")
	}

	if t.Affinity3 == nil {
		return nil, fmt.Errorf("nil value for key Affinity3")
	}

	if t.Affinity4 == nil {
		return nil, fmt.Errorf("nil value for key Affinity4")
	}

	return map[string]interface{}{
		"affinity-type": t.AffinityType,
		"affinity1": *t.Affinity1,
		"affinity2": *t.Affinity2,
		"affinity3": *t.Affinity3,
		"affinity4": *t.Affinity4,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/named-tunnels/tunnels/tunnel/tunnel-attributes/new-style-affinity-affinity-types/new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5 YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 struct {
	AffinityType	E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity	`path:"affinity-type" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity1	*string	`path:"affinity1" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity2	*string	`path:"affinity2" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity3	*string	`path:"affinity3" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity4	*string	`path:"affinity4" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity5	*string	`path:"affinity5" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 struct, which is a YANG list entry.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5) ΛListKeyMap() (map[string]interface{}, error) {

	if t.Affinity1 == nil {
		return nil, fmt.Errorf("nil value for key Affinity1")
	}

	if t.Affinity2 == nil {
		return nil, fmt.Errorf("nil value for key Affinity2")
	}

	if t.Affinity3 == nil {
		return nil, fmt.Errorf("nil value for key Affinity3")
	}

	if t.Affinity4 == nil {
		return nil, fmt.Errorf("nil value for key Affinity4")
	}

	if t.Affinity5 == nil {
		return nil, fmt.Errorf("nil value for key Affinity5")
	}

	return map[string]interface{}{
		"affinity-type": t.AffinityType,
		"affinity1": *t.Affinity1,
		"affinity2": *t.Affinity2,
		"affinity3": *t.Affinity3,
		"affinity4": *t.Affinity4,
		"affinity5": *t.Affinity5,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/named-tunnels/tunnels/tunnel/tunnel-attributes/new-style-affinity-affinity-types/new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6 YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 struct {
	AffinityType	E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity	`path:"affinity-type" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity1	*string	`path:"affinity1" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity2	*string	`path:"affinity2" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity3	*string	`path:"affinity3" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity4	*string	`path:"affinity4" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity5	*string	`path:"affinity5" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity6	*string	`path:"affinity6" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 struct, which is a YANG list entry.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6) ΛListKeyMap() (map[string]interface{}, error) {

	if t.Affinity1 == nil {
		return nil, fmt.Errorf("nil value for key Affinity1")
	}

	if t.Affinity2 == nil {
		return nil, fmt.Errorf("nil value for key Affinity2")
	}

	if t.Affinity3 == nil {
		return nil, fmt.Errorf("nil value for key Affinity3")
	}

	if t.Affinity4 == nil {
		return nil, fmt.Errorf("nil value for key Affinity4")
	}

	if t.Affinity5 == nil {
		return nil, fmt.Errorf("nil value for key Affinity5")
	}

	if t.Affinity6 == nil {
		return nil, fmt.Errorf("nil value for key Affinity6")
	}

	return map[string]interface{}{
		"affinity-type": t.AffinityType,
		"affinity1": *t.Affinity1,
		"affinity2": *t.Affinity2,
		"affinity3": *t.Affinity3,
		"affinity4": *t.Affinity4,
		"affinity5": *t.Affinity5,
		"affinity6": *t.Affinity6,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/named-tunnels/tunnels/tunnel/tunnel-attributes/new-style-affinity-affinity-types/new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7 YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 struct {
	AffinityType	E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity	`path:"affinity-type" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity1	*string	`path:"affinity1" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity2	*string	`path:"affinity2" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity3	*string	`path:"affinity3" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity4	*string	`path:"affinity4" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity5	*string	`path:"affinity5" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity6	*string	`path:"affinity6" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity7	*string	`path:"affinity7" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 struct, which is a YANG list entry.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7) ΛListKeyMap() (map[string]interface{}, error) {

	if t.Affinity1 == nil {
		return nil, fmt.Errorf("nil value for key Affinity1")
	}

	if t.Affinity2 == nil {
		return nil, fmt.Errorf("nil value for key Affinity2")
	}

	if t.Affinity3 == nil {
		return nil, fmt.Errorf("nil value for key Affinity3")
	}

	if t.Affinity4 == nil {
		return nil, fmt.Errorf("nil value for key Affinity4")
	}

	if t.Affinity5 == nil {
		return nil, fmt.Errorf("nil value for key Affinity5")
	}

	if t.Affinity6 == nil {
		return nil, fmt.Errorf("nil value for key Affinity6")
	}

	if t.Affinity7 == nil {
		return nil, fmt.Errorf("nil value for key Affinity7")
	}

	return map[string]interface{}{
		"affinity-type": t.AffinityType,
		"affinity1": *t.Affinity1,
		"affinity2": *t.Affinity2,
		"affinity3": *t.Affinity3,
		"affinity4": *t.Affinity4,
		"affinity5": *t.Affinity5,
		"affinity6": *t.Affinity6,
		"affinity7": *t.Affinity7,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/named-tunnels/tunnels/tunnel/tunnel-attributes/new-style-affinity-affinity-types/new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8 YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 struct {
	AffinityType	E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity	`path:"affinity-type" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity1	*string	`path:"affinity1" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity2	*string	`path:"affinity2" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity3	*string	`path:"affinity3" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity4	*string	`path:"affinity4" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity5	*string	`path:"affinity5" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity6	*string	`path:"affinity6" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity7	*string	`path:"affinity7" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity8	*string	`path:"affinity8" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 struct, which is a YANG list entry.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8) ΛListKeyMap() (map[string]interface{}, error) {

	if t.Affinity1 == nil {
		return nil, fmt.Errorf("nil value for key Affinity1")
	}

	if t.Affinity2 == nil {
		return nil, fmt.Errorf("nil value for key Affinity2")
	}

	if t.Affinity3 == nil {
		return nil, fmt.Errorf("nil value for key Affinity3")
	}

	if t.Affinity4 == nil {
		return nil, fmt.Errorf("nil value for key Affinity4")
	}

	if t.Affinity5 == nil {
		return nil, fmt.Errorf("nil value for key Affinity5")
	}

	if t.Affinity6 == nil {
		return nil, fmt.Errorf("nil value for key Affinity6")
	}

	if t.Affinity7 == nil {
		return nil, fmt.Errorf("nil value for key Affinity7")
	}

	if t.Affinity8 == nil {
		return nil, fmt.Errorf("nil value for key Affinity8")
	}

	return map[string]interface{}{
		"affinity-type": t.AffinityType,
		"affinity1": *t.Affinity1,
		"affinity2": *t.Affinity2,
		"affinity3": *t.Affinity3,
		"affinity4": *t.Affinity4,
		"affinity5": *t.Affinity5,
		"affinity6": *t.Affinity6,
		"affinity7": *t.Affinity7,
		"affinity8": *t.Affinity8,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/named-tunnels/tunnels/tunnel/tunnel-attributes/new-style-affinity-affinity-types/new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8-affinity9 YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 struct {
	AffinityType	E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity	`path:"affinity-type" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity1	*string	`path:"affinity1" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity2	*string	`path:"affinity2" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity3	*string	`path:"affinity3" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity4	*string	`path:"affinity4" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity5	*string	`path:"affinity5" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity6	*string	`path:"affinity6" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity7	*string	`path:"affinity7" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity8	*string	`path:"affinity8" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity9	*string	`path:"affinity9" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 struct, which is a YANG list entry.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9) ΛListKeyMap() (map[string]interface{}, error) {

	if t.Affinity1 == nil {
		return nil, fmt.Errorf("nil value for key Affinity1")
	}

	if t.Affinity2 == nil {
		return nil, fmt.Errorf("nil value for key Affinity2")
	}

	if t.Affinity3 == nil {
		return nil, fmt.Errorf("nil value for key Affinity3")
	}

	if t.Affinity4 == nil {
		return nil, fmt.Errorf("nil value for key Affinity4")
	}

	if t.Affinity5 == nil {
		return nil, fmt.Errorf("nil value for key Affinity5")
	}

	if t.Affinity6 == nil {
		return nil, fmt.Errorf("nil value for key Affinity6")
	}

	if t.Affinity7 == nil {
		return nil, fmt.Errorf("nil value for key Affinity7")
	}

	if t.Affinity8 == nil {
		return nil, fmt.Errorf("nil value for key Affinity8")
	}

	if t.Affinity9 == nil {
		return nil, fmt.Errorf("nil value for key Affinity9")
	}

	return map[string]interface{}{
		"affinity-type": t.AffinityType,
		"affinity1": *t.Affinity1,
		"affinity2": *t.Affinity2,
		"affinity3": *t.Affinity3,
		"affinity4": *t.Affinity4,
		"affinity5": *t.Affinity5,
		"affinity6": *t.Affinity6,
		"affinity7": *t.Affinity7,
		"affinity8": *t.Affinity8,
		"affinity9": *t.Affinity9,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/named-tunnels/tunnels/tunnel/tunnel-attributes/new-style-affinity-affinity-types/new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8-affinity9-affinity10 YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 struct {
	AffinityType	E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity	`path:"affinity-type" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity1	*string	`path:"affinity1" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity10	*string	`path:"affinity10" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity2	*string	`path:"affinity2" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity3	*string	`path:"affinity3" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity4	*string	`path:"affinity4" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity5	*string	`path:"affinity5" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity6	*string	`path:"affinity6" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity7	*string	`path:"affinity7" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity8	*string	`path:"affinity8" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Affinity9	*string	`path:"affinity9" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 struct, which is a YANG list entry.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10) ΛListKeyMap() (map[string]interface{}, error) {

	if t.Affinity1 == nil {
		return nil, fmt.Errorf("nil value for key Affinity1")
	}

	if t.Affinity10 == nil {
		return nil, fmt.Errorf("nil value for key Affinity10")
	}

	if t.Affinity2 == nil {
		return nil, fmt.Errorf("nil value for key Affinity2")
	}

	if t.Affinity3 == nil {
		return nil, fmt.Errorf("nil value for key Affinity3")
	}

	if t.Affinity4 == nil {
		return nil, fmt.Errorf("nil value for key Affinity4")
	}

	if t.Affinity5 == nil {
		return nil, fmt.Errorf("nil value for key Affinity5")
	}

	if t.Affinity6 == nil {
		return nil, fmt.Errorf("nil value for key Affinity6")
	}

	if t.Affinity7 == nil {
		return nil, fmt.Errorf("nil value for key Affinity7")
	}

	if t.Affinity8 == nil {
		return nil, fmt.Errorf("nil value for key Affinity8")
	}

	if t.Affinity9 == nil {
		return nil, fmt.Errorf("nil value for key Affinity9")
	}

	return map[string]interface{}{
		"affinity-type": t.AffinityType,
		"affinity1": *t.Affinity1,
		"affinity10": *t.Affinity10,
		"affinity2": *t.Affinity2,
		"affinity3": *t.Affinity3,
		"affinity4": *t.Affinity4,
		"affinity5": *t.Affinity5,
		"affinity6": *t.Affinity6,
		"affinity7": *t.Affinity7,
		"affinity8": *t.Affinity8,
		"affinity9": *t.Affinity9,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_PathSetups represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/named-tunnels/tunnels/tunnel/tunnel-attributes/path-setups YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_PathSetups struct {
	PathSetup	map[string]*Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_PathSetups_PathSetup	`path:"path-setup" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_PathSetups implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_PathSetups) IsYANGGoStruct() {}

// NewPathSetup creates a new entry in the PathSetup list of the
// Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_PathSetups struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_PathSetups) NewPathSetup(PathSetupName string) (*Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_PathSetups_PathSetup, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PathSetup == nil {
		t.PathSetup = make(map[string]*Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_PathSetups_PathSetup)
	}

	key := PathSetupName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.PathSetup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list PathSetup", key)
	}

	t.PathSetup[key] = &Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_PathSetups_PathSetup{
		PathSetupName: &PathSetupName,
	}

	return t.PathSetup[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_PathSetups) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_PathSetups"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_PathSetups) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_PathSetups) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_PathSetups.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_PathSetups) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_PathSetups_PathSetup represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/named-tunnels/tunnels/tunnel/tunnel-attributes/path-setups/path-setup YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_PathSetups_PathSetup struct {
	PathComputation	*Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_PathSetups_PathSetup_PathComputation	`path:"path-computation" module:"Cisco-IOS-XR-mpls-te-cfg"`
	PathSetupName	*string	`path:"path-setup-name" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Preference	*uint32	`path:"preference" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_PathSetups_PathSetup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_PathSetups_PathSetup) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_PathSetups_PathSetup struct, which is a YANG list entry.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_PathSetups_PathSetup) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PathSetupName == nil {
		return nil, fmt.Errorf("nil value for key PathSetupName")
	}

	return map[string]interface{}{
		"path-setup-name": *t.PathSetupName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_PathSetups_PathSetup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_PathSetups_PathSetup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_PathSetups_PathSetup) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_PathSetups_PathSetup) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_PathSetups_PathSetup.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_PathSetups_PathSetup) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_PathSetups_PathSetup_PathComputation represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/named-tunnels/tunnels/tunnel/tunnel-attributes/path-setups/path-setup/path-computation YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_PathSetups_PathSetup_PathComputation struct {
	ExplicitPathName	*string	`path:"explicit-path-name" module:"Cisco-IOS-XR-mpls-te-cfg"`
	PathComputationMethod	E_Cisco_IOS_XRMplsTeCfg_MplsTePathComputationMethod	`path:"path-computation-method" module:"Cisco-IOS-XR-mpls-te-cfg"`
	PathComputationServer	*string	`path:"path-computation-server" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_PathSetups_PathSetup_PathComputation implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_PathSetups_PathSetup_PathComputation) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_PathSetups_PathSetup_PathComputation) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_PathSetups_PathSetup_PathComputation"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_PathSetups_PathSetup_PathComputation) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_PathSetups_PathSetup_PathComputation) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_PathSetups_PathSetup_PathComputation.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_PathSetups_PathSetup_PathComputation) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Priority represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/named-tunnels/tunnels/tunnel/tunnel-attributes/priority YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Priority struct {
	HoldPriority	*uint32	`path:"hold-priority" module:"Cisco-IOS-XR-mpls-te-cfg"`
	SetupPriority	*uint32	`path:"setup-priority" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Priority implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Priority) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Priority) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Priority"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Priority) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Priority) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Priority.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Priority) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_TunnelPathSelection represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/named-tunnels/tunnels/tunnel/tunnel-attributes/tunnel-path-selection YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_TunnelPathSelection struct {
	Invalidation	*Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_TunnelPathSelection_Invalidation	`path:"invalidation" module:"Cisco-IOS-XR-mpls-te-cfg"`
	PathSelectionCostLimit	*uint32	`path:"path-selection-cost-limit" module:"Cisco-IOS-XR-mpls-te-cfg"`
	PathSelectionDelayLimit	*uint32	`path:"path-selection-delay-limit" module:"Cisco-IOS-XR-mpls-te-cfg"`
	PathSelectionHopLimit	*uint32	`path:"path-selection-hop-limit" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Tiebreaker	E_Cisco_IOS_XRMplsTeCfg_MplsTePathSelectionTiebreaker	`path:"tiebreaker" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_TunnelPathSelection implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_TunnelPathSelection) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_TunnelPathSelection) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_TunnelPathSelection"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_TunnelPathSelection) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_TunnelPathSelection) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_TunnelPathSelection.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_TunnelPathSelection) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_TunnelPathSelection_Invalidation represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/named-tunnels/tunnels/tunnel/tunnel-attributes/tunnel-path-selection/invalidation YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_TunnelPathSelection_Invalidation struct {
	PathInvalidationAction	E_Cisco_IOS_XRMplsTeCfg_PathInvalidationAction	`path:"path-invalidation-action" module:"Cisco-IOS-XR-mpls-te-cfg"`
	PathInvalidationTimeout	*uint32	`path:"path-invalidation-timeout" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_TunnelPathSelection_Invalidation implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_TunnelPathSelection_Invalidation) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_TunnelPathSelection_Invalidation) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_TunnelPathSelection_Invalidation"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_TunnelPathSelection_Invalidation) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_TunnelPathSelection_Invalidation) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_TunnelPathSelection_Invalidation.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_TunnelPathSelection_Invalidation) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelId represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/named-tunnels/tunnels/tunnel/tunnel-id YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelId struct {
	TunnelId	*uint32	`path:"tunnel-id" module:"Cisco-IOS-XR-mpls-te-cfg"`
	TunnelIdType	E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelId	`path:"tunnel-id-type" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelId implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelId) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelId) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelId"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelId) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelId) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelId.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelId) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/transport-profile YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile struct {
	Alarm	*Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Alarm	`path:"alarm" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Bfd	*Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Bfd	`path:"bfd" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Fault	*Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Fault	`path:"fault" module:"Cisco-IOS-XR-mpls-te-cfg"`
	GlobalId	*uint32	`path:"global-id" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Midpoints	*Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Midpoints	`path:"midpoints" module:"Cisco-IOS-XR-mpls-te-cfg"`
	NodeId	*string	`path:"node-id" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Alarm represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/transport-profile/alarm YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Alarm struct {
	EnableAlarm	YANGEmpty	`path:"enable-alarm" module:"Cisco-IOS-XR-mpls-te-cfg"`
	SoakTime	*uint32	`path:"soak-time" module:"Cisco-IOS-XR-mpls-te-cfg"`
	SuppressEvent	*Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Alarm_SuppressEvent	`path:"suppress-event" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Alarm implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Alarm) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Alarm) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Alarm"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Alarm) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Alarm) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Alarm.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Alarm) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Alarm_SuppressEvent represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/transport-profile/alarm/suppress-event YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Alarm_SuppressEvent struct {
	Disable	YANGEmpty	`path:"disable" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Alarm_SuppressEvent implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Alarm_SuppressEvent) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Alarm_SuppressEvent) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Alarm_SuppressEvent"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Alarm_SuppressEvent) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Alarm_SuppressEvent) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Alarm_SuppressEvent.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Alarm_SuppressEvent) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Bfd represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/transport-profile/bfd YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Bfd struct {
	DetectionMultiplier	*uint32	`path:"detection-multiplier" module:"Cisco-IOS-XR-mpls-te-cfg"`
	DetectionMultiplierStandby	*uint32	`path:"detection-multiplier-standby" module:"Cisco-IOS-XR-mpls-te-cfg"`
	MinInterval	*Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Bfd_MinInterval	`path:"min-interval" module:"Cisco-IOS-XR-mpls-te-cfg"`
	MinIntervalStandby	*Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Bfd_MinIntervalStandby	`path:"min-interval-standby" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Bfd implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Bfd) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Bfd) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Bfd"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Bfd) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Bfd) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Bfd.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Bfd) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Bfd_MinInterval represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/transport-profile/bfd/min-interval YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Bfd_MinInterval struct {
	IntervalMs	*uint32	`path:"interval-ms" module:"Cisco-IOS-XR-mpls-te-cfg"`
	IntervalUs	*uint32	`path:"interval-us" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Bfd_MinInterval implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Bfd_MinInterval) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Bfd_MinInterval) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Bfd_MinInterval"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Bfd_MinInterval) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Bfd_MinInterval) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Bfd_MinInterval.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Bfd_MinInterval) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Bfd_MinIntervalStandby represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/transport-profile/bfd/min-interval-standby YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Bfd_MinIntervalStandby struct {
	IntervalStandbyMs	*uint32	`path:"interval-standby-ms" module:"Cisco-IOS-XR-mpls-te-cfg"`
	IntervalStandbyUs	*uint32	`path:"interval-standby-us" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Bfd_MinIntervalStandby implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Bfd_MinIntervalStandby) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Bfd_MinIntervalStandby) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Bfd_MinIntervalStandby"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Bfd_MinIntervalStandby) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Bfd_MinIntervalStandby) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Bfd_MinIntervalStandby.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Bfd_MinIntervalStandby) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Fault represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/transport-profile/fault YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Fault struct {
	ProtectionTrigger	*Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Fault_ProtectionTrigger	`path:"protection-trigger" module:"Cisco-IOS-XR-mpls-te-cfg"`
	RefreshInterval	*uint32	`path:"refresh-interval" module:"Cisco-IOS-XR-mpls-te-cfg"`
	WaitToRestoreInterval	*uint32	`path:"wait-to-restore-interval" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Fault implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Fault) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Fault) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Fault"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Fault) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Fault) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Fault.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Fault) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Fault_ProtectionTrigger represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/transport-profile/fault/protection-trigger YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Fault_ProtectionTrigger struct {
	Ais	YANGEmpty	`path:"ais" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Ldi	*Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Fault_ProtectionTrigger_Ldi	`path:"ldi" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Lkr	*Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Fault_ProtectionTrigger_Lkr	`path:"lkr" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Fault_ProtectionTrigger implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Fault_ProtectionTrigger) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Fault_ProtectionTrigger) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Fault_ProtectionTrigger"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Fault_ProtectionTrigger) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Fault_ProtectionTrigger) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Fault_ProtectionTrigger.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Fault_ProtectionTrigger) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Fault_ProtectionTrigger_Ldi represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/transport-profile/fault/protection-trigger/ldi YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Fault_ProtectionTrigger_Ldi struct {
	Disable	YANGEmpty	`path:"disable" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Fault_ProtectionTrigger_Ldi implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Fault_ProtectionTrigger_Ldi) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Fault_ProtectionTrigger_Ldi) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Fault_ProtectionTrigger_Ldi"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Fault_ProtectionTrigger_Ldi) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Fault_ProtectionTrigger_Ldi) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Fault_ProtectionTrigger_Ldi.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Fault_ProtectionTrigger_Ldi) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Fault_ProtectionTrigger_Lkr represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/transport-profile/fault/protection-trigger/lkr YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Fault_ProtectionTrigger_Lkr struct {
	Disable	YANGEmpty	`path:"disable" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Fault_ProtectionTrigger_Lkr implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Fault_ProtectionTrigger_Lkr) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Fault_ProtectionTrigger_Lkr) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Fault_ProtectionTrigger_Lkr"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Fault_ProtectionTrigger_Lkr) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Fault_ProtectionTrigger_Lkr) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Fault_ProtectionTrigger_Lkr.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Fault_ProtectionTrigger_Lkr) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Midpoints represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/transport-profile/midpoints YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Midpoints struct {
	Midpoint	map[string]*Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Midpoints_Midpoint	`path:"midpoint" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Midpoints implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Midpoints) IsYANGGoStruct() {}

// NewMidpoint creates a new entry in the Midpoint list of the
// Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Midpoints struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Midpoints) NewMidpoint(MidpointName string) (*Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Midpoints_Midpoint, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Midpoint == nil {
		t.Midpoint = make(map[string]*Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Midpoints_Midpoint)
	}

	key := MidpointName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Midpoint[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Midpoint", key)
	}

	t.Midpoint[key] = &Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Midpoints_Midpoint{
		MidpointName: &MidpointName,
	}

	return t.Midpoint[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Midpoints) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Midpoints"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Midpoints) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Midpoints) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Midpoints.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Midpoints) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Midpoints_Midpoint represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/transport-profile/midpoints/midpoint YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Midpoints_Midpoint struct {
	Destination	*Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Midpoints_Midpoint_Destination	`path:"destination" module:"Cisco-IOS-XR-mpls-te-cfg"`
	ForwardLsp	*Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Midpoints_Midpoint_ForwardLsp	`path:"forward-lsp" module:"Cisco-IOS-XR-mpls-te-cfg"`
	LspId	*uint32	`path:"lsp-id" module:"Cisco-IOS-XR-mpls-te-cfg"`
	LspProtect	YANGEmpty	`path:"lsp-protect" module:"Cisco-IOS-XR-mpls-te-cfg"`
	MidpointName	*string	`path:"midpoint-name" module:"Cisco-IOS-XR-mpls-te-cfg"`
	ReverseLsp	*Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Midpoints_Midpoint_ReverseLsp	`path:"reverse-lsp" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Source	*Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Midpoints_Midpoint_Source	`path:"source" module:"Cisco-IOS-XR-mpls-te-cfg"`
	TunnelName	*string	`path:"tunnel-name" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Midpoints_Midpoint implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Midpoints_Midpoint) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Midpoints_Midpoint struct, which is a YANG list entry.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Midpoints_Midpoint) ΛListKeyMap() (map[string]interface{}, error) {
	if t.MidpointName == nil {
		return nil, fmt.Errorf("nil value for key MidpointName")
	}

	return map[string]interface{}{
		"midpoint-name": *t.MidpointName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Midpoints_Midpoint) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Midpoints_Midpoint"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Midpoints_Midpoint) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Midpoints_Midpoint) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Midpoints_Midpoint.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Midpoints_Midpoint) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Midpoints_Midpoint_Destination represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/transport-profile/midpoints/midpoint/destination YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Midpoints_Midpoint_Destination struct {
	GlobalId	*uint32	`path:"global-id" module:"Cisco-IOS-XR-mpls-te-cfg"`
	NodeId	*string	`path:"node-id" module:"Cisco-IOS-XR-mpls-te-cfg"`
	TunnelId	*uint32	`path:"tunnel-id" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Midpoints_Midpoint_Destination implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Midpoints_Midpoint_Destination) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Midpoints_Midpoint_Destination) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Midpoints_Midpoint_Destination"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Midpoints_Midpoint_Destination) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Midpoints_Midpoint_Destination) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Midpoints_Midpoint_Destination.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Midpoints_Midpoint_Destination) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Midpoints_Midpoint_ForwardLsp represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/transport-profile/midpoints/midpoint/forward-lsp YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Midpoints_Midpoint_ForwardLsp struct {
	ForwardBandwidth	*uint32	`path:"forward-bandwidth" module:"Cisco-IOS-XR-mpls-te-cfg"`
	ForwardIoMap	*Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Midpoints_Midpoint_ForwardLsp_ForwardIoMap	`path:"forward-io-map" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Midpoints_Midpoint_ForwardLsp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Midpoints_Midpoint_ForwardLsp) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Midpoints_Midpoint_ForwardLsp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Midpoints_Midpoint_ForwardLsp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Midpoints_Midpoint_ForwardLsp) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Midpoints_Midpoint_ForwardLsp) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Midpoints_Midpoint_ForwardLsp.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Midpoints_Midpoint_ForwardLsp) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Midpoints_Midpoint_ForwardLsp_ForwardIoMap represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/transport-profile/midpoints/midpoint/forward-lsp/forward-io-map YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Midpoints_Midpoint_ForwardLsp_ForwardIoMap struct {
	InLabel	*uint32	`path:"in-label" module:"Cisco-IOS-XR-mpls-te-cfg"`
	OutLabel	*uint32	`path:"out-label" module:"Cisco-IOS-XR-mpls-te-cfg"`
	OutLink	*uint32	`path:"out-link" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Midpoints_Midpoint_ForwardLsp_ForwardIoMap implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Midpoints_Midpoint_ForwardLsp_ForwardIoMap) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Midpoints_Midpoint_ForwardLsp_ForwardIoMap) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Midpoints_Midpoint_ForwardLsp_ForwardIoMap"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Midpoints_Midpoint_ForwardLsp_ForwardIoMap) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Midpoints_Midpoint_ForwardLsp_ForwardIoMap) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Midpoints_Midpoint_ForwardLsp_ForwardIoMap.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Midpoints_Midpoint_ForwardLsp_ForwardIoMap) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Midpoints_Midpoint_ReverseLsp represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/transport-profile/midpoints/midpoint/reverse-lsp YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Midpoints_Midpoint_ReverseLsp struct {
	ReverseBandwidth	*uint32	`path:"reverse-bandwidth" module:"Cisco-IOS-XR-mpls-te-cfg"`
	ReverseIoMap	*Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Midpoints_Midpoint_ReverseLsp_ReverseIoMap	`path:"reverse-io-map" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Midpoints_Midpoint_ReverseLsp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Midpoints_Midpoint_ReverseLsp) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Midpoints_Midpoint_ReverseLsp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Midpoints_Midpoint_ReverseLsp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Midpoints_Midpoint_ReverseLsp) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Midpoints_Midpoint_ReverseLsp) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Midpoints_Midpoint_ReverseLsp.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Midpoints_Midpoint_ReverseLsp) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Midpoints_Midpoint_ReverseLsp_ReverseIoMap represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/transport-profile/midpoints/midpoint/reverse-lsp/reverse-io-map YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Midpoints_Midpoint_ReverseLsp_ReverseIoMap struct {
	InLabel	*uint32	`path:"in-label" module:"Cisco-IOS-XR-mpls-te-cfg"`
	OutLabel	*uint32	`path:"out-label" module:"Cisco-IOS-XR-mpls-te-cfg"`
	OutLink	*uint32	`path:"out-link" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Midpoints_Midpoint_ReverseLsp_ReverseIoMap implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Midpoints_Midpoint_ReverseLsp_ReverseIoMap) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Midpoints_Midpoint_ReverseLsp_ReverseIoMap) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Midpoints_Midpoint_ReverseLsp_ReverseIoMap"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Midpoints_Midpoint_ReverseLsp_ReverseIoMap) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Midpoints_Midpoint_ReverseLsp_ReverseIoMap) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Midpoints_Midpoint_ReverseLsp_ReverseIoMap.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Midpoints_Midpoint_ReverseLsp_ReverseIoMap) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Midpoints_Midpoint_Source represents the /Cisco-IOS-XR-mpls-te-cfg/mpls-te/transport-profile/midpoints/midpoint/source YANG schema element.
type Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Midpoints_Midpoint_Source struct {
	GlobalId	*uint32	`path:"global-id" module:"Cisco-IOS-XR-mpls-te-cfg"`
	NodeId	*string	`path:"node-id" module:"Cisco-IOS-XR-mpls-te-cfg"`
	TunnelId	*uint32	`path:"tunnel-id" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Midpoints_Midpoint_Source implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Midpoints_Midpoint_Source) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Midpoints_Midpoint_Source) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Midpoints_Midpoint_Source"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Midpoints_Midpoint_Source) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Midpoints_Midpoint_Source) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Midpoints_Midpoint_Source.
func (*Cisco_IOS_XRMplsTeCfg_MplsTe_TransportProfile_Midpoints_Midpoint_Source) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRSnmpAgentCfg_Mib represents the /Cisco-IOS-XR-snmp-agent-cfg/mib YANG schema element.
type Cisco_IOS_XRSnmpAgentCfg_Mib struct {
	MplsFrrMib	*Cisco_IOS_XRSnmpAgentCfg_Mib_MplsFrrMib	`path:"mpls-frr-mib" module:"Cisco-IOS-XR-mpls-te-cfg"`
	MplsP2MpMib	*Cisco_IOS_XRSnmpAgentCfg_Mib_MplsP2MpMib	`path:"mpls-p2mp-mib" module:"Cisco-IOS-XR-mpls-te-cfg"`
	MplsTeExtMib	*Cisco_IOS_XRSnmpAgentCfg_Mib_MplsTeExtMib	`path:"mpls-te-ext-mib" module:"Cisco-IOS-XR-mpls-te-cfg"`
	MplsTeExtStdMib	*Cisco_IOS_XRSnmpAgentCfg_Mib_MplsTeExtStdMib	`path:"mpls-te-ext-std-mib" module:"Cisco-IOS-XR-mpls-te-cfg"`
	MplsTeMib	*Cisco_IOS_XRSnmpAgentCfg_Mib_MplsTeMib	`path:"mpls-te-mib" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSnmpAgentCfg_Mib implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSnmpAgentCfg_Mib) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Mib) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSnmpAgentCfg_Mib"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Mib) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSnmpAgentCfg_Mib) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSnmpAgentCfg_Mib.
func (*Cisco_IOS_XRSnmpAgentCfg_Mib) ΛBelongingModule() string {
	return "Cisco-IOS-XR-snmp-agent-cfg"
}


// Cisco_IOS_XRSnmpAgentCfg_Mib_MplsFrrMib represents the /Cisco-IOS-XR-snmp-agent-cfg/mib/mpls-frr-mib YANG schema element.
type Cisco_IOS_XRSnmpAgentCfg_Mib_MplsFrrMib struct {
	CacheTimer	*uint32	`path:"cache-timer" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSnmpAgentCfg_Mib_MplsFrrMib implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSnmpAgentCfg_Mib_MplsFrrMib) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Mib_MplsFrrMib) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSnmpAgentCfg_Mib_MplsFrrMib"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Mib_MplsFrrMib) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSnmpAgentCfg_Mib_MplsFrrMib) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSnmpAgentCfg_Mib_MplsFrrMib.
func (*Cisco_IOS_XRSnmpAgentCfg_Mib_MplsFrrMib) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRSnmpAgentCfg_Mib_MplsP2MpMib represents the /Cisco-IOS-XR-snmp-agent-cfg/mib/mpls-p2mp-mib YANG schema element.
type Cisco_IOS_XRSnmpAgentCfg_Mib_MplsP2MpMib struct {
	CacheTimer	*uint32	`path:"cache-timer" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSnmpAgentCfg_Mib_MplsP2MpMib implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSnmpAgentCfg_Mib_MplsP2MpMib) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Mib_MplsP2MpMib) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSnmpAgentCfg_Mib_MplsP2MpMib"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Mib_MplsP2MpMib) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSnmpAgentCfg_Mib_MplsP2MpMib) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSnmpAgentCfg_Mib_MplsP2MpMib.
func (*Cisco_IOS_XRSnmpAgentCfg_Mib_MplsP2MpMib) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRSnmpAgentCfg_Mib_MplsTeExtMib represents the /Cisco-IOS-XR-snmp-agent-cfg/mib/mpls-te-ext-mib YANG schema element.
type Cisco_IOS_XRSnmpAgentCfg_Mib_MplsTeExtMib struct {
	CacheTimer	*uint32	`path:"cache-timer" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSnmpAgentCfg_Mib_MplsTeExtMib implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSnmpAgentCfg_Mib_MplsTeExtMib) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Mib_MplsTeExtMib) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSnmpAgentCfg_Mib_MplsTeExtMib"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Mib_MplsTeExtMib) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSnmpAgentCfg_Mib_MplsTeExtMib) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSnmpAgentCfg_Mib_MplsTeExtMib.
func (*Cisco_IOS_XRSnmpAgentCfg_Mib_MplsTeExtMib) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRSnmpAgentCfg_Mib_MplsTeExtStdMib represents the /Cisco-IOS-XR-snmp-agent-cfg/mib/mpls-te-ext-std-mib YANG schema element.
type Cisco_IOS_XRSnmpAgentCfg_Mib_MplsTeExtStdMib struct {
	CacheTimer	*uint32	`path:"cache-timer" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSnmpAgentCfg_Mib_MplsTeExtStdMib implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSnmpAgentCfg_Mib_MplsTeExtStdMib) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Mib_MplsTeExtStdMib) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSnmpAgentCfg_Mib_MplsTeExtStdMib"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Mib_MplsTeExtStdMib) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSnmpAgentCfg_Mib_MplsTeExtStdMib) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSnmpAgentCfg_Mib_MplsTeExtStdMib.
func (*Cisco_IOS_XRSnmpAgentCfg_Mib_MplsTeExtStdMib) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRSnmpAgentCfg_Mib_MplsTeMib represents the /Cisco-IOS-XR-snmp-agent-cfg/mib/mpls-te-mib YANG schema element.
type Cisco_IOS_XRSnmpAgentCfg_Mib_MplsTeMib struct {
	CacheGarbageCollectTimer	*uint32	`path:"cache-garbage-collect-timer" module:"Cisco-IOS-XR-mpls-te-cfg"`
	CacheTimer	*uint32	`path:"cache-timer" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSnmpAgentCfg_Mib_MplsTeMib implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSnmpAgentCfg_Mib_MplsTeMib) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Mib_MplsTeMib) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSnmpAgentCfg_Mib_MplsTeMib"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Mib_MplsTeMib) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSnmpAgentCfg_Mib_MplsTeMib) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSnmpAgentCfg_Mib_MplsTeMib.
func (*Cisco_IOS_XRSnmpAgentCfg_Mib_MplsTeMib) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRSnmpAgentCfg_Snmp represents the /Cisco-IOS-XR-snmp-agent-cfg/snmp YANG schema element.
type Cisco_IOS_XRSnmpAgentCfg_Snmp struct {
	Administration	*Cisco_IOS_XRSnmpAgentCfg_Snmp_Administration	`path:"administration" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	Agent	*Cisco_IOS_XRSnmpAgentCfg_Snmp_Agent	`path:"agent" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	BulkStats	*Cisco_IOS_XRSnmpAgentCfg_Snmp_BulkStats	`path:"bulk-stats" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	ContextMappings	*Cisco_IOS_XRSnmpAgentCfg_Snmp_ContextMappings	`path:"context-mappings" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	Contexts	*Cisco_IOS_XRSnmpAgentCfg_Snmp_Contexts	`path:"contexts" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	Correlator	*Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator	`path:"correlator" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	DefaultCommunityMaps	*Cisco_IOS_XRSnmpAgentCfg_Snmp_DefaultCommunityMaps	`path:"default-community-maps" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	DropPacket	*Cisco_IOS_XRSnmpAgentCfg_Snmp_DropPacket	`path:"drop-packet" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	EncryptedCommunityMaps	*Cisco_IOS_XRSnmpAgentCfg_Snmp_EncryptedCommunityMaps	`path:"encrypted-community-maps" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	Groups	*Cisco_IOS_XRSnmpAgentCfg_Snmp_Groups	`path:"groups" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	InformPending	*uint32	`path:"inform-pending" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	InformRetries	*uint32	`path:"inform-retries" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	InformTimeout	*uint32	`path:"inform-timeout" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	Ipv4	*Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4	`path:"ipv4" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	Ipv6	*Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6	`path:"ipv6" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	Logging	*Cisco_IOS_XRSnmpAgentCfg_Snmp_Logging	`path:"logging" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	Notification	*Cisco_IOS_XRSnmpAgentCfg_Snmp_Notification	`path:"notification" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	OidPollStats	YANGEmpty	`path:"oid-poll-stats" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	OverloadControl	*Cisco_IOS_XRSnmpAgentCfg_Snmp_OverloadControl	`path:"overload-control" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	PacketSize	*uint32	`path:"packet-size" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	System	*Cisco_IOS_XRSnmpAgentCfg_Snmp_System	`path:"system" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	Target	*Cisco_IOS_XRSnmpAgentCfg_Snmp_Target	`path:"target" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	ThrottleTime	*uint32	`path:"throttle-time" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	Timeouts	*Cisco_IOS_XRSnmpAgentCfg_Snmp_Timeouts	`path:"timeouts" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	Trap	*Cisco_IOS_XRSnmpAgentCfg_Snmp_Trap	`path:"trap" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	TrapHosts	*Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts	`path:"trap-hosts" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	TrapPort	*uint32	`path:"trap-port" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	TrapSource	*string	`path:"trap-source" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	TrapSourceIpv4	*string	`path:"trap-source-ipv4" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	TrapSourceIpv6	*string	`path:"trap-source-ipv6" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	Type6EncryptedCommunityMaps	*Cisco_IOS_XRSnmpAgentCfg_Snmp_Type6EncryptedCommunityMaps	`path:"type6-encrypted-community-maps" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	Users	*Cisco_IOS_XRSnmpAgentCfg_Snmp_Users	`path:"users" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	Views	*Cisco_IOS_XRSnmpAgentCfg_Snmp_Views	`path:"views" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	VrfAuthenticationTrapDisable	YANGEmpty	`path:"vrf-authentication-trap-disable" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	Vrfs	*Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs	`path:"vrfs" module:"Cisco-IOS-XR-snmp-agent-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSnmpAgentCfg_Snmp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSnmpAgentCfg_Snmp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSnmpAgentCfg_Snmp.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp) ΛBelongingModule() string {
	return "Cisco-IOS-XR-snmp-agent-cfg"
}


// Cisco_IOS_XRSnmpAgentCfg_Snmp_Administration represents the /Cisco-IOS-XR-snmp-agent-cfg/snmp/administration YANG schema element.
type Cisco_IOS_XRSnmpAgentCfg_Snmp_Administration struct {
	DefaultCommunities	*Cisco_IOS_XRSnmpAgentCfg_Snmp_Administration_DefaultCommunities	`path:"default-communities" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	EncryptedCommunities	*Cisco_IOS_XRSnmpAgentCfg_Snmp_Administration_EncryptedCommunities	`path:"encrypted-communities" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	Type6EncryptedCommunities	*Cisco_IOS_XRSnmpAgentCfg_Snmp_Administration_Type6EncryptedCommunities	`path:"type6-encrypted-communities" module:"Cisco-IOS-XR-snmp-agent-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSnmpAgentCfg_Snmp_Administration implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Administration) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Administration) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSnmpAgentCfg_Snmp_Administration"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Administration) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Administration) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSnmpAgentCfg_Snmp_Administration.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Administration) ΛBelongingModule() string {
	return "Cisco-IOS-XR-snmp-agent-cfg"
}


// Cisco_IOS_XRSnmpAgentCfg_Snmp_Administration_DefaultCommunities represents the /Cisco-IOS-XR-snmp-agent-cfg/snmp/administration/default-communities YANG schema element.
type Cisco_IOS_XRSnmpAgentCfg_Snmp_Administration_DefaultCommunities struct {
	DefaultCommunity	map[string]*Cisco_IOS_XRSnmpAgentCfg_Snmp_Administration_DefaultCommunities_DefaultCommunity	`path:"default-community" module:"Cisco-IOS-XR-snmp-agent-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSnmpAgentCfg_Snmp_Administration_DefaultCommunities implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Administration_DefaultCommunities) IsYANGGoStruct() {}

// NewDefaultCommunity creates a new entry in the DefaultCommunity list of the
// Cisco_IOS_XRSnmpAgentCfg_Snmp_Administration_DefaultCommunities struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Administration_DefaultCommunities) NewDefaultCommunity(CommunityName string) (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Administration_DefaultCommunities_DefaultCommunity, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.DefaultCommunity == nil {
		t.DefaultCommunity = make(map[string]*Cisco_IOS_XRSnmpAgentCfg_Snmp_Administration_DefaultCommunities_DefaultCommunity)
	}

	key := CommunityName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.DefaultCommunity[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list DefaultCommunity", key)
	}

	t.DefaultCommunity[key] = &Cisco_IOS_XRSnmpAgentCfg_Snmp_Administration_DefaultCommunities_DefaultCommunity{
		CommunityName: &CommunityName,
	}

	return t.DefaultCommunity[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Administration_DefaultCommunities) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSnmpAgentCfg_Snmp_Administration_DefaultCommunities"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Administration_DefaultCommunities) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Administration_DefaultCommunities) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSnmpAgentCfg_Snmp_Administration_DefaultCommunities.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Administration_DefaultCommunities) ΛBelongingModule() string {
	return "Cisco-IOS-XR-snmp-agent-cfg"
}


// Cisco_IOS_XRSnmpAgentCfg_Snmp_Administration_DefaultCommunities_DefaultCommunity represents the /Cisco-IOS-XR-snmp-agent-cfg/snmp/administration/default-communities/default-community YANG schema element.
type Cisco_IOS_XRSnmpAgentCfg_Snmp_Administration_DefaultCommunities_DefaultCommunity struct {
	CommunityName	*string	`path:"community-name" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	Owner	E_Cisco_IOS_XRSnmpAgentCfg_SnmpOwnerAccess	`path:"owner" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	Priviledge	E_Cisco_IOS_XRSnmpAgentCfg_SnmpAccessLevel	`path:"priviledge" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	V4AccessList	*string	`path:"v4-access-list" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	V4AclType	E_Cisco_IOS_XRSnmpAgentCfg_Snmpacl	`path:"v4acl-type" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	V6AccessList	*string	`path:"v6-access-list" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	V6AclType	E_Cisco_IOS_XRSnmpAgentCfg_Snmpacl	`path:"v6acl-type" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	ViewName	*string	`path:"view-name" module:"Cisco-IOS-XR-snmp-agent-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSnmpAgentCfg_Snmp_Administration_DefaultCommunities_DefaultCommunity implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Administration_DefaultCommunities_DefaultCommunity) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRSnmpAgentCfg_Snmp_Administration_DefaultCommunities_DefaultCommunity struct, which is a YANG list entry.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Administration_DefaultCommunities_DefaultCommunity) ΛListKeyMap() (map[string]interface{}, error) {
	if t.CommunityName == nil {
		return nil, fmt.Errorf("nil value for key CommunityName")
	}

	return map[string]interface{}{
		"community-name": *t.CommunityName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Administration_DefaultCommunities_DefaultCommunity) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSnmpAgentCfg_Snmp_Administration_DefaultCommunities_DefaultCommunity"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Administration_DefaultCommunities_DefaultCommunity) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Administration_DefaultCommunities_DefaultCommunity) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSnmpAgentCfg_Snmp_Administration_DefaultCommunities_DefaultCommunity.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Administration_DefaultCommunities_DefaultCommunity) ΛBelongingModule() string {
	return "Cisco-IOS-XR-snmp-agent-cfg"
}


// Cisco_IOS_XRSnmpAgentCfg_Snmp_Administration_EncryptedCommunities represents the /Cisco-IOS-XR-snmp-agent-cfg/snmp/administration/encrypted-communities YANG schema element.
type Cisco_IOS_XRSnmpAgentCfg_Snmp_Administration_EncryptedCommunities struct {
	EncryptedCommunity	map[string]*Cisco_IOS_XRSnmpAgentCfg_Snmp_Administration_EncryptedCommunities_EncryptedCommunity	`path:"encrypted-community" module:"Cisco-IOS-XR-snmp-agent-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSnmpAgentCfg_Snmp_Administration_EncryptedCommunities implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Administration_EncryptedCommunities) IsYANGGoStruct() {}

// NewEncryptedCommunity creates a new entry in the EncryptedCommunity list of the
// Cisco_IOS_XRSnmpAgentCfg_Snmp_Administration_EncryptedCommunities struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Administration_EncryptedCommunities) NewEncryptedCommunity(CommunityName string) (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Administration_EncryptedCommunities_EncryptedCommunity, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.EncryptedCommunity == nil {
		t.EncryptedCommunity = make(map[string]*Cisco_IOS_XRSnmpAgentCfg_Snmp_Administration_EncryptedCommunities_EncryptedCommunity)
	}

	key := CommunityName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.EncryptedCommunity[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list EncryptedCommunity", key)
	}

	t.EncryptedCommunity[key] = &Cisco_IOS_XRSnmpAgentCfg_Snmp_Administration_EncryptedCommunities_EncryptedCommunity{
		CommunityName: &CommunityName,
	}

	return t.EncryptedCommunity[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Administration_EncryptedCommunities) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSnmpAgentCfg_Snmp_Administration_EncryptedCommunities"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Administration_EncryptedCommunities) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Administration_EncryptedCommunities) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSnmpAgentCfg_Snmp_Administration_EncryptedCommunities.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Administration_EncryptedCommunities) ΛBelongingModule() string {
	return "Cisco-IOS-XR-snmp-agent-cfg"
}


// Cisco_IOS_XRSnmpAgentCfg_Snmp_Administration_EncryptedCommunities_EncryptedCommunity represents the /Cisco-IOS-XR-snmp-agent-cfg/snmp/administration/encrypted-communities/encrypted-community YANG schema element.
type Cisco_IOS_XRSnmpAgentCfg_Snmp_Administration_EncryptedCommunities_EncryptedCommunity struct {
	CommunityName	*string	`path:"community-name" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	Owner	E_Cisco_IOS_XRSnmpAgentCfg_SnmpOwnerAccess	`path:"owner" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	Priviledge	E_Cisco_IOS_XRSnmpAgentCfg_SnmpAccessLevel	`path:"priviledge" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	V4AccessList	*string	`path:"v4-access-list" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	V4AclType	E_Cisco_IOS_XRSnmpAgentCfg_Snmpacl	`path:"v4acl-type" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	V6AccessList	*string	`path:"v6-access-list" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	V6AclType	E_Cisco_IOS_XRSnmpAgentCfg_Snmpacl	`path:"v6acl-type" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	ViewName	*string	`path:"view-name" module:"Cisco-IOS-XR-snmp-agent-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSnmpAgentCfg_Snmp_Administration_EncryptedCommunities_EncryptedCommunity implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Administration_EncryptedCommunities_EncryptedCommunity) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRSnmpAgentCfg_Snmp_Administration_EncryptedCommunities_EncryptedCommunity struct, which is a YANG list entry.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Administration_EncryptedCommunities_EncryptedCommunity) ΛListKeyMap() (map[string]interface{}, error) {
	if t.CommunityName == nil {
		return nil, fmt.Errorf("nil value for key CommunityName")
	}

	return map[string]interface{}{
		"community-name": *t.CommunityName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Administration_EncryptedCommunities_EncryptedCommunity) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSnmpAgentCfg_Snmp_Administration_EncryptedCommunities_EncryptedCommunity"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Administration_EncryptedCommunities_EncryptedCommunity) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Administration_EncryptedCommunities_EncryptedCommunity) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSnmpAgentCfg_Snmp_Administration_EncryptedCommunities_EncryptedCommunity.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Administration_EncryptedCommunities_EncryptedCommunity) ΛBelongingModule() string {
	return "Cisco-IOS-XR-snmp-agent-cfg"
}


// Cisco_IOS_XRSnmpAgentCfg_Snmp_Administration_Type6EncryptedCommunities represents the /Cisco-IOS-XR-snmp-agent-cfg/snmp/administration/type6-encrypted-communities YANG schema element.
type Cisco_IOS_XRSnmpAgentCfg_Snmp_Administration_Type6EncryptedCommunities struct {
	Type6EncryptedCommunity	map[string]*Cisco_IOS_XRSnmpAgentCfg_Snmp_Administration_Type6EncryptedCommunities_Type6EncryptedCommunity	`path:"type6-encrypted-community" module:"Cisco-IOS-XR-snmp-agent-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSnmpAgentCfg_Snmp_Administration_Type6EncryptedCommunities implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Administration_Type6EncryptedCommunities) IsYANGGoStruct() {}

// NewType6EncryptedCommunity creates a new entry in the Type6EncryptedCommunity list of the
// Cisco_IOS_XRSnmpAgentCfg_Snmp_Administration_Type6EncryptedCommunities struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Administration_Type6EncryptedCommunities) NewType6EncryptedCommunity(CommunityName string) (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Administration_Type6EncryptedCommunities_Type6EncryptedCommunity, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Type6EncryptedCommunity == nil {
		t.Type6EncryptedCommunity = make(map[string]*Cisco_IOS_XRSnmpAgentCfg_Snmp_Administration_Type6EncryptedCommunities_Type6EncryptedCommunity)
	}

	key := CommunityName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Type6EncryptedCommunity[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Type6EncryptedCommunity", key)
	}

	t.Type6EncryptedCommunity[key] = &Cisco_IOS_XRSnmpAgentCfg_Snmp_Administration_Type6EncryptedCommunities_Type6EncryptedCommunity{
		CommunityName: &CommunityName,
	}

	return t.Type6EncryptedCommunity[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Administration_Type6EncryptedCommunities) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSnmpAgentCfg_Snmp_Administration_Type6EncryptedCommunities"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Administration_Type6EncryptedCommunities) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Administration_Type6EncryptedCommunities) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSnmpAgentCfg_Snmp_Administration_Type6EncryptedCommunities.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Administration_Type6EncryptedCommunities) ΛBelongingModule() string {
	return "Cisco-IOS-XR-snmp-agent-cfg"
}


// Cisco_IOS_XRSnmpAgentCfg_Snmp_Administration_Type6EncryptedCommunities_Type6EncryptedCommunity represents the /Cisco-IOS-XR-snmp-agent-cfg/snmp/administration/type6-encrypted-communities/type6-encrypted-community YANG schema element.
type Cisco_IOS_XRSnmpAgentCfg_Snmp_Administration_Type6EncryptedCommunities_Type6EncryptedCommunity struct {
	CommunityName	*string	`path:"community-name" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	Owner	E_Cisco_IOS_XRSnmpAgentCfg_SnmpOwnerAccess	`path:"owner" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	Priviledge	E_Cisco_IOS_XRSnmpAgentCfg_SnmpAccessLevel	`path:"priviledge" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	V4AccessList	*string	`path:"v4-access-list" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	V4AclType	E_Cisco_IOS_XRSnmpAgentCfg_Snmpacl	`path:"v4acl-type" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	V6AccessList	*string	`path:"v6-access-list" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	V6AclType	E_Cisco_IOS_XRSnmpAgentCfg_Snmpacl	`path:"v6acl-type" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	ViewName	*string	`path:"view-name" module:"Cisco-IOS-XR-snmp-agent-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSnmpAgentCfg_Snmp_Administration_Type6EncryptedCommunities_Type6EncryptedCommunity implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Administration_Type6EncryptedCommunities_Type6EncryptedCommunity) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRSnmpAgentCfg_Snmp_Administration_Type6EncryptedCommunities_Type6EncryptedCommunity struct, which is a YANG list entry.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Administration_Type6EncryptedCommunities_Type6EncryptedCommunity) ΛListKeyMap() (map[string]interface{}, error) {
	if t.CommunityName == nil {
		return nil, fmt.Errorf("nil value for key CommunityName")
	}

	return map[string]interface{}{
		"community-name": *t.CommunityName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Administration_Type6EncryptedCommunities_Type6EncryptedCommunity) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSnmpAgentCfg_Snmp_Administration_Type6EncryptedCommunities_Type6EncryptedCommunity"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Administration_Type6EncryptedCommunities_Type6EncryptedCommunity) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Administration_Type6EncryptedCommunities_Type6EncryptedCommunity) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSnmpAgentCfg_Snmp_Administration_Type6EncryptedCommunities_Type6EncryptedCommunity.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Administration_Type6EncryptedCommunities_Type6EncryptedCommunity) ΛBelongingModule() string {
	return "Cisco-IOS-XR-snmp-agent-cfg"
}


// Cisco_IOS_XRSnmpAgentCfg_Snmp_Agent represents the /Cisco-IOS-XR-snmp-agent-cfg/snmp/agent YANG schema element.
type Cisco_IOS_XRSnmpAgentCfg_Snmp_Agent struct {
	EngineId	*Cisco_IOS_XRSnmpAgentCfg_Snmp_Agent_EngineId	`path:"engine-id" module:"Cisco-IOS-XR-snmp-agent-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSnmpAgentCfg_Snmp_Agent implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Agent) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Agent) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSnmpAgentCfg_Snmp_Agent"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Agent) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Agent) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSnmpAgentCfg_Snmp_Agent.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Agent) ΛBelongingModule() string {
	return "Cisco-IOS-XR-snmp-agent-cfg"
}


// Cisco_IOS_XRSnmpAgentCfg_Snmp_Agent_EngineId represents the /Cisco-IOS-XR-snmp-agent-cfg/snmp/agent/engine-id YANG schema element.
type Cisco_IOS_XRSnmpAgentCfg_Snmp_Agent_EngineId struct {
	Local	*string	`path:"local" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	Remotes	*Cisco_IOS_XRSnmpAgentCfg_Snmp_Agent_EngineId_Remotes	`path:"remotes" module:"Cisco-IOS-XR-snmp-agent-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSnmpAgentCfg_Snmp_Agent_EngineId implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Agent_EngineId) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Agent_EngineId) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSnmpAgentCfg_Snmp_Agent_EngineId"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Agent_EngineId) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Agent_EngineId) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSnmpAgentCfg_Snmp_Agent_EngineId.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Agent_EngineId) ΛBelongingModule() string {
	return "Cisco-IOS-XR-snmp-agent-cfg"
}


// Cisco_IOS_XRSnmpAgentCfg_Snmp_Agent_EngineId_Remotes represents the /Cisco-IOS-XR-snmp-agent-cfg/snmp/agent/engine-id/remotes YANG schema element.
type Cisco_IOS_XRSnmpAgentCfg_Snmp_Agent_EngineId_Remotes struct {
	Remote	map[string]*Cisco_IOS_XRSnmpAgentCfg_Snmp_Agent_EngineId_Remotes_Remote	`path:"remote" module:"Cisco-IOS-XR-snmp-agent-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSnmpAgentCfg_Snmp_Agent_EngineId_Remotes implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Agent_EngineId_Remotes) IsYANGGoStruct() {}

// NewRemote creates a new entry in the Remote list of the
// Cisco_IOS_XRSnmpAgentCfg_Snmp_Agent_EngineId_Remotes struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Agent_EngineId_Remotes) NewRemote(RemoteAddress string) (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Agent_EngineId_Remotes_Remote, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Remote == nil {
		t.Remote = make(map[string]*Cisco_IOS_XRSnmpAgentCfg_Snmp_Agent_EngineId_Remotes_Remote)
	}

	key := RemoteAddress

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Remote[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Remote", key)
	}

	t.Remote[key] = &Cisco_IOS_XRSnmpAgentCfg_Snmp_Agent_EngineId_Remotes_Remote{
		RemoteAddress: &RemoteAddress,
	}

	return t.Remote[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Agent_EngineId_Remotes) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSnmpAgentCfg_Snmp_Agent_EngineId_Remotes"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Agent_EngineId_Remotes) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Agent_EngineId_Remotes) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSnmpAgentCfg_Snmp_Agent_EngineId_Remotes.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Agent_EngineId_Remotes) ΛBelongingModule() string {
	return "Cisco-IOS-XR-snmp-agent-cfg"
}


// Cisco_IOS_XRSnmpAgentCfg_Snmp_Agent_EngineId_Remotes_Remote represents the /Cisco-IOS-XR-snmp-agent-cfg/snmp/agent/engine-id/remotes/remote YANG schema element.
type Cisco_IOS_XRSnmpAgentCfg_Snmp_Agent_EngineId_Remotes_Remote struct {
	Port	*uint16	`path:"port" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	RemoteAddress	*string	`path:"remote-address" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	RemoteEngineId	*string	`path:"remote-engine-id" module:"Cisco-IOS-XR-snmp-agent-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSnmpAgentCfg_Snmp_Agent_EngineId_Remotes_Remote implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Agent_EngineId_Remotes_Remote) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRSnmpAgentCfg_Snmp_Agent_EngineId_Remotes_Remote struct, which is a YANG list entry.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Agent_EngineId_Remotes_Remote) ΛListKeyMap() (map[string]interface{}, error) {
	if t.RemoteAddress == nil {
		return nil, fmt.Errorf("nil value for key RemoteAddress")
	}

	return map[string]interface{}{
		"remote-address": *t.RemoteAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Agent_EngineId_Remotes_Remote) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSnmpAgentCfg_Snmp_Agent_EngineId_Remotes_Remote"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Agent_EngineId_Remotes_Remote) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Agent_EngineId_Remotes_Remote) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSnmpAgentCfg_Snmp_Agent_EngineId_Remotes_Remote.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Agent_EngineId_Remotes_Remote) ΛBelongingModule() string {
	return "Cisco-IOS-XR-snmp-agent-cfg"
}


// Cisco_IOS_XRSnmpAgentCfg_Snmp_BulkStats represents the /Cisco-IOS-XR-snmp-agent-cfg/snmp/bulk-stats YANG schema element.
type Cisco_IOS_XRSnmpAgentCfg_Snmp_BulkStats struct {
	Memory	*uint32	`path:"memory" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	Objects	*Cisco_IOS_XRSnmpAgentCfg_Snmp_BulkStats_Objects	`path:"objects" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	Schemas	*Cisco_IOS_XRSnmpAgentCfg_Snmp_BulkStats_Schemas	`path:"schemas" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	Transfers	*Cisco_IOS_XRSnmpAgentCfg_Snmp_BulkStats_Transfers	`path:"transfers" module:"Cisco-IOS-XR-snmp-agent-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSnmpAgentCfg_Snmp_BulkStats implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_BulkStats) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_BulkStats) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSnmpAgentCfg_Snmp_BulkStats"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_BulkStats) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_BulkStats) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSnmpAgentCfg_Snmp_BulkStats.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_BulkStats) ΛBelongingModule() string {
	return "Cisco-IOS-XR-snmp-agent-cfg"
}


// Cisco_IOS_XRSnmpAgentCfg_Snmp_BulkStats_Objects represents the /Cisco-IOS-XR-snmp-agent-cfg/snmp/bulk-stats/objects YANG schema element.
type Cisco_IOS_XRSnmpAgentCfg_Snmp_BulkStats_Objects struct {
	Object	map[string]*Cisco_IOS_XRSnmpAgentCfg_Snmp_BulkStats_Objects_Object	`path:"object" module:"Cisco-IOS-XR-snmp-agent-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSnmpAgentCfg_Snmp_BulkStats_Objects implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_BulkStats_Objects) IsYANGGoStruct() {}

// NewObject creates a new entry in the Object list of the
// Cisco_IOS_XRSnmpAgentCfg_Snmp_BulkStats_Objects struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_BulkStats_Objects) NewObject(ObjectListName string) (*Cisco_IOS_XRSnmpAgentCfg_Snmp_BulkStats_Objects_Object, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Object == nil {
		t.Object = make(map[string]*Cisco_IOS_XRSnmpAgentCfg_Snmp_BulkStats_Objects_Object)
	}

	key := ObjectListName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Object[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Object", key)
	}

	t.Object[key] = &Cisco_IOS_XRSnmpAgentCfg_Snmp_BulkStats_Objects_Object{
		ObjectListName: &ObjectListName,
	}

	return t.Object[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_BulkStats_Objects) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSnmpAgentCfg_Snmp_BulkStats_Objects"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_BulkStats_Objects) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_BulkStats_Objects) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSnmpAgentCfg_Snmp_BulkStats_Objects.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_BulkStats_Objects) ΛBelongingModule() string {
	return "Cisco-IOS-XR-snmp-agent-cfg"
}


// Cisco_IOS_XRSnmpAgentCfg_Snmp_BulkStats_Objects_Object represents the /Cisco-IOS-XR-snmp-agent-cfg/snmp/bulk-stats/objects/object YANG schema element.
type Cisco_IOS_XRSnmpAgentCfg_Snmp_BulkStats_Objects_Object struct {
	ObjectListName	*string	`path:"object-list-name" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	Objects	*Cisco_IOS_XRSnmpAgentCfg_Snmp_BulkStats_Objects_Object_Objects	`path:"objects" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	Type	YANGEmpty	`path:"type" module:"Cisco-IOS-XR-snmp-agent-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSnmpAgentCfg_Snmp_BulkStats_Objects_Object implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_BulkStats_Objects_Object) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRSnmpAgentCfg_Snmp_BulkStats_Objects_Object struct, which is a YANG list entry.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_BulkStats_Objects_Object) ΛListKeyMap() (map[string]interface{}, error) {
	if t.ObjectListName == nil {
		return nil, fmt.Errorf("nil value for key ObjectListName")
	}

	return map[string]interface{}{
		"object-list-name": *t.ObjectListName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_BulkStats_Objects_Object) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSnmpAgentCfg_Snmp_BulkStats_Objects_Object"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_BulkStats_Objects_Object) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_BulkStats_Objects_Object) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSnmpAgentCfg_Snmp_BulkStats_Objects_Object.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_BulkStats_Objects_Object) ΛBelongingModule() string {
	return "Cisco-IOS-XR-snmp-agent-cfg"
}


// Cisco_IOS_XRSnmpAgentCfg_Snmp_BulkStats_Objects_Object_Objects represents the /Cisco-IOS-XR-snmp-agent-cfg/snmp/bulk-stats/objects/object/objects YANG schema element.
type Cisco_IOS_XRSnmpAgentCfg_Snmp_BulkStats_Objects_Object_Objects struct {
	Object	map[string]*Cisco_IOS_XRSnmpAgentCfg_Snmp_BulkStats_Objects_Object_Objects_Object	`path:"object" module:"Cisco-IOS-XR-snmp-agent-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSnmpAgentCfg_Snmp_BulkStats_Objects_Object_Objects implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_BulkStats_Objects_Object_Objects) IsYANGGoStruct() {}

// NewObject creates a new entry in the Object list of the
// Cisco_IOS_XRSnmpAgentCfg_Snmp_BulkStats_Objects_Object_Objects struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_BulkStats_Objects_Object_Objects) NewObject(Oid string) (*Cisco_IOS_XRSnmpAgentCfg_Snmp_BulkStats_Objects_Object_Objects_Object, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Object == nil {
		t.Object = make(map[string]*Cisco_IOS_XRSnmpAgentCfg_Snmp_BulkStats_Objects_Object_Objects_Object)
	}

	key := Oid

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Object[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Object", key)
	}

	t.Object[key] = &Cisco_IOS_XRSnmpAgentCfg_Snmp_BulkStats_Objects_Object_Objects_Object{
		Oid: &Oid,
	}

	return t.Object[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_BulkStats_Objects_Object_Objects) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSnmpAgentCfg_Snmp_BulkStats_Objects_Object_Objects"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_BulkStats_Objects_Object_Objects) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_BulkStats_Objects_Object_Objects) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSnmpAgentCfg_Snmp_BulkStats_Objects_Object_Objects.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_BulkStats_Objects_Object_Objects) ΛBelongingModule() string {
	return "Cisco-IOS-XR-snmp-agent-cfg"
}


// Cisco_IOS_XRSnmpAgentCfg_Snmp_BulkStats_Objects_Object_Objects_Object represents the /Cisco-IOS-XR-snmp-agent-cfg/snmp/bulk-stats/objects/object/objects/object YANG schema element.
type Cisco_IOS_XRSnmpAgentCfg_Snmp_BulkStats_Objects_Object_Objects_Object struct {
	Oid	*string	`path:"oid" module:"Cisco-IOS-XR-snmp-agent-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSnmpAgentCfg_Snmp_BulkStats_Objects_Object_Objects_Object implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_BulkStats_Objects_Object_Objects_Object) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRSnmpAgentCfg_Snmp_BulkStats_Objects_Object_Objects_Object struct, which is a YANG list entry.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_BulkStats_Objects_Object_Objects_Object) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Oid == nil {
		return nil, fmt.Errorf("nil value for key Oid")
	}

	return map[string]interface{}{
		"oid": *t.Oid,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_BulkStats_Objects_Object_Objects_Object) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSnmpAgentCfg_Snmp_BulkStats_Objects_Object_Objects_Object"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_BulkStats_Objects_Object_Objects_Object) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_BulkStats_Objects_Object_Objects_Object) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSnmpAgentCfg_Snmp_BulkStats_Objects_Object_Objects_Object.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_BulkStats_Objects_Object_Objects_Object) ΛBelongingModule() string {
	return "Cisco-IOS-XR-snmp-agent-cfg"
}


// Cisco_IOS_XRSnmpAgentCfg_Snmp_BulkStats_Schemas represents the /Cisco-IOS-XR-snmp-agent-cfg/snmp/bulk-stats/schemas YANG schema element.
type Cisco_IOS_XRSnmpAgentCfg_Snmp_BulkStats_Schemas struct {
	Schema	map[string]*Cisco_IOS_XRSnmpAgentCfg_Snmp_BulkStats_Schemas_Schema	`path:"schema" module:"Cisco-IOS-XR-snmp-agent-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSnmpAgentCfg_Snmp_BulkStats_Schemas implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_BulkStats_Schemas) IsYANGGoStruct() {}

// NewSchema creates a new entry in the Schema list of the
// Cisco_IOS_XRSnmpAgentCfg_Snmp_BulkStats_Schemas struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_BulkStats_Schemas) NewSchema(SchemaName string) (*Cisco_IOS_XRSnmpAgentCfg_Snmp_BulkStats_Schemas_Schema, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Schema == nil {
		t.Schema = make(map[string]*Cisco_IOS_XRSnmpAgentCfg_Snmp_BulkStats_Schemas_Schema)
	}

	key := SchemaName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Schema[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Schema", key)
	}

	t.Schema[key] = &Cisco_IOS_XRSnmpAgentCfg_Snmp_BulkStats_Schemas_Schema{
		SchemaName: &SchemaName,
	}

	return t.Schema[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_BulkStats_Schemas) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSnmpAgentCfg_Snmp_BulkStats_Schemas"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_BulkStats_Schemas) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_BulkStats_Schemas) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSnmpAgentCfg_Snmp_BulkStats_Schemas.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_BulkStats_Schemas) ΛBelongingModule() string {
	return "Cisco-IOS-XR-snmp-agent-cfg"
}


// Cisco_IOS_XRSnmpAgentCfg_Snmp_BulkStats_Schemas_Schema represents the /Cisco-IOS-XR-snmp-agent-cfg/snmp/bulk-stats/schemas/schema YANG schema element.
type Cisco_IOS_XRSnmpAgentCfg_Snmp_BulkStats_Schemas_Schema struct {
	Instance	*Cisco_IOS_XRSnmpAgentCfg_Snmp_BulkStats_Schemas_Schema_Instance	`path:"instance" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	PollInterval	*uint32	`path:"poll-interval" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	SchemaName	*string	`path:"schema-name" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	SchemaObjectList	*string	`path:"schema-object-list" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	Type	YANGEmpty	`path:"type" module:"Cisco-IOS-XR-snmp-agent-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSnmpAgentCfg_Snmp_BulkStats_Schemas_Schema implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_BulkStats_Schemas_Schema) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRSnmpAgentCfg_Snmp_BulkStats_Schemas_Schema struct, which is a YANG list entry.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_BulkStats_Schemas_Schema) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SchemaName == nil {
		return nil, fmt.Errorf("nil value for key SchemaName")
	}

	return map[string]interface{}{
		"schema-name": *t.SchemaName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_BulkStats_Schemas_Schema) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSnmpAgentCfg_Snmp_BulkStats_Schemas_Schema"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_BulkStats_Schemas_Schema) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_BulkStats_Schemas_Schema) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSnmpAgentCfg_Snmp_BulkStats_Schemas_Schema.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_BulkStats_Schemas_Schema) ΛBelongingModule() string {
	return "Cisco-IOS-XR-snmp-agent-cfg"
}


// Cisco_IOS_XRSnmpAgentCfg_Snmp_BulkStats_Schemas_Schema_Instance represents the /Cisco-IOS-XR-snmp-agent-cfg/snmp/bulk-stats/schemas/schema/instance YANG schema element.
type Cisco_IOS_XRSnmpAgentCfg_Snmp_BulkStats_Schemas_Schema_Instance struct {
	End	*string	`path:"end" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	Instance	*string	`path:"instance" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	Max	*uint32	`path:"max" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	Start	*string	`path:"start" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	SubInterface	*bool	`path:"sub-interface" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	Type	E_Cisco_IOS_XRSnmpAgentCfg_SnmpBulkstatSchema	`path:"type" module:"Cisco-IOS-XR-snmp-agent-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSnmpAgentCfg_Snmp_BulkStats_Schemas_Schema_Instance implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_BulkStats_Schemas_Schema_Instance) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_BulkStats_Schemas_Schema_Instance) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSnmpAgentCfg_Snmp_BulkStats_Schemas_Schema_Instance"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_BulkStats_Schemas_Schema_Instance) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_BulkStats_Schemas_Schema_Instance) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSnmpAgentCfg_Snmp_BulkStats_Schemas_Schema_Instance.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_BulkStats_Schemas_Schema_Instance) ΛBelongingModule() string {
	return "Cisco-IOS-XR-snmp-agent-cfg"
}


// Cisco_IOS_XRSnmpAgentCfg_Snmp_BulkStats_Transfers represents the /Cisco-IOS-XR-snmp-agent-cfg/snmp/bulk-stats/transfers YANG schema element.
type Cisco_IOS_XRSnmpAgentCfg_Snmp_BulkStats_Transfers struct {
	Transfer	map[string]*Cisco_IOS_XRSnmpAgentCfg_Snmp_BulkStats_Transfers_Transfer	`path:"transfer" module:"Cisco-IOS-XR-snmp-agent-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSnmpAgentCfg_Snmp_BulkStats_Transfers implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_BulkStats_Transfers) IsYANGGoStruct() {}

// NewTransfer creates a new entry in the Transfer list of the
// Cisco_IOS_XRSnmpAgentCfg_Snmp_BulkStats_Transfers struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_BulkStats_Transfers) NewTransfer(TransferName string) (*Cisco_IOS_XRSnmpAgentCfg_Snmp_BulkStats_Transfers_Transfer, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Transfer == nil {
		t.Transfer = make(map[string]*Cisco_IOS_XRSnmpAgentCfg_Snmp_BulkStats_Transfers_Transfer)
	}

	key := TransferName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Transfer[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Transfer", key)
	}

	t.Transfer[key] = &Cisco_IOS_XRSnmpAgentCfg_Snmp_BulkStats_Transfers_Transfer{
		TransferName: &TransferName,
	}

	return t.Transfer[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_BulkStats_Transfers) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSnmpAgentCfg_Snmp_BulkStats_Transfers"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_BulkStats_Transfers) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_BulkStats_Transfers) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSnmpAgentCfg_Snmp_BulkStats_Transfers.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_BulkStats_Transfers) ΛBelongingModule() string {
	return "Cisco-IOS-XR-snmp-agent-cfg"
}


// Cisco_IOS_XRSnmpAgentCfg_Snmp_BulkStats_Transfers_Transfer represents the /Cisco-IOS-XR-snmp-agent-cfg/snmp/bulk-stats/transfers/transfer YANG schema element.
type Cisco_IOS_XRSnmpAgentCfg_Snmp_BulkStats_Transfers_Transfer struct {
	BufferSize	*uint32	`path:"buffer-size" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	Enable	YANGEmpty	`path:"enable" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	Format	E_Cisco_IOS_XRSnmpAgentCfg_SnmpBulkstatFileFormat	`path:"format" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	Interval	*uint32	`path:"interval" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	Primary	*string	`path:"primary" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	Retain	*uint32	`path:"retain" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	Retry	*uint32	`path:"retry" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	Secondary	*string	`path:"secondary" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	TransferName	*string	`path:"transfer-name" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	TransferSchemas	*Cisco_IOS_XRSnmpAgentCfg_Snmp_BulkStats_Transfers_Transfer_TransferSchemas	`path:"transfer-schemas" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	Type	YANGEmpty	`path:"type" module:"Cisco-IOS-XR-snmp-agent-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSnmpAgentCfg_Snmp_BulkStats_Transfers_Transfer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_BulkStats_Transfers_Transfer) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRSnmpAgentCfg_Snmp_BulkStats_Transfers_Transfer struct, which is a YANG list entry.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_BulkStats_Transfers_Transfer) ΛListKeyMap() (map[string]interface{}, error) {
	if t.TransferName == nil {
		return nil, fmt.Errorf("nil value for key TransferName")
	}

	return map[string]interface{}{
		"transfer-name": *t.TransferName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_BulkStats_Transfers_Transfer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSnmpAgentCfg_Snmp_BulkStats_Transfers_Transfer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_BulkStats_Transfers_Transfer) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_BulkStats_Transfers_Transfer) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSnmpAgentCfg_Snmp_BulkStats_Transfers_Transfer.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_BulkStats_Transfers_Transfer) ΛBelongingModule() string {
	return "Cisco-IOS-XR-snmp-agent-cfg"
}


// Cisco_IOS_XRSnmpAgentCfg_Snmp_BulkStats_Transfers_Transfer_TransferSchemas represents the /Cisco-IOS-XR-snmp-agent-cfg/snmp/bulk-stats/transfers/transfer/transfer-schemas YANG schema element.
type Cisco_IOS_XRSnmpAgentCfg_Snmp_BulkStats_Transfers_Transfer_TransferSchemas struct {
	TransferSchema	map[string]*Cisco_IOS_XRSnmpAgentCfg_Snmp_BulkStats_Transfers_Transfer_TransferSchemas_TransferSchema	`path:"transfer-schema" module:"Cisco-IOS-XR-snmp-agent-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSnmpAgentCfg_Snmp_BulkStats_Transfers_Transfer_TransferSchemas implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_BulkStats_Transfers_Transfer_TransferSchemas) IsYANGGoStruct() {}

// NewTransferSchema creates a new entry in the TransferSchema list of the
// Cisco_IOS_XRSnmpAgentCfg_Snmp_BulkStats_Transfers_Transfer_TransferSchemas struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_BulkStats_Transfers_Transfer_TransferSchemas) NewTransferSchema(SchemaName string) (*Cisco_IOS_XRSnmpAgentCfg_Snmp_BulkStats_Transfers_Transfer_TransferSchemas_TransferSchema, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.TransferSchema == nil {
		t.TransferSchema = make(map[string]*Cisco_IOS_XRSnmpAgentCfg_Snmp_BulkStats_Transfers_Transfer_TransferSchemas_TransferSchema)
	}

	key := SchemaName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.TransferSchema[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list TransferSchema", key)
	}

	t.TransferSchema[key] = &Cisco_IOS_XRSnmpAgentCfg_Snmp_BulkStats_Transfers_Transfer_TransferSchemas_TransferSchema{
		SchemaName: &SchemaName,
	}

	return t.TransferSchema[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_BulkStats_Transfers_Transfer_TransferSchemas) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSnmpAgentCfg_Snmp_BulkStats_Transfers_Transfer_TransferSchemas"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_BulkStats_Transfers_Transfer_TransferSchemas) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_BulkStats_Transfers_Transfer_TransferSchemas) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSnmpAgentCfg_Snmp_BulkStats_Transfers_Transfer_TransferSchemas.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_BulkStats_Transfers_Transfer_TransferSchemas) ΛBelongingModule() string {
	return "Cisco-IOS-XR-snmp-agent-cfg"
}


// Cisco_IOS_XRSnmpAgentCfg_Snmp_BulkStats_Transfers_Transfer_TransferSchemas_TransferSchema represents the /Cisco-IOS-XR-snmp-agent-cfg/snmp/bulk-stats/transfers/transfer/transfer-schemas/transfer-schema YANG schema element.
type Cisco_IOS_XRSnmpAgentCfg_Snmp_BulkStats_Transfers_Transfer_TransferSchemas_TransferSchema struct {
	SchemaName	*string	`path:"schema-name" module:"Cisco-IOS-XR-snmp-agent-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSnmpAgentCfg_Snmp_BulkStats_Transfers_Transfer_TransferSchemas_TransferSchema implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_BulkStats_Transfers_Transfer_TransferSchemas_TransferSchema) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRSnmpAgentCfg_Snmp_BulkStats_Transfers_Transfer_TransferSchemas_TransferSchema struct, which is a YANG list entry.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_BulkStats_Transfers_Transfer_TransferSchemas_TransferSchema) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SchemaName == nil {
		return nil, fmt.Errorf("nil value for key SchemaName")
	}

	return map[string]interface{}{
		"schema-name": *t.SchemaName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_BulkStats_Transfers_Transfer_TransferSchemas_TransferSchema) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSnmpAgentCfg_Snmp_BulkStats_Transfers_Transfer_TransferSchemas_TransferSchema"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_BulkStats_Transfers_Transfer_TransferSchemas_TransferSchema) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_BulkStats_Transfers_Transfer_TransferSchemas_TransferSchema) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSnmpAgentCfg_Snmp_BulkStats_Transfers_Transfer_TransferSchemas_TransferSchema.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_BulkStats_Transfers_Transfer_TransferSchemas_TransferSchema) ΛBelongingModule() string {
	return "Cisco-IOS-XR-snmp-agent-cfg"
}


// Cisco_IOS_XRSnmpAgentCfg_Snmp_ContextMappings represents the /Cisco-IOS-XR-snmp-agent-cfg/snmp/context-mappings YANG schema element.
type Cisco_IOS_XRSnmpAgentCfg_Snmp_ContextMappings struct {
	ContextMapping	map[string]*Cisco_IOS_XRSnmpAgentCfg_Snmp_ContextMappings_ContextMapping	`path:"context-mapping" module:"Cisco-IOS-XR-snmp-agent-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSnmpAgentCfg_Snmp_ContextMappings implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_ContextMappings) IsYANGGoStruct() {}

// NewContextMapping creates a new entry in the ContextMapping list of the
// Cisco_IOS_XRSnmpAgentCfg_Snmp_ContextMappings struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_ContextMappings) NewContextMapping(ContextMappingName string) (*Cisco_IOS_XRSnmpAgentCfg_Snmp_ContextMappings_ContextMapping, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ContextMapping == nil {
		t.ContextMapping = make(map[string]*Cisco_IOS_XRSnmpAgentCfg_Snmp_ContextMappings_ContextMapping)
	}

	key := ContextMappingName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.ContextMapping[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list ContextMapping", key)
	}

	t.ContextMapping[key] = &Cisco_IOS_XRSnmpAgentCfg_Snmp_ContextMappings_ContextMapping{
		ContextMappingName: &ContextMappingName,
	}

	return t.ContextMapping[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_ContextMappings) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSnmpAgentCfg_Snmp_ContextMappings"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_ContextMappings) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_ContextMappings) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSnmpAgentCfg_Snmp_ContextMappings.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_ContextMappings) ΛBelongingModule() string {
	return "Cisco-IOS-XR-snmp-agent-cfg"
}


// Cisco_IOS_XRSnmpAgentCfg_Snmp_ContextMappings_ContextMapping represents the /Cisco-IOS-XR-snmp-agent-cfg/snmp/context-mappings/context-mapping YANG schema element.
type Cisco_IOS_XRSnmpAgentCfg_Snmp_ContextMappings_ContextMapping struct {
	Context	E_Cisco_IOS_XRSnmpAgentCfg_SnmpContext	`path:"context" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	ContextMappingName	*string	`path:"context-mapping-name" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	InstanceName	*string	`path:"instance-name" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	TopologyName	*string	`path:"topology-name" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	VrfName	*string	`path:"vrf-name" module:"Cisco-IOS-XR-snmp-agent-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSnmpAgentCfg_Snmp_ContextMappings_ContextMapping implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_ContextMappings_ContextMapping) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRSnmpAgentCfg_Snmp_ContextMappings_ContextMapping struct, which is a YANG list entry.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_ContextMappings_ContextMapping) ΛListKeyMap() (map[string]interface{}, error) {
	if t.ContextMappingName == nil {
		return nil, fmt.Errorf("nil value for key ContextMappingName")
	}

	return map[string]interface{}{
		"context-mapping-name": *t.ContextMappingName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_ContextMappings_ContextMapping) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSnmpAgentCfg_Snmp_ContextMappings_ContextMapping"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_ContextMappings_ContextMapping) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_ContextMappings_ContextMapping) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSnmpAgentCfg_Snmp_ContextMappings_ContextMapping.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_ContextMappings_ContextMapping) ΛBelongingModule() string {
	return "Cisco-IOS-XR-snmp-agent-cfg"
}


// Cisco_IOS_XRSnmpAgentCfg_Snmp_Contexts represents the /Cisco-IOS-XR-snmp-agent-cfg/snmp/contexts YANG schema element.
type Cisco_IOS_XRSnmpAgentCfg_Snmp_Contexts struct {
	Context	map[string]*Cisco_IOS_XRSnmpAgentCfg_Snmp_Contexts_Context	`path:"context" module:"Cisco-IOS-XR-snmp-agent-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSnmpAgentCfg_Snmp_Contexts implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Contexts) IsYANGGoStruct() {}

// NewContext creates a new entry in the Context list of the
// Cisco_IOS_XRSnmpAgentCfg_Snmp_Contexts struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Contexts) NewContext(ContextName string) (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Contexts_Context, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Context == nil {
		t.Context = make(map[string]*Cisco_IOS_XRSnmpAgentCfg_Snmp_Contexts_Context)
	}

	key := ContextName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Context[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Context", key)
	}

	t.Context[key] = &Cisco_IOS_XRSnmpAgentCfg_Snmp_Contexts_Context{
		ContextName: &ContextName,
	}

	return t.Context[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Contexts) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSnmpAgentCfg_Snmp_Contexts"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Contexts) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Contexts) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSnmpAgentCfg_Snmp_Contexts.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Contexts) ΛBelongingModule() string {
	return "Cisco-IOS-XR-snmp-agent-cfg"
}


// Cisco_IOS_XRSnmpAgentCfg_Snmp_Contexts_Context represents the /Cisco-IOS-XR-snmp-agent-cfg/snmp/contexts/context YANG schema element.
type Cisco_IOS_XRSnmpAgentCfg_Snmp_Contexts_Context struct {
	ContextName	*string	`path:"context-name" module:"Cisco-IOS-XR-snmp-agent-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSnmpAgentCfg_Snmp_Contexts_Context implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Contexts_Context) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRSnmpAgentCfg_Snmp_Contexts_Context struct, which is a YANG list entry.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Contexts_Context) ΛListKeyMap() (map[string]interface{}, error) {
	if t.ContextName == nil {
		return nil, fmt.Errorf("nil value for key ContextName")
	}

	return map[string]interface{}{
		"context-name": *t.ContextName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Contexts_Context) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSnmpAgentCfg_Snmp_Contexts_Context"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Contexts_Context) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Contexts_Context) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSnmpAgentCfg_Snmp_Contexts_Context.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Contexts_Context) ΛBelongingModule() string {
	return "Cisco-IOS-XR-snmp-agent-cfg"
}


// Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator represents the /Cisco-IOS-XR-snmp-agent-cfg/snmp/correlator YANG schema element.
type Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator struct {
	BufferSize	*uint32	`path:"buffer-size" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	RuleSets	*Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_RuleSets	`path:"rule-sets" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	Rules	*Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules	`path:"rules" module:"Cisco-IOS-XR-snmp-agent-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator) ΛBelongingModule() string {
	return "Cisco-IOS-XR-snmp-agent-cfg"
}


// Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_RuleSets represents the /Cisco-IOS-XR-snmp-agent-cfg/snmp/correlator/rule-sets YANG schema element.
type Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_RuleSets struct {
	RuleSet	map[string]*Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_RuleSets_RuleSet	`path:"rule-set" module:"Cisco-IOS-XR-snmp-agent-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_RuleSets implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_RuleSets) IsYANGGoStruct() {}

// NewRuleSet creates a new entry in the RuleSet list of the
// Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_RuleSets struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_RuleSets) NewRuleSet(Name string) (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_RuleSets_RuleSet, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RuleSet == nil {
		t.RuleSet = make(map[string]*Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_RuleSets_RuleSet)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.RuleSet[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list RuleSet", key)
	}

	t.RuleSet[key] = &Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_RuleSets_RuleSet{
		Name: &Name,
	}

	return t.RuleSet[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_RuleSets) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_RuleSets"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_RuleSets) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_RuleSets) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_RuleSets.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_RuleSets) ΛBelongingModule() string {
	return "Cisco-IOS-XR-snmp-agent-cfg"
}


// Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_RuleSets_RuleSet represents the /Cisco-IOS-XR-snmp-agent-cfg/snmp/correlator/rule-sets/rule-set YANG schema element.
type Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_RuleSets_RuleSet struct {
	AppliedTo	*Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_RuleSets_RuleSet_AppliedTo	`path:"applied-to" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	Name	*string	`path:"name" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	Rulenames	*Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_RuleSets_RuleSet_Rulenames	`path:"rulenames" module:"Cisco-IOS-XR-snmp-agent-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_RuleSets_RuleSet implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_RuleSets_RuleSet) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_RuleSets_RuleSet struct, which is a YANG list entry.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_RuleSets_RuleSet) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_RuleSets_RuleSet) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_RuleSets_RuleSet"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_RuleSets_RuleSet) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_RuleSets_RuleSet) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_RuleSets_RuleSet.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_RuleSets_RuleSet) ΛBelongingModule() string {
	return "Cisco-IOS-XR-snmp-agent-cfg"
}


// Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_RuleSets_RuleSet_AppliedTo represents the /Cisco-IOS-XR-snmp-agent-cfg/snmp/correlator/rule-sets/rule-set/applied-to YANG schema element.
type Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_RuleSets_RuleSet_AppliedTo struct {
	All	YANGEmpty	`path:"all" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	Hosts	*Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_RuleSets_RuleSet_AppliedTo_Hosts	`path:"hosts" module:"Cisco-IOS-XR-snmp-agent-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_RuleSets_RuleSet_AppliedTo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_RuleSets_RuleSet_AppliedTo) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_RuleSets_RuleSet_AppliedTo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_RuleSets_RuleSet_AppliedTo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_RuleSets_RuleSet_AppliedTo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_RuleSets_RuleSet_AppliedTo) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_RuleSets_RuleSet_AppliedTo.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_RuleSets_RuleSet_AppliedTo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-snmp-agent-cfg"
}


// Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_RuleSets_RuleSet_AppliedTo_Hosts represents the /Cisco-IOS-XR-snmp-agent-cfg/snmp/correlator/rule-sets/rule-set/applied-to/hosts YANG schema element.
type Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_RuleSets_RuleSet_AppliedTo_Hosts struct {
	Host	map[Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_RuleSets_RuleSet_AppliedTo_Hosts_Host_Key]*Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_RuleSets_RuleSet_AppliedTo_Hosts_Host	`path:"host" module:"Cisco-IOS-XR-snmp-agent-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_RuleSets_RuleSet_AppliedTo_Hosts implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_RuleSets_RuleSet_AppliedTo_Hosts) IsYANGGoStruct() {}

// Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_RuleSets_RuleSet_AppliedTo_Hosts_Host_Key represents the key for list Host of element /Cisco-IOS-XR-snmp-agent-cfg/snmp/correlator/rule-sets/rule-set/applied-to/hosts.
type Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_RuleSets_RuleSet_AppliedTo_Hosts_Host_Key struct {
	IpAddress	string	`path:"ip-address"`
	Port	uint16	`path:"port"`
}

// IsYANGGoKeyStruct ensures that Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_RuleSets_RuleSet_AppliedTo_Hosts_Host_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_RuleSets_RuleSet_AppliedTo_Hosts_Host_Key) IsYANGGoKeyStruct() {}

// ΛListKeyMap returns the values of the Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_RuleSets_RuleSet_AppliedTo_Hosts_Host_Key key struct.
func (t Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_RuleSets_RuleSet_AppliedTo_Hosts_Host_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"ip-address": t.IpAddress,
		"port": t.Port,
	}, nil
}

// NewHost creates a new entry in the Host list of the
// Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_RuleSets_RuleSet_AppliedTo_Hosts struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_RuleSets_RuleSet_AppliedTo_Hosts) NewHost(IpAddress string, Port uint16) (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_RuleSets_RuleSet_AppliedTo_Hosts_Host, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Host == nil {
		t.Host = make(map[Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_RuleSets_RuleSet_AppliedTo_Hosts_Host_Key]*Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_RuleSets_RuleSet_AppliedTo_Hosts_Host)
	}

	key := Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_RuleSets_RuleSet_AppliedTo_Hosts_Host_Key{
		IpAddress: IpAddress,
		Port: Port,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Host[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Host", key)
	}

	t.Host[key] = &Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_RuleSets_RuleSet_AppliedTo_Hosts_Host{
		IpAddress: &IpAddress,
		Port: &Port,
	}

	return t.Host[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_RuleSets_RuleSet_AppliedTo_Hosts) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_RuleSets_RuleSet_AppliedTo_Hosts"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_RuleSets_RuleSet_AppliedTo_Hosts) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_RuleSets_RuleSet_AppliedTo_Hosts) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_RuleSets_RuleSet_AppliedTo_Hosts.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_RuleSets_RuleSet_AppliedTo_Hosts) ΛBelongingModule() string {
	return "Cisco-IOS-XR-snmp-agent-cfg"
}


// Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_RuleSets_RuleSet_AppliedTo_Hosts_Host represents the /Cisco-IOS-XR-snmp-agent-cfg/snmp/correlator/rule-sets/rule-set/applied-to/hosts/host YANG schema element.
type Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_RuleSets_RuleSet_AppliedTo_Hosts_Host struct {
	IpAddress	*string	`path:"ip-address" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	Port	*uint16	`path:"port" module:"Cisco-IOS-XR-snmp-agent-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_RuleSets_RuleSet_AppliedTo_Hosts_Host implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_RuleSets_RuleSet_AppliedTo_Hosts_Host) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_RuleSets_RuleSet_AppliedTo_Hosts_Host struct, which is a YANG list entry.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_RuleSets_RuleSet_AppliedTo_Hosts_Host) ΛListKeyMap() (map[string]interface{}, error) {
	if t.IpAddress == nil {
		return nil, fmt.Errorf("nil value for key IpAddress")
	}

	if t.Port == nil {
		return nil, fmt.Errorf("nil value for key Port")
	}

	return map[string]interface{}{
		"ip-address": *t.IpAddress,
		"port": *t.Port,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_RuleSets_RuleSet_AppliedTo_Hosts_Host) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_RuleSets_RuleSet_AppliedTo_Hosts_Host"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_RuleSets_RuleSet_AppliedTo_Hosts_Host) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_RuleSets_RuleSet_AppliedTo_Hosts_Host) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_RuleSets_RuleSet_AppliedTo_Hosts_Host.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_RuleSets_RuleSet_AppliedTo_Hosts_Host) ΛBelongingModule() string {
	return "Cisco-IOS-XR-snmp-agent-cfg"
}


// Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_RuleSets_RuleSet_Rulenames represents the /Cisco-IOS-XR-snmp-agent-cfg/snmp/correlator/rule-sets/rule-set/rulenames YANG schema element.
type Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_RuleSets_RuleSet_Rulenames struct {
	Rulename	map[string]*Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_RuleSets_RuleSet_Rulenames_Rulename	`path:"rulename" module:"Cisco-IOS-XR-snmp-agent-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_RuleSets_RuleSet_Rulenames implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_RuleSets_RuleSet_Rulenames) IsYANGGoStruct() {}

// NewRulename creates a new entry in the Rulename list of the
// Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_RuleSets_RuleSet_Rulenames struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_RuleSets_RuleSet_Rulenames) NewRulename(Rulename string) (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_RuleSets_RuleSet_Rulenames_Rulename, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Rulename == nil {
		t.Rulename = make(map[string]*Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_RuleSets_RuleSet_Rulenames_Rulename)
	}

	key := Rulename

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Rulename[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Rulename", key)
	}

	t.Rulename[key] = &Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_RuleSets_RuleSet_Rulenames_Rulename{
		Rulename: &Rulename,
	}

	return t.Rulename[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_RuleSets_RuleSet_Rulenames) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_RuleSets_RuleSet_Rulenames"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_RuleSets_RuleSet_Rulenames) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_RuleSets_RuleSet_Rulenames) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_RuleSets_RuleSet_Rulenames.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_RuleSets_RuleSet_Rulenames) ΛBelongingModule() string {
	return "Cisco-IOS-XR-snmp-agent-cfg"
}


// Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_RuleSets_RuleSet_Rulenames_Rulename represents the /Cisco-IOS-XR-snmp-agent-cfg/snmp/correlator/rule-sets/rule-set/rulenames/rulename YANG schema element.
type Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_RuleSets_RuleSet_Rulenames_Rulename struct {
	Rulename	*string	`path:"rulename" module:"Cisco-IOS-XR-snmp-agent-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_RuleSets_RuleSet_Rulenames_Rulename implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_RuleSets_RuleSet_Rulenames_Rulename) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_RuleSets_RuleSet_Rulenames_Rulename struct, which is a YANG list entry.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_RuleSets_RuleSet_Rulenames_Rulename) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Rulename == nil {
		return nil, fmt.Errorf("nil value for key Rulename")
	}

	return map[string]interface{}{
		"rulename": *t.Rulename,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_RuleSets_RuleSet_Rulenames_Rulename) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_RuleSets_RuleSet_Rulenames_Rulename"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_RuleSets_RuleSet_Rulenames_Rulename) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_RuleSets_RuleSet_Rulenames_Rulename) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_RuleSets_RuleSet_Rulenames_Rulename.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_RuleSets_RuleSet_Rulenames_Rulename) ΛBelongingModule() string {
	return "Cisco-IOS-XR-snmp-agent-cfg"
}


// Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules represents the /Cisco-IOS-XR-snmp-agent-cfg/snmp/correlator/rules YANG schema element.
type Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules struct {
	Rule	map[string]*Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule	`path:"rule" module:"Cisco-IOS-XR-snmp-agent-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules) IsYANGGoStruct() {}

// NewRule creates a new entry in the Rule list of the
// Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules) NewRule(Name string) (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Rule == nil {
		t.Rule = make(map[string]*Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Rule[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Rule", key)
	}

	t.Rule[key] = &Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule{
		Name: &Name,
	}

	return t.Rule[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules) ΛBelongingModule() string {
	return "Cisco-IOS-XR-snmp-agent-cfg"
}


// Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule represents the /Cisco-IOS-XR-snmp-agent-cfg/snmp/correlator/rules/rule YANG schema element.
type Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule struct {
	AppliedTo	*Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_AppliedTo	`path:"applied-to" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	Created	YANGEmpty	`path:"created" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	Name	*string	`path:"name" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	NonStateful	*Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_NonStateful	`path:"non-stateful" module:"Cisco-IOS-XR-snmp-agent-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule struct, which is a YANG list entry.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule) ΛBelongingModule() string {
	return "Cisco-IOS-XR-snmp-agent-cfg"
}


// Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_AppliedTo represents the /Cisco-IOS-XR-snmp-agent-cfg/snmp/correlator/rules/rule/applied-to YANG schema element.
type Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_AppliedTo struct {
	All	YANGEmpty	`path:"all" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	Hosts	*Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_AppliedTo_Hosts	`path:"hosts" module:"Cisco-IOS-XR-snmp-agent-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_AppliedTo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_AppliedTo) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_AppliedTo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_AppliedTo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_AppliedTo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_AppliedTo) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_AppliedTo.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_AppliedTo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-snmp-agent-cfg"
}


// Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_AppliedTo_Hosts represents the /Cisco-IOS-XR-snmp-agent-cfg/snmp/correlator/rules/rule/applied-to/hosts YANG schema element.
type Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_AppliedTo_Hosts struct {
	Host	map[Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_AppliedTo_Hosts_Host_Key]*Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_AppliedTo_Hosts_Host	`path:"host" module:"Cisco-IOS-XR-snmp-agent-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_AppliedTo_Hosts implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_AppliedTo_Hosts) IsYANGGoStruct() {}

// Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_AppliedTo_Hosts_Host_Key represents the key for list Host of element /Cisco-IOS-XR-snmp-agent-cfg/snmp/correlator/rules/rule/applied-to/hosts.
type Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_AppliedTo_Hosts_Host_Key struct {
	IpAddress	string	`path:"ip-address"`
	Port	uint16	`path:"port"`
}

// IsYANGGoKeyStruct ensures that Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_AppliedTo_Hosts_Host_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_AppliedTo_Hosts_Host_Key) IsYANGGoKeyStruct() {}

// ΛListKeyMap returns the values of the Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_AppliedTo_Hosts_Host_Key key struct.
func (t Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_AppliedTo_Hosts_Host_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"ip-address": t.IpAddress,
		"port": t.Port,
	}, nil
}

// NewHost creates a new entry in the Host list of the
// Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_AppliedTo_Hosts struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_AppliedTo_Hosts) NewHost(IpAddress string, Port uint16) (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_AppliedTo_Hosts_Host, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Host == nil {
		t.Host = make(map[Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_AppliedTo_Hosts_Host_Key]*Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_AppliedTo_Hosts_Host)
	}

	key := Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_AppliedTo_Hosts_Host_Key{
		IpAddress: IpAddress,
		Port: Port,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Host[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Host", key)
	}

	t.Host[key] = &Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_AppliedTo_Hosts_Host{
		IpAddress: &IpAddress,
		Port: &Port,
	}

	return t.Host[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_AppliedTo_Hosts) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_AppliedTo_Hosts"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_AppliedTo_Hosts) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_AppliedTo_Hosts) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_AppliedTo_Hosts.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_AppliedTo_Hosts) ΛBelongingModule() string {
	return "Cisco-IOS-XR-snmp-agent-cfg"
}


// Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_AppliedTo_Hosts_Host represents the /Cisco-IOS-XR-snmp-agent-cfg/snmp/correlator/rules/rule/applied-to/hosts/host YANG schema element.
type Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_AppliedTo_Hosts_Host struct {
	IpAddress	*string	`path:"ip-address" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	Port	*uint16	`path:"port" module:"Cisco-IOS-XR-snmp-agent-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_AppliedTo_Hosts_Host implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_AppliedTo_Hosts_Host) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_AppliedTo_Hosts_Host struct, which is a YANG list entry.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_AppliedTo_Hosts_Host) ΛListKeyMap() (map[string]interface{}, error) {
	if t.IpAddress == nil {
		return nil, fmt.Errorf("nil value for key IpAddress")
	}

	if t.Port == nil {
		return nil, fmt.Errorf("nil value for key Port")
	}

	return map[string]interface{}{
		"ip-address": *t.IpAddress,
		"port": *t.Port,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_AppliedTo_Hosts_Host) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_AppliedTo_Hosts_Host"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_AppliedTo_Hosts_Host) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_AppliedTo_Hosts_Host) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_AppliedTo_Hosts_Host.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_AppliedTo_Hosts_Host) ΛBelongingModule() string {
	return "Cisco-IOS-XR-snmp-agent-cfg"
}


// Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_NonStateful represents the /Cisco-IOS-XR-snmp-agent-cfg/snmp/correlator/rules/rule/non-stateful YANG schema element.
type Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_NonStateful struct {
	NonRootCauses	*Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_NonStateful_NonRootCauses	`path:"non-root-causes" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	RootCauses	*Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_NonStateful_RootCauses	`path:"root-causes" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	Timeout	*uint32	`path:"timeout" module:"Cisco-IOS-XR-snmp-agent-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_NonStateful implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_NonStateful) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_NonStateful) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_NonStateful"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_NonStateful) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_NonStateful) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_NonStateful.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_NonStateful) ΛBelongingModule() string {
	return "Cisco-IOS-XR-snmp-agent-cfg"
}


// Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_NonStateful_NonRootCauses represents the /Cisco-IOS-XR-snmp-agent-cfg/snmp/correlator/rules/rule/non-stateful/non-root-causes YANG schema element.
type Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_NonStateful_NonRootCauses struct {
	NonRootCause	map[string]*Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_NonStateful_NonRootCauses_NonRootCause	`path:"non-root-cause" module:"Cisco-IOS-XR-snmp-agent-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_NonStateful_NonRootCauses implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_NonStateful_NonRootCauses) IsYANGGoStruct() {}

// NewNonRootCause creates a new entry in the NonRootCause list of the
// Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_NonStateful_NonRootCauses struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_NonStateful_NonRootCauses) NewNonRootCause(Oid string) (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_NonStateful_NonRootCauses_NonRootCause, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NonRootCause == nil {
		t.NonRootCause = make(map[string]*Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_NonStateful_NonRootCauses_NonRootCause)
	}

	key := Oid

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NonRootCause[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NonRootCause", key)
	}

	t.NonRootCause[key] = &Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_NonStateful_NonRootCauses_NonRootCause{
		Oid: &Oid,
	}

	return t.NonRootCause[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_NonStateful_NonRootCauses) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_NonStateful_NonRootCauses"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_NonStateful_NonRootCauses) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_NonStateful_NonRootCauses) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_NonStateful_NonRootCauses.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_NonStateful_NonRootCauses) ΛBelongingModule() string {
	return "Cisco-IOS-XR-snmp-agent-cfg"
}


// Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_NonStateful_NonRootCauses_NonRootCause represents the /Cisco-IOS-XR-snmp-agent-cfg/snmp/correlator/rules/rule/non-stateful/non-root-causes/non-root-cause YANG schema element.
type Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_NonStateful_NonRootCauses_NonRootCause struct {
	Created	YANGEmpty	`path:"created" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	Oid	*string	`path:"oid" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	VarBinds	*Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_NonStateful_NonRootCauses_NonRootCause_VarBinds	`path:"var-binds" module:"Cisco-IOS-XR-snmp-agent-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_NonStateful_NonRootCauses_NonRootCause implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_NonStateful_NonRootCauses_NonRootCause) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_NonStateful_NonRootCauses_NonRootCause struct, which is a YANG list entry.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_NonStateful_NonRootCauses_NonRootCause) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Oid == nil {
		return nil, fmt.Errorf("nil value for key Oid")
	}

	return map[string]interface{}{
		"oid": *t.Oid,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_NonStateful_NonRootCauses_NonRootCause) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_NonStateful_NonRootCauses_NonRootCause"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_NonStateful_NonRootCauses_NonRootCause) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_NonStateful_NonRootCauses_NonRootCause) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_NonStateful_NonRootCauses_NonRootCause.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_NonStateful_NonRootCauses_NonRootCause) ΛBelongingModule() string {
	return "Cisco-IOS-XR-snmp-agent-cfg"
}


// Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_NonStateful_NonRootCauses_NonRootCause_VarBinds represents the /Cisco-IOS-XR-snmp-agent-cfg/snmp/correlator/rules/rule/non-stateful/non-root-causes/non-root-cause/var-binds YANG schema element.
type Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_NonStateful_NonRootCauses_NonRootCause_VarBinds struct {
	VarBind	map[string]*Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_NonStateful_NonRootCauses_NonRootCause_VarBinds_VarBind	`path:"var-bind" module:"Cisco-IOS-XR-snmp-agent-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_NonStateful_NonRootCauses_NonRootCause_VarBinds implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_NonStateful_NonRootCauses_NonRootCause_VarBinds) IsYANGGoStruct() {}

// NewVarBind creates a new entry in the VarBind list of the
// Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_NonStateful_NonRootCauses_NonRootCause_VarBinds struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_NonStateful_NonRootCauses_NonRootCause_VarBinds) NewVarBind(Oid string) (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_NonStateful_NonRootCauses_NonRootCause_VarBinds_VarBind, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.VarBind == nil {
		t.VarBind = make(map[string]*Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_NonStateful_NonRootCauses_NonRootCause_VarBinds_VarBind)
	}

	key := Oid

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.VarBind[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list VarBind", key)
	}

	t.VarBind[key] = &Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_NonStateful_NonRootCauses_NonRootCause_VarBinds_VarBind{
		Oid: &Oid,
	}

	return t.VarBind[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_NonStateful_NonRootCauses_NonRootCause_VarBinds) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_NonStateful_NonRootCauses_NonRootCause_VarBinds"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_NonStateful_NonRootCauses_NonRootCause_VarBinds) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_NonStateful_NonRootCauses_NonRootCause_VarBinds) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_NonStateful_NonRootCauses_NonRootCause_VarBinds.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_NonStateful_NonRootCauses_NonRootCause_VarBinds) ΛBelongingModule() string {
	return "Cisco-IOS-XR-snmp-agent-cfg"
}


// Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_NonStateful_NonRootCauses_NonRootCause_VarBinds_VarBind represents the /Cisco-IOS-XR-snmp-agent-cfg/snmp/correlator/rules/rule/non-stateful/non-root-causes/non-root-cause/var-binds/var-bind YANG schema element.
type Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_NonStateful_NonRootCauses_NonRootCause_VarBinds_VarBind struct {
	Match	*Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_NonStateful_NonRootCauses_NonRootCause_VarBinds_VarBind_Match	`path:"match" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	Oid	*string	`path:"oid" module:"Cisco-IOS-XR-snmp-agent-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_NonStateful_NonRootCauses_NonRootCause_VarBinds_VarBind implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_NonStateful_NonRootCauses_NonRootCause_VarBinds_VarBind) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_NonStateful_NonRootCauses_NonRootCause_VarBinds_VarBind struct, which is a YANG list entry.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_NonStateful_NonRootCauses_NonRootCause_VarBinds_VarBind) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Oid == nil {
		return nil, fmt.Errorf("nil value for key Oid")
	}

	return map[string]interface{}{
		"oid": *t.Oid,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_NonStateful_NonRootCauses_NonRootCause_VarBinds_VarBind) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_NonStateful_NonRootCauses_NonRootCause_VarBinds_VarBind"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_NonStateful_NonRootCauses_NonRootCause_VarBinds_VarBind) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_NonStateful_NonRootCauses_NonRootCause_VarBinds_VarBind) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_NonStateful_NonRootCauses_NonRootCause_VarBinds_VarBind.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_NonStateful_NonRootCauses_NonRootCause_VarBinds_VarBind) ΛBelongingModule() string {
	return "Cisco-IOS-XR-snmp-agent-cfg"
}


// Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_NonStateful_NonRootCauses_NonRootCause_VarBinds_VarBind_Match represents the /Cisco-IOS-XR-snmp-agent-cfg/snmp/correlator/rules/rule/non-stateful/non-root-causes/non-root-cause/var-binds/var-bind/match YANG schema element.
type Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_NonStateful_NonRootCauses_NonRootCause_VarBinds_VarBind_Match struct {
	Index	*string	`path:"index" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	Value	*string	`path:"value" module:"Cisco-IOS-XR-snmp-agent-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_NonStateful_NonRootCauses_NonRootCause_VarBinds_VarBind_Match implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_NonStateful_NonRootCauses_NonRootCause_VarBinds_VarBind_Match) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_NonStateful_NonRootCauses_NonRootCause_VarBinds_VarBind_Match) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_NonStateful_NonRootCauses_NonRootCause_VarBinds_VarBind_Match"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_NonStateful_NonRootCauses_NonRootCause_VarBinds_VarBind_Match) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_NonStateful_NonRootCauses_NonRootCause_VarBinds_VarBind_Match) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_NonStateful_NonRootCauses_NonRootCause_VarBinds_VarBind_Match.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_NonStateful_NonRootCauses_NonRootCause_VarBinds_VarBind_Match) ΛBelongingModule() string {
	return "Cisco-IOS-XR-snmp-agent-cfg"
}


// Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_NonStateful_RootCauses represents the /Cisco-IOS-XR-snmp-agent-cfg/snmp/correlator/rules/rule/non-stateful/root-causes YANG schema element.
type Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_NonStateful_RootCauses struct {
	RootCause	map[string]*Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_NonStateful_RootCauses_RootCause	`path:"root-cause" module:"Cisco-IOS-XR-snmp-agent-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_NonStateful_RootCauses implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_NonStateful_RootCauses) IsYANGGoStruct() {}

// NewRootCause creates a new entry in the RootCause list of the
// Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_NonStateful_RootCauses struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_NonStateful_RootCauses) NewRootCause(Oid string) (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_NonStateful_RootCauses_RootCause, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RootCause == nil {
		t.RootCause = make(map[string]*Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_NonStateful_RootCauses_RootCause)
	}

	key := Oid

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.RootCause[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list RootCause", key)
	}

	t.RootCause[key] = &Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_NonStateful_RootCauses_RootCause{
		Oid: &Oid,
	}

	return t.RootCause[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_NonStateful_RootCauses) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_NonStateful_RootCauses"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_NonStateful_RootCauses) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_NonStateful_RootCauses) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_NonStateful_RootCauses.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_NonStateful_RootCauses) ΛBelongingModule() string {
	return "Cisco-IOS-XR-snmp-agent-cfg"
}


// Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_NonStateful_RootCauses_RootCause represents the /Cisco-IOS-XR-snmp-agent-cfg/snmp/correlator/rules/rule/non-stateful/root-causes/root-cause YANG schema element.
type Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_NonStateful_RootCauses_RootCause struct {
	Created	YANGEmpty	`path:"created" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	Oid	*string	`path:"oid" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	VarBinds	*Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_NonStateful_RootCauses_RootCause_VarBinds	`path:"var-binds" module:"Cisco-IOS-XR-snmp-agent-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_NonStateful_RootCauses_RootCause implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_NonStateful_RootCauses_RootCause) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_NonStateful_RootCauses_RootCause struct, which is a YANG list entry.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_NonStateful_RootCauses_RootCause) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Oid == nil {
		return nil, fmt.Errorf("nil value for key Oid")
	}

	return map[string]interface{}{
		"oid": *t.Oid,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_NonStateful_RootCauses_RootCause) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_NonStateful_RootCauses_RootCause"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_NonStateful_RootCauses_RootCause) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_NonStateful_RootCauses_RootCause) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_NonStateful_RootCauses_RootCause.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_NonStateful_RootCauses_RootCause) ΛBelongingModule() string {
	return "Cisco-IOS-XR-snmp-agent-cfg"
}


// Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_NonStateful_RootCauses_RootCause_VarBinds represents the /Cisco-IOS-XR-snmp-agent-cfg/snmp/correlator/rules/rule/non-stateful/root-causes/root-cause/var-binds YANG schema element.
type Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_NonStateful_RootCauses_RootCause_VarBinds struct {
	VarBind	map[string]*Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_NonStateful_RootCauses_RootCause_VarBinds_VarBind	`path:"var-bind" module:"Cisco-IOS-XR-snmp-agent-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_NonStateful_RootCauses_RootCause_VarBinds implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_NonStateful_RootCauses_RootCause_VarBinds) IsYANGGoStruct() {}

// NewVarBind creates a new entry in the VarBind list of the
// Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_NonStateful_RootCauses_RootCause_VarBinds struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_NonStateful_RootCauses_RootCause_VarBinds) NewVarBind(Oid string) (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_NonStateful_RootCauses_RootCause_VarBinds_VarBind, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.VarBind == nil {
		t.VarBind = make(map[string]*Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_NonStateful_RootCauses_RootCause_VarBinds_VarBind)
	}

	key := Oid

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.VarBind[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list VarBind", key)
	}

	t.VarBind[key] = &Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_NonStateful_RootCauses_RootCause_VarBinds_VarBind{
		Oid: &Oid,
	}

	return t.VarBind[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_NonStateful_RootCauses_RootCause_VarBinds) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_NonStateful_RootCauses_RootCause_VarBinds"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_NonStateful_RootCauses_RootCause_VarBinds) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_NonStateful_RootCauses_RootCause_VarBinds) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_NonStateful_RootCauses_RootCause_VarBinds.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_NonStateful_RootCauses_RootCause_VarBinds) ΛBelongingModule() string {
	return "Cisco-IOS-XR-snmp-agent-cfg"
}


// Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_NonStateful_RootCauses_RootCause_VarBinds_VarBind represents the /Cisco-IOS-XR-snmp-agent-cfg/snmp/correlator/rules/rule/non-stateful/root-causes/root-cause/var-binds/var-bind YANG schema element.
type Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_NonStateful_RootCauses_RootCause_VarBinds_VarBind struct {
	Match	*Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_NonStateful_RootCauses_RootCause_VarBinds_VarBind_Match	`path:"match" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	Oid	*string	`path:"oid" module:"Cisco-IOS-XR-snmp-agent-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_NonStateful_RootCauses_RootCause_VarBinds_VarBind implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_NonStateful_RootCauses_RootCause_VarBinds_VarBind) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_NonStateful_RootCauses_RootCause_VarBinds_VarBind struct, which is a YANG list entry.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_NonStateful_RootCauses_RootCause_VarBinds_VarBind) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Oid == nil {
		return nil, fmt.Errorf("nil value for key Oid")
	}

	return map[string]interface{}{
		"oid": *t.Oid,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_NonStateful_RootCauses_RootCause_VarBinds_VarBind) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_NonStateful_RootCauses_RootCause_VarBinds_VarBind"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_NonStateful_RootCauses_RootCause_VarBinds_VarBind) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_NonStateful_RootCauses_RootCause_VarBinds_VarBind) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_NonStateful_RootCauses_RootCause_VarBinds_VarBind.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_NonStateful_RootCauses_RootCause_VarBinds_VarBind) ΛBelongingModule() string {
	return "Cisco-IOS-XR-snmp-agent-cfg"
}


// Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_NonStateful_RootCauses_RootCause_VarBinds_VarBind_Match represents the /Cisco-IOS-XR-snmp-agent-cfg/snmp/correlator/rules/rule/non-stateful/root-causes/root-cause/var-binds/var-bind/match YANG schema element.
type Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_NonStateful_RootCauses_RootCause_VarBinds_VarBind_Match struct {
	Index	*string	`path:"index" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	Value	*string	`path:"value" module:"Cisco-IOS-XR-snmp-agent-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_NonStateful_RootCauses_RootCause_VarBinds_VarBind_Match implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_NonStateful_RootCauses_RootCause_VarBinds_VarBind_Match) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_NonStateful_RootCauses_RootCause_VarBinds_VarBind_Match) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_NonStateful_RootCauses_RootCause_VarBinds_VarBind_Match"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_NonStateful_RootCauses_RootCause_VarBinds_VarBind_Match) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_NonStateful_RootCauses_RootCause_VarBinds_VarBind_Match) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_NonStateful_RootCauses_RootCause_VarBinds_VarBind_Match.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Correlator_Rules_Rule_NonStateful_RootCauses_RootCause_VarBinds_VarBind_Match) ΛBelongingModule() string {
	return "Cisco-IOS-XR-snmp-agent-cfg"
}


// Cisco_IOS_XRSnmpAgentCfg_Snmp_DefaultCommunityMaps represents the /Cisco-IOS-XR-snmp-agent-cfg/snmp/default-community-maps YANG schema element.
type Cisco_IOS_XRSnmpAgentCfg_Snmp_DefaultCommunityMaps struct {
	DefaultCommunityMap	map[string]*Cisco_IOS_XRSnmpAgentCfg_Snmp_DefaultCommunityMaps_DefaultCommunityMap	`path:"default-community-map" module:"Cisco-IOS-XR-snmp-agent-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSnmpAgentCfg_Snmp_DefaultCommunityMaps implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_DefaultCommunityMaps) IsYANGGoStruct() {}

// NewDefaultCommunityMap creates a new entry in the DefaultCommunityMap list of the
// Cisco_IOS_XRSnmpAgentCfg_Snmp_DefaultCommunityMaps struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_DefaultCommunityMaps) NewDefaultCommunityMap(CommunityName string) (*Cisco_IOS_XRSnmpAgentCfg_Snmp_DefaultCommunityMaps_DefaultCommunityMap, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.DefaultCommunityMap == nil {
		t.DefaultCommunityMap = make(map[string]*Cisco_IOS_XRSnmpAgentCfg_Snmp_DefaultCommunityMaps_DefaultCommunityMap)
	}

	key := CommunityName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.DefaultCommunityMap[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list DefaultCommunityMap", key)
	}

	t.DefaultCommunityMap[key] = &Cisco_IOS_XRSnmpAgentCfg_Snmp_DefaultCommunityMaps_DefaultCommunityMap{
		CommunityName: &CommunityName,
	}

	return t.DefaultCommunityMap[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_DefaultCommunityMaps) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSnmpAgentCfg_Snmp_DefaultCommunityMaps"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_DefaultCommunityMaps) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_DefaultCommunityMaps) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSnmpAgentCfg_Snmp_DefaultCommunityMaps.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_DefaultCommunityMaps) ΛBelongingModule() string {
	return "Cisco-IOS-XR-snmp-agent-cfg"
}


// Cisco_IOS_XRSnmpAgentCfg_Snmp_DefaultCommunityMaps_DefaultCommunityMap represents the /Cisco-IOS-XR-snmp-agent-cfg/snmp/default-community-maps/default-community-map YANG schema element.
type Cisco_IOS_XRSnmpAgentCfg_Snmp_DefaultCommunityMaps_DefaultCommunityMap struct {
	CommunityName	*string	`path:"community-name" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	Context	*string	`path:"context" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	Security	*string	`path:"security" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	TargetList	*string	`path:"target-list" module:"Cisco-IOS-XR-snmp-agent-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSnmpAgentCfg_Snmp_DefaultCommunityMaps_DefaultCommunityMap implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_DefaultCommunityMaps_DefaultCommunityMap) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRSnmpAgentCfg_Snmp_DefaultCommunityMaps_DefaultCommunityMap struct, which is a YANG list entry.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_DefaultCommunityMaps_DefaultCommunityMap) ΛListKeyMap() (map[string]interface{}, error) {
	if t.CommunityName == nil {
		return nil, fmt.Errorf("nil value for key CommunityName")
	}

	return map[string]interface{}{
		"community-name": *t.CommunityName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_DefaultCommunityMaps_DefaultCommunityMap) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSnmpAgentCfg_Snmp_DefaultCommunityMaps_DefaultCommunityMap"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_DefaultCommunityMaps_DefaultCommunityMap) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_DefaultCommunityMaps_DefaultCommunityMap) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSnmpAgentCfg_Snmp_DefaultCommunityMaps_DefaultCommunityMap.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_DefaultCommunityMaps_DefaultCommunityMap) ΛBelongingModule() string {
	return "Cisco-IOS-XR-snmp-agent-cfg"
}


// Cisco_IOS_XRSnmpAgentCfg_Snmp_DropPacket represents the /Cisco-IOS-XR-snmp-agent-cfg/snmp/drop-packet YANG schema element.
type Cisco_IOS_XRSnmpAgentCfg_Snmp_DropPacket struct {
	Report	*Cisco_IOS_XRSnmpAgentCfg_Snmp_DropPacket_Report	`path:"report" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	UnknownUser	YANGEmpty	`path:"unknown-user" module:"Cisco-IOS-XR-snmp-agent-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSnmpAgentCfg_Snmp_DropPacket implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_DropPacket) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_DropPacket) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSnmpAgentCfg_Snmp_DropPacket"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_DropPacket) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_DropPacket) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSnmpAgentCfg_Snmp_DropPacket.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_DropPacket) ΛBelongingModule() string {
	return "Cisco-IOS-XR-snmp-agent-cfg"
}


// Cisco_IOS_XRSnmpAgentCfg_Snmp_DropPacket_Report represents the /Cisco-IOS-XR-snmp-agent-cfg/snmp/drop-packet/report YANG schema element.
type Cisco_IOS_XRSnmpAgentCfg_Snmp_DropPacket_Report struct {
	Acl	*Cisco_IOS_XRSnmpAgentCfg_Snmp_DropPacket_Report_Acl	`path:"acl" module:"Cisco-IOS-XR-snmp-agent-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSnmpAgentCfg_Snmp_DropPacket_Report implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_DropPacket_Report) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_DropPacket_Report) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSnmpAgentCfg_Snmp_DropPacket_Report"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_DropPacket_Report) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_DropPacket_Report) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSnmpAgentCfg_Snmp_DropPacket_Report.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_DropPacket_Report) ΛBelongingModule() string {
	return "Cisco-IOS-XR-snmp-agent-cfg"
}


// Cisco_IOS_XRSnmpAgentCfg_Snmp_DropPacket_Report_Acl represents the /Cisco-IOS-XR-snmp-agent-cfg/snmp/drop-packet/report/acl YANG schema element.
type Cisco_IOS_XRSnmpAgentCfg_Snmp_DropPacket_Report_Acl struct {
	V4AccessList	*string	`path:"v4-access-list" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	V4AclType	E_Cisco_IOS_XRSnmpAgentCfg_Snmpacl	`path:"v4acl-type" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	V6AccessList	*string	`path:"v6-access-list" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	V6AclType	E_Cisco_IOS_XRSnmpAgentCfg_Snmpacl	`path:"v6acl-type" module:"Cisco-IOS-XR-snmp-agent-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSnmpAgentCfg_Snmp_DropPacket_Report_Acl implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_DropPacket_Report_Acl) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_DropPacket_Report_Acl) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSnmpAgentCfg_Snmp_DropPacket_Report_Acl"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_DropPacket_Report_Acl) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_DropPacket_Report_Acl) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSnmpAgentCfg_Snmp_DropPacket_Report_Acl.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_DropPacket_Report_Acl) ΛBelongingModule() string {
	return "Cisco-IOS-XR-snmp-agent-cfg"
}


// Cisco_IOS_XRSnmpAgentCfg_Snmp_EncryptedCommunityMaps represents the /Cisco-IOS-XR-snmp-agent-cfg/snmp/encrypted-community-maps YANG schema element.
type Cisco_IOS_XRSnmpAgentCfg_Snmp_EncryptedCommunityMaps struct {
	EncryptedCommunityMap	map[string]*Cisco_IOS_XRSnmpAgentCfg_Snmp_EncryptedCommunityMaps_EncryptedCommunityMap	`path:"encrypted-community-map" module:"Cisco-IOS-XR-snmp-agent-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSnmpAgentCfg_Snmp_EncryptedCommunityMaps implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_EncryptedCommunityMaps) IsYANGGoStruct() {}

// NewEncryptedCommunityMap creates a new entry in the EncryptedCommunityMap list of the
// Cisco_IOS_XRSnmpAgentCfg_Snmp_EncryptedCommunityMaps struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_EncryptedCommunityMaps) NewEncryptedCommunityMap(CommunityName string) (*Cisco_IOS_XRSnmpAgentCfg_Snmp_EncryptedCommunityMaps_EncryptedCommunityMap, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.EncryptedCommunityMap == nil {
		t.EncryptedCommunityMap = make(map[string]*Cisco_IOS_XRSnmpAgentCfg_Snmp_EncryptedCommunityMaps_EncryptedCommunityMap)
	}

	key := CommunityName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.EncryptedCommunityMap[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list EncryptedCommunityMap", key)
	}

	t.EncryptedCommunityMap[key] = &Cisco_IOS_XRSnmpAgentCfg_Snmp_EncryptedCommunityMaps_EncryptedCommunityMap{
		CommunityName: &CommunityName,
	}

	return t.EncryptedCommunityMap[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_EncryptedCommunityMaps) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSnmpAgentCfg_Snmp_EncryptedCommunityMaps"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_EncryptedCommunityMaps) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_EncryptedCommunityMaps) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSnmpAgentCfg_Snmp_EncryptedCommunityMaps.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_EncryptedCommunityMaps) ΛBelongingModule() string {
	return "Cisco-IOS-XR-snmp-agent-cfg"
}


// Cisco_IOS_XRSnmpAgentCfg_Snmp_EncryptedCommunityMaps_EncryptedCommunityMap represents the /Cisco-IOS-XR-snmp-agent-cfg/snmp/encrypted-community-maps/encrypted-community-map YANG schema element.
type Cisco_IOS_XRSnmpAgentCfg_Snmp_EncryptedCommunityMaps_EncryptedCommunityMap struct {
	CommunityName	*string	`path:"community-name" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	Context	*string	`path:"context" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	Security	*string	`path:"security" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	TargetList	*string	`path:"target-list" module:"Cisco-IOS-XR-snmp-agent-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSnmpAgentCfg_Snmp_EncryptedCommunityMaps_EncryptedCommunityMap implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_EncryptedCommunityMaps_EncryptedCommunityMap) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRSnmpAgentCfg_Snmp_EncryptedCommunityMaps_EncryptedCommunityMap struct, which is a YANG list entry.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_EncryptedCommunityMaps_EncryptedCommunityMap) ΛListKeyMap() (map[string]interface{}, error) {
	if t.CommunityName == nil {
		return nil, fmt.Errorf("nil value for key CommunityName")
	}

	return map[string]interface{}{
		"community-name": *t.CommunityName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_EncryptedCommunityMaps_EncryptedCommunityMap) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSnmpAgentCfg_Snmp_EncryptedCommunityMaps_EncryptedCommunityMap"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_EncryptedCommunityMaps_EncryptedCommunityMap) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_EncryptedCommunityMaps_EncryptedCommunityMap) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSnmpAgentCfg_Snmp_EncryptedCommunityMaps_EncryptedCommunityMap.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_EncryptedCommunityMaps_EncryptedCommunityMap) ΛBelongingModule() string {
	return "Cisco-IOS-XR-snmp-agent-cfg"
}


// Cisco_IOS_XRSnmpAgentCfg_Snmp_Groups represents the /Cisco-IOS-XR-snmp-agent-cfg/snmp/groups YANG schema element.
type Cisco_IOS_XRSnmpAgentCfg_Snmp_Groups struct {
	Group	map[string]*Cisco_IOS_XRSnmpAgentCfg_Snmp_Groups_Group	`path:"group" module:"Cisco-IOS-XR-snmp-agent-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSnmpAgentCfg_Snmp_Groups implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Groups) IsYANGGoStruct() {}

// NewGroup creates a new entry in the Group list of the
// Cisco_IOS_XRSnmpAgentCfg_Snmp_Groups struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Groups) NewGroup(Name string) (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Groups_Group, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Group == nil {
		t.Group = make(map[string]*Cisco_IOS_XRSnmpAgentCfg_Snmp_Groups_Group)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Group[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Group", key)
	}

	t.Group[key] = &Cisco_IOS_XRSnmpAgentCfg_Snmp_Groups_Group{
		Name: &Name,
	}

	return t.Group[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Groups) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSnmpAgentCfg_Snmp_Groups"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Groups) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Groups) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSnmpAgentCfg_Snmp_Groups.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Groups) ΛBelongingModule() string {
	return "Cisco-IOS-XR-snmp-agent-cfg"
}


// Cisco_IOS_XRSnmpAgentCfg_Snmp_Groups_Group represents the /Cisco-IOS-XR-snmp-agent-cfg/snmp/groups/group YANG schema element.
type Cisco_IOS_XRSnmpAgentCfg_Snmp_Groups_Group struct {
	ContextName	*string	`path:"context-name" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	Name	*string	`path:"name" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	NotifyView	*string	`path:"notify-view" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	ReadView	*string	`path:"read-view" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	SecurityModel	E_Cisco_IOS_XRSnmpAgentCfg_SnmpSecurityModel	`path:"security-model" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	SnmpVersion	E_Cisco_IOS_XRSnmpAgentCfg_GroupSnmpVersion	`path:"snmp-version" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	V4AccessList	*string	`path:"v4-access-list" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	V4AclType	E_Cisco_IOS_XRSnmpAgentCfg_Snmpacl	`path:"v4acl-type" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	V6AccessList	*string	`path:"v6-access-list" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	V6AclType	E_Cisco_IOS_XRSnmpAgentCfg_Snmpacl	`path:"v6acl-type" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	WriteView	*string	`path:"write-view" module:"Cisco-IOS-XR-snmp-agent-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSnmpAgentCfg_Snmp_Groups_Group implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Groups_Group) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRSnmpAgentCfg_Snmp_Groups_Group struct, which is a YANG list entry.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Groups_Group) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Groups_Group) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSnmpAgentCfg_Snmp_Groups_Group"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Groups_Group) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Groups_Group) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSnmpAgentCfg_Snmp_Groups_Group.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Groups_Group) ΛBelongingModule() string {
	return "Cisco-IOS-XR-snmp-agent-cfg"
}


// Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4 represents the /Cisco-IOS-XR-snmp-agent-cfg/snmp/ipv4 YANG schema element.
type Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4 struct {
	Tos	*Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos	`path:"tos" module:"Cisco-IOS-XR-snmp-agent-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4) ΛBelongingModule() string {
	return "Cisco-IOS-XR-snmp-agent-cfg"
}


// Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos represents the /Cisco-IOS-XR-snmp-agent-cfg/snmp/ipv4/tos YANG schema element.
type Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos struct {
	Dscp	Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Dscp_Union	`path:"dscp" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	Precedence	Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Precedence_Union	`path:"precedence" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	Type	E_Cisco_IOS_XRSnmpAgentCfg_SnmpTos	`path:"type" module:"Cisco-IOS-XR-snmp-agent-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos) ΛBelongingModule() string {
	return "Cisco-IOS-XR-snmp-agent-cfg"
}

// Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Dscp_Union is an interface that is implemented by valid types for the union
// for the leaf /Cisco-IOS-XR-snmp-agent-cfg/snmp/ipv4/tos/dscp within the YANG schema.
type Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Dscp_Union interface {
	Is_Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Dscp_Union()
}

// Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Dscp_Union_E_Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Dscp is used when /Cisco-IOS-XR-snmp-agent-cfg/snmp/ipv4/tos/dscp
// is to be set to a E_Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Dscp value.
type Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Dscp_Union_E_Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Dscp struct {
	E_Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Dscp	E_Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Dscp
}

// Is_Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Dscp_Union ensures that Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Dscp_Union_E_Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Dscp
// implements the Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Dscp_Union interface.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Dscp_Union_E_Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Dscp) Is_Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Dscp_Union() {}

// Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Dscp_Union_Uint32 is used when /Cisco-IOS-XR-snmp-agent-cfg/snmp/ipv4/tos/dscp
// is to be set to a uint32 value.
type Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Dscp_Union_Uint32 struct {
	Uint32	uint32
}

// Is_Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Dscp_Union ensures that Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Dscp_Union_Uint32
// implements the Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Dscp_Union interface.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Dscp_Union_Uint32) Is_Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Dscp_Union() {}

// To_Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Dscp_Union takes an input interface{} and attempts to convert it to a struct
// which implements the Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Dscp_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos) To_Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Dscp_Union(i interface{}) (Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Dscp_Union, error) {
	switch v := i.(type) {
	case E_Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Dscp:
		return &Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Dscp_Union_E_Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Dscp{v}, nil
	case uint32:
		return &Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Dscp_Union_Uint32{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Dscp_Union, unknown union type, got: %T, want any of [E_Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Dscp, uint32]", i, i)
	}
}

// Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Precedence_Union is an interface that is implemented by valid types for the union
// for the leaf /Cisco-IOS-XR-snmp-agent-cfg/snmp/ipv4/tos/precedence within the YANG schema.
type Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Precedence_Union interface {
	Is_Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Precedence_Union()
}

// Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Precedence_Union_E_Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Precedence is used when /Cisco-IOS-XR-snmp-agent-cfg/snmp/ipv4/tos/precedence
// is to be set to a E_Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Precedence value.
type Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Precedence_Union_E_Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Precedence struct {
	E_Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Precedence	E_Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Precedence
}

// Is_Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Precedence_Union ensures that Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Precedence_Union_E_Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Precedence
// implements the Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Precedence_Union interface.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Precedence_Union_E_Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Precedence) Is_Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Precedence_Union() {}

// Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Precedence_Union_Uint32 is used when /Cisco-IOS-XR-snmp-agent-cfg/snmp/ipv4/tos/precedence
// is to be set to a uint32 value.
type Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Precedence_Union_Uint32 struct {
	Uint32	uint32
}

// Is_Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Precedence_Union ensures that Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Precedence_Union_Uint32
// implements the Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Precedence_Union interface.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Precedence_Union_Uint32) Is_Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Precedence_Union() {}

// To_Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Precedence_Union takes an input interface{} and attempts to convert it to a struct
// which implements the Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Precedence_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos) To_Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Precedence_Union(i interface{}) (Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Precedence_Union, error) {
	switch v := i.(type) {
	case E_Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Precedence:
		return &Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Precedence_Union_E_Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Precedence{v}, nil
	case uint32:
		return &Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Precedence_Union_Uint32{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Precedence_Union, unknown union type, got: %T, want any of [E_Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Precedence, uint32]", i, i)
	}
}


// Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6 represents the /Cisco-IOS-XR-snmp-agent-cfg/snmp/ipv6 YANG schema element.
type Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6 struct {
	Tos	*Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos	`path:"tos" module:"Cisco-IOS-XR-snmp-agent-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6) ΛBelongingModule() string {
	return "Cisco-IOS-XR-snmp-agent-cfg"
}


// Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos represents the /Cisco-IOS-XR-snmp-agent-cfg/snmp/ipv6/tos YANG schema element.
type Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos struct {
	Dscp	Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Dscp_Union	`path:"dscp" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	Precedence	Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Precedence_Union	`path:"precedence" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	Type	E_Cisco_IOS_XRSnmpAgentCfg_SnmpTos	`path:"type" module:"Cisco-IOS-XR-snmp-agent-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos) ΛBelongingModule() string {
	return "Cisco-IOS-XR-snmp-agent-cfg"
}

// Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Dscp_Union is an interface that is implemented by valid types for the union
// for the leaf /Cisco-IOS-XR-snmp-agent-cfg/snmp/ipv6/tos/dscp within the YANG schema.
type Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Dscp_Union interface {
	Is_Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Dscp_Union()
}

// Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Dscp_Union_E_Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Dscp is used when /Cisco-IOS-XR-snmp-agent-cfg/snmp/ipv6/tos/dscp
// is to be set to a E_Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Dscp value.
type Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Dscp_Union_E_Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Dscp struct {
	E_Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Dscp	E_Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Dscp
}

// Is_Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Dscp_Union ensures that Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Dscp_Union_E_Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Dscp
// implements the Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Dscp_Union interface.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Dscp_Union_E_Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Dscp) Is_Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Dscp_Union() {}

// Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Dscp_Union_Uint32 is used when /Cisco-IOS-XR-snmp-agent-cfg/snmp/ipv6/tos/dscp
// is to be set to a uint32 value.
type Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Dscp_Union_Uint32 struct {
	Uint32	uint32
}

// Is_Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Dscp_Union ensures that Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Dscp_Union_Uint32
// implements the Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Dscp_Union interface.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Dscp_Union_Uint32) Is_Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Dscp_Union() {}

// To_Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Dscp_Union takes an input interface{} and attempts to convert it to a struct
// which implements the Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Dscp_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos) To_Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Dscp_Union(i interface{}) (Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Dscp_Union, error) {
	switch v := i.(type) {
	case E_Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Dscp:
		return &Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Dscp_Union_E_Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Dscp{v}, nil
	case uint32:
		return &Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Dscp_Union_Uint32{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Dscp_Union, unknown union type, got: %T, want any of [E_Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Dscp, uint32]", i, i)
	}
}

// Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Precedence_Union is an interface that is implemented by valid types for the union
// for the leaf /Cisco-IOS-XR-snmp-agent-cfg/snmp/ipv6/tos/precedence within the YANG schema.
type Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Precedence_Union interface {
	Is_Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Precedence_Union()
}

// Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Precedence_Union_E_Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Precedence is used when /Cisco-IOS-XR-snmp-agent-cfg/snmp/ipv6/tos/precedence
// is to be set to a E_Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Precedence value.
type Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Precedence_Union_E_Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Precedence struct {
	E_Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Precedence	E_Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Precedence
}

// Is_Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Precedence_Union ensures that Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Precedence_Union_E_Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Precedence
// implements the Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Precedence_Union interface.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Precedence_Union_E_Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Precedence) Is_Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Precedence_Union() {}

// Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Precedence_Union_Uint32 is used when /Cisco-IOS-XR-snmp-agent-cfg/snmp/ipv6/tos/precedence
// is to be set to a uint32 value.
type Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Precedence_Union_Uint32 struct {
	Uint32	uint32
}

// Is_Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Precedence_Union ensures that Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Precedence_Union_Uint32
// implements the Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Precedence_Union interface.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Precedence_Union_Uint32) Is_Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Precedence_Union() {}

// To_Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Precedence_Union takes an input interface{} and attempts to convert it to a struct
// which implements the Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Precedence_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos) To_Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Precedence_Union(i interface{}) (Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Precedence_Union, error) {
	switch v := i.(type) {
	case E_Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Precedence:
		return &Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Precedence_Union_E_Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Precedence{v}, nil
	case uint32:
		return &Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Precedence_Union_Uint32{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Precedence_Union, unknown union type, got: %T, want any of [E_Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Precedence, uint32]", i, i)
	}
}


// Cisco_IOS_XRSnmpAgentCfg_Snmp_Logging represents the /Cisco-IOS-XR-snmp-agent-cfg/snmp/logging YANG schema element.
type Cisco_IOS_XRSnmpAgentCfg_Snmp_Logging struct {
	Threshold	*Cisco_IOS_XRSnmpAgentCfg_Snmp_Logging_Threshold	`path:"threshold" module:"Cisco-IOS-XR-snmp-agent-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSnmpAgentCfg_Snmp_Logging implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Logging) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Logging) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSnmpAgentCfg_Snmp_Logging"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Logging) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Logging) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSnmpAgentCfg_Snmp_Logging.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Logging) ΛBelongingModule() string {
	return "Cisco-IOS-XR-snmp-agent-cfg"
}


// Cisco_IOS_XRSnmpAgentCfg_Snmp_Logging_Threshold represents the /Cisco-IOS-XR-snmp-agent-cfg/snmp/logging/threshold YANG schema element.
type Cisco_IOS_XRSnmpAgentCfg_Snmp_Logging_Threshold struct {
	OidProcessing	*uint32	`path:"oid-processing" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	PduProcessing	*uint32	`path:"pdu-processing" module:"Cisco-IOS-XR-snmp-agent-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSnmpAgentCfg_Snmp_Logging_Threshold implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Logging_Threshold) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Logging_Threshold) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSnmpAgentCfg_Snmp_Logging_Threshold"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Logging_Threshold) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Logging_Threshold) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSnmpAgentCfg_Snmp_Logging_Threshold.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Logging_Threshold) ΛBelongingModule() string {
	return "Cisco-IOS-XR-snmp-agent-cfg"
}


// Cisco_IOS_XRSnmpAgentCfg_Snmp_Notification represents the /Cisco-IOS-XR-snmp-agent-cfg/snmp/notification YANG schema element.
type Cisco_IOS_XRSnmpAgentCfg_Snmp_Notification struct {
	MplsFrr	*Cisco_IOS_XRSnmpAgentCfg_Snmp_Notification_MplsFrr	`path:"mpls-frr" module:"Cisco-IOS-XR-mpls-te-cfg"`
	MplsTe	*Cisco_IOS_XRSnmpAgentCfg_Snmp_Notification_MplsTe	`path:"mpls-te" module:"Cisco-IOS-XR-mpls-te-cfg"`
	MplsTeP2Mp	*Cisco_IOS_XRSnmpAgentCfg_Snmp_Notification_MplsTeP2Mp	`path:"mpls-te-p2mp" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Snmp	*Cisco_IOS_XRSnmpAgentCfg_Snmp_Notification_Snmp	`path:"snmp" module:"Cisco-IOS-XR-snmp-agent-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSnmpAgentCfg_Snmp_Notification implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Notification) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Notification) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSnmpAgentCfg_Snmp_Notification"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Notification) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Notification) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSnmpAgentCfg_Snmp_Notification.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Notification) ΛBelongingModule() string {
	return "Cisco-IOS-XR-snmp-agent-cfg"
}


// Cisco_IOS_XRSnmpAgentCfg_Snmp_Notification_MplsFrr represents the /Cisco-IOS-XR-snmp-agent-cfg/snmp/notification/mpls-frr YANG schema element.
type Cisco_IOS_XRSnmpAgentCfg_Snmp_Notification_MplsFrr struct {
	Enable	YANGEmpty	`path:"enable" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Protected	YANGEmpty	`path:"protected" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Unprotected	YANGEmpty	`path:"unprotected" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSnmpAgentCfg_Snmp_Notification_MplsFrr implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Notification_MplsFrr) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Notification_MplsFrr) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSnmpAgentCfg_Snmp_Notification_MplsFrr"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Notification_MplsFrr) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Notification_MplsFrr) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSnmpAgentCfg_Snmp_Notification_MplsFrr.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Notification_MplsFrr) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRSnmpAgentCfg_Snmp_Notification_MplsTe represents the /Cisco-IOS-XR-snmp-agent-cfg/snmp/notification/mpls-te YANG schema element.
type Cisco_IOS_XRSnmpAgentCfg_Snmp_Notification_MplsTe struct {
	Cisco	YANGEmpty	`path:"cisco" module:"Cisco-IOS-XR-mpls-te-cfg"`
	CiscoExtension	*Cisco_IOS_XRSnmpAgentCfg_Snmp_Notification_MplsTe_CiscoExtension	`path:"cisco-extension" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Down	YANGEmpty	`path:"down" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Reoptimize	YANGEmpty	`path:"reoptimize" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Reroute	YANGEmpty	`path:"reroute" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Up	YANGEmpty	`path:"up" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSnmpAgentCfg_Snmp_Notification_MplsTe implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Notification_MplsTe) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Notification_MplsTe) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSnmpAgentCfg_Snmp_Notification_MplsTe"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Notification_MplsTe) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Notification_MplsTe) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSnmpAgentCfg_Snmp_Notification_MplsTe.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Notification_MplsTe) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRSnmpAgentCfg_Snmp_Notification_MplsTeP2Mp represents the /Cisco-IOS-XR-snmp-agent-cfg/snmp/notification/mpls-te-p2mp YANG schema element.
type Cisco_IOS_XRSnmpAgentCfg_Snmp_Notification_MplsTeP2Mp struct {
	Down	YANGEmpty	`path:"down" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Up	YANGEmpty	`path:"up" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSnmpAgentCfg_Snmp_Notification_MplsTeP2Mp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Notification_MplsTeP2Mp) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Notification_MplsTeP2Mp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSnmpAgentCfg_Snmp_Notification_MplsTeP2Mp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Notification_MplsTeP2Mp) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Notification_MplsTeP2Mp) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSnmpAgentCfg_Snmp_Notification_MplsTeP2Mp.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Notification_MplsTeP2Mp) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRSnmpAgentCfg_Snmp_Notification_MplsTe_CiscoExtension represents the /Cisco-IOS-XR-snmp-agent-cfg/snmp/notification/mpls-te/cisco-extension YANG schema element.
type Cisco_IOS_XRSnmpAgentCfg_Snmp_Notification_MplsTe_CiscoExtension struct {
	BringupFail	YANGEmpty	`path:"bringup-fail" module:"Cisco-IOS-XR-mpls-te-cfg"`
	InsufficientBandwidth	YANGEmpty	`path:"insufficient-bandwidth" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Preempt	YANGEmpty	`path:"preempt" module:"Cisco-IOS-XR-mpls-te-cfg"`
	ReRoutePending	YANGEmpty	`path:"re-route-pending" module:"Cisco-IOS-XR-mpls-te-cfg"`
	ReRoutePendingClear	YANGEmpty	`path:"re-route-pending-clear" module:"Cisco-IOS-XR-mpls-te-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSnmpAgentCfg_Snmp_Notification_MplsTe_CiscoExtension implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Notification_MplsTe_CiscoExtension) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Notification_MplsTe_CiscoExtension) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSnmpAgentCfg_Snmp_Notification_MplsTe_CiscoExtension"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Notification_MplsTe_CiscoExtension) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Notification_MplsTe_CiscoExtension) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSnmpAgentCfg_Snmp_Notification_MplsTe_CiscoExtension.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Notification_MplsTe_CiscoExtension) ΛBelongingModule() string {
	return "Cisco-IOS-XR-mpls-te-cfg"
}


// Cisco_IOS_XRSnmpAgentCfg_Snmp_Notification_Snmp represents the /Cisco-IOS-XR-snmp-agent-cfg/snmp/notification/snmp YANG schema element.
type Cisco_IOS_XRSnmpAgentCfg_Snmp_Notification_Snmp struct {
	Authentication	YANGEmpty	`path:"authentication" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	ColdStart	YANGEmpty	`path:"cold-start" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	Enable	YANGEmpty	`path:"enable" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	WarmStart	YANGEmpty	`path:"warm-start" module:"Cisco-IOS-XR-snmp-agent-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSnmpAgentCfg_Snmp_Notification_Snmp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Notification_Snmp) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Notification_Snmp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSnmpAgentCfg_Snmp_Notification_Snmp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Notification_Snmp) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Notification_Snmp) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSnmpAgentCfg_Snmp_Notification_Snmp.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Notification_Snmp) ΛBelongingModule() string {
	return "Cisco-IOS-XR-snmp-agent-cfg"
}


// Cisco_IOS_XRSnmpAgentCfg_Snmp_OverloadControl represents the /Cisco-IOS-XR-snmp-agent-cfg/snmp/overload-control YANG schema element.
type Cisco_IOS_XRSnmpAgentCfg_Snmp_OverloadControl struct {
	DropTime	*uint32	`path:"drop-time" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	ThrottleRate	*uint32	`path:"throttle-rate" module:"Cisco-IOS-XR-snmp-agent-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSnmpAgentCfg_Snmp_OverloadControl implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_OverloadControl) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_OverloadControl) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSnmpAgentCfg_Snmp_OverloadControl"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_OverloadControl) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_OverloadControl) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSnmpAgentCfg_Snmp_OverloadControl.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_OverloadControl) ΛBelongingModule() string {
	return "Cisco-IOS-XR-snmp-agent-cfg"
}


// Cisco_IOS_XRSnmpAgentCfg_Snmp_System represents the /Cisco-IOS-XR-snmp-agent-cfg/snmp/system YANG schema element.
type Cisco_IOS_XRSnmpAgentCfg_Snmp_System struct {
	ChassisId	*string	`path:"chassis-id" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	Contact	*string	`path:"contact" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	Location	*string	`path:"location" module:"Cisco-IOS-XR-snmp-agent-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSnmpAgentCfg_Snmp_System implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_System) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_System) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSnmpAgentCfg_Snmp_System"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_System) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_System) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSnmpAgentCfg_Snmp_System.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_System) ΛBelongingModule() string {
	return "Cisco-IOS-XR-snmp-agent-cfg"
}


// Cisco_IOS_XRSnmpAgentCfg_Snmp_Target represents the /Cisco-IOS-XR-snmp-agent-cfg/snmp/target YANG schema element.
type Cisco_IOS_XRSnmpAgentCfg_Snmp_Target struct {
	Targets	*Cisco_IOS_XRSnmpAgentCfg_Snmp_Target_Targets	`path:"targets" module:"Cisco-IOS-XR-snmp-agent-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSnmpAgentCfg_Snmp_Target implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Target) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Target) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSnmpAgentCfg_Snmp_Target"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Target) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Target) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSnmpAgentCfg_Snmp_Target.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Target) ΛBelongingModule() string {
	return "Cisco-IOS-XR-snmp-agent-cfg"
}


// Cisco_IOS_XRSnmpAgentCfg_Snmp_Target_Targets represents the /Cisco-IOS-XR-snmp-agent-cfg/snmp/target/targets YANG schema element.
type Cisco_IOS_XRSnmpAgentCfg_Snmp_Target_Targets struct {
	Target	map[string]*Cisco_IOS_XRSnmpAgentCfg_Snmp_Target_Targets_Target	`path:"target" module:"Cisco-IOS-XR-snmp-agent-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSnmpAgentCfg_Snmp_Target_Targets implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Target_Targets) IsYANGGoStruct() {}

// NewTarget creates a new entry in the Target list of the
// Cisco_IOS_XRSnmpAgentCfg_Snmp_Target_Targets struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Target_Targets) NewTarget(TargetListName string) (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Target_Targets_Target, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Target == nil {
		t.Target = make(map[string]*Cisco_IOS_XRSnmpAgentCfg_Snmp_Target_Targets_Target)
	}

	key := TargetListName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Target[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Target", key)
	}

	t.Target[key] = &Cisco_IOS_XRSnmpAgentCfg_Snmp_Target_Targets_Target{
		TargetListName: &TargetListName,
	}

	return t.Target[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Target_Targets) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSnmpAgentCfg_Snmp_Target_Targets"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Target_Targets) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Target_Targets) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSnmpAgentCfg_Snmp_Target_Targets.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Target_Targets) ΛBelongingModule() string {
	return "Cisco-IOS-XR-snmp-agent-cfg"
}


// Cisco_IOS_XRSnmpAgentCfg_Snmp_Target_Targets_Target represents the /Cisco-IOS-XR-snmp-agent-cfg/snmp/target/targets/target YANG schema element.
type Cisco_IOS_XRSnmpAgentCfg_Snmp_Target_Targets_Target struct {
	TargetAddresses	*Cisco_IOS_XRSnmpAgentCfg_Snmp_Target_Targets_Target_TargetAddresses	`path:"target-addresses" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	TargetListName	*string	`path:"target-list-name" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	VrfNames	*Cisco_IOS_XRSnmpAgentCfg_Snmp_Target_Targets_Target_VrfNames	`path:"vrf-names" module:"Cisco-IOS-XR-snmp-agent-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSnmpAgentCfg_Snmp_Target_Targets_Target implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Target_Targets_Target) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRSnmpAgentCfg_Snmp_Target_Targets_Target struct, which is a YANG list entry.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Target_Targets_Target) ΛListKeyMap() (map[string]interface{}, error) {
	if t.TargetListName == nil {
		return nil, fmt.Errorf("nil value for key TargetListName")
	}

	return map[string]interface{}{
		"target-list-name": *t.TargetListName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Target_Targets_Target) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSnmpAgentCfg_Snmp_Target_Targets_Target"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Target_Targets_Target) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Target_Targets_Target) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSnmpAgentCfg_Snmp_Target_Targets_Target.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Target_Targets_Target) ΛBelongingModule() string {
	return "Cisco-IOS-XR-snmp-agent-cfg"
}


// Cisco_IOS_XRSnmpAgentCfg_Snmp_Target_Targets_Target_TargetAddresses represents the /Cisco-IOS-XR-snmp-agent-cfg/snmp/target/targets/target/target-addresses YANG schema element.
type Cisco_IOS_XRSnmpAgentCfg_Snmp_Target_Targets_Target_TargetAddresses struct {
	TargetAddress	map[string]*Cisco_IOS_XRSnmpAgentCfg_Snmp_Target_Targets_Target_TargetAddresses_TargetAddress	`path:"target-address" module:"Cisco-IOS-XR-snmp-agent-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSnmpAgentCfg_Snmp_Target_Targets_Target_TargetAddresses implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Target_Targets_Target_TargetAddresses) IsYANGGoStruct() {}

// NewTargetAddress creates a new entry in the TargetAddress list of the
// Cisco_IOS_XRSnmpAgentCfg_Snmp_Target_Targets_Target_TargetAddresses struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Target_Targets_Target_TargetAddresses) NewTargetAddress(IpAddress string) (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Target_Targets_Target_TargetAddresses_TargetAddress, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.TargetAddress == nil {
		t.TargetAddress = make(map[string]*Cisco_IOS_XRSnmpAgentCfg_Snmp_Target_Targets_Target_TargetAddresses_TargetAddress)
	}

	key := IpAddress

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.TargetAddress[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list TargetAddress", key)
	}

	t.TargetAddress[key] = &Cisco_IOS_XRSnmpAgentCfg_Snmp_Target_Targets_Target_TargetAddresses_TargetAddress{
		IpAddress: &IpAddress,
	}

	return t.TargetAddress[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Target_Targets_Target_TargetAddresses) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSnmpAgentCfg_Snmp_Target_Targets_Target_TargetAddresses"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Target_Targets_Target_TargetAddresses) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Target_Targets_Target_TargetAddresses) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSnmpAgentCfg_Snmp_Target_Targets_Target_TargetAddresses.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Target_Targets_Target_TargetAddresses) ΛBelongingModule() string {
	return "Cisco-IOS-XR-snmp-agent-cfg"
}


// Cisco_IOS_XRSnmpAgentCfg_Snmp_Target_Targets_Target_TargetAddresses_TargetAddress represents the /Cisco-IOS-XR-snmp-agent-cfg/snmp/target/targets/target/target-addresses/target-address YANG schema element.
type Cisco_IOS_XRSnmpAgentCfg_Snmp_Target_Targets_Target_TargetAddresses_TargetAddress struct {
	IpAddress	*string	`path:"ip-address" module:"Cisco-IOS-XR-snmp-agent-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSnmpAgentCfg_Snmp_Target_Targets_Target_TargetAddresses_TargetAddress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Target_Targets_Target_TargetAddresses_TargetAddress) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRSnmpAgentCfg_Snmp_Target_Targets_Target_TargetAddresses_TargetAddress struct, which is a YANG list entry.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Target_Targets_Target_TargetAddresses_TargetAddress) ΛListKeyMap() (map[string]interface{}, error) {
	if t.IpAddress == nil {
		return nil, fmt.Errorf("nil value for key IpAddress")
	}

	return map[string]interface{}{
		"ip-address": *t.IpAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Target_Targets_Target_TargetAddresses_TargetAddress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSnmpAgentCfg_Snmp_Target_Targets_Target_TargetAddresses_TargetAddress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Target_Targets_Target_TargetAddresses_TargetAddress) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Target_Targets_Target_TargetAddresses_TargetAddress) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSnmpAgentCfg_Snmp_Target_Targets_Target_TargetAddresses_TargetAddress.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Target_Targets_Target_TargetAddresses_TargetAddress) ΛBelongingModule() string {
	return "Cisco-IOS-XR-snmp-agent-cfg"
}


// Cisco_IOS_XRSnmpAgentCfg_Snmp_Target_Targets_Target_VrfNames represents the /Cisco-IOS-XR-snmp-agent-cfg/snmp/target/targets/target/vrf-names YANG schema element.
type Cisco_IOS_XRSnmpAgentCfg_Snmp_Target_Targets_Target_VrfNames struct {
	VrfName	map[string]*Cisco_IOS_XRSnmpAgentCfg_Snmp_Target_Targets_Target_VrfNames_VrfName	`path:"vrf-name" module:"Cisco-IOS-XR-snmp-agent-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSnmpAgentCfg_Snmp_Target_Targets_Target_VrfNames implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Target_Targets_Target_VrfNames) IsYANGGoStruct() {}

// NewVrfName creates a new entry in the VrfName list of the
// Cisco_IOS_XRSnmpAgentCfg_Snmp_Target_Targets_Target_VrfNames struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Target_Targets_Target_VrfNames) NewVrfName(Name string) (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Target_Targets_Target_VrfNames_VrfName, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.VrfName == nil {
		t.VrfName = make(map[string]*Cisco_IOS_XRSnmpAgentCfg_Snmp_Target_Targets_Target_VrfNames_VrfName)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.VrfName[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list VrfName", key)
	}

	t.VrfName[key] = &Cisco_IOS_XRSnmpAgentCfg_Snmp_Target_Targets_Target_VrfNames_VrfName{
		Name: &Name,
	}

	return t.VrfName[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Target_Targets_Target_VrfNames) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSnmpAgentCfg_Snmp_Target_Targets_Target_VrfNames"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Target_Targets_Target_VrfNames) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Target_Targets_Target_VrfNames) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSnmpAgentCfg_Snmp_Target_Targets_Target_VrfNames.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Target_Targets_Target_VrfNames) ΛBelongingModule() string {
	return "Cisco-IOS-XR-snmp-agent-cfg"
}


// Cisco_IOS_XRSnmpAgentCfg_Snmp_Target_Targets_Target_VrfNames_VrfName represents the /Cisco-IOS-XR-snmp-agent-cfg/snmp/target/targets/target/vrf-names/vrf-name YANG schema element.
type Cisco_IOS_XRSnmpAgentCfg_Snmp_Target_Targets_Target_VrfNames_VrfName struct {
	Name	*string	`path:"name" module:"Cisco-IOS-XR-snmp-agent-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSnmpAgentCfg_Snmp_Target_Targets_Target_VrfNames_VrfName implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Target_Targets_Target_VrfNames_VrfName) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRSnmpAgentCfg_Snmp_Target_Targets_Target_VrfNames_VrfName struct, which is a YANG list entry.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Target_Targets_Target_VrfNames_VrfName) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Target_Targets_Target_VrfNames_VrfName) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSnmpAgentCfg_Snmp_Target_Targets_Target_VrfNames_VrfName"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Target_Targets_Target_VrfNames_VrfName) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Target_Targets_Target_VrfNames_VrfName) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSnmpAgentCfg_Snmp_Target_Targets_Target_VrfNames_VrfName.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Target_Targets_Target_VrfNames_VrfName) ΛBelongingModule() string {
	return "Cisco-IOS-XR-snmp-agent-cfg"
}


// Cisco_IOS_XRSnmpAgentCfg_Snmp_Timeouts represents the /Cisco-IOS-XR-snmp-agent-cfg/snmp/timeouts YANG schema element.
type Cisco_IOS_XRSnmpAgentCfg_Snmp_Timeouts struct {
	Duplicates	*uint32	`path:"duplicates" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	InQdrop	*uint32	`path:"in-qdrop" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	PduStats	*uint32	`path:"pdu-stats" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	Subagent	*uint32	`path:"subagent" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	Threshold	*uint32	`path:"threshold" module:"Cisco-IOS-XR-snmp-agent-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSnmpAgentCfg_Snmp_Timeouts implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Timeouts) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Timeouts) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSnmpAgentCfg_Snmp_Timeouts"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Timeouts) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Timeouts) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSnmpAgentCfg_Snmp_Timeouts.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Timeouts) ΛBelongingModule() string {
	return "Cisco-IOS-XR-snmp-agent-cfg"
}


// Cisco_IOS_XRSnmpAgentCfg_Snmp_Trap represents the /Cisco-IOS-XR-snmp-agent-cfg/snmp/trap YANG schema element.
type Cisco_IOS_XRSnmpAgentCfg_Snmp_Trap struct {
	QueueLength	*uint32	`path:"queue-length" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	ThrottleTime	*uint32	`path:"throttle-time" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	Timeout	*uint32	`path:"timeout" module:"Cisco-IOS-XR-snmp-agent-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSnmpAgentCfg_Snmp_Trap implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Trap) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Trap) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSnmpAgentCfg_Snmp_Trap"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Trap) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Trap) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSnmpAgentCfg_Snmp_Trap.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Trap) ΛBelongingModule() string {
	return "Cisco-IOS-XR-snmp-agent-cfg"
}


// Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts represents the /Cisco-IOS-XR-snmp-agent-cfg/snmp/trap-hosts YANG schema element.
type Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts struct {
	TrapHost	map[string]*Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost	`path:"trap-host" module:"Cisco-IOS-XR-snmp-agent-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts) IsYANGGoStruct() {}

// NewTrapHost creates a new entry in the TrapHost list of the
// Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts) NewTrapHost(IpAddress string) (*Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.TrapHost == nil {
		t.TrapHost = make(map[string]*Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost)
	}

	key := IpAddress

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.TrapHost[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list TrapHost", key)
	}

	t.TrapHost[key] = &Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost{
		IpAddress: &IpAddress,
	}

	return t.TrapHost[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts) ΛBelongingModule() string {
	return "Cisco-IOS-XR-snmp-agent-cfg"
}


// Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost represents the /Cisco-IOS-XR-snmp-agent-cfg/snmp/trap-hosts/trap-host YANG schema element.
type Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost struct {
	DefaultUserCommunities	*Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_DefaultUserCommunities	`path:"default-user-communities" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	EncryptedUserCommunities	*Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_EncryptedUserCommunities	`path:"encrypted-user-communities" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	InformHost	*Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_InformHost	`path:"inform-host" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	IpAddress	*string	`path:"ip-address" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	Type6EncryptedUserCommunities	*Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_Type6EncryptedUserCommunities	`path:"type6-encrypted-user-communities" module:"Cisco-IOS-XR-snmp-agent-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost struct, which is a YANG list entry.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost) ΛListKeyMap() (map[string]interface{}, error) {
	if t.IpAddress == nil {
		return nil, fmt.Errorf("nil value for key IpAddress")
	}

	return map[string]interface{}{
		"ip-address": *t.IpAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost) ΛBelongingModule() string {
	return "Cisco-IOS-XR-snmp-agent-cfg"
}


// Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_DefaultUserCommunities represents the /Cisco-IOS-XR-snmp-agent-cfg/snmp/trap-hosts/trap-host/default-user-communities YANG schema element.
type Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_DefaultUserCommunities struct {
	DefaultUserCommunity	map[string]*Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_DefaultUserCommunities_DefaultUserCommunity	`path:"default-user-community" module:"Cisco-IOS-XR-snmp-agent-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_DefaultUserCommunities implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_DefaultUserCommunities) IsYANGGoStruct() {}

// NewDefaultUserCommunity creates a new entry in the DefaultUserCommunity list of the
// Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_DefaultUserCommunities struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_DefaultUserCommunities) NewDefaultUserCommunity(CommunityName string) (*Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_DefaultUserCommunities_DefaultUserCommunity, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.DefaultUserCommunity == nil {
		t.DefaultUserCommunity = make(map[string]*Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_DefaultUserCommunities_DefaultUserCommunity)
	}

	key := CommunityName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.DefaultUserCommunity[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list DefaultUserCommunity", key)
	}

	t.DefaultUserCommunity[key] = &Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_DefaultUserCommunities_DefaultUserCommunity{
		CommunityName: &CommunityName,
	}

	return t.DefaultUserCommunity[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_DefaultUserCommunities) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_DefaultUserCommunities"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_DefaultUserCommunities) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_DefaultUserCommunities) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_DefaultUserCommunities.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_DefaultUserCommunities) ΛBelongingModule() string {
	return "Cisco-IOS-XR-snmp-agent-cfg"
}


// Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_DefaultUserCommunities_DefaultUserCommunity represents the /Cisco-IOS-XR-snmp-agent-cfg/snmp/trap-hosts/trap-host/default-user-communities/default-user-community YANG schema element.
type Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_DefaultUserCommunities_DefaultUserCommunity struct {
	AdvancedTrapTypes1	*uint32	`path:"advanced-trap-types1" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	AdvancedTrapTypes2	*uint32	`path:"advanced-trap-types2" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	BasicTrapTypes	*uint32	`path:"basic-trap-types" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	CommunityName	*string	`path:"community-name" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	DyingGasp	*bool	`path:"dying-gasp" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	Port	*uint16	`path:"port" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	SecurityLevel	E_Cisco_IOS_XRSnmpAgentCfg_SnmpSecurityModel	`path:"security-level" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	Version	*string	`path:"version" module:"Cisco-IOS-XR-snmp-agent-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_DefaultUserCommunities_DefaultUserCommunity implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_DefaultUserCommunities_DefaultUserCommunity) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_DefaultUserCommunities_DefaultUserCommunity struct, which is a YANG list entry.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_DefaultUserCommunities_DefaultUserCommunity) ΛListKeyMap() (map[string]interface{}, error) {
	if t.CommunityName == nil {
		return nil, fmt.Errorf("nil value for key CommunityName")
	}

	return map[string]interface{}{
		"community-name": *t.CommunityName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_DefaultUserCommunities_DefaultUserCommunity) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_DefaultUserCommunities_DefaultUserCommunity"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_DefaultUserCommunities_DefaultUserCommunity) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_DefaultUserCommunities_DefaultUserCommunity) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_DefaultUserCommunities_DefaultUserCommunity.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_DefaultUserCommunities_DefaultUserCommunity) ΛBelongingModule() string {
	return "Cisco-IOS-XR-snmp-agent-cfg"
}


// Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_EncryptedUserCommunities represents the /Cisco-IOS-XR-snmp-agent-cfg/snmp/trap-hosts/trap-host/encrypted-user-communities YANG schema element.
type Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_EncryptedUserCommunities struct {
	EncryptedUserCommunity	map[string]*Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_EncryptedUserCommunities_EncryptedUserCommunity	`path:"encrypted-user-community" module:"Cisco-IOS-XR-snmp-agent-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_EncryptedUserCommunities implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_EncryptedUserCommunities) IsYANGGoStruct() {}

// NewEncryptedUserCommunity creates a new entry in the EncryptedUserCommunity list of the
// Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_EncryptedUserCommunities struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_EncryptedUserCommunities) NewEncryptedUserCommunity(CommunityName string) (*Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_EncryptedUserCommunities_EncryptedUserCommunity, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.EncryptedUserCommunity == nil {
		t.EncryptedUserCommunity = make(map[string]*Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_EncryptedUserCommunities_EncryptedUserCommunity)
	}

	key := CommunityName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.EncryptedUserCommunity[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list EncryptedUserCommunity", key)
	}

	t.EncryptedUserCommunity[key] = &Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_EncryptedUserCommunities_EncryptedUserCommunity{
		CommunityName: &CommunityName,
	}

	return t.EncryptedUserCommunity[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_EncryptedUserCommunities) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_EncryptedUserCommunities"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_EncryptedUserCommunities) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_EncryptedUserCommunities) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_EncryptedUserCommunities.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_EncryptedUserCommunities) ΛBelongingModule() string {
	return "Cisco-IOS-XR-snmp-agent-cfg"
}


// Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_EncryptedUserCommunities_EncryptedUserCommunity represents the /Cisco-IOS-XR-snmp-agent-cfg/snmp/trap-hosts/trap-host/encrypted-user-communities/encrypted-user-community YANG schema element.
type Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_EncryptedUserCommunities_EncryptedUserCommunity struct {
	AdvancedTrapTypes1	*uint32	`path:"advanced-trap-types1" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	AdvancedTrapTypes2	*uint32	`path:"advanced-trap-types2" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	BasicTrapTypes	*uint32	`path:"basic-trap-types" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	CommunityName	*string	`path:"community-name" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	DyingGasp	*bool	`path:"dying-gasp" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	Port	*uint16	`path:"port" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	SecurityLevel	E_Cisco_IOS_XRSnmpAgentCfg_SnmpSecurityModel	`path:"security-level" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	Version	*string	`path:"version" module:"Cisco-IOS-XR-snmp-agent-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_EncryptedUserCommunities_EncryptedUserCommunity implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_EncryptedUserCommunities_EncryptedUserCommunity) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_EncryptedUserCommunities_EncryptedUserCommunity struct, which is a YANG list entry.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_EncryptedUserCommunities_EncryptedUserCommunity) ΛListKeyMap() (map[string]interface{}, error) {
	if t.CommunityName == nil {
		return nil, fmt.Errorf("nil value for key CommunityName")
	}

	return map[string]interface{}{
		"community-name": *t.CommunityName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_EncryptedUserCommunities_EncryptedUserCommunity) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_EncryptedUserCommunities_EncryptedUserCommunity"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_EncryptedUserCommunities_EncryptedUserCommunity) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_EncryptedUserCommunities_EncryptedUserCommunity) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_EncryptedUserCommunities_EncryptedUserCommunity.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_EncryptedUserCommunities_EncryptedUserCommunity) ΛBelongingModule() string {
	return "Cisco-IOS-XR-snmp-agent-cfg"
}


// Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_InformHost represents the /Cisco-IOS-XR-snmp-agent-cfg/snmp/trap-hosts/trap-host/inform-host YANG schema element.
type Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_InformHost struct {
	InformEncryptedUserCommunities	*Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_InformHost_InformEncryptedUserCommunities	`path:"inform-encrypted-user-communities" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	InformType6EncryptedUserCommunities	*Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_InformHost_InformType6EncryptedUserCommunities	`path:"inform-type6-encrypted-user-communities" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	InformUserCommunities	*Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_InformHost_InformUserCommunities	`path:"inform-user-communities" module:"Cisco-IOS-XR-snmp-agent-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_InformHost implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_InformHost) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_InformHost) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_InformHost"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_InformHost) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_InformHost) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_InformHost.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_InformHost) ΛBelongingModule() string {
	return "Cisco-IOS-XR-snmp-agent-cfg"
}


// Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_InformHost_InformEncryptedUserCommunities represents the /Cisco-IOS-XR-snmp-agent-cfg/snmp/trap-hosts/trap-host/inform-host/inform-encrypted-user-communities YANG schema element.
type Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_InformHost_InformEncryptedUserCommunities struct {
	InformEncryptedUserCommunity	map[string]*Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_InformHost_InformEncryptedUserCommunities_InformEncryptedUserCommunity	`path:"inform-encrypted-user-community" module:"Cisco-IOS-XR-snmp-agent-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_InformHost_InformEncryptedUserCommunities implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_InformHost_InformEncryptedUserCommunities) IsYANGGoStruct() {}

// NewInformEncryptedUserCommunity creates a new entry in the InformEncryptedUserCommunity list of the
// Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_InformHost_InformEncryptedUserCommunities struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_InformHost_InformEncryptedUserCommunities) NewInformEncryptedUserCommunity(CommunityName string) (*Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_InformHost_InformEncryptedUserCommunities_InformEncryptedUserCommunity, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.InformEncryptedUserCommunity == nil {
		t.InformEncryptedUserCommunity = make(map[string]*Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_InformHost_InformEncryptedUserCommunities_InformEncryptedUserCommunity)
	}

	key := CommunityName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.InformEncryptedUserCommunity[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list InformEncryptedUserCommunity", key)
	}

	t.InformEncryptedUserCommunity[key] = &Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_InformHost_InformEncryptedUserCommunities_InformEncryptedUserCommunity{
		CommunityName: &CommunityName,
	}

	return t.InformEncryptedUserCommunity[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_InformHost_InformEncryptedUserCommunities) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_InformHost_InformEncryptedUserCommunities"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_InformHost_InformEncryptedUserCommunities) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_InformHost_InformEncryptedUserCommunities) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_InformHost_InformEncryptedUserCommunities.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_InformHost_InformEncryptedUserCommunities) ΛBelongingModule() string {
	return "Cisco-IOS-XR-snmp-agent-cfg"
}


// Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_InformHost_InformEncryptedUserCommunities_InformEncryptedUserCommunity represents the /Cisco-IOS-XR-snmp-agent-cfg/snmp/trap-hosts/trap-host/inform-host/inform-encrypted-user-communities/inform-encrypted-user-community YANG schema element.
type Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_InformHost_InformEncryptedUserCommunities_InformEncryptedUserCommunity struct {
	AdvancedTrapTypes1	*uint32	`path:"advanced-trap-types1" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	AdvancedTrapTypes2	*uint32	`path:"advanced-trap-types2" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	BasicTrapTypes	*uint32	`path:"basic-trap-types" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	CommunityName	*string	`path:"community-name" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	DyingGasp	*bool	`path:"dying-gasp" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	Port	*uint16	`path:"port" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	SecurityLevel	E_Cisco_IOS_XRSnmpAgentCfg_SnmpSecurityModel	`path:"security-level" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	Version	*string	`path:"version" module:"Cisco-IOS-XR-snmp-agent-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_InformHost_InformEncryptedUserCommunities_InformEncryptedUserCommunity implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_InformHost_InformEncryptedUserCommunities_InformEncryptedUserCommunity) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_InformHost_InformEncryptedUserCommunities_InformEncryptedUserCommunity struct, which is a YANG list entry.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_InformHost_InformEncryptedUserCommunities_InformEncryptedUserCommunity) ΛListKeyMap() (map[string]interface{}, error) {
	if t.CommunityName == nil {
		return nil, fmt.Errorf("nil value for key CommunityName")
	}

	return map[string]interface{}{
		"community-name": *t.CommunityName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_InformHost_InformEncryptedUserCommunities_InformEncryptedUserCommunity) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_InformHost_InformEncryptedUserCommunities_InformEncryptedUserCommunity"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_InformHost_InformEncryptedUserCommunities_InformEncryptedUserCommunity) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_InformHost_InformEncryptedUserCommunities_InformEncryptedUserCommunity) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_InformHost_InformEncryptedUserCommunities_InformEncryptedUserCommunity.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_InformHost_InformEncryptedUserCommunities_InformEncryptedUserCommunity) ΛBelongingModule() string {
	return "Cisco-IOS-XR-snmp-agent-cfg"
}


// Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_InformHost_InformType6EncryptedUserCommunities represents the /Cisco-IOS-XR-snmp-agent-cfg/snmp/trap-hosts/trap-host/inform-host/inform-type6-encrypted-user-communities YANG schema element.
type Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_InformHost_InformType6EncryptedUserCommunities struct {
	InformType6EncryptedUserCommunity	map[string]*Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_InformHost_InformType6EncryptedUserCommunities_InformType6EncryptedUserCommunity	`path:"inform-type6-encrypted-user-community" module:"Cisco-IOS-XR-snmp-agent-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_InformHost_InformType6EncryptedUserCommunities implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_InformHost_InformType6EncryptedUserCommunities) IsYANGGoStruct() {}

// NewInformType6EncryptedUserCommunity creates a new entry in the InformType6EncryptedUserCommunity list of the
// Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_InformHost_InformType6EncryptedUserCommunities struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_InformHost_InformType6EncryptedUserCommunities) NewInformType6EncryptedUserCommunity(CommunityName string) (*Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_InformHost_InformType6EncryptedUserCommunities_InformType6EncryptedUserCommunity, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.InformType6EncryptedUserCommunity == nil {
		t.InformType6EncryptedUserCommunity = make(map[string]*Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_InformHost_InformType6EncryptedUserCommunities_InformType6EncryptedUserCommunity)
	}

	key := CommunityName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.InformType6EncryptedUserCommunity[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list InformType6EncryptedUserCommunity", key)
	}

	t.InformType6EncryptedUserCommunity[key] = &Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_InformHost_InformType6EncryptedUserCommunities_InformType6EncryptedUserCommunity{
		CommunityName: &CommunityName,
	}

	return t.InformType6EncryptedUserCommunity[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_InformHost_InformType6EncryptedUserCommunities) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_InformHost_InformType6EncryptedUserCommunities"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_InformHost_InformType6EncryptedUserCommunities) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_InformHost_InformType6EncryptedUserCommunities) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_InformHost_InformType6EncryptedUserCommunities.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_InformHost_InformType6EncryptedUserCommunities) ΛBelongingModule() string {
	return "Cisco-IOS-XR-snmp-agent-cfg"
}


// Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_InformHost_InformType6EncryptedUserCommunities_InformType6EncryptedUserCommunity represents the /Cisco-IOS-XR-snmp-agent-cfg/snmp/trap-hosts/trap-host/inform-host/inform-type6-encrypted-user-communities/inform-type6-encrypted-user-community YANG schema element.
type Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_InformHost_InformType6EncryptedUserCommunities_InformType6EncryptedUserCommunity struct {
	AdvancedTrapTypes1	*uint32	`path:"advanced-trap-types1" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	AdvancedTrapTypes2	*uint32	`path:"advanced-trap-types2" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	BasicTrapTypes	*uint32	`path:"basic-trap-types" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	CommunityName	*string	`path:"community-name" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	DyingGasp	*bool	`path:"dying-gasp" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	Port	*uint16	`path:"port" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	SecurityLevel	E_Cisco_IOS_XRSnmpAgentCfg_SnmpSecurityModel	`path:"security-level" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	Version	*string	`path:"version" module:"Cisco-IOS-XR-snmp-agent-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_InformHost_InformType6EncryptedUserCommunities_InformType6EncryptedUserCommunity implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_InformHost_InformType6EncryptedUserCommunities_InformType6EncryptedUserCommunity) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_InformHost_InformType6EncryptedUserCommunities_InformType6EncryptedUserCommunity struct, which is a YANG list entry.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_InformHost_InformType6EncryptedUserCommunities_InformType6EncryptedUserCommunity) ΛListKeyMap() (map[string]interface{}, error) {
	if t.CommunityName == nil {
		return nil, fmt.Errorf("nil value for key CommunityName")
	}

	return map[string]interface{}{
		"community-name": *t.CommunityName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_InformHost_InformType6EncryptedUserCommunities_InformType6EncryptedUserCommunity) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_InformHost_InformType6EncryptedUserCommunities_InformType6EncryptedUserCommunity"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_InformHost_InformType6EncryptedUserCommunities_InformType6EncryptedUserCommunity) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_InformHost_InformType6EncryptedUserCommunities_InformType6EncryptedUserCommunity) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_InformHost_InformType6EncryptedUserCommunities_InformType6EncryptedUserCommunity.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_InformHost_InformType6EncryptedUserCommunities_InformType6EncryptedUserCommunity) ΛBelongingModule() string {
	return "Cisco-IOS-XR-snmp-agent-cfg"
}


// Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_InformHost_InformUserCommunities represents the /Cisco-IOS-XR-snmp-agent-cfg/snmp/trap-hosts/trap-host/inform-host/inform-user-communities YANG schema element.
type Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_InformHost_InformUserCommunities struct {
	InformUserCommunity	map[string]*Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_InformHost_InformUserCommunities_InformUserCommunity	`path:"inform-user-community" module:"Cisco-IOS-XR-snmp-agent-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_InformHost_InformUserCommunities implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_InformHost_InformUserCommunities) IsYANGGoStruct() {}

// NewInformUserCommunity creates a new entry in the InformUserCommunity list of the
// Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_InformHost_InformUserCommunities struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_InformHost_InformUserCommunities) NewInformUserCommunity(CommunityName string) (*Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_InformHost_InformUserCommunities_InformUserCommunity, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.InformUserCommunity == nil {
		t.InformUserCommunity = make(map[string]*Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_InformHost_InformUserCommunities_InformUserCommunity)
	}

	key := CommunityName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.InformUserCommunity[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list InformUserCommunity", key)
	}

	t.InformUserCommunity[key] = &Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_InformHost_InformUserCommunities_InformUserCommunity{
		CommunityName: &CommunityName,
	}

	return t.InformUserCommunity[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_InformHost_InformUserCommunities) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_InformHost_InformUserCommunities"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_InformHost_InformUserCommunities) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_InformHost_InformUserCommunities) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_InformHost_InformUserCommunities.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_InformHost_InformUserCommunities) ΛBelongingModule() string {
	return "Cisco-IOS-XR-snmp-agent-cfg"
}


// Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_InformHost_InformUserCommunities_InformUserCommunity represents the /Cisco-IOS-XR-snmp-agent-cfg/snmp/trap-hosts/trap-host/inform-host/inform-user-communities/inform-user-community YANG schema element.
type Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_InformHost_InformUserCommunities_InformUserCommunity struct {
	AdvancedTrapTypes1	*uint32	`path:"advanced-trap-types1" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	AdvancedTrapTypes2	*uint32	`path:"advanced-trap-types2" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	BasicTrapTypes	*uint32	`path:"basic-trap-types" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	CommunityName	*string	`path:"community-name" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	DyingGasp	*bool	`path:"dying-gasp" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	Port	*uint16	`path:"port" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	SecurityLevel	E_Cisco_IOS_XRSnmpAgentCfg_SnmpSecurityModel	`path:"security-level" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	Version	*string	`path:"version" module:"Cisco-IOS-XR-snmp-agent-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_InformHost_InformUserCommunities_InformUserCommunity implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_InformHost_InformUserCommunities_InformUserCommunity) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_InformHost_InformUserCommunities_InformUserCommunity struct, which is a YANG list entry.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_InformHost_InformUserCommunities_InformUserCommunity) ΛListKeyMap() (map[string]interface{}, error) {
	if t.CommunityName == nil {
		return nil, fmt.Errorf("nil value for key CommunityName")
	}

	return map[string]interface{}{
		"community-name": *t.CommunityName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_InformHost_InformUserCommunities_InformUserCommunity) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_InformHost_InformUserCommunities_InformUserCommunity"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_InformHost_InformUserCommunities_InformUserCommunity) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_InformHost_InformUserCommunities_InformUserCommunity) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_InformHost_InformUserCommunities_InformUserCommunity.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_InformHost_InformUserCommunities_InformUserCommunity) ΛBelongingModule() string {
	return "Cisco-IOS-XR-snmp-agent-cfg"
}


// Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_Type6EncryptedUserCommunities represents the /Cisco-IOS-XR-snmp-agent-cfg/snmp/trap-hosts/trap-host/type6-encrypted-user-communities YANG schema element.
type Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_Type6EncryptedUserCommunities struct {
	Type6EncryptedUserCommunity	map[string]*Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_Type6EncryptedUserCommunities_Type6EncryptedUserCommunity	`path:"type6-encrypted-user-community" module:"Cisco-IOS-XR-snmp-agent-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_Type6EncryptedUserCommunities implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_Type6EncryptedUserCommunities) IsYANGGoStruct() {}

// NewType6EncryptedUserCommunity creates a new entry in the Type6EncryptedUserCommunity list of the
// Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_Type6EncryptedUserCommunities struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_Type6EncryptedUserCommunities) NewType6EncryptedUserCommunity(CommunityName string) (*Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_Type6EncryptedUserCommunities_Type6EncryptedUserCommunity, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Type6EncryptedUserCommunity == nil {
		t.Type6EncryptedUserCommunity = make(map[string]*Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_Type6EncryptedUserCommunities_Type6EncryptedUserCommunity)
	}

	key := CommunityName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Type6EncryptedUserCommunity[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Type6EncryptedUserCommunity", key)
	}

	t.Type6EncryptedUserCommunity[key] = &Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_Type6EncryptedUserCommunities_Type6EncryptedUserCommunity{
		CommunityName: &CommunityName,
	}

	return t.Type6EncryptedUserCommunity[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_Type6EncryptedUserCommunities) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_Type6EncryptedUserCommunities"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_Type6EncryptedUserCommunities) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_Type6EncryptedUserCommunities) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_Type6EncryptedUserCommunities.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_Type6EncryptedUserCommunities) ΛBelongingModule() string {
	return "Cisco-IOS-XR-snmp-agent-cfg"
}


// Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_Type6EncryptedUserCommunities_Type6EncryptedUserCommunity represents the /Cisco-IOS-XR-snmp-agent-cfg/snmp/trap-hosts/trap-host/type6-encrypted-user-communities/type6-encrypted-user-community YANG schema element.
type Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_Type6EncryptedUserCommunities_Type6EncryptedUserCommunity struct {
	AdvancedTrapTypes1	*uint32	`path:"advanced-trap-types1" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	AdvancedTrapTypes2	*uint32	`path:"advanced-trap-types2" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	BasicTrapTypes	*uint32	`path:"basic-trap-types" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	CommunityName	*string	`path:"community-name" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	DyingGasp	*bool	`path:"dying-gasp" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	Port	*uint16	`path:"port" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	SecurityLevel	E_Cisco_IOS_XRSnmpAgentCfg_SnmpSecurityModel	`path:"security-level" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	Version	*string	`path:"version" module:"Cisco-IOS-XR-snmp-agent-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_Type6EncryptedUserCommunities_Type6EncryptedUserCommunity implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_Type6EncryptedUserCommunities_Type6EncryptedUserCommunity) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_Type6EncryptedUserCommunities_Type6EncryptedUserCommunity struct, which is a YANG list entry.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_Type6EncryptedUserCommunities_Type6EncryptedUserCommunity) ΛListKeyMap() (map[string]interface{}, error) {
	if t.CommunityName == nil {
		return nil, fmt.Errorf("nil value for key CommunityName")
	}

	return map[string]interface{}{
		"community-name": *t.CommunityName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_Type6EncryptedUserCommunities_Type6EncryptedUserCommunity) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_Type6EncryptedUserCommunities_Type6EncryptedUserCommunity"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_Type6EncryptedUserCommunities_Type6EncryptedUserCommunity) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_Type6EncryptedUserCommunities_Type6EncryptedUserCommunity) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_Type6EncryptedUserCommunities_Type6EncryptedUserCommunity.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_TrapHosts_TrapHost_Type6EncryptedUserCommunities_Type6EncryptedUserCommunity) ΛBelongingModule() string {
	return "Cisco-IOS-XR-snmp-agent-cfg"
}


// Cisco_IOS_XRSnmpAgentCfg_Snmp_Type6EncryptedCommunityMaps represents the /Cisco-IOS-XR-snmp-agent-cfg/snmp/type6-encrypted-community-maps YANG schema element.
type Cisco_IOS_XRSnmpAgentCfg_Snmp_Type6EncryptedCommunityMaps struct {
	Type6EncryptedCommunityMap	map[string]*Cisco_IOS_XRSnmpAgentCfg_Snmp_Type6EncryptedCommunityMaps_Type6EncryptedCommunityMap	`path:"type6-encrypted-community-map" module:"Cisco-IOS-XR-snmp-agent-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSnmpAgentCfg_Snmp_Type6EncryptedCommunityMaps implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Type6EncryptedCommunityMaps) IsYANGGoStruct() {}

// NewType6EncryptedCommunityMap creates a new entry in the Type6EncryptedCommunityMap list of the
// Cisco_IOS_XRSnmpAgentCfg_Snmp_Type6EncryptedCommunityMaps struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Type6EncryptedCommunityMaps) NewType6EncryptedCommunityMap(CommunityName string) (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Type6EncryptedCommunityMaps_Type6EncryptedCommunityMap, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Type6EncryptedCommunityMap == nil {
		t.Type6EncryptedCommunityMap = make(map[string]*Cisco_IOS_XRSnmpAgentCfg_Snmp_Type6EncryptedCommunityMaps_Type6EncryptedCommunityMap)
	}

	key := CommunityName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Type6EncryptedCommunityMap[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Type6EncryptedCommunityMap", key)
	}

	t.Type6EncryptedCommunityMap[key] = &Cisco_IOS_XRSnmpAgentCfg_Snmp_Type6EncryptedCommunityMaps_Type6EncryptedCommunityMap{
		CommunityName: &CommunityName,
	}

	return t.Type6EncryptedCommunityMap[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Type6EncryptedCommunityMaps) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSnmpAgentCfg_Snmp_Type6EncryptedCommunityMaps"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Type6EncryptedCommunityMaps) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Type6EncryptedCommunityMaps) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSnmpAgentCfg_Snmp_Type6EncryptedCommunityMaps.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Type6EncryptedCommunityMaps) ΛBelongingModule() string {
	return "Cisco-IOS-XR-snmp-agent-cfg"
}


// Cisco_IOS_XRSnmpAgentCfg_Snmp_Type6EncryptedCommunityMaps_Type6EncryptedCommunityMap represents the /Cisco-IOS-XR-snmp-agent-cfg/snmp/type6-encrypted-community-maps/type6-encrypted-community-map YANG schema element.
type Cisco_IOS_XRSnmpAgentCfg_Snmp_Type6EncryptedCommunityMaps_Type6EncryptedCommunityMap struct {
	CommunityName	*string	`path:"community-name" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	Context	*string	`path:"context" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	Security	*string	`path:"security" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	TargetList	*string	`path:"target-list" module:"Cisco-IOS-XR-snmp-agent-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSnmpAgentCfg_Snmp_Type6EncryptedCommunityMaps_Type6EncryptedCommunityMap implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Type6EncryptedCommunityMaps_Type6EncryptedCommunityMap) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRSnmpAgentCfg_Snmp_Type6EncryptedCommunityMaps_Type6EncryptedCommunityMap struct, which is a YANG list entry.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Type6EncryptedCommunityMaps_Type6EncryptedCommunityMap) ΛListKeyMap() (map[string]interface{}, error) {
	if t.CommunityName == nil {
		return nil, fmt.Errorf("nil value for key CommunityName")
	}

	return map[string]interface{}{
		"community-name": *t.CommunityName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Type6EncryptedCommunityMaps_Type6EncryptedCommunityMap) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSnmpAgentCfg_Snmp_Type6EncryptedCommunityMaps_Type6EncryptedCommunityMap"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Type6EncryptedCommunityMaps_Type6EncryptedCommunityMap) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Type6EncryptedCommunityMaps_Type6EncryptedCommunityMap) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSnmpAgentCfg_Snmp_Type6EncryptedCommunityMaps_Type6EncryptedCommunityMap.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Type6EncryptedCommunityMaps_Type6EncryptedCommunityMap) ΛBelongingModule() string {
	return "Cisco-IOS-XR-snmp-agent-cfg"
}


// Cisco_IOS_XRSnmpAgentCfg_Snmp_Users represents the /Cisco-IOS-XR-snmp-agent-cfg/snmp/users YANG schema element.
type Cisco_IOS_XRSnmpAgentCfg_Snmp_Users struct {
	User	map[string]*Cisco_IOS_XRSnmpAgentCfg_Snmp_Users_User	`path:"user" module:"Cisco-IOS-XR-snmp-agent-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSnmpAgentCfg_Snmp_Users implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Users) IsYANGGoStruct() {}

// NewUser creates a new entry in the User list of the
// Cisco_IOS_XRSnmpAgentCfg_Snmp_Users struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Users) NewUser(UserName string) (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Users_User, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.User == nil {
		t.User = make(map[string]*Cisco_IOS_XRSnmpAgentCfg_Snmp_Users_User)
	}

	key := UserName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.User[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list User", key)
	}

	t.User[key] = &Cisco_IOS_XRSnmpAgentCfg_Snmp_Users_User{
		UserName: &UserName,
	}

	return t.User[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Users) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSnmpAgentCfg_Snmp_Users"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Users) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Users) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSnmpAgentCfg_Snmp_Users.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Users) ΛBelongingModule() string {
	return "Cisco-IOS-XR-snmp-agent-cfg"
}


// Cisco_IOS_XRSnmpAgentCfg_Snmp_Users_User represents the /Cisco-IOS-XR-snmp-agent-cfg/snmp/users/user YANG schema element.
type Cisco_IOS_XRSnmpAgentCfg_Snmp_Users_User struct {
	Algorithm	E_Cisco_IOS_XRSnmpAgentCfg_SnmpHashAlgorithm	`path:"algorithm" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	AuthenticationPassword	*string	`path:"authentication-password" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	AuthenticationPasswordConfigured	YANGEmpty	`path:"authentication-password-configured" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	GroupName	*string	`path:"group-name" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	Owner	E_Cisco_IOS_XRSnmpAgentCfg_SnmpOwnerAccess	`path:"owner" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	Port	*uint16	`path:"port" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	PrivAlgorithm	E_Cisco_IOS_XRSnmpAgentCfg_SnmpPrivAlgorithm	`path:"priv-algorithm" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	PrivacyPassword	*string	`path:"privacy-password" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	PrivacyPasswordConfigured	YANGEmpty	`path:"privacy-password-configured" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	RemoteAddress	*string	`path:"remote-address" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	UserAuthType	*uint32	`path:"user-auth-type" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	UserName	*string	`path:"user-name" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	UserPrivAuthType	*uint32	`path:"user-priv-auth-type" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	V4AccessList	*string	`path:"v4-access-list" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	V4AclType	E_Cisco_IOS_XRSnmpAgentCfg_Snmpacl	`path:"v4acl-type" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	V6AccessList	*string	`path:"v6-access-list" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	V6AclType	E_Cisco_IOS_XRSnmpAgentCfg_Snmpacl	`path:"v6acl-type" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	Version	E_Cisco_IOS_XRSnmpAgentCfg_UserSnmpVersion	`path:"version" module:"Cisco-IOS-XR-snmp-agent-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSnmpAgentCfg_Snmp_Users_User implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Users_User) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRSnmpAgentCfg_Snmp_Users_User struct, which is a YANG list entry.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Users_User) ΛListKeyMap() (map[string]interface{}, error) {
	if t.UserName == nil {
		return nil, fmt.Errorf("nil value for key UserName")
	}

	return map[string]interface{}{
		"user-name": *t.UserName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Users_User) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSnmpAgentCfg_Snmp_Users_User"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Users_User) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Users_User) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSnmpAgentCfg_Snmp_Users_User.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Users_User) ΛBelongingModule() string {
	return "Cisco-IOS-XR-snmp-agent-cfg"
}


// Cisco_IOS_XRSnmpAgentCfg_Snmp_Views represents the /Cisco-IOS-XR-snmp-agent-cfg/snmp/views YANG schema element.
type Cisco_IOS_XRSnmpAgentCfg_Snmp_Views struct {
	View	map[Cisco_IOS_XRSnmpAgentCfg_Snmp_Views_View_Key]*Cisco_IOS_XRSnmpAgentCfg_Snmp_Views_View	`path:"view" module:"Cisco-IOS-XR-snmp-agent-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSnmpAgentCfg_Snmp_Views implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Views) IsYANGGoStruct() {}

// Cisco_IOS_XRSnmpAgentCfg_Snmp_Views_View_Key represents the key for list View of element /Cisco-IOS-XR-snmp-agent-cfg/snmp/views.
type Cisco_IOS_XRSnmpAgentCfg_Snmp_Views_View_Key struct {
	ViewName	string	`path:"view-name"`
	Family	string	`path:"family"`
}

// IsYANGGoKeyStruct ensures that Cisco_IOS_XRSnmpAgentCfg_Snmp_Views_View_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (Cisco_IOS_XRSnmpAgentCfg_Snmp_Views_View_Key) IsYANGGoKeyStruct() {}

// ΛListKeyMap returns the values of the Cisco_IOS_XRSnmpAgentCfg_Snmp_Views_View_Key key struct.
func (t Cisco_IOS_XRSnmpAgentCfg_Snmp_Views_View_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"view-name": t.ViewName,
		"family": t.Family,
	}, nil
}

// NewView creates a new entry in the View list of the
// Cisco_IOS_XRSnmpAgentCfg_Snmp_Views struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Views) NewView(ViewName string, Family string) (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Views_View, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.View == nil {
		t.View = make(map[Cisco_IOS_XRSnmpAgentCfg_Snmp_Views_View_Key]*Cisco_IOS_XRSnmpAgentCfg_Snmp_Views_View)
	}

	key := Cisco_IOS_XRSnmpAgentCfg_Snmp_Views_View_Key{
		ViewName: ViewName,
		Family: Family,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.View[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list View", key)
	}

	t.View[key] = &Cisco_IOS_XRSnmpAgentCfg_Snmp_Views_View{
		ViewName: &ViewName,
		Family: &Family,
	}

	return t.View[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Views) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSnmpAgentCfg_Snmp_Views"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Views) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Views) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSnmpAgentCfg_Snmp_Views.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Views) ΛBelongingModule() string {
	return "Cisco-IOS-XR-snmp-agent-cfg"
}


// Cisco_IOS_XRSnmpAgentCfg_Snmp_Views_View represents the /Cisco-IOS-XR-snmp-agent-cfg/snmp/views/view YANG schema element.
type Cisco_IOS_XRSnmpAgentCfg_Snmp_Views_View struct {
	Family	*string	`path:"family" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	ViewInclusion	E_Cisco_IOS_XRSnmpAgentCfg_SnmpMibViewInclusion	`path:"view-inclusion" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	ViewName	*string	`path:"view-name" module:"Cisco-IOS-XR-snmp-agent-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSnmpAgentCfg_Snmp_Views_View implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Views_View) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRSnmpAgentCfg_Snmp_Views_View struct, which is a YANG list entry.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Views_View) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Family == nil {
		return nil, fmt.Errorf("nil value for key Family")
	}

	if t.ViewName == nil {
		return nil, fmt.Errorf("nil value for key ViewName")
	}

	return map[string]interface{}{
		"family": *t.Family,
		"view-name": *t.ViewName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Views_View) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSnmpAgentCfg_Snmp_Views_View"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Views_View) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Views_View) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSnmpAgentCfg_Snmp_Views_View.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Views_View) ΛBelongingModule() string {
	return "Cisco-IOS-XR-snmp-agent-cfg"
}


// Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs represents the /Cisco-IOS-XR-snmp-agent-cfg/snmp/vrfs YANG schema element.
type Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs struct {
	Vrf	map[string]*Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf	`path:"vrf" module:"Cisco-IOS-XR-snmp-agent-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs) IsYANGGoStruct() {}

// NewVrf creates a new entry in the Vrf list of the
// Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs) NewVrf(Name string) (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Vrf == nil {
		t.Vrf = make(map[string]*Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Vrf[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Vrf", key)
	}

	t.Vrf[key] = &Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf{
		Name: &Name,
	}

	return t.Vrf[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs) ΛBelongingModule() string {
	return "Cisco-IOS-XR-snmp-agent-cfg"
}


// Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf represents the /Cisco-IOS-XR-snmp-agent-cfg/snmp/vrfs/vrf YANG schema element.
type Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf struct {
	ContextMappings	*Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_ContextMappings	`path:"context-mappings" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	Contexts	*Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_Contexts	`path:"contexts" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	Name	*string	`path:"name" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	TrapHosts	*Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts	`path:"trap-hosts" module:"Cisco-IOS-XR-snmp-agent-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf struct, which is a YANG list entry.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf) ΛBelongingModule() string {
	return "Cisco-IOS-XR-snmp-agent-cfg"
}


// Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_ContextMappings represents the /Cisco-IOS-XR-snmp-agent-cfg/snmp/vrfs/vrf/context-mappings YANG schema element.
type Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_ContextMappings struct {
	ContextMapping	map[string]*Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_ContextMappings_ContextMapping	`path:"context-mapping" module:"Cisco-IOS-XR-snmp-agent-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_ContextMappings implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_ContextMappings) IsYANGGoStruct() {}

// NewContextMapping creates a new entry in the ContextMapping list of the
// Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_ContextMappings struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_ContextMappings) NewContextMapping(ContextMappingName string) (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_ContextMappings_ContextMapping, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ContextMapping == nil {
		t.ContextMapping = make(map[string]*Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_ContextMappings_ContextMapping)
	}

	key := ContextMappingName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.ContextMapping[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list ContextMapping", key)
	}

	t.ContextMapping[key] = &Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_ContextMappings_ContextMapping{
		ContextMappingName: &ContextMappingName,
	}

	return t.ContextMapping[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_ContextMappings) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_ContextMappings"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_ContextMappings) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_ContextMappings) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_ContextMappings.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_ContextMappings) ΛBelongingModule() string {
	return "Cisco-IOS-XR-snmp-agent-cfg"
}


// Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_ContextMappings_ContextMapping represents the /Cisco-IOS-XR-snmp-agent-cfg/snmp/vrfs/vrf/context-mappings/context-mapping YANG schema element.
type Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_ContextMappings_ContextMapping struct {
	Context	E_Cisco_IOS_XRSnmpAgentCfg_SnmpContext	`path:"context" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	ContextMappingName	*string	`path:"context-mapping-name" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	InstanceName	*string	`path:"instance-name" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	TopologyName	*string	`path:"topology-name" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	VrfName	*string	`path:"vrf-name" module:"Cisco-IOS-XR-snmp-agent-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_ContextMappings_ContextMapping implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_ContextMappings_ContextMapping) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_ContextMappings_ContextMapping struct, which is a YANG list entry.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_ContextMappings_ContextMapping) ΛListKeyMap() (map[string]interface{}, error) {
	if t.ContextMappingName == nil {
		return nil, fmt.Errorf("nil value for key ContextMappingName")
	}

	return map[string]interface{}{
		"context-mapping-name": *t.ContextMappingName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_ContextMappings_ContextMapping) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_ContextMappings_ContextMapping"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_ContextMappings_ContextMapping) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_ContextMappings_ContextMapping) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_ContextMappings_ContextMapping.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_ContextMappings_ContextMapping) ΛBelongingModule() string {
	return "Cisco-IOS-XR-snmp-agent-cfg"
}


// Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_Contexts represents the /Cisco-IOS-XR-snmp-agent-cfg/snmp/vrfs/vrf/contexts YANG schema element.
type Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_Contexts struct {
	Context	map[string]*Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_Contexts_Context	`path:"context" module:"Cisco-IOS-XR-snmp-agent-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_Contexts implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_Contexts) IsYANGGoStruct() {}

// NewContext creates a new entry in the Context list of the
// Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_Contexts struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_Contexts) NewContext(ContextName string) (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_Contexts_Context, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Context == nil {
		t.Context = make(map[string]*Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_Contexts_Context)
	}

	key := ContextName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Context[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Context", key)
	}

	t.Context[key] = &Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_Contexts_Context{
		ContextName: &ContextName,
	}

	return t.Context[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_Contexts) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_Contexts"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_Contexts) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_Contexts) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_Contexts.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_Contexts) ΛBelongingModule() string {
	return "Cisco-IOS-XR-snmp-agent-cfg"
}


// Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_Contexts_Context represents the /Cisco-IOS-XR-snmp-agent-cfg/snmp/vrfs/vrf/contexts/context YANG schema element.
type Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_Contexts_Context struct {
	ContextName	*string	`path:"context-name" module:"Cisco-IOS-XR-snmp-agent-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_Contexts_Context implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_Contexts_Context) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_Contexts_Context struct, which is a YANG list entry.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_Contexts_Context) ΛListKeyMap() (map[string]interface{}, error) {
	if t.ContextName == nil {
		return nil, fmt.Errorf("nil value for key ContextName")
	}

	return map[string]interface{}{
		"context-name": *t.ContextName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_Contexts_Context) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_Contexts_Context"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_Contexts_Context) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_Contexts_Context) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_Contexts_Context.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_Contexts_Context) ΛBelongingModule() string {
	return "Cisco-IOS-XR-snmp-agent-cfg"
}


// Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts represents the /Cisco-IOS-XR-snmp-agent-cfg/snmp/vrfs/vrf/trap-hosts YANG schema element.
type Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts struct {
	TrapHost	map[string]*Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost	`path:"trap-host" module:"Cisco-IOS-XR-snmp-agent-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts) IsYANGGoStruct() {}

// NewTrapHost creates a new entry in the TrapHost list of the
// Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts) NewTrapHost(IpAddress string) (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.TrapHost == nil {
		t.TrapHost = make(map[string]*Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost)
	}

	key := IpAddress

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.TrapHost[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list TrapHost", key)
	}

	t.TrapHost[key] = &Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost{
		IpAddress: &IpAddress,
	}

	return t.TrapHost[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts) ΛBelongingModule() string {
	return "Cisco-IOS-XR-snmp-agent-cfg"
}


// Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost represents the /Cisco-IOS-XR-snmp-agent-cfg/snmp/vrfs/vrf/trap-hosts/trap-host YANG schema element.
type Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost struct {
	DefaultUserCommunities	*Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_DefaultUserCommunities	`path:"default-user-communities" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	EncryptedUserCommunities	*Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_EncryptedUserCommunities	`path:"encrypted-user-communities" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	InformHost	*Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_InformHost	`path:"inform-host" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	IpAddress	*string	`path:"ip-address" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	Type6EncryptedUserCommunities	*Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_Type6EncryptedUserCommunities	`path:"type6-encrypted-user-communities" module:"Cisco-IOS-XR-snmp-agent-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost struct, which is a YANG list entry.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost) ΛListKeyMap() (map[string]interface{}, error) {
	if t.IpAddress == nil {
		return nil, fmt.Errorf("nil value for key IpAddress")
	}

	return map[string]interface{}{
		"ip-address": *t.IpAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost) ΛBelongingModule() string {
	return "Cisco-IOS-XR-snmp-agent-cfg"
}


// Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_DefaultUserCommunities represents the /Cisco-IOS-XR-snmp-agent-cfg/snmp/vrfs/vrf/trap-hosts/trap-host/default-user-communities YANG schema element.
type Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_DefaultUserCommunities struct {
	DefaultUserCommunity	map[string]*Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_DefaultUserCommunities_DefaultUserCommunity	`path:"default-user-community" module:"Cisco-IOS-XR-snmp-agent-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_DefaultUserCommunities implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_DefaultUserCommunities) IsYANGGoStruct() {}

// NewDefaultUserCommunity creates a new entry in the DefaultUserCommunity list of the
// Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_DefaultUserCommunities struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_DefaultUserCommunities) NewDefaultUserCommunity(CommunityName string) (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_DefaultUserCommunities_DefaultUserCommunity, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.DefaultUserCommunity == nil {
		t.DefaultUserCommunity = make(map[string]*Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_DefaultUserCommunities_DefaultUserCommunity)
	}

	key := CommunityName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.DefaultUserCommunity[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list DefaultUserCommunity", key)
	}

	t.DefaultUserCommunity[key] = &Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_DefaultUserCommunities_DefaultUserCommunity{
		CommunityName: &CommunityName,
	}

	return t.DefaultUserCommunity[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_DefaultUserCommunities) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_DefaultUserCommunities"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_DefaultUserCommunities) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_DefaultUserCommunities) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_DefaultUserCommunities.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_DefaultUserCommunities) ΛBelongingModule() string {
	return "Cisco-IOS-XR-snmp-agent-cfg"
}


// Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_DefaultUserCommunities_DefaultUserCommunity represents the /Cisco-IOS-XR-snmp-agent-cfg/snmp/vrfs/vrf/trap-hosts/trap-host/default-user-communities/default-user-community YANG schema element.
type Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_DefaultUserCommunities_DefaultUserCommunity struct {
	AdvancedTrapTypes1	*uint32	`path:"advanced-trap-types1" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	AdvancedTrapTypes2	*uint32	`path:"advanced-trap-types2" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	BasicTrapTypes	*uint32	`path:"basic-trap-types" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	CommunityName	*string	`path:"community-name" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	DyingGasp	*bool	`path:"dying-gasp" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	Port	*uint16	`path:"port" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	SecurityLevel	E_Cisco_IOS_XRSnmpAgentCfg_SnmpSecurityModel	`path:"security-level" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	Version	*string	`path:"version" module:"Cisco-IOS-XR-snmp-agent-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_DefaultUserCommunities_DefaultUserCommunity implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_DefaultUserCommunities_DefaultUserCommunity) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_DefaultUserCommunities_DefaultUserCommunity struct, which is a YANG list entry.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_DefaultUserCommunities_DefaultUserCommunity) ΛListKeyMap() (map[string]interface{}, error) {
	if t.CommunityName == nil {
		return nil, fmt.Errorf("nil value for key CommunityName")
	}

	return map[string]interface{}{
		"community-name": *t.CommunityName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_DefaultUserCommunities_DefaultUserCommunity) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_DefaultUserCommunities_DefaultUserCommunity"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_DefaultUserCommunities_DefaultUserCommunity) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_DefaultUserCommunities_DefaultUserCommunity) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_DefaultUserCommunities_DefaultUserCommunity.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_DefaultUserCommunities_DefaultUserCommunity) ΛBelongingModule() string {
	return "Cisco-IOS-XR-snmp-agent-cfg"
}


// Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_EncryptedUserCommunities represents the /Cisco-IOS-XR-snmp-agent-cfg/snmp/vrfs/vrf/trap-hosts/trap-host/encrypted-user-communities YANG schema element.
type Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_EncryptedUserCommunities struct {
	EncryptedUserCommunity	map[string]*Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_EncryptedUserCommunities_EncryptedUserCommunity	`path:"encrypted-user-community" module:"Cisco-IOS-XR-snmp-agent-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_EncryptedUserCommunities implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_EncryptedUserCommunities) IsYANGGoStruct() {}

// NewEncryptedUserCommunity creates a new entry in the EncryptedUserCommunity list of the
// Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_EncryptedUserCommunities struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_EncryptedUserCommunities) NewEncryptedUserCommunity(CommunityName string) (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_EncryptedUserCommunities_EncryptedUserCommunity, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.EncryptedUserCommunity == nil {
		t.EncryptedUserCommunity = make(map[string]*Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_EncryptedUserCommunities_EncryptedUserCommunity)
	}

	key := CommunityName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.EncryptedUserCommunity[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list EncryptedUserCommunity", key)
	}

	t.EncryptedUserCommunity[key] = &Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_EncryptedUserCommunities_EncryptedUserCommunity{
		CommunityName: &CommunityName,
	}

	return t.EncryptedUserCommunity[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_EncryptedUserCommunities) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_EncryptedUserCommunities"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_EncryptedUserCommunities) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_EncryptedUserCommunities) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_EncryptedUserCommunities.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_EncryptedUserCommunities) ΛBelongingModule() string {
	return "Cisco-IOS-XR-snmp-agent-cfg"
}


// Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_EncryptedUserCommunities_EncryptedUserCommunity represents the /Cisco-IOS-XR-snmp-agent-cfg/snmp/vrfs/vrf/trap-hosts/trap-host/encrypted-user-communities/encrypted-user-community YANG schema element.
type Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_EncryptedUserCommunities_EncryptedUserCommunity struct {
	AdvancedTrapTypes1	*uint32	`path:"advanced-trap-types1" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	AdvancedTrapTypes2	*uint32	`path:"advanced-trap-types2" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	BasicTrapTypes	*uint32	`path:"basic-trap-types" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	CommunityName	*string	`path:"community-name" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	DyingGasp	*bool	`path:"dying-gasp" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	Port	*uint16	`path:"port" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	SecurityLevel	E_Cisco_IOS_XRSnmpAgentCfg_SnmpSecurityModel	`path:"security-level" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	Version	*string	`path:"version" module:"Cisco-IOS-XR-snmp-agent-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_EncryptedUserCommunities_EncryptedUserCommunity implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_EncryptedUserCommunities_EncryptedUserCommunity) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_EncryptedUserCommunities_EncryptedUserCommunity struct, which is a YANG list entry.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_EncryptedUserCommunities_EncryptedUserCommunity) ΛListKeyMap() (map[string]interface{}, error) {
	if t.CommunityName == nil {
		return nil, fmt.Errorf("nil value for key CommunityName")
	}

	return map[string]interface{}{
		"community-name": *t.CommunityName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_EncryptedUserCommunities_EncryptedUserCommunity) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_EncryptedUserCommunities_EncryptedUserCommunity"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_EncryptedUserCommunities_EncryptedUserCommunity) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_EncryptedUserCommunities_EncryptedUserCommunity) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_EncryptedUserCommunities_EncryptedUserCommunity.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_EncryptedUserCommunities_EncryptedUserCommunity) ΛBelongingModule() string {
	return "Cisco-IOS-XR-snmp-agent-cfg"
}


// Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_InformHost represents the /Cisco-IOS-XR-snmp-agent-cfg/snmp/vrfs/vrf/trap-hosts/trap-host/inform-host YANG schema element.
type Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_InformHost struct {
	InformEncryptedUserCommunities	*Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_InformHost_InformEncryptedUserCommunities	`path:"inform-encrypted-user-communities" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	InformType6EncryptedUserCommunities	*Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_InformHost_InformType6EncryptedUserCommunities	`path:"inform-type6-encrypted-user-communities" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	InformUserCommunities	*Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_InformHost_InformUserCommunities	`path:"inform-user-communities" module:"Cisco-IOS-XR-snmp-agent-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_InformHost implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_InformHost) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_InformHost) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_InformHost"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_InformHost) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_InformHost) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_InformHost.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_InformHost) ΛBelongingModule() string {
	return "Cisco-IOS-XR-snmp-agent-cfg"
}


// Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_InformHost_InformEncryptedUserCommunities represents the /Cisco-IOS-XR-snmp-agent-cfg/snmp/vrfs/vrf/trap-hosts/trap-host/inform-host/inform-encrypted-user-communities YANG schema element.
type Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_InformHost_InformEncryptedUserCommunities struct {
	InformEncryptedUserCommunity	map[string]*Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_InformHost_InformEncryptedUserCommunities_InformEncryptedUserCommunity	`path:"inform-encrypted-user-community" module:"Cisco-IOS-XR-snmp-agent-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_InformHost_InformEncryptedUserCommunities implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_InformHost_InformEncryptedUserCommunities) IsYANGGoStruct() {}

// NewInformEncryptedUserCommunity creates a new entry in the InformEncryptedUserCommunity list of the
// Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_InformHost_InformEncryptedUserCommunities struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_InformHost_InformEncryptedUserCommunities) NewInformEncryptedUserCommunity(CommunityName string) (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_InformHost_InformEncryptedUserCommunities_InformEncryptedUserCommunity, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.InformEncryptedUserCommunity == nil {
		t.InformEncryptedUserCommunity = make(map[string]*Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_InformHost_InformEncryptedUserCommunities_InformEncryptedUserCommunity)
	}

	key := CommunityName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.InformEncryptedUserCommunity[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list InformEncryptedUserCommunity", key)
	}

	t.InformEncryptedUserCommunity[key] = &Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_InformHost_InformEncryptedUserCommunities_InformEncryptedUserCommunity{
		CommunityName: &CommunityName,
	}

	return t.InformEncryptedUserCommunity[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_InformHost_InformEncryptedUserCommunities) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_InformHost_InformEncryptedUserCommunities"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_InformHost_InformEncryptedUserCommunities) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_InformHost_InformEncryptedUserCommunities) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_InformHost_InformEncryptedUserCommunities.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_InformHost_InformEncryptedUserCommunities) ΛBelongingModule() string {
	return "Cisco-IOS-XR-snmp-agent-cfg"
}


// Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_InformHost_InformEncryptedUserCommunities_InformEncryptedUserCommunity represents the /Cisco-IOS-XR-snmp-agent-cfg/snmp/vrfs/vrf/trap-hosts/trap-host/inform-host/inform-encrypted-user-communities/inform-encrypted-user-community YANG schema element.
type Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_InformHost_InformEncryptedUserCommunities_InformEncryptedUserCommunity struct {
	AdvancedTrapTypes1	*uint32	`path:"advanced-trap-types1" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	AdvancedTrapTypes2	*uint32	`path:"advanced-trap-types2" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	BasicTrapTypes	*uint32	`path:"basic-trap-types" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	CommunityName	*string	`path:"community-name" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	DyingGasp	*bool	`path:"dying-gasp" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	Port	*uint16	`path:"port" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	SecurityLevel	E_Cisco_IOS_XRSnmpAgentCfg_SnmpSecurityModel	`path:"security-level" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	Version	*string	`path:"version" module:"Cisco-IOS-XR-snmp-agent-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_InformHost_InformEncryptedUserCommunities_InformEncryptedUserCommunity implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_InformHost_InformEncryptedUserCommunities_InformEncryptedUserCommunity) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_InformHost_InformEncryptedUserCommunities_InformEncryptedUserCommunity struct, which is a YANG list entry.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_InformHost_InformEncryptedUserCommunities_InformEncryptedUserCommunity) ΛListKeyMap() (map[string]interface{}, error) {
	if t.CommunityName == nil {
		return nil, fmt.Errorf("nil value for key CommunityName")
	}

	return map[string]interface{}{
		"community-name": *t.CommunityName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_InformHost_InformEncryptedUserCommunities_InformEncryptedUserCommunity) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_InformHost_InformEncryptedUserCommunities_InformEncryptedUserCommunity"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_InformHost_InformEncryptedUserCommunities_InformEncryptedUserCommunity) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_InformHost_InformEncryptedUserCommunities_InformEncryptedUserCommunity) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_InformHost_InformEncryptedUserCommunities_InformEncryptedUserCommunity.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_InformHost_InformEncryptedUserCommunities_InformEncryptedUserCommunity) ΛBelongingModule() string {
	return "Cisco-IOS-XR-snmp-agent-cfg"
}


// Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_InformHost_InformType6EncryptedUserCommunities represents the /Cisco-IOS-XR-snmp-agent-cfg/snmp/vrfs/vrf/trap-hosts/trap-host/inform-host/inform-type6-encrypted-user-communities YANG schema element.
type Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_InformHost_InformType6EncryptedUserCommunities struct {
	InformType6EncryptedUserCommunity	map[string]*Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_InformHost_InformType6EncryptedUserCommunities_InformType6EncryptedUserCommunity	`path:"inform-type6-encrypted-user-community" module:"Cisco-IOS-XR-snmp-agent-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_InformHost_InformType6EncryptedUserCommunities implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_InformHost_InformType6EncryptedUserCommunities) IsYANGGoStruct() {}

// NewInformType6EncryptedUserCommunity creates a new entry in the InformType6EncryptedUserCommunity list of the
// Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_InformHost_InformType6EncryptedUserCommunities struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_InformHost_InformType6EncryptedUserCommunities) NewInformType6EncryptedUserCommunity(CommunityName string) (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_InformHost_InformType6EncryptedUserCommunities_InformType6EncryptedUserCommunity, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.InformType6EncryptedUserCommunity == nil {
		t.InformType6EncryptedUserCommunity = make(map[string]*Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_InformHost_InformType6EncryptedUserCommunities_InformType6EncryptedUserCommunity)
	}

	key := CommunityName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.InformType6EncryptedUserCommunity[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list InformType6EncryptedUserCommunity", key)
	}

	t.InformType6EncryptedUserCommunity[key] = &Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_InformHost_InformType6EncryptedUserCommunities_InformType6EncryptedUserCommunity{
		CommunityName: &CommunityName,
	}

	return t.InformType6EncryptedUserCommunity[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_InformHost_InformType6EncryptedUserCommunities) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_InformHost_InformType6EncryptedUserCommunities"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_InformHost_InformType6EncryptedUserCommunities) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_InformHost_InformType6EncryptedUserCommunities) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_InformHost_InformType6EncryptedUserCommunities.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_InformHost_InformType6EncryptedUserCommunities) ΛBelongingModule() string {
	return "Cisco-IOS-XR-snmp-agent-cfg"
}


// Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_InformHost_InformType6EncryptedUserCommunities_InformType6EncryptedUserCommunity represents the /Cisco-IOS-XR-snmp-agent-cfg/snmp/vrfs/vrf/trap-hosts/trap-host/inform-host/inform-type6-encrypted-user-communities/inform-type6-encrypted-user-community YANG schema element.
type Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_InformHost_InformType6EncryptedUserCommunities_InformType6EncryptedUserCommunity struct {
	AdvancedTrapTypes1	*uint32	`path:"advanced-trap-types1" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	AdvancedTrapTypes2	*uint32	`path:"advanced-trap-types2" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	BasicTrapTypes	*uint32	`path:"basic-trap-types" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	CommunityName	*string	`path:"community-name" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	DyingGasp	*bool	`path:"dying-gasp" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	Port	*uint16	`path:"port" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	SecurityLevel	E_Cisco_IOS_XRSnmpAgentCfg_SnmpSecurityModel	`path:"security-level" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	Version	*string	`path:"version" module:"Cisco-IOS-XR-snmp-agent-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_InformHost_InformType6EncryptedUserCommunities_InformType6EncryptedUserCommunity implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_InformHost_InformType6EncryptedUserCommunities_InformType6EncryptedUserCommunity) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_InformHost_InformType6EncryptedUserCommunities_InformType6EncryptedUserCommunity struct, which is a YANG list entry.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_InformHost_InformType6EncryptedUserCommunities_InformType6EncryptedUserCommunity) ΛListKeyMap() (map[string]interface{}, error) {
	if t.CommunityName == nil {
		return nil, fmt.Errorf("nil value for key CommunityName")
	}

	return map[string]interface{}{
		"community-name": *t.CommunityName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_InformHost_InformType6EncryptedUserCommunities_InformType6EncryptedUserCommunity) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_InformHost_InformType6EncryptedUserCommunities_InformType6EncryptedUserCommunity"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_InformHost_InformType6EncryptedUserCommunities_InformType6EncryptedUserCommunity) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_InformHost_InformType6EncryptedUserCommunities_InformType6EncryptedUserCommunity) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_InformHost_InformType6EncryptedUserCommunities_InformType6EncryptedUserCommunity.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_InformHost_InformType6EncryptedUserCommunities_InformType6EncryptedUserCommunity) ΛBelongingModule() string {
	return "Cisco-IOS-XR-snmp-agent-cfg"
}


// Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_InformHost_InformUserCommunities represents the /Cisco-IOS-XR-snmp-agent-cfg/snmp/vrfs/vrf/trap-hosts/trap-host/inform-host/inform-user-communities YANG schema element.
type Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_InformHost_InformUserCommunities struct {
	InformUserCommunity	map[string]*Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_InformHost_InformUserCommunities_InformUserCommunity	`path:"inform-user-community" module:"Cisco-IOS-XR-snmp-agent-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_InformHost_InformUserCommunities implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_InformHost_InformUserCommunities) IsYANGGoStruct() {}

// NewInformUserCommunity creates a new entry in the InformUserCommunity list of the
// Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_InformHost_InformUserCommunities struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_InformHost_InformUserCommunities) NewInformUserCommunity(CommunityName string) (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_InformHost_InformUserCommunities_InformUserCommunity, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.InformUserCommunity == nil {
		t.InformUserCommunity = make(map[string]*Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_InformHost_InformUserCommunities_InformUserCommunity)
	}

	key := CommunityName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.InformUserCommunity[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list InformUserCommunity", key)
	}

	t.InformUserCommunity[key] = &Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_InformHost_InformUserCommunities_InformUserCommunity{
		CommunityName: &CommunityName,
	}

	return t.InformUserCommunity[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_InformHost_InformUserCommunities) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_InformHost_InformUserCommunities"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_InformHost_InformUserCommunities) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_InformHost_InformUserCommunities) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_InformHost_InformUserCommunities.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_InformHost_InformUserCommunities) ΛBelongingModule() string {
	return "Cisco-IOS-XR-snmp-agent-cfg"
}


// Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_InformHost_InformUserCommunities_InformUserCommunity represents the /Cisco-IOS-XR-snmp-agent-cfg/snmp/vrfs/vrf/trap-hosts/trap-host/inform-host/inform-user-communities/inform-user-community YANG schema element.
type Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_InformHost_InformUserCommunities_InformUserCommunity struct {
	AdvancedTrapTypes1	*uint32	`path:"advanced-trap-types1" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	AdvancedTrapTypes2	*uint32	`path:"advanced-trap-types2" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	BasicTrapTypes	*uint32	`path:"basic-trap-types" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	CommunityName	*string	`path:"community-name" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	DyingGasp	*bool	`path:"dying-gasp" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	Port	*uint16	`path:"port" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	SecurityLevel	E_Cisco_IOS_XRSnmpAgentCfg_SnmpSecurityModel	`path:"security-level" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	Version	*string	`path:"version" module:"Cisco-IOS-XR-snmp-agent-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_InformHost_InformUserCommunities_InformUserCommunity implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_InformHost_InformUserCommunities_InformUserCommunity) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_InformHost_InformUserCommunities_InformUserCommunity struct, which is a YANG list entry.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_InformHost_InformUserCommunities_InformUserCommunity) ΛListKeyMap() (map[string]interface{}, error) {
	if t.CommunityName == nil {
		return nil, fmt.Errorf("nil value for key CommunityName")
	}

	return map[string]interface{}{
		"community-name": *t.CommunityName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_InformHost_InformUserCommunities_InformUserCommunity) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_InformHost_InformUserCommunities_InformUserCommunity"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_InformHost_InformUserCommunities_InformUserCommunity) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_InformHost_InformUserCommunities_InformUserCommunity) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_InformHost_InformUserCommunities_InformUserCommunity.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_InformHost_InformUserCommunities_InformUserCommunity) ΛBelongingModule() string {
	return "Cisco-IOS-XR-snmp-agent-cfg"
}


// Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_Type6EncryptedUserCommunities represents the /Cisco-IOS-XR-snmp-agent-cfg/snmp/vrfs/vrf/trap-hosts/trap-host/type6-encrypted-user-communities YANG schema element.
type Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_Type6EncryptedUserCommunities struct {
	Type6EncryptedUserCommunity	map[string]*Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_Type6EncryptedUserCommunities_Type6EncryptedUserCommunity	`path:"type6-encrypted-user-community" module:"Cisco-IOS-XR-snmp-agent-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_Type6EncryptedUserCommunities implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_Type6EncryptedUserCommunities) IsYANGGoStruct() {}

// NewType6EncryptedUserCommunity creates a new entry in the Type6EncryptedUserCommunity list of the
// Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_Type6EncryptedUserCommunities struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_Type6EncryptedUserCommunities) NewType6EncryptedUserCommunity(CommunityName string) (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_Type6EncryptedUserCommunities_Type6EncryptedUserCommunity, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Type6EncryptedUserCommunity == nil {
		t.Type6EncryptedUserCommunity = make(map[string]*Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_Type6EncryptedUserCommunities_Type6EncryptedUserCommunity)
	}

	key := CommunityName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Type6EncryptedUserCommunity[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Type6EncryptedUserCommunity", key)
	}

	t.Type6EncryptedUserCommunity[key] = &Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_Type6EncryptedUserCommunities_Type6EncryptedUserCommunity{
		CommunityName: &CommunityName,
	}

	return t.Type6EncryptedUserCommunity[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_Type6EncryptedUserCommunities) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_Type6EncryptedUserCommunities"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_Type6EncryptedUserCommunities) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_Type6EncryptedUserCommunities) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_Type6EncryptedUserCommunities.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_Type6EncryptedUserCommunities) ΛBelongingModule() string {
	return "Cisco-IOS-XR-snmp-agent-cfg"
}


// Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_Type6EncryptedUserCommunities_Type6EncryptedUserCommunity represents the /Cisco-IOS-XR-snmp-agent-cfg/snmp/vrfs/vrf/trap-hosts/trap-host/type6-encrypted-user-communities/type6-encrypted-user-community YANG schema element.
type Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_Type6EncryptedUserCommunities_Type6EncryptedUserCommunity struct {
	AdvancedTrapTypes1	*uint32	`path:"advanced-trap-types1" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	AdvancedTrapTypes2	*uint32	`path:"advanced-trap-types2" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	BasicTrapTypes	*uint32	`path:"basic-trap-types" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	CommunityName	*string	`path:"community-name" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	DyingGasp	*bool	`path:"dying-gasp" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	Port	*uint16	`path:"port" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	SecurityLevel	E_Cisco_IOS_XRSnmpAgentCfg_SnmpSecurityModel	`path:"security-level" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	Version	*string	`path:"version" module:"Cisco-IOS-XR-snmp-agent-cfg"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_Type6EncryptedUserCommunities_Type6EncryptedUserCommunity implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_Type6EncryptedUserCommunities_Type6EncryptedUserCommunity) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_Type6EncryptedUserCommunities_Type6EncryptedUserCommunity struct, which is a YANG list entry.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_Type6EncryptedUserCommunities_Type6EncryptedUserCommunity) ΛListKeyMap() (map[string]interface{}, error) {
	if t.CommunityName == nil {
		return nil, fmt.Errorf("nil value for key CommunityName")
	}

	return map[string]interface{}{
		"community-name": *t.CommunityName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_Type6EncryptedUserCommunities_Type6EncryptedUserCommunity) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_Type6EncryptedUserCommunities_Type6EncryptedUserCommunity"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_Type6EncryptedUserCommunities_Type6EncryptedUserCommunity) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_Type6EncryptedUserCommunities_Type6EncryptedUserCommunity) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_Type6EncryptedUserCommunities_Type6EncryptedUserCommunity.
func (*Cisco_IOS_XRSnmpAgentCfg_Snmp_Vrfs_Vrf_TrapHosts_TrapHost_Type6EncryptedUserCommunities_Type6EncryptedUserCommunity) ΛBelongingModule() string {
	return "Cisco-IOS-XR-snmp-agent-cfg"
}


// Interfaces represents the /interfaces YANG schema element.
type Interfaces struct {
	GlobalInterfaceConfiguration	*Cisco_IOS_XRIfmgrCfg_GlobalInterfaceConfiguration	`path:"global-interface-configuration" module:"Cisco-IOS-XR-ifmgr-cfg"`
	InterfaceConfigurations	*Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations	`path:"interface-configurations" module:"Cisco-IOS-XR-ifmgr-cfg"`
	Mib	*Cisco_IOS_XRSnmpAgentCfg_Mib	`path:"mib" module:"Cisco-IOS-XR-snmp-agent-cfg"`
	MplsTe	*Cisco_IOS_XRMplsTeCfg_MplsTe	`path:"mpls-te" module:"Cisco-IOS-XR-mpls-te-cfg"`
	Snmp	*Cisco_IOS_XRSnmpAgentCfg_Snmp	`path:"snmp" module:"Cisco-IOS-XR-snmp-agent-cfg"`
}

// IsYANGGoStruct ensures that Interfaces implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interfaces) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interfaces) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interfaces"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interfaces) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interfaces) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Interfaces.
func (*Interfaces) ΛBelongingModule() string {
	return ""
}


// E_Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Dampening_Args is a derived int64 type which is used to represent
// the enumerated node Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Dampening_Args. An additional value named
// Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Dampening_Args_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Dampening_Args int64

// IsYANGGoEnum ensures that Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Dampening_Args implements the yang.GoEnum
// interface. This ensures that Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Dampening_Args can be identified as a
// mapped type for a YANG enumeration.
func (E_Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Dampening_Args) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Dampening_Args.
func (E_Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Dampening_Args) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Dampening_Args.
func (e E_Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Dampening_Args) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Dampening_Args")
}

const (
	// Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Dampening_Args_UNSET corresponds to the value UNSET of Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Dampening_Args
	Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Dampening_Args_UNSET E_Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Dampening_Args = 0
	// Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Dampening_Args_default_values corresponds to the value default_values of Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Dampening_Args
	Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Dampening_Args_default_values E_Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Dampening_Args = 1
	// Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Dampening_Args_specify_half_life corresponds to the value specify_half_life of Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Dampening_Args
	Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Dampening_Args_specify_half_life E_Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Dampening_Args = 2
	// Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Dampening_Args_specify_all corresponds to the value specify_all of Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Dampening_Args
	Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Dampening_Args_specify_all E_Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Dampening_Args = 3
	// Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Dampening_Args_specify_rp corresponds to the value specify_rp of Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Dampening_Args
	Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Dampening_Args_specify_rp E_Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Dampening_Args = 4
)


// E_Cisco_IOS_XRIfmgrCfg_InterfaceModeEnum is a derived int64 type which is used to represent
// the enumerated node Cisco_IOS_XRIfmgrCfg_InterfaceModeEnum. An additional value named
// Cisco_IOS_XRIfmgrCfg_InterfaceModeEnum_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Cisco_IOS_XRIfmgrCfg_InterfaceModeEnum int64

// IsYANGGoEnum ensures that Cisco_IOS_XRIfmgrCfg_InterfaceModeEnum implements the yang.GoEnum
// interface. This ensures that Cisco_IOS_XRIfmgrCfg_InterfaceModeEnum can be identified as a
// mapped type for a YANG enumeration.
func (E_Cisco_IOS_XRIfmgrCfg_InterfaceModeEnum) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Cisco_IOS_XRIfmgrCfg_InterfaceModeEnum.
func (E_Cisco_IOS_XRIfmgrCfg_InterfaceModeEnum) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_Cisco_IOS_XRIfmgrCfg_InterfaceModeEnum.
func (e E_Cisco_IOS_XRIfmgrCfg_InterfaceModeEnum) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Cisco_IOS_XRIfmgrCfg_InterfaceModeEnum")
}

const (
	// Cisco_IOS_XRIfmgrCfg_InterfaceModeEnum_UNSET corresponds to the value UNSET of Cisco_IOS_XRIfmgrCfg_InterfaceModeEnum
	Cisco_IOS_XRIfmgrCfg_InterfaceModeEnum_UNSET E_Cisco_IOS_XRIfmgrCfg_InterfaceModeEnum = 0
	// Cisco_IOS_XRIfmgrCfg_InterfaceModeEnum_default corresponds to the value default of Cisco_IOS_XRIfmgrCfg_InterfaceModeEnum
	Cisco_IOS_XRIfmgrCfg_InterfaceModeEnum_default E_Cisco_IOS_XRIfmgrCfg_InterfaceModeEnum = 1
	// Cisco_IOS_XRIfmgrCfg_InterfaceModeEnum_point_to_point corresponds to the value point_to_point of Cisco_IOS_XRIfmgrCfg_InterfaceModeEnum
	Cisco_IOS_XRIfmgrCfg_InterfaceModeEnum_point_to_point E_Cisco_IOS_XRIfmgrCfg_InterfaceModeEnum = 2
	// Cisco_IOS_XRIfmgrCfg_InterfaceModeEnum_multipoint corresponds to the value multipoint of Cisco_IOS_XRIfmgrCfg_InterfaceModeEnum
	Cisco_IOS_XRIfmgrCfg_InterfaceModeEnum_multipoint E_Cisco_IOS_XRIfmgrCfg_InterfaceModeEnum = 3
	// Cisco_IOS_XRIfmgrCfg_InterfaceModeEnum_l2_transport corresponds to the value l2_transport of Cisco_IOS_XRIfmgrCfg_InterfaceModeEnum
	Cisco_IOS_XRIfmgrCfg_InterfaceModeEnum_l2_transport E_Cisco_IOS_XRIfmgrCfg_InterfaceModeEnum = 4
)


// E_Cisco_IOS_XRIfmgrCfg_LinkStatusEnum is a derived int64 type which is used to represent
// the enumerated node Cisco_IOS_XRIfmgrCfg_LinkStatusEnum. An additional value named
// Cisco_IOS_XRIfmgrCfg_LinkStatusEnum_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Cisco_IOS_XRIfmgrCfg_LinkStatusEnum int64

// IsYANGGoEnum ensures that Cisco_IOS_XRIfmgrCfg_LinkStatusEnum implements the yang.GoEnum
// interface. This ensures that Cisco_IOS_XRIfmgrCfg_LinkStatusEnum can be identified as a
// mapped type for a YANG enumeration.
func (E_Cisco_IOS_XRIfmgrCfg_LinkStatusEnum) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Cisco_IOS_XRIfmgrCfg_LinkStatusEnum.
func (E_Cisco_IOS_XRIfmgrCfg_LinkStatusEnum) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_Cisco_IOS_XRIfmgrCfg_LinkStatusEnum.
func (e E_Cisco_IOS_XRIfmgrCfg_LinkStatusEnum) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Cisco_IOS_XRIfmgrCfg_LinkStatusEnum")
}

const (
	// Cisco_IOS_XRIfmgrCfg_LinkStatusEnum_UNSET corresponds to the value UNSET of Cisco_IOS_XRIfmgrCfg_LinkStatusEnum
	Cisco_IOS_XRIfmgrCfg_LinkStatusEnum_UNSET E_Cisco_IOS_XRIfmgrCfg_LinkStatusEnum = 0
	// Cisco_IOS_XRIfmgrCfg_LinkStatusEnum_default corresponds to the value default of Cisco_IOS_XRIfmgrCfg_LinkStatusEnum
	Cisco_IOS_XRIfmgrCfg_LinkStatusEnum_default E_Cisco_IOS_XRIfmgrCfg_LinkStatusEnum = 1
	// Cisco_IOS_XRIfmgrCfg_LinkStatusEnum_disable corresponds to the value disable of Cisco_IOS_XRIfmgrCfg_LinkStatusEnum
	Cisco_IOS_XRIfmgrCfg_LinkStatusEnum_disable E_Cisco_IOS_XRIfmgrCfg_LinkStatusEnum = 2
	// Cisco_IOS_XRIfmgrCfg_LinkStatusEnum_software_interfaces corresponds to the value software_interfaces of Cisco_IOS_XRIfmgrCfg_LinkStatusEnum
	Cisco_IOS_XRIfmgrCfg_LinkStatusEnum_software_interfaces E_Cisco_IOS_XRIfmgrCfg_LinkStatusEnum = 3
)


// E_Cisco_IOS_XRIfmgrCfg_SecondaryAdminStateEnum is a derived int64 type which is used to represent
// the enumerated node Cisco_IOS_XRIfmgrCfg_SecondaryAdminStateEnum. An additional value named
// Cisco_IOS_XRIfmgrCfg_SecondaryAdminStateEnum_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Cisco_IOS_XRIfmgrCfg_SecondaryAdminStateEnum int64

// IsYANGGoEnum ensures that Cisco_IOS_XRIfmgrCfg_SecondaryAdminStateEnum implements the yang.GoEnum
// interface. This ensures that Cisco_IOS_XRIfmgrCfg_SecondaryAdminStateEnum can be identified as a
// mapped type for a YANG enumeration.
func (E_Cisco_IOS_XRIfmgrCfg_SecondaryAdminStateEnum) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Cisco_IOS_XRIfmgrCfg_SecondaryAdminStateEnum.
func (E_Cisco_IOS_XRIfmgrCfg_SecondaryAdminStateEnum) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_Cisco_IOS_XRIfmgrCfg_SecondaryAdminStateEnum.
func (e E_Cisco_IOS_XRIfmgrCfg_SecondaryAdminStateEnum) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Cisco_IOS_XRIfmgrCfg_SecondaryAdminStateEnum")
}

const (
	// Cisco_IOS_XRIfmgrCfg_SecondaryAdminStateEnum_UNSET corresponds to the value UNSET of Cisco_IOS_XRIfmgrCfg_SecondaryAdminStateEnum
	Cisco_IOS_XRIfmgrCfg_SecondaryAdminStateEnum_UNSET E_Cisco_IOS_XRIfmgrCfg_SecondaryAdminStateEnum = 0
	// Cisco_IOS_XRIfmgrCfg_SecondaryAdminStateEnum_normal corresponds to the value normal of Cisco_IOS_XRIfmgrCfg_SecondaryAdminStateEnum
	Cisco_IOS_XRIfmgrCfg_SecondaryAdminStateEnum_normal E_Cisco_IOS_XRIfmgrCfg_SecondaryAdminStateEnum = 1
	// Cisco_IOS_XRIfmgrCfg_SecondaryAdminStateEnum_maintenance corresponds to the value maintenance of Cisco_IOS_XRIfmgrCfg_SecondaryAdminStateEnum
	Cisco_IOS_XRIfmgrCfg_SecondaryAdminStateEnum_maintenance E_Cisco_IOS_XRIfmgrCfg_SecondaryAdminStateEnum = 2
)


// E_Cisco_IOS_XRMplsTeCfg_BandwidthConstraint is a derived int64 type which is used to represent
// the enumerated node Cisco_IOS_XRMplsTeCfg_BandwidthConstraint. An additional value named
// Cisco_IOS_XRMplsTeCfg_BandwidthConstraint_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Cisco_IOS_XRMplsTeCfg_BandwidthConstraint int64

// IsYANGGoEnum ensures that Cisco_IOS_XRMplsTeCfg_BandwidthConstraint implements the yang.GoEnum
// interface. This ensures that Cisco_IOS_XRMplsTeCfg_BandwidthConstraint can be identified as a
// mapped type for a YANG enumeration.
func (E_Cisco_IOS_XRMplsTeCfg_BandwidthConstraint) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Cisco_IOS_XRMplsTeCfg_BandwidthConstraint.
func (E_Cisco_IOS_XRMplsTeCfg_BandwidthConstraint) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_Cisco_IOS_XRMplsTeCfg_BandwidthConstraint.
func (e E_Cisco_IOS_XRMplsTeCfg_BandwidthConstraint) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Cisco_IOS_XRMplsTeCfg_BandwidthConstraint")
}

const (
	// Cisco_IOS_XRMplsTeCfg_BandwidthConstraint_UNSET corresponds to the value UNSET of Cisco_IOS_XRMplsTeCfg_BandwidthConstraint
	Cisco_IOS_XRMplsTeCfg_BandwidthConstraint_UNSET E_Cisco_IOS_XRMplsTeCfg_BandwidthConstraint = 0
	// Cisco_IOS_XRMplsTeCfg_BandwidthConstraint_bandwidth_constraint_maximum_allocation_model corresponds to the value bandwidth_constraint_maximum_allocation_model of Cisco_IOS_XRMplsTeCfg_BandwidthConstraint
	Cisco_IOS_XRMplsTeCfg_BandwidthConstraint_bandwidth_constraint_maximum_allocation_model E_Cisco_IOS_XRMplsTeCfg_BandwidthConstraint = 1
)


// E_Cisco_IOS_XRMplsTeCfg_BfdReversePath is a derived int64 type which is used to represent
// the enumerated node Cisco_IOS_XRMplsTeCfg_BfdReversePath. An additional value named
// Cisco_IOS_XRMplsTeCfg_BfdReversePath_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Cisco_IOS_XRMplsTeCfg_BfdReversePath int64

// IsYANGGoEnum ensures that Cisco_IOS_XRMplsTeCfg_BfdReversePath implements the yang.GoEnum
// interface. This ensures that Cisco_IOS_XRMplsTeCfg_BfdReversePath can be identified as a
// mapped type for a YANG enumeration.
func (E_Cisco_IOS_XRMplsTeCfg_BfdReversePath) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Cisco_IOS_XRMplsTeCfg_BfdReversePath.
func (E_Cisco_IOS_XRMplsTeCfg_BfdReversePath) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_Cisco_IOS_XRMplsTeCfg_BfdReversePath.
func (e E_Cisco_IOS_XRMplsTeCfg_BfdReversePath) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Cisco_IOS_XRMplsTeCfg_BfdReversePath")
}

const (
	// Cisco_IOS_XRMplsTeCfg_BfdReversePath_UNSET corresponds to the value UNSET of Cisco_IOS_XRMplsTeCfg_BfdReversePath
	Cisco_IOS_XRMplsTeCfg_BfdReversePath_UNSET E_Cisco_IOS_XRMplsTeCfg_BfdReversePath = 0
	// Cisco_IOS_XRMplsTeCfg_BfdReversePath_bfd_reverse_path_binding_label corresponds to the value bfd_reverse_path_binding_label of Cisco_IOS_XRMplsTeCfg_BfdReversePath
	Cisco_IOS_XRMplsTeCfg_BfdReversePath_bfd_reverse_path_binding_label E_Cisco_IOS_XRMplsTeCfg_BfdReversePath = 1
)


// E_Cisco_IOS_XRMplsTeCfg_BindingSegmentId is a derived int64 type which is used to represent
// the enumerated node Cisco_IOS_XRMplsTeCfg_BindingSegmentId. An additional value named
// Cisco_IOS_XRMplsTeCfg_BindingSegmentId_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Cisco_IOS_XRMplsTeCfg_BindingSegmentId int64

// IsYANGGoEnum ensures that Cisco_IOS_XRMplsTeCfg_BindingSegmentId implements the yang.GoEnum
// interface. This ensures that Cisco_IOS_XRMplsTeCfg_BindingSegmentId can be identified as a
// mapped type for a YANG enumeration.
func (E_Cisco_IOS_XRMplsTeCfg_BindingSegmentId) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Cisco_IOS_XRMplsTeCfg_BindingSegmentId.
func (E_Cisco_IOS_XRMplsTeCfg_BindingSegmentId) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_Cisco_IOS_XRMplsTeCfg_BindingSegmentId.
func (e E_Cisco_IOS_XRMplsTeCfg_BindingSegmentId) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Cisco_IOS_XRMplsTeCfg_BindingSegmentId")
}

const (
	// Cisco_IOS_XRMplsTeCfg_BindingSegmentId_UNSET corresponds to the value UNSET of Cisco_IOS_XRMplsTeCfg_BindingSegmentId
	Cisco_IOS_XRMplsTeCfg_BindingSegmentId_UNSET E_Cisco_IOS_XRMplsTeCfg_BindingSegmentId = 0
	// Cisco_IOS_XRMplsTeCfg_BindingSegmentId_any_label corresponds to the value any_label of Cisco_IOS_XRMplsTeCfg_BindingSegmentId
	Cisco_IOS_XRMplsTeCfg_BindingSegmentId_any_label E_Cisco_IOS_XRMplsTeCfg_BindingSegmentId = 1
	// Cisco_IOS_XRMplsTeCfg_BindingSegmentId_specified_label corresponds to the value specified_label of Cisco_IOS_XRMplsTeCfg_BindingSegmentId
	Cisco_IOS_XRMplsTeCfg_BindingSegmentId_specified_label E_Cisco_IOS_XRMplsTeCfg_BindingSegmentId = 2
)


// E_Cisco_IOS_XRMplsTeCfg_GmplsttiMode is a derived int64 type which is used to represent
// the enumerated node Cisco_IOS_XRMplsTeCfg_GmplsttiMode. An additional value named
// Cisco_IOS_XRMplsTeCfg_GmplsttiMode_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Cisco_IOS_XRMplsTeCfg_GmplsttiMode int64

// IsYANGGoEnum ensures that Cisco_IOS_XRMplsTeCfg_GmplsttiMode implements the yang.GoEnum
// interface. This ensures that Cisco_IOS_XRMplsTeCfg_GmplsttiMode can be identified as a
// mapped type for a YANG enumeration.
func (E_Cisco_IOS_XRMplsTeCfg_GmplsttiMode) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Cisco_IOS_XRMplsTeCfg_GmplsttiMode.
func (E_Cisco_IOS_XRMplsTeCfg_GmplsttiMode) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_Cisco_IOS_XRMplsTeCfg_GmplsttiMode.
func (e E_Cisco_IOS_XRMplsTeCfg_GmplsttiMode) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Cisco_IOS_XRMplsTeCfg_GmplsttiMode")
}

const (
	// Cisco_IOS_XRMplsTeCfg_GmplsttiMode_UNSET corresponds to the value UNSET of Cisco_IOS_XRMplsTeCfg_GmplsttiMode
	Cisco_IOS_XRMplsTeCfg_GmplsttiMode_UNSET E_Cisco_IOS_XRMplsTeCfg_GmplsttiMode = 0
	// Cisco_IOS_XRMplsTeCfg_GmplsttiMode_sm corresponds to the value sm of Cisco_IOS_XRMplsTeCfg_GmplsttiMode
	Cisco_IOS_XRMplsTeCfg_GmplsttiMode_sm E_Cisco_IOS_XRMplsTeCfg_GmplsttiMode = 1
	// Cisco_IOS_XRMplsTeCfg_GmplsttiMode_pm corresponds to the value pm of Cisco_IOS_XRMplsTeCfg_GmplsttiMode
	Cisco_IOS_XRMplsTeCfg_GmplsttiMode_pm E_Cisco_IOS_XRMplsTeCfg_GmplsttiMode = 2
	// Cisco_IOS_XRMplsTeCfg_GmplsttiMode_tcm corresponds to the value tcm of Cisco_IOS_XRMplsTeCfg_GmplsttiMode
	Cisco_IOS_XRMplsTeCfg_GmplsttiMode_tcm E_Cisco_IOS_XRMplsTeCfg_GmplsttiMode = 3
)


// E_Cisco_IOS_XRMplsTeCfg_IETFMode is a derived int64 type which is used to represent
// the enumerated node Cisco_IOS_XRMplsTeCfg_IETFMode. An additional value named
// Cisco_IOS_XRMplsTeCfg_IETFMode_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Cisco_IOS_XRMplsTeCfg_IETFMode int64

// IsYANGGoEnum ensures that Cisco_IOS_XRMplsTeCfg_IETFMode implements the yang.GoEnum
// interface. This ensures that Cisco_IOS_XRMplsTeCfg_IETFMode can be identified as a
// mapped type for a YANG enumeration.
func (E_Cisco_IOS_XRMplsTeCfg_IETFMode) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Cisco_IOS_XRMplsTeCfg_IETFMode.
func (E_Cisco_IOS_XRMplsTeCfg_IETFMode) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_Cisco_IOS_XRMplsTeCfg_IETFMode.
func (e E_Cisco_IOS_XRMplsTeCfg_IETFMode) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Cisco_IOS_XRMplsTeCfg_IETFMode")
}

const (
	// Cisco_IOS_XRMplsTeCfg_IETFMode_UNSET corresponds to the value UNSET of Cisco_IOS_XRMplsTeCfg_IETFMode
	Cisco_IOS_XRMplsTeCfg_IETFMode_UNSET E_Cisco_IOS_XRMplsTeCfg_IETFMode = 0
	// Cisco_IOS_XRMplsTeCfg_IETFMode_standard corresponds to the value standard of Cisco_IOS_XRMplsTeCfg_IETFMode
	Cisco_IOS_XRMplsTeCfg_IETFMode_standard E_Cisco_IOS_XRMplsTeCfg_IETFMode = 1
)


// E_Cisco_IOS_XRMplsTeCfg_LinkNextHop is a derived int64 type which is used to represent
// the enumerated node Cisco_IOS_XRMplsTeCfg_LinkNextHop. An additional value named
// Cisco_IOS_XRMplsTeCfg_LinkNextHop_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Cisco_IOS_XRMplsTeCfg_LinkNextHop int64

// IsYANGGoEnum ensures that Cisco_IOS_XRMplsTeCfg_LinkNextHop implements the yang.GoEnum
// interface. This ensures that Cisco_IOS_XRMplsTeCfg_LinkNextHop can be identified as a
// mapped type for a YANG enumeration.
func (E_Cisco_IOS_XRMplsTeCfg_LinkNextHop) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Cisco_IOS_XRMplsTeCfg_LinkNextHop.
func (E_Cisco_IOS_XRMplsTeCfg_LinkNextHop) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_Cisco_IOS_XRMplsTeCfg_LinkNextHop.
func (e E_Cisco_IOS_XRMplsTeCfg_LinkNextHop) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Cisco_IOS_XRMplsTeCfg_LinkNextHop")
}

const (
	// Cisco_IOS_XRMplsTeCfg_LinkNextHop_UNSET corresponds to the value UNSET of Cisco_IOS_XRMplsTeCfg_LinkNextHop
	Cisco_IOS_XRMplsTeCfg_LinkNextHop_UNSET E_Cisco_IOS_XRMplsTeCfg_LinkNextHop = 0
	// Cisco_IOS_XRMplsTeCfg_LinkNextHop_none corresponds to the value none of Cisco_IOS_XRMplsTeCfg_LinkNextHop
	Cisco_IOS_XRMplsTeCfg_LinkNextHop_none E_Cisco_IOS_XRMplsTeCfg_LinkNextHop = 1
	// Cisco_IOS_XRMplsTeCfg_LinkNextHop_ipv4_address corresponds to the value ipv4_address of Cisco_IOS_XRMplsTeCfg_LinkNextHop
	Cisco_IOS_XRMplsTeCfg_LinkNextHop_ipv4_address E_Cisco_IOS_XRMplsTeCfg_LinkNextHop = 2
)


// E_Cisco_IOS_XRMplsTeCfg_MplsLcacFloodingIgp is a derived int64 type which is used to represent
// the enumerated node Cisco_IOS_XRMplsTeCfg_MplsLcacFloodingIgp. An additional value named
// Cisco_IOS_XRMplsTeCfg_MplsLcacFloodingIgp_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Cisco_IOS_XRMplsTeCfg_MplsLcacFloodingIgp int64

// IsYANGGoEnum ensures that Cisco_IOS_XRMplsTeCfg_MplsLcacFloodingIgp implements the yang.GoEnum
// interface. This ensures that Cisco_IOS_XRMplsTeCfg_MplsLcacFloodingIgp can be identified as a
// mapped type for a YANG enumeration.
func (E_Cisco_IOS_XRMplsTeCfg_MplsLcacFloodingIgp) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Cisco_IOS_XRMplsTeCfg_MplsLcacFloodingIgp.
func (E_Cisco_IOS_XRMplsTeCfg_MplsLcacFloodingIgp) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_Cisco_IOS_XRMplsTeCfg_MplsLcacFloodingIgp.
func (e E_Cisco_IOS_XRMplsTeCfg_MplsLcacFloodingIgp) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Cisco_IOS_XRMplsTeCfg_MplsLcacFloodingIgp")
}

const (
	// Cisco_IOS_XRMplsTeCfg_MplsLcacFloodingIgp_UNSET corresponds to the value UNSET of Cisco_IOS_XRMplsTeCfg_MplsLcacFloodingIgp
	Cisco_IOS_XRMplsTeCfg_MplsLcacFloodingIgp_UNSET E_Cisco_IOS_XRMplsTeCfg_MplsLcacFloodingIgp = 0
	// Cisco_IOS_XRMplsTeCfg_MplsLcacFloodingIgp_ospf corresponds to the value ospf of Cisco_IOS_XRMplsTeCfg_MplsLcacFloodingIgp
	Cisco_IOS_XRMplsTeCfg_MplsLcacFloodingIgp_ospf E_Cisco_IOS_XRMplsTeCfg_MplsLcacFloodingIgp = 1
)


// E_Cisco_IOS_XRMplsTeCfg_MplsTeAffinityValue is a derived int64 type which is used to represent
// the enumerated node Cisco_IOS_XRMplsTeCfg_MplsTeAffinityValue. An additional value named
// Cisco_IOS_XRMplsTeCfg_MplsTeAffinityValue_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Cisco_IOS_XRMplsTeCfg_MplsTeAffinityValue int64

// IsYANGGoEnum ensures that Cisco_IOS_XRMplsTeCfg_MplsTeAffinityValue implements the yang.GoEnum
// interface. This ensures that Cisco_IOS_XRMplsTeCfg_MplsTeAffinityValue can be identified as a
// mapped type for a YANG enumeration.
func (E_Cisco_IOS_XRMplsTeCfg_MplsTeAffinityValue) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Cisco_IOS_XRMplsTeCfg_MplsTeAffinityValue.
func (E_Cisco_IOS_XRMplsTeCfg_MplsTeAffinityValue) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_Cisco_IOS_XRMplsTeCfg_MplsTeAffinityValue.
func (e E_Cisco_IOS_XRMplsTeCfg_MplsTeAffinityValue) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Cisco_IOS_XRMplsTeCfg_MplsTeAffinityValue")
}

const (
	// Cisco_IOS_XRMplsTeCfg_MplsTeAffinityValue_UNSET corresponds to the value UNSET of Cisco_IOS_XRMplsTeCfg_MplsTeAffinityValue
	Cisco_IOS_XRMplsTeCfg_MplsTeAffinityValue_UNSET E_Cisco_IOS_XRMplsTeCfg_MplsTeAffinityValue = 0
	// Cisco_IOS_XRMplsTeCfg_MplsTeAffinityValue_hex_value corresponds to the value hex_value of Cisco_IOS_XRMplsTeCfg_MplsTeAffinityValue
	Cisco_IOS_XRMplsTeCfg_MplsTeAffinityValue_hex_value E_Cisco_IOS_XRMplsTeCfg_MplsTeAffinityValue = 1
	// Cisco_IOS_XRMplsTeCfg_MplsTeAffinityValue_bit_position corresponds to the value bit_position of Cisco_IOS_XRMplsTeCfg_MplsTeAffinityValue
	Cisco_IOS_XRMplsTeCfg_MplsTeAffinityValue_bit_position E_Cisco_IOS_XRMplsTeCfg_MplsTeAffinityValue = 2
)


// E_Cisco_IOS_XRMplsTeCfg_MplsTeAutorouteMetric is a derived int64 type which is used to represent
// the enumerated node Cisco_IOS_XRMplsTeCfg_MplsTeAutorouteMetric. An additional value named
// Cisco_IOS_XRMplsTeCfg_MplsTeAutorouteMetric_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Cisco_IOS_XRMplsTeCfg_MplsTeAutorouteMetric int64

// IsYANGGoEnum ensures that Cisco_IOS_XRMplsTeCfg_MplsTeAutorouteMetric implements the yang.GoEnum
// interface. This ensures that Cisco_IOS_XRMplsTeCfg_MplsTeAutorouteMetric can be identified as a
// mapped type for a YANG enumeration.
func (E_Cisco_IOS_XRMplsTeCfg_MplsTeAutorouteMetric) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Cisco_IOS_XRMplsTeCfg_MplsTeAutorouteMetric.
func (E_Cisco_IOS_XRMplsTeCfg_MplsTeAutorouteMetric) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_Cisco_IOS_XRMplsTeCfg_MplsTeAutorouteMetric.
func (e E_Cisco_IOS_XRMplsTeCfg_MplsTeAutorouteMetric) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Cisco_IOS_XRMplsTeCfg_MplsTeAutorouteMetric")
}

const (
	// Cisco_IOS_XRMplsTeCfg_MplsTeAutorouteMetric_UNSET corresponds to the value UNSET of Cisco_IOS_XRMplsTeCfg_MplsTeAutorouteMetric
	Cisco_IOS_XRMplsTeCfg_MplsTeAutorouteMetric_UNSET E_Cisco_IOS_XRMplsTeCfg_MplsTeAutorouteMetric = 0
	// Cisco_IOS_XRMplsTeCfg_MplsTeAutorouteMetric_relative corresponds to the value relative of Cisco_IOS_XRMplsTeCfg_MplsTeAutorouteMetric
	Cisco_IOS_XRMplsTeCfg_MplsTeAutorouteMetric_relative E_Cisco_IOS_XRMplsTeCfg_MplsTeAutorouteMetric = 1
	// Cisco_IOS_XRMplsTeCfg_MplsTeAutorouteMetric_absolute corresponds to the value absolute of Cisco_IOS_XRMplsTeCfg_MplsTeAutorouteMetric
	Cisco_IOS_XRMplsTeCfg_MplsTeAutorouteMetric_absolute E_Cisco_IOS_XRMplsTeCfg_MplsTeAutorouteMetric = 2
	// Cisco_IOS_XRMplsTeCfg_MplsTeAutorouteMetric_constant corresponds to the value constant of Cisco_IOS_XRMplsTeCfg_MplsTeAutorouteMetric
	Cisco_IOS_XRMplsTeCfg_MplsTeAutorouteMetric_constant E_Cisco_IOS_XRMplsTeCfg_MplsTeAutorouteMetric = 3
)


// E_Cisco_IOS_XRMplsTeCfg_MplsTeBackupBandwidthClass is a derived int64 type which is used to represent
// the enumerated node Cisco_IOS_XRMplsTeCfg_MplsTeBackupBandwidthClass. An additional value named
// Cisco_IOS_XRMplsTeCfg_MplsTeBackupBandwidthClass_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Cisco_IOS_XRMplsTeCfg_MplsTeBackupBandwidthClass int64

// IsYANGGoEnum ensures that Cisco_IOS_XRMplsTeCfg_MplsTeBackupBandwidthClass implements the yang.GoEnum
// interface. This ensures that Cisco_IOS_XRMplsTeCfg_MplsTeBackupBandwidthClass can be identified as a
// mapped type for a YANG enumeration.
func (E_Cisco_IOS_XRMplsTeCfg_MplsTeBackupBandwidthClass) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Cisco_IOS_XRMplsTeCfg_MplsTeBackupBandwidthClass.
func (E_Cisco_IOS_XRMplsTeCfg_MplsTeBackupBandwidthClass) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_Cisco_IOS_XRMplsTeCfg_MplsTeBackupBandwidthClass.
func (e E_Cisco_IOS_XRMplsTeCfg_MplsTeBackupBandwidthClass) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Cisco_IOS_XRMplsTeCfg_MplsTeBackupBandwidthClass")
}

const (
	// Cisco_IOS_XRMplsTeCfg_MplsTeBackupBandwidthClass_UNSET corresponds to the value UNSET of Cisco_IOS_XRMplsTeCfg_MplsTeBackupBandwidthClass
	Cisco_IOS_XRMplsTeCfg_MplsTeBackupBandwidthClass_UNSET E_Cisco_IOS_XRMplsTeCfg_MplsTeBackupBandwidthClass = 0
	// Cisco_IOS_XRMplsTeCfg_MplsTeBackupBandwidthClass_class0 corresponds to the value class0 of Cisco_IOS_XRMplsTeCfg_MplsTeBackupBandwidthClass
	Cisco_IOS_XRMplsTeCfg_MplsTeBackupBandwidthClass_class0 E_Cisco_IOS_XRMplsTeCfg_MplsTeBackupBandwidthClass = 1
	// Cisco_IOS_XRMplsTeCfg_MplsTeBackupBandwidthClass_class1 corresponds to the value class1 of Cisco_IOS_XRMplsTeCfg_MplsTeBackupBandwidthClass
	Cisco_IOS_XRMplsTeCfg_MplsTeBackupBandwidthClass_class1 E_Cisco_IOS_XRMplsTeCfg_MplsTeBackupBandwidthClass = 2
	// Cisco_IOS_XRMplsTeCfg_MplsTeBackupBandwidthClass_any_class corresponds to the value any_class of Cisco_IOS_XRMplsTeCfg_MplsTeBackupBandwidthClass
	Cisco_IOS_XRMplsTeCfg_MplsTeBackupBandwidthClass_any_class E_Cisco_IOS_XRMplsTeCfg_MplsTeBackupBandwidthClass = 3
)


// E_Cisco_IOS_XRMplsTeCfg_MplsTeBackupBandwidthPool is a derived int64 type which is used to represent
// the enumerated node Cisco_IOS_XRMplsTeCfg_MplsTeBackupBandwidthPool. An additional value named
// Cisco_IOS_XRMplsTeCfg_MplsTeBackupBandwidthPool_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Cisco_IOS_XRMplsTeCfg_MplsTeBackupBandwidthPool int64

// IsYANGGoEnum ensures that Cisco_IOS_XRMplsTeCfg_MplsTeBackupBandwidthPool implements the yang.GoEnum
// interface. This ensures that Cisco_IOS_XRMplsTeCfg_MplsTeBackupBandwidthPool can be identified as a
// mapped type for a YANG enumeration.
func (E_Cisco_IOS_XRMplsTeCfg_MplsTeBackupBandwidthPool) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Cisco_IOS_XRMplsTeCfg_MplsTeBackupBandwidthPool.
func (E_Cisco_IOS_XRMplsTeCfg_MplsTeBackupBandwidthPool) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_Cisco_IOS_XRMplsTeCfg_MplsTeBackupBandwidthPool.
func (e E_Cisco_IOS_XRMplsTeCfg_MplsTeBackupBandwidthPool) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Cisco_IOS_XRMplsTeCfg_MplsTeBackupBandwidthPool")
}

const (
	// Cisco_IOS_XRMplsTeCfg_MplsTeBackupBandwidthPool_UNSET corresponds to the value UNSET of Cisco_IOS_XRMplsTeCfg_MplsTeBackupBandwidthPool
	Cisco_IOS_XRMplsTeCfg_MplsTeBackupBandwidthPool_UNSET E_Cisco_IOS_XRMplsTeCfg_MplsTeBackupBandwidthPool = 0
	// Cisco_IOS_XRMplsTeCfg_MplsTeBackupBandwidthPool_any_pool corresponds to the value any_pool of Cisco_IOS_XRMplsTeCfg_MplsTeBackupBandwidthPool
	Cisco_IOS_XRMplsTeCfg_MplsTeBackupBandwidthPool_any_pool E_Cisco_IOS_XRMplsTeCfg_MplsTeBackupBandwidthPool = 1
	// Cisco_IOS_XRMplsTeCfg_MplsTeBackupBandwidthPool_global_pool corresponds to the value global_pool of Cisco_IOS_XRMplsTeCfg_MplsTeBackupBandwidthPool
	Cisco_IOS_XRMplsTeCfg_MplsTeBackupBandwidthPool_global_pool E_Cisco_IOS_XRMplsTeCfg_MplsTeBackupBandwidthPool = 2
	// Cisco_IOS_XRMplsTeCfg_MplsTeBackupBandwidthPool_sub_pool corresponds to the value sub_pool of Cisco_IOS_XRMplsTeCfg_MplsTeBackupBandwidthPool
	Cisco_IOS_XRMplsTeCfg_MplsTeBackupBandwidthPool_sub_pool E_Cisco_IOS_XRMplsTeCfg_MplsTeBackupBandwidthPool = 3
)


// E_Cisco_IOS_XRMplsTeCfg_MplsTeBandwidthDste is a derived int64 type which is used to represent
// the enumerated node Cisco_IOS_XRMplsTeCfg_MplsTeBandwidthDste. An additional value named
// Cisco_IOS_XRMplsTeCfg_MplsTeBandwidthDste_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Cisco_IOS_XRMplsTeCfg_MplsTeBandwidthDste int64

// IsYANGGoEnum ensures that Cisco_IOS_XRMplsTeCfg_MplsTeBandwidthDste implements the yang.GoEnum
// interface. This ensures that Cisco_IOS_XRMplsTeCfg_MplsTeBandwidthDste can be identified as a
// mapped type for a YANG enumeration.
func (E_Cisco_IOS_XRMplsTeCfg_MplsTeBandwidthDste) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Cisco_IOS_XRMplsTeCfg_MplsTeBandwidthDste.
func (E_Cisco_IOS_XRMplsTeCfg_MplsTeBandwidthDste) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_Cisco_IOS_XRMplsTeCfg_MplsTeBandwidthDste.
func (e E_Cisco_IOS_XRMplsTeCfg_MplsTeBandwidthDste) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Cisco_IOS_XRMplsTeCfg_MplsTeBandwidthDste")
}

const (
	// Cisco_IOS_XRMplsTeCfg_MplsTeBandwidthDste_UNSET corresponds to the value UNSET of Cisco_IOS_XRMplsTeCfg_MplsTeBandwidthDste
	Cisco_IOS_XRMplsTeCfg_MplsTeBandwidthDste_UNSET E_Cisco_IOS_XRMplsTeCfg_MplsTeBandwidthDste = 0
	// Cisco_IOS_XRMplsTeCfg_MplsTeBandwidthDste_standard_dste corresponds to the value standard_dste of Cisco_IOS_XRMplsTeCfg_MplsTeBandwidthDste
	Cisco_IOS_XRMplsTeCfg_MplsTeBandwidthDste_standard_dste E_Cisco_IOS_XRMplsTeCfg_MplsTeBandwidthDste = 1
	// Cisco_IOS_XRMplsTeCfg_MplsTeBandwidthDste_pre_standard_dste corresponds to the value pre_standard_dste of Cisco_IOS_XRMplsTeCfg_MplsTeBandwidthDste
	Cisco_IOS_XRMplsTeCfg_MplsTeBandwidthDste_pre_standard_dste E_Cisco_IOS_XRMplsTeCfg_MplsTeBandwidthDste = 2
)


// E_Cisco_IOS_XRMplsTeCfg_MplsTeBandwidthLimit is a derived int64 type which is used to represent
// the enumerated node Cisco_IOS_XRMplsTeCfg_MplsTeBandwidthLimit. An additional value named
// Cisco_IOS_XRMplsTeCfg_MplsTeBandwidthLimit_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Cisco_IOS_XRMplsTeCfg_MplsTeBandwidthLimit int64

// IsYANGGoEnum ensures that Cisco_IOS_XRMplsTeCfg_MplsTeBandwidthLimit implements the yang.GoEnum
// interface. This ensures that Cisco_IOS_XRMplsTeCfg_MplsTeBandwidthLimit can be identified as a
// mapped type for a YANG enumeration.
func (E_Cisco_IOS_XRMplsTeCfg_MplsTeBandwidthLimit) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Cisco_IOS_XRMplsTeCfg_MplsTeBandwidthLimit.
func (E_Cisco_IOS_XRMplsTeCfg_MplsTeBandwidthLimit) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_Cisco_IOS_XRMplsTeCfg_MplsTeBandwidthLimit.
func (e E_Cisco_IOS_XRMplsTeCfg_MplsTeBandwidthLimit) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Cisco_IOS_XRMplsTeCfg_MplsTeBandwidthLimit")
}

const (
	// Cisco_IOS_XRMplsTeCfg_MplsTeBandwidthLimit_UNSET corresponds to the value UNSET of Cisco_IOS_XRMplsTeCfg_MplsTeBandwidthLimit
	Cisco_IOS_XRMplsTeCfg_MplsTeBandwidthLimit_UNSET E_Cisco_IOS_XRMplsTeCfg_MplsTeBandwidthLimit = 0
	// Cisco_IOS_XRMplsTeCfg_MplsTeBandwidthLimit_unlimited corresponds to the value unlimited of Cisco_IOS_XRMplsTeCfg_MplsTeBandwidthLimit
	Cisco_IOS_XRMplsTeCfg_MplsTeBandwidthLimit_unlimited E_Cisco_IOS_XRMplsTeCfg_MplsTeBandwidthLimit = 1
	// Cisco_IOS_XRMplsTeCfg_MplsTeBandwidthLimit_limited corresponds to the value limited of Cisco_IOS_XRMplsTeCfg_MplsTeBandwidthLimit
	Cisco_IOS_XRMplsTeCfg_MplsTeBandwidthLimit_limited E_Cisco_IOS_XRMplsTeCfg_MplsTeBandwidthLimit = 2
)


// E_Cisco_IOS_XRMplsTeCfg_MplsTeBfdSessionDownAction is a derived int64 type which is used to represent
// the enumerated node Cisco_IOS_XRMplsTeCfg_MplsTeBfdSessionDownAction. An additional value named
// Cisco_IOS_XRMplsTeCfg_MplsTeBfdSessionDownAction_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Cisco_IOS_XRMplsTeCfg_MplsTeBfdSessionDownAction int64

// IsYANGGoEnum ensures that Cisco_IOS_XRMplsTeCfg_MplsTeBfdSessionDownAction implements the yang.GoEnum
// interface. This ensures that Cisco_IOS_XRMplsTeCfg_MplsTeBfdSessionDownAction can be identified as a
// mapped type for a YANG enumeration.
func (E_Cisco_IOS_XRMplsTeCfg_MplsTeBfdSessionDownAction) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Cisco_IOS_XRMplsTeCfg_MplsTeBfdSessionDownAction.
func (E_Cisco_IOS_XRMplsTeCfg_MplsTeBfdSessionDownAction) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_Cisco_IOS_XRMplsTeCfg_MplsTeBfdSessionDownAction.
func (e E_Cisco_IOS_XRMplsTeCfg_MplsTeBfdSessionDownAction) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Cisco_IOS_XRMplsTeCfg_MplsTeBfdSessionDownAction")
}

const (
	// Cisco_IOS_XRMplsTeCfg_MplsTeBfdSessionDownAction_UNSET corresponds to the value UNSET of Cisco_IOS_XRMplsTeCfg_MplsTeBfdSessionDownAction
	Cisco_IOS_XRMplsTeCfg_MplsTeBfdSessionDownAction_UNSET E_Cisco_IOS_XRMplsTeCfg_MplsTeBfdSessionDownAction = 0
	// Cisco_IOS_XRMplsTeCfg_MplsTeBfdSessionDownAction_re_setup corresponds to the value re_setup of Cisco_IOS_XRMplsTeCfg_MplsTeBfdSessionDownAction
	Cisco_IOS_XRMplsTeCfg_MplsTeBfdSessionDownAction_re_setup E_Cisco_IOS_XRMplsTeCfg_MplsTeBfdSessionDownAction = 1
)


// E_Cisco_IOS_XRMplsTeCfg_MplsTeConfigTunnel is a derived int64 type which is used to represent
// the enumerated node Cisco_IOS_XRMplsTeCfg_MplsTeConfigTunnel. An additional value named
// Cisco_IOS_XRMplsTeCfg_MplsTeConfigTunnel_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Cisco_IOS_XRMplsTeCfg_MplsTeConfigTunnel int64

// IsYANGGoEnum ensures that Cisco_IOS_XRMplsTeCfg_MplsTeConfigTunnel implements the yang.GoEnum
// interface. This ensures that Cisco_IOS_XRMplsTeCfg_MplsTeConfigTunnel can be identified as a
// mapped type for a YANG enumeration.
func (E_Cisco_IOS_XRMplsTeCfg_MplsTeConfigTunnel) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Cisco_IOS_XRMplsTeCfg_MplsTeConfigTunnel.
func (E_Cisco_IOS_XRMplsTeCfg_MplsTeConfigTunnel) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_Cisco_IOS_XRMplsTeCfg_MplsTeConfigTunnel.
func (e E_Cisco_IOS_XRMplsTeCfg_MplsTeConfigTunnel) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Cisco_IOS_XRMplsTeCfg_MplsTeConfigTunnel")
}

const (
	// Cisco_IOS_XRMplsTeCfg_MplsTeConfigTunnel_UNSET corresponds to the value UNSET of Cisco_IOS_XRMplsTeCfg_MplsTeConfigTunnel
	Cisco_IOS_XRMplsTeCfg_MplsTeConfigTunnel_UNSET E_Cisco_IOS_XRMplsTeCfg_MplsTeConfigTunnel = 0
	// Cisco_IOS_XRMplsTeCfg_MplsTeConfigTunnel_p2p corresponds to the value p2p of Cisco_IOS_XRMplsTeCfg_MplsTeConfigTunnel
	Cisco_IOS_XRMplsTeCfg_MplsTeConfigTunnel_p2p E_Cisco_IOS_XRMplsTeCfg_MplsTeConfigTunnel = 1
	// Cisco_IOS_XRMplsTeCfg_MplsTeConfigTunnel_p2mp corresponds to the value p2mp of Cisco_IOS_XRMplsTeCfg_MplsTeConfigTunnel
	Cisco_IOS_XRMplsTeCfg_MplsTeConfigTunnel_p2mp E_Cisco_IOS_XRMplsTeCfg_MplsTeConfigTunnel = 2
)


// E_Cisco_IOS_XRMplsTeCfg_MplsTeIgpProtocol is a derived int64 type which is used to represent
// the enumerated node Cisco_IOS_XRMplsTeCfg_MplsTeIgpProtocol. An additional value named
// Cisco_IOS_XRMplsTeCfg_MplsTeIgpProtocol_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Cisco_IOS_XRMplsTeCfg_MplsTeIgpProtocol int64

// IsYANGGoEnum ensures that Cisco_IOS_XRMplsTeCfg_MplsTeIgpProtocol implements the yang.GoEnum
// interface. This ensures that Cisco_IOS_XRMplsTeCfg_MplsTeIgpProtocol can be identified as a
// mapped type for a YANG enumeration.
func (E_Cisco_IOS_XRMplsTeCfg_MplsTeIgpProtocol) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Cisco_IOS_XRMplsTeCfg_MplsTeIgpProtocol.
func (E_Cisco_IOS_XRMplsTeCfg_MplsTeIgpProtocol) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_Cisco_IOS_XRMplsTeCfg_MplsTeIgpProtocol.
func (e E_Cisco_IOS_XRMplsTeCfg_MplsTeIgpProtocol) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Cisco_IOS_XRMplsTeCfg_MplsTeIgpProtocol")
}

const (
	// Cisco_IOS_XRMplsTeCfg_MplsTeIgpProtocol_UNSET corresponds to the value UNSET of Cisco_IOS_XRMplsTeCfg_MplsTeIgpProtocol
	Cisco_IOS_XRMplsTeCfg_MplsTeIgpProtocol_UNSET E_Cisco_IOS_XRMplsTeCfg_MplsTeIgpProtocol = 0
	// Cisco_IOS_XRMplsTeCfg_MplsTeIgpProtocol_none corresponds to the value none of Cisco_IOS_XRMplsTeCfg_MplsTeIgpProtocol
	Cisco_IOS_XRMplsTeCfg_MplsTeIgpProtocol_none E_Cisco_IOS_XRMplsTeCfg_MplsTeIgpProtocol = 1
	// Cisco_IOS_XRMplsTeCfg_MplsTeIgpProtocol_isis corresponds to the value isis of Cisco_IOS_XRMplsTeCfg_MplsTeIgpProtocol
	Cisco_IOS_XRMplsTeCfg_MplsTeIgpProtocol_isis E_Cisco_IOS_XRMplsTeCfg_MplsTeIgpProtocol = 2
	// Cisco_IOS_XRMplsTeCfg_MplsTeIgpProtocol_ospf corresponds to the value ospf of Cisco_IOS_XRMplsTeCfg_MplsTeIgpProtocol
	Cisco_IOS_XRMplsTeCfg_MplsTeIgpProtocol_ospf E_Cisco_IOS_XRMplsTeCfg_MplsTeIgpProtocol = 3
)


// E_Cisco_IOS_XRMplsTeCfg_MplsTeLogFrrProtection is a derived int64 type which is used to represent
// the enumerated node Cisco_IOS_XRMplsTeCfg_MplsTeLogFrrProtection. An additional value named
// Cisco_IOS_XRMplsTeCfg_MplsTeLogFrrProtection_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Cisco_IOS_XRMplsTeCfg_MplsTeLogFrrProtection int64

// IsYANGGoEnum ensures that Cisco_IOS_XRMplsTeCfg_MplsTeLogFrrProtection implements the yang.GoEnum
// interface. This ensures that Cisco_IOS_XRMplsTeCfg_MplsTeLogFrrProtection can be identified as a
// mapped type for a YANG enumeration.
func (E_Cisco_IOS_XRMplsTeCfg_MplsTeLogFrrProtection) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Cisco_IOS_XRMplsTeCfg_MplsTeLogFrrProtection.
func (E_Cisco_IOS_XRMplsTeCfg_MplsTeLogFrrProtection) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_Cisco_IOS_XRMplsTeCfg_MplsTeLogFrrProtection.
func (e E_Cisco_IOS_XRMplsTeCfg_MplsTeLogFrrProtection) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Cisco_IOS_XRMplsTeCfg_MplsTeLogFrrProtection")
}

const (
	// Cisco_IOS_XRMplsTeCfg_MplsTeLogFrrProtection_UNSET corresponds to the value UNSET of Cisco_IOS_XRMplsTeCfg_MplsTeLogFrrProtection
	Cisco_IOS_XRMplsTeCfg_MplsTeLogFrrProtection_UNSET E_Cisco_IOS_XRMplsTeCfg_MplsTeLogFrrProtection = 0
	// Cisco_IOS_XRMplsTeCfg_MplsTeLogFrrProtection_frr_active_primary corresponds to the value frr_active_primary of Cisco_IOS_XRMplsTeCfg_MplsTeLogFrrProtection
	Cisco_IOS_XRMplsTeCfg_MplsTeLogFrrProtection_frr_active_primary E_Cisco_IOS_XRMplsTeCfg_MplsTeLogFrrProtection = 1
	// Cisco_IOS_XRMplsTeCfg_MplsTeLogFrrProtection_backup corresponds to the value backup of Cisco_IOS_XRMplsTeCfg_MplsTeLogFrrProtection
	Cisco_IOS_XRMplsTeCfg_MplsTeLogFrrProtection_backup E_Cisco_IOS_XRMplsTeCfg_MplsTeLogFrrProtection = 2
	// Cisco_IOS_XRMplsTeCfg_MplsTeLogFrrProtection_frr_ready_primary corresponds to the value frr_ready_primary of Cisco_IOS_XRMplsTeCfg_MplsTeLogFrrProtection
	Cisco_IOS_XRMplsTeCfg_MplsTeLogFrrProtection_frr_ready_primary E_Cisco_IOS_XRMplsTeCfg_MplsTeLogFrrProtection = 3
	// Cisco_IOS_XRMplsTeCfg_MplsTeLogFrrProtection_primary corresponds to the value primary of Cisco_IOS_XRMplsTeCfg_MplsTeLogFrrProtection
	Cisco_IOS_XRMplsTeCfg_MplsTeLogFrrProtection_primary E_Cisco_IOS_XRMplsTeCfg_MplsTeLogFrrProtection = 4
	// Cisco_IOS_XRMplsTeCfg_MplsTeLogFrrProtection_all corresponds to the value all of Cisco_IOS_XRMplsTeCfg_MplsTeLogFrrProtection
	Cisco_IOS_XRMplsTeCfg_MplsTeLogFrrProtection_all E_Cisco_IOS_XRMplsTeCfg_MplsTeLogFrrProtection = 5
)


// E_Cisco_IOS_XRMplsTeCfg_MplsTeLspEnc is a derived int64 type which is used to represent
// the enumerated node Cisco_IOS_XRMplsTeCfg_MplsTeLspEnc. An additional value named
// Cisco_IOS_XRMplsTeCfg_MplsTeLspEnc_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Cisco_IOS_XRMplsTeCfg_MplsTeLspEnc int64

// IsYANGGoEnum ensures that Cisco_IOS_XRMplsTeCfg_MplsTeLspEnc implements the yang.GoEnum
// interface. This ensures that Cisco_IOS_XRMplsTeCfg_MplsTeLspEnc can be identified as a
// mapped type for a YANG enumeration.
func (E_Cisco_IOS_XRMplsTeCfg_MplsTeLspEnc) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Cisco_IOS_XRMplsTeCfg_MplsTeLspEnc.
func (E_Cisco_IOS_XRMplsTeCfg_MplsTeLspEnc) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_Cisco_IOS_XRMplsTeCfg_MplsTeLspEnc.
func (e E_Cisco_IOS_XRMplsTeCfg_MplsTeLspEnc) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Cisco_IOS_XRMplsTeCfg_MplsTeLspEnc")
}

const (
	// Cisco_IOS_XRMplsTeCfg_MplsTeLspEnc_UNSET corresponds to the value UNSET of Cisco_IOS_XRMplsTeCfg_MplsTeLspEnc
	Cisco_IOS_XRMplsTeCfg_MplsTeLspEnc_UNSET E_Cisco_IOS_XRMplsTeCfg_MplsTeLspEnc = 0
	// Cisco_IOS_XRMplsTeCfg_MplsTeLspEnc_ethernet_type1 corresponds to the value ethernet_type1 of Cisco_IOS_XRMplsTeCfg_MplsTeLspEnc
	Cisco_IOS_XRMplsTeCfg_MplsTeLspEnc_ethernet_type1 E_Cisco_IOS_XRMplsTeCfg_MplsTeLspEnc = 1
	// Cisco_IOS_XRMplsTeCfg_MplsTeLspEnc_ethernet_type2 corresponds to the value ethernet_type2 of Cisco_IOS_XRMplsTeCfg_MplsTeLspEnc
	Cisco_IOS_XRMplsTeCfg_MplsTeLspEnc_ethernet_type2 E_Cisco_IOS_XRMplsTeCfg_MplsTeLspEnc = 2
	// Cisco_IOS_XRMplsTeCfg_MplsTeLspEnc_lambda corresponds to the value lambda of Cisco_IOS_XRMplsTeCfg_MplsTeLspEnc
	Cisco_IOS_XRMplsTeCfg_MplsTeLspEnc_lambda E_Cisco_IOS_XRMplsTeCfg_MplsTeLspEnc = 3
	// Cisco_IOS_XRMplsTeCfg_MplsTeLspEnc_fiber corresponds to the value fiber of Cisco_IOS_XRMplsTeCfg_MplsTeLspEnc
	Cisco_IOS_XRMplsTeCfg_MplsTeLspEnc_fiber E_Cisco_IOS_XRMplsTeCfg_MplsTeLspEnc = 4
)


// E_Cisco_IOS_XRMplsTeCfg_MplsTeLspSwitch is a derived int64 type which is used to represent
// the enumerated node Cisco_IOS_XRMplsTeCfg_MplsTeLspSwitch. An additional value named
// Cisco_IOS_XRMplsTeCfg_MplsTeLspSwitch_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Cisco_IOS_XRMplsTeCfg_MplsTeLspSwitch int64

// IsYANGGoEnum ensures that Cisco_IOS_XRMplsTeCfg_MplsTeLspSwitch implements the yang.GoEnum
// interface. This ensures that Cisco_IOS_XRMplsTeCfg_MplsTeLspSwitch can be identified as a
// mapped type for a YANG enumeration.
func (E_Cisco_IOS_XRMplsTeCfg_MplsTeLspSwitch) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Cisco_IOS_XRMplsTeCfg_MplsTeLspSwitch.
func (E_Cisco_IOS_XRMplsTeCfg_MplsTeLspSwitch) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_Cisco_IOS_XRMplsTeCfg_MplsTeLspSwitch.
func (e E_Cisco_IOS_XRMplsTeCfg_MplsTeLspSwitch) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Cisco_IOS_XRMplsTeCfg_MplsTeLspSwitch")
}

const (
	// Cisco_IOS_XRMplsTeCfg_MplsTeLspSwitch_UNSET corresponds to the value UNSET of Cisco_IOS_XRMplsTeCfg_MplsTeLspSwitch
	Cisco_IOS_XRMplsTeCfg_MplsTeLspSwitch_UNSET E_Cisco_IOS_XRMplsTeCfg_MplsTeLspSwitch = 0
	// Cisco_IOS_XRMplsTeCfg_MplsTeLspSwitch_dcsc corresponds to the value dcsc of Cisco_IOS_XRMplsTeCfg_MplsTeLspSwitch
	Cisco_IOS_XRMplsTeCfg_MplsTeLspSwitch_dcsc E_Cisco_IOS_XRMplsTeCfg_MplsTeLspSwitch = 1
	// Cisco_IOS_XRMplsTeCfg_MplsTeLspSwitch_lsc corresponds to the value lsc of Cisco_IOS_XRMplsTeCfg_MplsTeLspSwitch
	Cisco_IOS_XRMplsTeCfg_MplsTeLspSwitch_lsc E_Cisco_IOS_XRMplsTeCfg_MplsTeLspSwitch = 2
	// Cisco_IOS_XRMplsTeCfg_MplsTeLspSwitch_fsc corresponds to the value fsc of Cisco_IOS_XRMplsTeCfg_MplsTeLspSwitch
	Cisco_IOS_XRMplsTeCfg_MplsTeLspSwitch_fsc E_Cisco_IOS_XRMplsTeCfg_MplsTeLspSwitch = 3
)


// E_Cisco_IOS_XRMplsTeCfg_MplsTeOtnApsProtection is a derived int64 type which is used to represent
// the enumerated node Cisco_IOS_XRMplsTeCfg_MplsTeOtnApsProtection. An additional value named
// Cisco_IOS_XRMplsTeCfg_MplsTeOtnApsProtection_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Cisco_IOS_XRMplsTeCfg_MplsTeOtnApsProtection int64

// IsYANGGoEnum ensures that Cisco_IOS_XRMplsTeCfg_MplsTeOtnApsProtection implements the yang.GoEnum
// interface. This ensures that Cisco_IOS_XRMplsTeCfg_MplsTeOtnApsProtection can be identified as a
// mapped type for a YANG enumeration.
func (E_Cisco_IOS_XRMplsTeCfg_MplsTeOtnApsProtection) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Cisco_IOS_XRMplsTeCfg_MplsTeOtnApsProtection.
func (E_Cisco_IOS_XRMplsTeCfg_MplsTeOtnApsProtection) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_Cisco_IOS_XRMplsTeCfg_MplsTeOtnApsProtection.
func (e E_Cisco_IOS_XRMplsTeCfg_MplsTeOtnApsProtection) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Cisco_IOS_XRMplsTeCfg_MplsTeOtnApsProtection")
}

const (
	// Cisco_IOS_XRMplsTeCfg_MplsTeOtnApsProtection_UNSET corresponds to the value UNSET of Cisco_IOS_XRMplsTeCfg_MplsTeOtnApsProtection
	Cisco_IOS_XRMplsTeCfg_MplsTeOtnApsProtection_UNSET E_Cisco_IOS_XRMplsTeCfg_MplsTeOtnApsProtection = 0
	// Cisco_IOS_XRMplsTeCfg_MplsTeOtnApsProtection_1plus1_unidir_no_aps corresponds to the value 1plus1_unidir_no_aps of Cisco_IOS_XRMplsTeCfg_MplsTeOtnApsProtection
	Cisco_IOS_XRMplsTeCfg_MplsTeOtnApsProtection_1plus1_unidir_no_aps E_Cisco_IOS_XRMplsTeCfg_MplsTeOtnApsProtection = 1
	// Cisco_IOS_XRMplsTeCfg_MplsTeOtnApsProtection_1plus1_unidir_aps corresponds to the value 1plus1_unidir_aps of Cisco_IOS_XRMplsTeCfg_MplsTeOtnApsProtection
	Cisco_IOS_XRMplsTeCfg_MplsTeOtnApsProtection_1plus1_unidir_aps E_Cisco_IOS_XRMplsTeCfg_MplsTeOtnApsProtection = 2
	// Cisco_IOS_XRMplsTeCfg_MplsTeOtnApsProtection_1plus1_bdir_aps corresponds to the value 1plus1_bdir_aps of Cisco_IOS_XRMplsTeCfg_MplsTeOtnApsProtection
	Cisco_IOS_XRMplsTeCfg_MplsTeOtnApsProtection_1plus1_bdir_aps E_Cisco_IOS_XRMplsTeCfg_MplsTeOtnApsProtection = 3
)


// E_Cisco_IOS_XRMplsTeCfg_MplsTeOtnApsProtectionMode is a derived int64 type which is used to represent
// the enumerated node Cisco_IOS_XRMplsTeCfg_MplsTeOtnApsProtectionMode. An additional value named
// Cisco_IOS_XRMplsTeCfg_MplsTeOtnApsProtectionMode_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Cisco_IOS_XRMplsTeCfg_MplsTeOtnApsProtectionMode int64

// IsYANGGoEnum ensures that Cisco_IOS_XRMplsTeCfg_MplsTeOtnApsProtectionMode implements the yang.GoEnum
// interface. This ensures that Cisco_IOS_XRMplsTeCfg_MplsTeOtnApsProtectionMode can be identified as a
// mapped type for a YANG enumeration.
func (E_Cisco_IOS_XRMplsTeCfg_MplsTeOtnApsProtectionMode) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Cisco_IOS_XRMplsTeCfg_MplsTeOtnApsProtectionMode.
func (E_Cisco_IOS_XRMplsTeCfg_MplsTeOtnApsProtectionMode) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_Cisco_IOS_XRMplsTeCfg_MplsTeOtnApsProtectionMode.
func (e E_Cisco_IOS_XRMplsTeCfg_MplsTeOtnApsProtectionMode) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Cisco_IOS_XRMplsTeCfg_MplsTeOtnApsProtectionMode")
}

const (
	// Cisco_IOS_XRMplsTeCfg_MplsTeOtnApsProtectionMode_UNSET corresponds to the value UNSET of Cisco_IOS_XRMplsTeCfg_MplsTeOtnApsProtectionMode
	Cisco_IOS_XRMplsTeCfg_MplsTeOtnApsProtectionMode_UNSET E_Cisco_IOS_XRMplsTeCfg_MplsTeOtnApsProtectionMode = 0
	// Cisco_IOS_XRMplsTeCfg_MplsTeOtnApsProtectionMode_revertive corresponds to the value revertive of Cisco_IOS_XRMplsTeCfg_MplsTeOtnApsProtectionMode
	Cisco_IOS_XRMplsTeCfg_MplsTeOtnApsProtectionMode_revertive E_Cisco_IOS_XRMplsTeCfg_MplsTeOtnApsProtectionMode = 1
	// Cisco_IOS_XRMplsTeCfg_MplsTeOtnApsProtectionMode_non_revertive corresponds to the value non_revertive of Cisco_IOS_XRMplsTeCfg_MplsTeOtnApsProtectionMode
	Cisco_IOS_XRMplsTeCfg_MplsTeOtnApsProtectionMode_non_revertive E_Cisco_IOS_XRMplsTeCfg_MplsTeOtnApsProtectionMode = 2
)


// E_Cisco_IOS_XRMplsTeCfg_MplsTeOtnApsRestorationStyle is a derived int64 type which is used to represent
// the enumerated node Cisco_IOS_XRMplsTeCfg_MplsTeOtnApsRestorationStyle. An additional value named
// Cisco_IOS_XRMplsTeCfg_MplsTeOtnApsRestorationStyle_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Cisco_IOS_XRMplsTeCfg_MplsTeOtnApsRestorationStyle int64

// IsYANGGoEnum ensures that Cisco_IOS_XRMplsTeCfg_MplsTeOtnApsRestorationStyle implements the yang.GoEnum
// interface. This ensures that Cisco_IOS_XRMplsTeCfg_MplsTeOtnApsRestorationStyle can be identified as a
// mapped type for a YANG enumeration.
func (E_Cisco_IOS_XRMplsTeCfg_MplsTeOtnApsRestorationStyle) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Cisco_IOS_XRMplsTeCfg_MplsTeOtnApsRestorationStyle.
func (E_Cisco_IOS_XRMplsTeCfg_MplsTeOtnApsRestorationStyle) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_Cisco_IOS_XRMplsTeCfg_MplsTeOtnApsRestorationStyle.
func (e E_Cisco_IOS_XRMplsTeCfg_MplsTeOtnApsRestorationStyle) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Cisco_IOS_XRMplsTeCfg_MplsTeOtnApsRestorationStyle")
}

const (
	// Cisco_IOS_XRMplsTeCfg_MplsTeOtnApsRestorationStyle_UNSET corresponds to the value UNSET of Cisco_IOS_XRMplsTeCfg_MplsTeOtnApsRestorationStyle
	Cisco_IOS_XRMplsTeCfg_MplsTeOtnApsRestorationStyle_UNSET E_Cisco_IOS_XRMplsTeCfg_MplsTeOtnApsRestorationStyle = 0
	// Cisco_IOS_XRMplsTeCfg_MplsTeOtnApsRestorationStyle_keep_failed_lsp corresponds to the value keep_failed_lsp of Cisco_IOS_XRMplsTeCfg_MplsTeOtnApsRestorationStyle
	Cisco_IOS_XRMplsTeCfg_MplsTeOtnApsRestorationStyle_keep_failed_lsp E_Cisco_IOS_XRMplsTeCfg_MplsTeOtnApsRestorationStyle = 1
	// Cisco_IOS_XRMplsTeCfg_MplsTeOtnApsRestorationStyle_delete_failed_lsp corresponds to the value delete_failed_lsp of Cisco_IOS_XRMplsTeCfg_MplsTeOtnApsRestorationStyle
	Cisco_IOS_XRMplsTeCfg_MplsTeOtnApsRestorationStyle_delete_failed_lsp E_Cisco_IOS_XRMplsTeCfg_MplsTeOtnApsRestorationStyle = 2
)


// E_Cisco_IOS_XRMplsTeCfg_MplsTeOtnSncMode is a derived int64 type which is used to represent
// the enumerated node Cisco_IOS_XRMplsTeCfg_MplsTeOtnSncMode. An additional value named
// Cisco_IOS_XRMplsTeCfg_MplsTeOtnSncMode_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Cisco_IOS_XRMplsTeCfg_MplsTeOtnSncMode int64

// IsYANGGoEnum ensures that Cisco_IOS_XRMplsTeCfg_MplsTeOtnSncMode implements the yang.GoEnum
// interface. This ensures that Cisco_IOS_XRMplsTeCfg_MplsTeOtnSncMode can be identified as a
// mapped type for a YANG enumeration.
func (E_Cisco_IOS_XRMplsTeCfg_MplsTeOtnSncMode) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Cisco_IOS_XRMplsTeCfg_MplsTeOtnSncMode.
func (E_Cisco_IOS_XRMplsTeCfg_MplsTeOtnSncMode) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_Cisco_IOS_XRMplsTeCfg_MplsTeOtnSncMode.
func (e E_Cisco_IOS_XRMplsTeCfg_MplsTeOtnSncMode) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Cisco_IOS_XRMplsTeCfg_MplsTeOtnSncMode")
}

const (
	// Cisco_IOS_XRMplsTeCfg_MplsTeOtnSncMode_UNSET corresponds to the value UNSET of Cisco_IOS_XRMplsTeCfg_MplsTeOtnSncMode
	Cisco_IOS_XRMplsTeCfg_MplsTeOtnSncMode_UNSET E_Cisco_IOS_XRMplsTeCfg_MplsTeOtnSncMode = 0
	// Cisco_IOS_XRMplsTeCfg_MplsTeOtnSncMode_snc_n corresponds to the value snc_n of Cisco_IOS_XRMplsTeCfg_MplsTeOtnSncMode
	Cisco_IOS_XRMplsTeCfg_MplsTeOtnSncMode_snc_n E_Cisco_IOS_XRMplsTeCfg_MplsTeOtnSncMode = 1
	// Cisco_IOS_XRMplsTeCfg_MplsTeOtnSncMode_snc_i corresponds to the value snc_i of Cisco_IOS_XRMplsTeCfg_MplsTeOtnSncMode
	Cisco_IOS_XRMplsTeCfg_MplsTeOtnSncMode_snc_i E_Cisco_IOS_XRMplsTeCfg_MplsTeOtnSncMode = 2
	// Cisco_IOS_XRMplsTeCfg_MplsTeOtnSncMode_snc_s corresponds to the value snc_s of Cisco_IOS_XRMplsTeCfg_MplsTeOtnSncMode
	Cisco_IOS_XRMplsTeCfg_MplsTeOtnSncMode_snc_s E_Cisco_IOS_XRMplsTeCfg_MplsTeOtnSncMode = 3
)


// E_Cisco_IOS_XRMplsTeCfg_MplsTePathComputationMethod is a derived int64 type which is used to represent
// the enumerated node Cisco_IOS_XRMplsTeCfg_MplsTePathComputationMethod. An additional value named
// Cisco_IOS_XRMplsTeCfg_MplsTePathComputationMethod_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Cisco_IOS_XRMplsTeCfg_MplsTePathComputationMethod int64

// IsYANGGoEnum ensures that Cisco_IOS_XRMplsTeCfg_MplsTePathComputationMethod implements the yang.GoEnum
// interface. This ensures that Cisco_IOS_XRMplsTeCfg_MplsTePathComputationMethod can be identified as a
// mapped type for a YANG enumeration.
func (E_Cisco_IOS_XRMplsTeCfg_MplsTePathComputationMethod) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Cisco_IOS_XRMplsTeCfg_MplsTePathComputationMethod.
func (E_Cisco_IOS_XRMplsTeCfg_MplsTePathComputationMethod) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_Cisco_IOS_XRMplsTeCfg_MplsTePathComputationMethod.
func (e E_Cisco_IOS_XRMplsTeCfg_MplsTePathComputationMethod) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Cisco_IOS_XRMplsTeCfg_MplsTePathComputationMethod")
}

const (
	// Cisco_IOS_XRMplsTeCfg_MplsTePathComputationMethod_UNSET corresponds to the value UNSET of Cisco_IOS_XRMplsTeCfg_MplsTePathComputationMethod
	Cisco_IOS_XRMplsTeCfg_MplsTePathComputationMethod_UNSET E_Cisco_IOS_XRMplsTeCfg_MplsTePathComputationMethod = 0
	// Cisco_IOS_XRMplsTeCfg_MplsTePathComputationMethod_not_set corresponds to the value not_set of Cisco_IOS_XRMplsTeCfg_MplsTePathComputationMethod
	Cisco_IOS_XRMplsTeCfg_MplsTePathComputationMethod_not_set E_Cisco_IOS_XRMplsTeCfg_MplsTePathComputationMethod = 1
	// Cisco_IOS_XRMplsTeCfg_MplsTePathComputationMethod_dynamic corresponds to the value dynamic of Cisco_IOS_XRMplsTeCfg_MplsTePathComputationMethod
	Cisco_IOS_XRMplsTeCfg_MplsTePathComputationMethod_dynamic E_Cisco_IOS_XRMplsTeCfg_MplsTePathComputationMethod = 2
	// Cisco_IOS_XRMplsTeCfg_MplsTePathComputationMethod_pce corresponds to the value pce of Cisco_IOS_XRMplsTeCfg_MplsTePathComputationMethod
	Cisco_IOS_XRMplsTeCfg_MplsTePathComputationMethod_pce E_Cisco_IOS_XRMplsTeCfg_MplsTePathComputationMethod = 3
	// Cisco_IOS_XRMplsTeCfg_MplsTePathComputationMethod_explicit corresponds to the value explicit of Cisco_IOS_XRMplsTeCfg_MplsTePathComputationMethod
	Cisco_IOS_XRMplsTeCfg_MplsTePathComputationMethod_explicit E_Cisco_IOS_XRMplsTeCfg_MplsTePathComputationMethod = 4
)


// E_Cisco_IOS_XRMplsTeCfg_MplsTePathDiversityConformance is a derived int64 type which is used to represent
// the enumerated node Cisco_IOS_XRMplsTeCfg_MplsTePathDiversityConformance. An additional value named
// Cisco_IOS_XRMplsTeCfg_MplsTePathDiversityConformance_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Cisco_IOS_XRMplsTeCfg_MplsTePathDiversityConformance int64

// IsYANGGoEnum ensures that Cisco_IOS_XRMplsTeCfg_MplsTePathDiversityConformance implements the yang.GoEnum
// interface. This ensures that Cisco_IOS_XRMplsTeCfg_MplsTePathDiversityConformance can be identified as a
// mapped type for a YANG enumeration.
func (E_Cisco_IOS_XRMplsTeCfg_MplsTePathDiversityConformance) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Cisco_IOS_XRMplsTeCfg_MplsTePathDiversityConformance.
func (E_Cisco_IOS_XRMplsTeCfg_MplsTePathDiversityConformance) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_Cisco_IOS_XRMplsTeCfg_MplsTePathDiversityConformance.
func (e E_Cisco_IOS_XRMplsTeCfg_MplsTePathDiversityConformance) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Cisco_IOS_XRMplsTeCfg_MplsTePathDiversityConformance")
}

const (
	// Cisco_IOS_XRMplsTeCfg_MplsTePathDiversityConformance_UNSET corresponds to the value UNSET of Cisco_IOS_XRMplsTeCfg_MplsTePathDiversityConformance
	Cisco_IOS_XRMplsTeCfg_MplsTePathDiversityConformance_UNSET E_Cisco_IOS_XRMplsTeCfg_MplsTePathDiversityConformance = 0
	// Cisco_IOS_XRMplsTeCfg_MplsTePathDiversityConformance_strict corresponds to the value strict of Cisco_IOS_XRMplsTeCfg_MplsTePathDiversityConformance
	Cisco_IOS_XRMplsTeCfg_MplsTePathDiversityConformance_strict E_Cisco_IOS_XRMplsTeCfg_MplsTePathDiversityConformance = 1
	// Cisco_IOS_XRMplsTeCfg_MplsTePathDiversityConformance_best_effort corresponds to the value best_effort of Cisco_IOS_XRMplsTeCfg_MplsTePathDiversityConformance
	Cisco_IOS_XRMplsTeCfg_MplsTePathDiversityConformance_best_effort E_Cisco_IOS_XRMplsTeCfg_MplsTePathDiversityConformance = 2
)


// E_Cisco_IOS_XRMplsTeCfg_MplsTePathOption is a derived int64 type which is used to represent
// the enumerated node Cisco_IOS_XRMplsTeCfg_MplsTePathOption. An additional value named
// Cisco_IOS_XRMplsTeCfg_MplsTePathOption_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Cisco_IOS_XRMplsTeCfg_MplsTePathOption int64

// IsYANGGoEnum ensures that Cisco_IOS_XRMplsTeCfg_MplsTePathOption implements the yang.GoEnum
// interface. This ensures that Cisco_IOS_XRMplsTeCfg_MplsTePathOption can be identified as a
// mapped type for a YANG enumeration.
func (E_Cisco_IOS_XRMplsTeCfg_MplsTePathOption) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Cisco_IOS_XRMplsTeCfg_MplsTePathOption.
func (E_Cisco_IOS_XRMplsTeCfg_MplsTePathOption) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_Cisco_IOS_XRMplsTeCfg_MplsTePathOption.
func (e E_Cisco_IOS_XRMplsTeCfg_MplsTePathOption) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Cisco_IOS_XRMplsTeCfg_MplsTePathOption")
}

const (
	// Cisco_IOS_XRMplsTeCfg_MplsTePathOption_UNSET corresponds to the value UNSET of Cisco_IOS_XRMplsTeCfg_MplsTePathOption
	Cisco_IOS_XRMplsTeCfg_MplsTePathOption_UNSET E_Cisco_IOS_XRMplsTeCfg_MplsTePathOption = 0
	// Cisco_IOS_XRMplsTeCfg_MplsTePathOption_not_set corresponds to the value not_set of Cisco_IOS_XRMplsTeCfg_MplsTePathOption
	Cisco_IOS_XRMplsTeCfg_MplsTePathOption_not_set E_Cisco_IOS_XRMplsTeCfg_MplsTePathOption = 1
	// Cisco_IOS_XRMplsTeCfg_MplsTePathOption_dynamic corresponds to the value dynamic of Cisco_IOS_XRMplsTeCfg_MplsTePathOption
	Cisco_IOS_XRMplsTeCfg_MplsTePathOption_dynamic E_Cisco_IOS_XRMplsTeCfg_MplsTePathOption = 2
	// Cisco_IOS_XRMplsTeCfg_MplsTePathOption_explicit_name corresponds to the value explicit_name of Cisco_IOS_XRMplsTeCfg_MplsTePathOption
	Cisco_IOS_XRMplsTeCfg_MplsTePathOption_explicit_name E_Cisco_IOS_XRMplsTeCfg_MplsTePathOption = 3
	// Cisco_IOS_XRMplsTeCfg_MplsTePathOption_explicit_number corresponds to the value explicit_number of Cisco_IOS_XRMplsTeCfg_MplsTePathOption
	Cisco_IOS_XRMplsTeCfg_MplsTePathOption_explicit_number E_Cisco_IOS_XRMplsTeCfg_MplsTePathOption = 4
	// Cisco_IOS_XRMplsTeCfg_MplsTePathOption_no_ero corresponds to the value no_ero of Cisco_IOS_XRMplsTeCfg_MplsTePathOption
	Cisco_IOS_XRMplsTeCfg_MplsTePathOption_no_ero E_Cisco_IOS_XRMplsTeCfg_MplsTePathOption = 5
	// Cisco_IOS_XRMplsTeCfg_MplsTePathOption_sr corresponds to the value sr of Cisco_IOS_XRMplsTeCfg_MplsTePathOption
	Cisco_IOS_XRMplsTeCfg_MplsTePathOption_sr E_Cisco_IOS_XRMplsTeCfg_MplsTePathOption = 6
)


// E_Cisco_IOS_XRMplsTeCfg_MplsTePathOptionProperty is a derived int64 type which is used to represent
// the enumerated node Cisco_IOS_XRMplsTeCfg_MplsTePathOptionProperty. An additional value named
// Cisco_IOS_XRMplsTeCfg_MplsTePathOptionProperty_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Cisco_IOS_XRMplsTeCfg_MplsTePathOptionProperty int64

// IsYANGGoEnum ensures that Cisco_IOS_XRMplsTeCfg_MplsTePathOptionProperty implements the yang.GoEnum
// interface. This ensures that Cisco_IOS_XRMplsTeCfg_MplsTePathOptionProperty can be identified as a
// mapped type for a YANG enumeration.
func (E_Cisco_IOS_XRMplsTeCfg_MplsTePathOptionProperty) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Cisco_IOS_XRMplsTeCfg_MplsTePathOptionProperty.
func (E_Cisco_IOS_XRMplsTeCfg_MplsTePathOptionProperty) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_Cisco_IOS_XRMplsTeCfg_MplsTePathOptionProperty.
func (e E_Cisco_IOS_XRMplsTeCfg_MplsTePathOptionProperty) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Cisco_IOS_XRMplsTeCfg_MplsTePathOptionProperty")
}

const (
	// Cisco_IOS_XRMplsTeCfg_MplsTePathOptionProperty_UNSET corresponds to the value UNSET of Cisco_IOS_XRMplsTeCfg_MplsTePathOptionProperty
	Cisco_IOS_XRMplsTeCfg_MplsTePathOptionProperty_UNSET E_Cisco_IOS_XRMplsTeCfg_MplsTePathOptionProperty = 0
	// Cisco_IOS_XRMplsTeCfg_MplsTePathOptionProperty_none corresponds to the value none of Cisco_IOS_XRMplsTeCfg_MplsTePathOptionProperty
	Cisco_IOS_XRMplsTeCfg_MplsTePathOptionProperty_none E_Cisco_IOS_XRMplsTeCfg_MplsTePathOptionProperty = 1
	// Cisco_IOS_XRMplsTeCfg_MplsTePathOptionProperty_lockdown corresponds to the value lockdown of Cisco_IOS_XRMplsTeCfg_MplsTePathOptionProperty
	Cisco_IOS_XRMplsTeCfg_MplsTePathOptionProperty_lockdown E_Cisco_IOS_XRMplsTeCfg_MplsTePathOptionProperty = 2
	// Cisco_IOS_XRMplsTeCfg_MplsTePathOptionProperty_verbatim corresponds to the value verbatim of Cisco_IOS_XRMplsTeCfg_MplsTePathOptionProperty
	Cisco_IOS_XRMplsTeCfg_MplsTePathOptionProperty_verbatim E_Cisco_IOS_XRMplsTeCfg_MplsTePathOptionProperty = 3
	// Cisco_IOS_XRMplsTeCfg_MplsTePathOptionProperty_pce corresponds to the value pce of Cisco_IOS_XRMplsTeCfg_MplsTePathOptionProperty
	Cisco_IOS_XRMplsTeCfg_MplsTePathOptionProperty_pce E_Cisco_IOS_XRMplsTeCfg_MplsTePathOptionProperty = 4
	// Cisco_IOS_XRMplsTeCfg_MplsTePathOptionProperty_segment_routing corresponds to the value segment_routing of Cisco_IOS_XRMplsTeCfg_MplsTePathOptionProperty
	Cisco_IOS_XRMplsTeCfg_MplsTePathOptionProperty_segment_routing E_Cisco_IOS_XRMplsTeCfg_MplsTePathOptionProperty = 5
	// Cisco_IOS_XRMplsTeCfg_MplsTePathOptionProperty_sticky corresponds to the value sticky of Cisco_IOS_XRMplsTeCfg_MplsTePathOptionProperty
	Cisco_IOS_XRMplsTeCfg_MplsTePathOptionProperty_sticky E_Cisco_IOS_XRMplsTeCfg_MplsTePathOptionProperty = 6
)


// E_Cisco_IOS_XRMplsTeCfg_MplsTePathOptionProtection is a derived int64 type which is used to represent
// the enumerated node Cisco_IOS_XRMplsTeCfg_MplsTePathOptionProtection. An additional value named
// Cisco_IOS_XRMplsTeCfg_MplsTePathOptionProtection_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Cisco_IOS_XRMplsTeCfg_MplsTePathOptionProtection int64

// IsYANGGoEnum ensures that Cisco_IOS_XRMplsTeCfg_MplsTePathOptionProtection implements the yang.GoEnum
// interface. This ensures that Cisco_IOS_XRMplsTeCfg_MplsTePathOptionProtection can be identified as a
// mapped type for a YANG enumeration.
func (E_Cisco_IOS_XRMplsTeCfg_MplsTePathOptionProtection) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Cisco_IOS_XRMplsTeCfg_MplsTePathOptionProtection.
func (E_Cisco_IOS_XRMplsTeCfg_MplsTePathOptionProtection) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_Cisco_IOS_XRMplsTeCfg_MplsTePathOptionProtection.
func (e E_Cisco_IOS_XRMplsTeCfg_MplsTePathOptionProtection) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Cisco_IOS_XRMplsTeCfg_MplsTePathOptionProtection")
}

const (
	// Cisco_IOS_XRMplsTeCfg_MplsTePathOptionProtection_UNSET corresponds to the value UNSET of Cisco_IOS_XRMplsTeCfg_MplsTePathOptionProtection
	Cisco_IOS_XRMplsTeCfg_MplsTePathOptionProtection_UNSET E_Cisco_IOS_XRMplsTeCfg_MplsTePathOptionProtection = 0
	// Cisco_IOS_XRMplsTeCfg_MplsTePathOptionProtection_active corresponds to the value active of Cisco_IOS_XRMplsTeCfg_MplsTePathOptionProtection
	Cisco_IOS_XRMplsTeCfg_MplsTePathOptionProtection_active E_Cisco_IOS_XRMplsTeCfg_MplsTePathOptionProtection = 1
	// Cisco_IOS_XRMplsTeCfg_MplsTePathOptionProtection_protecting corresponds to the value protecting of Cisco_IOS_XRMplsTeCfg_MplsTePathOptionProtection
	Cisco_IOS_XRMplsTeCfg_MplsTePathOptionProtection_protecting E_Cisco_IOS_XRMplsTeCfg_MplsTePathOptionProtection = 2
)


// E_Cisco_IOS_XRMplsTeCfg_MplsTePathOptionXro is a derived int64 type which is used to represent
// the enumerated node Cisco_IOS_XRMplsTeCfg_MplsTePathOptionXro. An additional value named
// Cisco_IOS_XRMplsTeCfg_MplsTePathOptionXro_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Cisco_IOS_XRMplsTeCfg_MplsTePathOptionXro int64

// IsYANGGoEnum ensures that Cisco_IOS_XRMplsTeCfg_MplsTePathOptionXro implements the yang.GoEnum
// interface. This ensures that Cisco_IOS_XRMplsTeCfg_MplsTePathOptionXro can be identified as a
// mapped type for a YANG enumeration.
func (E_Cisco_IOS_XRMplsTeCfg_MplsTePathOptionXro) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Cisco_IOS_XRMplsTeCfg_MplsTePathOptionXro.
func (E_Cisco_IOS_XRMplsTeCfg_MplsTePathOptionXro) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_Cisco_IOS_XRMplsTeCfg_MplsTePathOptionXro.
func (e E_Cisco_IOS_XRMplsTeCfg_MplsTePathOptionXro) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Cisco_IOS_XRMplsTeCfg_MplsTePathOptionXro")
}

const (
	// Cisco_IOS_XRMplsTeCfg_MplsTePathOptionXro_UNSET corresponds to the value UNSET of Cisco_IOS_XRMplsTeCfg_MplsTePathOptionXro
	Cisco_IOS_XRMplsTeCfg_MplsTePathOptionXro_UNSET E_Cisco_IOS_XRMplsTeCfg_MplsTePathOptionXro = 0
	// Cisco_IOS_XRMplsTeCfg_MplsTePathOptionXro_not_set corresponds to the value not_set of Cisco_IOS_XRMplsTeCfg_MplsTePathOptionXro
	Cisco_IOS_XRMplsTeCfg_MplsTePathOptionXro_not_set E_Cisco_IOS_XRMplsTeCfg_MplsTePathOptionXro = 1
	// Cisco_IOS_XRMplsTeCfg_MplsTePathOptionXro_xro_attribute_set_type corresponds to the value xro_attribute_set_type of Cisco_IOS_XRMplsTeCfg_MplsTePathOptionXro
	Cisco_IOS_XRMplsTeCfg_MplsTePathOptionXro_xro_attribute_set_type E_Cisco_IOS_XRMplsTeCfg_MplsTePathOptionXro = 2
)


// E_Cisco_IOS_XRMplsTeCfg_MplsTePathSelectionInvalidationTimerExpire is a derived int64 type which is used to represent
// the enumerated node Cisco_IOS_XRMplsTeCfg_MplsTePathSelectionInvalidationTimerExpire. An additional value named
// Cisco_IOS_XRMplsTeCfg_MplsTePathSelectionInvalidationTimerExpire_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Cisco_IOS_XRMplsTeCfg_MplsTePathSelectionInvalidationTimerExpire int64

// IsYANGGoEnum ensures that Cisco_IOS_XRMplsTeCfg_MplsTePathSelectionInvalidationTimerExpire implements the yang.GoEnum
// interface. This ensures that Cisco_IOS_XRMplsTeCfg_MplsTePathSelectionInvalidationTimerExpire can be identified as a
// mapped type for a YANG enumeration.
func (E_Cisco_IOS_XRMplsTeCfg_MplsTePathSelectionInvalidationTimerExpire) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Cisco_IOS_XRMplsTeCfg_MplsTePathSelectionInvalidationTimerExpire.
func (E_Cisco_IOS_XRMplsTeCfg_MplsTePathSelectionInvalidationTimerExpire) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_Cisco_IOS_XRMplsTeCfg_MplsTePathSelectionInvalidationTimerExpire.
func (e E_Cisco_IOS_XRMplsTeCfg_MplsTePathSelectionInvalidationTimerExpire) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Cisco_IOS_XRMplsTeCfg_MplsTePathSelectionInvalidationTimerExpire")
}

const (
	// Cisco_IOS_XRMplsTeCfg_MplsTePathSelectionInvalidationTimerExpire_UNSET corresponds to the value UNSET of Cisco_IOS_XRMplsTeCfg_MplsTePathSelectionInvalidationTimerExpire
	Cisco_IOS_XRMplsTeCfg_MplsTePathSelectionInvalidationTimerExpire_UNSET E_Cisco_IOS_XRMplsTeCfg_MplsTePathSelectionInvalidationTimerExpire = 0
	// Cisco_IOS_XRMplsTeCfg_MplsTePathSelectionInvalidationTimerExpire_tunnel_action_tear corresponds to the value tunnel_action_tear of Cisco_IOS_XRMplsTeCfg_MplsTePathSelectionInvalidationTimerExpire
	Cisco_IOS_XRMplsTeCfg_MplsTePathSelectionInvalidationTimerExpire_tunnel_action_tear E_Cisco_IOS_XRMplsTeCfg_MplsTePathSelectionInvalidationTimerExpire = 1
	// Cisco_IOS_XRMplsTeCfg_MplsTePathSelectionInvalidationTimerExpire_tunnel_action_drop corresponds to the value tunnel_action_drop of Cisco_IOS_XRMplsTeCfg_MplsTePathSelectionInvalidationTimerExpire
	Cisco_IOS_XRMplsTeCfg_MplsTePathSelectionInvalidationTimerExpire_tunnel_action_drop E_Cisco_IOS_XRMplsTeCfg_MplsTePathSelectionInvalidationTimerExpire = 2
)


// E_Cisco_IOS_XRMplsTeCfg_MplsTePathSelectionMetric is a derived int64 type which is used to represent
// the enumerated node Cisco_IOS_XRMplsTeCfg_MplsTePathSelectionMetric. An additional value named
// Cisco_IOS_XRMplsTeCfg_MplsTePathSelectionMetric_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Cisco_IOS_XRMplsTeCfg_MplsTePathSelectionMetric int64

// IsYANGGoEnum ensures that Cisco_IOS_XRMplsTeCfg_MplsTePathSelectionMetric implements the yang.GoEnum
// interface. This ensures that Cisco_IOS_XRMplsTeCfg_MplsTePathSelectionMetric can be identified as a
// mapped type for a YANG enumeration.
func (E_Cisco_IOS_XRMplsTeCfg_MplsTePathSelectionMetric) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Cisco_IOS_XRMplsTeCfg_MplsTePathSelectionMetric.
func (E_Cisco_IOS_XRMplsTeCfg_MplsTePathSelectionMetric) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_Cisco_IOS_XRMplsTeCfg_MplsTePathSelectionMetric.
func (e E_Cisco_IOS_XRMplsTeCfg_MplsTePathSelectionMetric) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Cisco_IOS_XRMplsTeCfg_MplsTePathSelectionMetric")
}

const (
	// Cisco_IOS_XRMplsTeCfg_MplsTePathSelectionMetric_UNSET corresponds to the value UNSET of Cisco_IOS_XRMplsTeCfg_MplsTePathSelectionMetric
	Cisco_IOS_XRMplsTeCfg_MplsTePathSelectionMetric_UNSET E_Cisco_IOS_XRMplsTeCfg_MplsTePathSelectionMetric = 0
	// Cisco_IOS_XRMplsTeCfg_MplsTePathSelectionMetric_igp corresponds to the value igp of Cisco_IOS_XRMplsTeCfg_MplsTePathSelectionMetric
	Cisco_IOS_XRMplsTeCfg_MplsTePathSelectionMetric_igp E_Cisco_IOS_XRMplsTeCfg_MplsTePathSelectionMetric = 1
	// Cisco_IOS_XRMplsTeCfg_MplsTePathSelectionMetric_te corresponds to the value te of Cisco_IOS_XRMplsTeCfg_MplsTePathSelectionMetric
	Cisco_IOS_XRMplsTeCfg_MplsTePathSelectionMetric_te E_Cisco_IOS_XRMplsTeCfg_MplsTePathSelectionMetric = 2
	// Cisco_IOS_XRMplsTeCfg_MplsTePathSelectionMetric_delay corresponds to the value delay of Cisco_IOS_XRMplsTeCfg_MplsTePathSelectionMetric
	Cisco_IOS_XRMplsTeCfg_MplsTePathSelectionMetric_delay E_Cisco_IOS_XRMplsTeCfg_MplsTePathSelectionMetric = 3
)


// E_Cisco_IOS_XRMplsTeCfg_MplsTePathSelectionSegmentRoutingAdjacencyProtection is a derived int64 type which is used to represent
// the enumerated node Cisco_IOS_XRMplsTeCfg_MplsTePathSelectionSegmentRoutingAdjacencyProtection. An additional value named
// Cisco_IOS_XRMplsTeCfg_MplsTePathSelectionSegmentRoutingAdjacencyProtection_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Cisco_IOS_XRMplsTeCfg_MplsTePathSelectionSegmentRoutingAdjacencyProtection int64

// IsYANGGoEnum ensures that Cisco_IOS_XRMplsTeCfg_MplsTePathSelectionSegmentRoutingAdjacencyProtection implements the yang.GoEnum
// interface. This ensures that Cisco_IOS_XRMplsTeCfg_MplsTePathSelectionSegmentRoutingAdjacencyProtection can be identified as a
// mapped type for a YANG enumeration.
func (E_Cisco_IOS_XRMplsTeCfg_MplsTePathSelectionSegmentRoutingAdjacencyProtection) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Cisco_IOS_XRMplsTeCfg_MplsTePathSelectionSegmentRoutingAdjacencyProtection.
func (E_Cisco_IOS_XRMplsTeCfg_MplsTePathSelectionSegmentRoutingAdjacencyProtection) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_Cisco_IOS_XRMplsTeCfg_MplsTePathSelectionSegmentRoutingAdjacencyProtection.
func (e E_Cisco_IOS_XRMplsTeCfg_MplsTePathSelectionSegmentRoutingAdjacencyProtection) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Cisco_IOS_XRMplsTeCfg_MplsTePathSelectionSegmentRoutingAdjacencyProtection")
}

const (
	// Cisco_IOS_XRMplsTeCfg_MplsTePathSelectionSegmentRoutingAdjacencyProtection_UNSET corresponds to the value UNSET of Cisco_IOS_XRMplsTeCfg_MplsTePathSelectionSegmentRoutingAdjacencyProtection
	Cisco_IOS_XRMplsTeCfg_MplsTePathSelectionSegmentRoutingAdjacencyProtection_UNSET E_Cisco_IOS_XRMplsTeCfg_MplsTePathSelectionSegmentRoutingAdjacencyProtection = 0
	// Cisco_IOS_XRMplsTeCfg_MplsTePathSelectionSegmentRoutingAdjacencyProtection_not_set corresponds to the value not_set of Cisco_IOS_XRMplsTeCfg_MplsTePathSelectionSegmentRoutingAdjacencyProtection
	Cisco_IOS_XRMplsTeCfg_MplsTePathSelectionSegmentRoutingAdjacencyProtection_not_set E_Cisco_IOS_XRMplsTeCfg_MplsTePathSelectionSegmentRoutingAdjacencyProtection = 1
	// Cisco_IOS_XRMplsTeCfg_MplsTePathSelectionSegmentRoutingAdjacencyProtection_adj_unprotected corresponds to the value adj_unprotected of Cisco_IOS_XRMplsTeCfg_MplsTePathSelectionSegmentRoutingAdjacencyProtection
	Cisco_IOS_XRMplsTeCfg_MplsTePathSelectionSegmentRoutingAdjacencyProtection_adj_unprotected E_Cisco_IOS_XRMplsTeCfg_MplsTePathSelectionSegmentRoutingAdjacencyProtection = 2
	// Cisco_IOS_XRMplsTeCfg_MplsTePathSelectionSegmentRoutingAdjacencyProtection_adj_protected corresponds to the value adj_protected of Cisco_IOS_XRMplsTeCfg_MplsTePathSelectionSegmentRoutingAdjacencyProtection
	Cisco_IOS_XRMplsTeCfg_MplsTePathSelectionSegmentRoutingAdjacencyProtection_adj_protected E_Cisco_IOS_XRMplsTeCfg_MplsTePathSelectionSegmentRoutingAdjacencyProtection = 3
)


// E_Cisco_IOS_XRMplsTeCfg_MplsTePathSelectionTiebreaker is a derived int64 type which is used to represent
// the enumerated node Cisco_IOS_XRMplsTeCfg_MplsTePathSelectionTiebreaker. An additional value named
// Cisco_IOS_XRMplsTeCfg_MplsTePathSelectionTiebreaker_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Cisco_IOS_XRMplsTeCfg_MplsTePathSelectionTiebreaker int64

// IsYANGGoEnum ensures that Cisco_IOS_XRMplsTeCfg_MplsTePathSelectionTiebreaker implements the yang.GoEnum
// interface. This ensures that Cisco_IOS_XRMplsTeCfg_MplsTePathSelectionTiebreaker can be identified as a
// mapped type for a YANG enumeration.
func (E_Cisco_IOS_XRMplsTeCfg_MplsTePathSelectionTiebreaker) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Cisco_IOS_XRMplsTeCfg_MplsTePathSelectionTiebreaker.
func (E_Cisco_IOS_XRMplsTeCfg_MplsTePathSelectionTiebreaker) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_Cisco_IOS_XRMplsTeCfg_MplsTePathSelectionTiebreaker.
func (e E_Cisco_IOS_XRMplsTeCfg_MplsTePathSelectionTiebreaker) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Cisco_IOS_XRMplsTeCfg_MplsTePathSelectionTiebreaker")
}

const (
	// Cisco_IOS_XRMplsTeCfg_MplsTePathSelectionTiebreaker_UNSET corresponds to the value UNSET of Cisco_IOS_XRMplsTeCfg_MplsTePathSelectionTiebreaker
	Cisco_IOS_XRMplsTeCfg_MplsTePathSelectionTiebreaker_UNSET E_Cisco_IOS_XRMplsTeCfg_MplsTePathSelectionTiebreaker = 0
	// Cisco_IOS_XRMplsTeCfg_MplsTePathSelectionTiebreaker_min_fill corresponds to the value min_fill of Cisco_IOS_XRMplsTeCfg_MplsTePathSelectionTiebreaker
	Cisco_IOS_XRMplsTeCfg_MplsTePathSelectionTiebreaker_min_fill E_Cisco_IOS_XRMplsTeCfg_MplsTePathSelectionTiebreaker = 1
	// Cisco_IOS_XRMplsTeCfg_MplsTePathSelectionTiebreaker_max_fill corresponds to the value max_fill of Cisco_IOS_XRMplsTeCfg_MplsTePathSelectionTiebreaker
	Cisco_IOS_XRMplsTeCfg_MplsTePathSelectionTiebreaker_max_fill E_Cisco_IOS_XRMplsTeCfg_MplsTePathSelectionTiebreaker = 2
	// Cisco_IOS_XRMplsTeCfg_MplsTePathSelectionTiebreaker_random corresponds to the value random of Cisco_IOS_XRMplsTeCfg_MplsTePathSelectionTiebreaker
	Cisco_IOS_XRMplsTeCfg_MplsTePathSelectionTiebreaker_random E_Cisco_IOS_XRMplsTeCfg_MplsTePathSelectionTiebreaker = 3
)


// E_Cisco_IOS_XRMplsTeCfg_MplsTeSigNameOption is a derived int64 type which is used to represent
// the enumerated node Cisco_IOS_XRMplsTeCfg_MplsTeSigNameOption. An additional value named
// Cisco_IOS_XRMplsTeCfg_MplsTeSigNameOption_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Cisco_IOS_XRMplsTeCfg_MplsTeSigNameOption int64

// IsYANGGoEnum ensures that Cisco_IOS_XRMplsTeCfg_MplsTeSigNameOption implements the yang.GoEnum
// interface. This ensures that Cisco_IOS_XRMplsTeCfg_MplsTeSigNameOption can be identified as a
// mapped type for a YANG enumeration.
func (E_Cisco_IOS_XRMplsTeCfg_MplsTeSigNameOption) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Cisco_IOS_XRMplsTeCfg_MplsTeSigNameOption.
func (E_Cisco_IOS_XRMplsTeCfg_MplsTeSigNameOption) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_Cisco_IOS_XRMplsTeCfg_MplsTeSigNameOption.
func (e E_Cisco_IOS_XRMplsTeCfg_MplsTeSigNameOption) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Cisco_IOS_XRMplsTeCfg_MplsTeSigNameOption")
}

const (
	// Cisco_IOS_XRMplsTeCfg_MplsTeSigNameOption_UNSET corresponds to the value UNSET of Cisco_IOS_XRMplsTeCfg_MplsTeSigNameOption
	Cisco_IOS_XRMplsTeCfg_MplsTeSigNameOption_UNSET E_Cisco_IOS_XRMplsTeCfg_MplsTeSigNameOption = 0
	// Cisco_IOS_XRMplsTeCfg_MplsTeSigNameOption_none corresponds to the value none of Cisco_IOS_XRMplsTeCfg_MplsTeSigNameOption
	Cisco_IOS_XRMplsTeCfg_MplsTeSigNameOption_none E_Cisco_IOS_XRMplsTeCfg_MplsTeSigNameOption = 1
	// Cisco_IOS_XRMplsTeCfg_MplsTeSigNameOption_address corresponds to the value address of Cisco_IOS_XRMplsTeCfg_MplsTeSigNameOption
	Cisco_IOS_XRMplsTeCfg_MplsTeSigNameOption_address E_Cisco_IOS_XRMplsTeCfg_MplsTeSigNameOption = 2
	// Cisco_IOS_XRMplsTeCfg_MplsTeSigNameOption_name corresponds to the value name of Cisco_IOS_XRMplsTeCfg_MplsTeSigNameOption
	Cisco_IOS_XRMplsTeCfg_MplsTeSigNameOption_name E_Cisco_IOS_XRMplsTeCfg_MplsTeSigNameOption = 3
)


// E_Cisco_IOS_XRMplsTeCfg_MplsTeSignaledLabel is a derived int64 type which is used to represent
// the enumerated node Cisco_IOS_XRMplsTeCfg_MplsTeSignaledLabel. An additional value named
// Cisco_IOS_XRMplsTeCfg_MplsTeSignaledLabel_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Cisco_IOS_XRMplsTeCfg_MplsTeSignaledLabel int64

// IsYANGGoEnum ensures that Cisco_IOS_XRMplsTeCfg_MplsTeSignaledLabel implements the yang.GoEnum
// interface. This ensures that Cisco_IOS_XRMplsTeCfg_MplsTeSignaledLabel can be identified as a
// mapped type for a YANG enumeration.
func (E_Cisco_IOS_XRMplsTeCfg_MplsTeSignaledLabel) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Cisco_IOS_XRMplsTeCfg_MplsTeSignaledLabel.
func (E_Cisco_IOS_XRMplsTeCfg_MplsTeSignaledLabel) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_Cisco_IOS_XRMplsTeCfg_MplsTeSignaledLabel.
func (e E_Cisco_IOS_XRMplsTeCfg_MplsTeSignaledLabel) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Cisco_IOS_XRMplsTeCfg_MplsTeSignaledLabel")
}

const (
	// Cisco_IOS_XRMplsTeCfg_MplsTeSignaledLabel_UNSET corresponds to the value UNSET of Cisco_IOS_XRMplsTeCfg_MplsTeSignaledLabel
	Cisco_IOS_XRMplsTeCfg_MplsTeSignaledLabel_UNSET E_Cisco_IOS_XRMplsTeCfg_MplsTeSignaledLabel = 0
	// Cisco_IOS_XRMplsTeCfg_MplsTeSignaledLabel_not_set corresponds to the value not_set of Cisco_IOS_XRMplsTeCfg_MplsTeSignaledLabel
	Cisco_IOS_XRMplsTeCfg_MplsTeSignaledLabel_not_set E_Cisco_IOS_XRMplsTeCfg_MplsTeSignaledLabel = 1
	// Cisco_IOS_XRMplsTeCfg_MplsTeSignaledLabel_dwdm corresponds to the value dwdm of Cisco_IOS_XRMplsTeCfg_MplsTeSignaledLabel
	Cisco_IOS_XRMplsTeCfg_MplsTeSignaledLabel_dwdm E_Cisco_IOS_XRMplsTeCfg_MplsTeSignaledLabel = 2
)


// E_Cisco_IOS_XRMplsTeCfg_MplsTeSwitchingCap is a derived int64 type which is used to represent
// the enumerated node Cisco_IOS_XRMplsTeCfg_MplsTeSwitchingCap. An additional value named
// Cisco_IOS_XRMplsTeCfg_MplsTeSwitchingCap_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Cisco_IOS_XRMplsTeCfg_MplsTeSwitchingCap int64

// IsYANGGoEnum ensures that Cisco_IOS_XRMplsTeCfg_MplsTeSwitchingCap implements the yang.GoEnum
// interface. This ensures that Cisco_IOS_XRMplsTeCfg_MplsTeSwitchingCap can be identified as a
// mapped type for a YANG enumeration.
func (E_Cisco_IOS_XRMplsTeCfg_MplsTeSwitchingCap) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Cisco_IOS_XRMplsTeCfg_MplsTeSwitchingCap.
func (E_Cisco_IOS_XRMplsTeCfg_MplsTeSwitchingCap) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_Cisco_IOS_XRMplsTeCfg_MplsTeSwitchingCap.
func (e E_Cisco_IOS_XRMplsTeCfg_MplsTeSwitchingCap) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Cisco_IOS_XRMplsTeCfg_MplsTeSwitchingCap")
}

const (
	// Cisco_IOS_XRMplsTeCfg_MplsTeSwitchingCap_UNSET corresponds to the value UNSET of Cisco_IOS_XRMplsTeCfg_MplsTeSwitchingCap
	Cisco_IOS_XRMplsTeCfg_MplsTeSwitchingCap_UNSET E_Cisco_IOS_XRMplsTeCfg_MplsTeSwitchingCap = 0
	// Cisco_IOS_XRMplsTeCfg_MplsTeSwitchingCap_psc1 corresponds to the value psc1 of Cisco_IOS_XRMplsTeCfg_MplsTeSwitchingCap
	Cisco_IOS_XRMplsTeCfg_MplsTeSwitchingCap_psc1 E_Cisco_IOS_XRMplsTeCfg_MplsTeSwitchingCap = 1
	// Cisco_IOS_XRMplsTeCfg_MplsTeSwitchingCap_lsc corresponds to the value lsc of Cisco_IOS_XRMplsTeCfg_MplsTeSwitchingCap
	Cisco_IOS_XRMplsTeCfg_MplsTeSwitchingCap_lsc E_Cisco_IOS_XRMplsTeCfg_MplsTeSwitchingCap = 2
	// Cisco_IOS_XRMplsTeCfg_MplsTeSwitchingCap_fsc corresponds to the value fsc of Cisco_IOS_XRMplsTeCfg_MplsTeSwitchingCap
	Cisco_IOS_XRMplsTeCfg_MplsTeSwitchingCap_fsc E_Cisco_IOS_XRMplsTeCfg_MplsTeSwitchingCap = 3
)


// E_Cisco_IOS_XRMplsTeCfg_MplsTeSwitchingEncode is a derived int64 type which is used to represent
// the enumerated node Cisco_IOS_XRMplsTeCfg_MplsTeSwitchingEncode. An additional value named
// Cisco_IOS_XRMplsTeCfg_MplsTeSwitchingEncode_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Cisco_IOS_XRMplsTeCfg_MplsTeSwitchingEncode int64

// IsYANGGoEnum ensures that Cisco_IOS_XRMplsTeCfg_MplsTeSwitchingEncode implements the yang.GoEnum
// interface. This ensures that Cisco_IOS_XRMplsTeCfg_MplsTeSwitchingEncode can be identified as a
// mapped type for a YANG enumeration.
func (E_Cisco_IOS_XRMplsTeCfg_MplsTeSwitchingEncode) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Cisco_IOS_XRMplsTeCfg_MplsTeSwitchingEncode.
func (E_Cisco_IOS_XRMplsTeCfg_MplsTeSwitchingEncode) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_Cisco_IOS_XRMplsTeCfg_MplsTeSwitchingEncode.
func (e E_Cisco_IOS_XRMplsTeCfg_MplsTeSwitchingEncode) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Cisco_IOS_XRMplsTeCfg_MplsTeSwitchingEncode")
}

const (
	// Cisco_IOS_XRMplsTeCfg_MplsTeSwitchingEncode_UNSET corresponds to the value UNSET of Cisco_IOS_XRMplsTeCfg_MplsTeSwitchingEncode
	Cisco_IOS_XRMplsTeCfg_MplsTeSwitchingEncode_UNSET E_Cisco_IOS_XRMplsTeCfg_MplsTeSwitchingEncode = 0
	// Cisco_IOS_XRMplsTeCfg_MplsTeSwitchingEncode_none corresponds to the value none of Cisco_IOS_XRMplsTeCfg_MplsTeSwitchingEncode
	Cisco_IOS_XRMplsTeCfg_MplsTeSwitchingEncode_none E_Cisco_IOS_XRMplsTeCfg_MplsTeSwitchingEncode = 1
	// Cisco_IOS_XRMplsTeCfg_MplsTeSwitchingEncode_packet corresponds to the value packet of Cisco_IOS_XRMplsTeCfg_MplsTeSwitchingEncode
	Cisco_IOS_XRMplsTeCfg_MplsTeSwitchingEncode_packet E_Cisco_IOS_XRMplsTeCfg_MplsTeSwitchingEncode = 2
	// Cisco_IOS_XRMplsTeCfg_MplsTeSwitchingEncode_ethernet corresponds to the value ethernet of Cisco_IOS_XRMplsTeCfg_MplsTeSwitchingEncode
	Cisco_IOS_XRMplsTeCfg_MplsTeSwitchingEncode_ethernet E_Cisco_IOS_XRMplsTeCfg_MplsTeSwitchingEncode = 3
	// Cisco_IOS_XRMplsTeCfg_MplsTeSwitchingEncode_sondet_sdh corresponds to the value sondet_sdh of Cisco_IOS_XRMplsTeCfg_MplsTeSwitchingEncode
	Cisco_IOS_XRMplsTeCfg_MplsTeSwitchingEncode_sondet_sdh E_Cisco_IOS_XRMplsTeCfg_MplsTeSwitchingEncode = 4
)


// E_Cisco_IOS_XRMplsTeCfg_MplsTeSwitchingEncoding is a derived int64 type which is used to represent
// the enumerated node Cisco_IOS_XRMplsTeCfg_MplsTeSwitchingEncoding. An additional value named
// Cisco_IOS_XRMplsTeCfg_MplsTeSwitchingEncoding_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Cisco_IOS_XRMplsTeCfg_MplsTeSwitchingEncoding int64

// IsYANGGoEnum ensures that Cisco_IOS_XRMplsTeCfg_MplsTeSwitchingEncoding implements the yang.GoEnum
// interface. This ensures that Cisco_IOS_XRMplsTeCfg_MplsTeSwitchingEncoding can be identified as a
// mapped type for a YANG enumeration.
func (E_Cisco_IOS_XRMplsTeCfg_MplsTeSwitchingEncoding) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Cisco_IOS_XRMplsTeCfg_MplsTeSwitchingEncoding.
func (E_Cisco_IOS_XRMplsTeCfg_MplsTeSwitchingEncoding) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_Cisco_IOS_XRMplsTeCfg_MplsTeSwitchingEncoding.
func (e E_Cisco_IOS_XRMplsTeCfg_MplsTeSwitchingEncoding) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Cisco_IOS_XRMplsTeCfg_MplsTeSwitchingEncoding")
}

const (
	// Cisco_IOS_XRMplsTeCfg_MplsTeSwitchingEncoding_UNSET corresponds to the value UNSET of Cisco_IOS_XRMplsTeCfg_MplsTeSwitchingEncoding
	Cisco_IOS_XRMplsTeCfg_MplsTeSwitchingEncoding_UNSET E_Cisco_IOS_XRMplsTeCfg_MplsTeSwitchingEncoding = 0
	// Cisco_IOS_XRMplsTeCfg_MplsTeSwitchingEncoding_packet corresponds to the value packet of Cisco_IOS_XRMplsTeCfg_MplsTeSwitchingEncoding
	Cisco_IOS_XRMplsTeCfg_MplsTeSwitchingEncoding_packet E_Cisco_IOS_XRMplsTeCfg_MplsTeSwitchingEncoding = 1
	// Cisco_IOS_XRMplsTeCfg_MplsTeSwitchingEncoding_ethernet corresponds to the value ethernet of Cisco_IOS_XRMplsTeCfg_MplsTeSwitchingEncoding
	Cisco_IOS_XRMplsTeCfg_MplsTeSwitchingEncoding_ethernet E_Cisco_IOS_XRMplsTeCfg_MplsTeSwitchingEncoding = 2
	// Cisco_IOS_XRMplsTeCfg_MplsTeSwitchingEncoding_sondet_sdh corresponds to the value sondet_sdh of Cisco_IOS_XRMplsTeCfg_MplsTeSwitchingEncoding
	Cisco_IOS_XRMplsTeCfg_MplsTeSwitchingEncoding_sondet_sdh E_Cisco_IOS_XRMplsTeCfg_MplsTeSwitchingEncoding = 3
)


// E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity is a derived int64 type which is used to represent
// the enumerated node Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity. An additional value named
// Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity int64

// IsYANGGoEnum ensures that Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity implements the yang.GoEnum
// interface. This ensures that Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity can be identified as a
// mapped type for a YANG enumeration.
func (E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity.
func (E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity.
func (e E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity")
}

const (
	// Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity_UNSET corresponds to the value UNSET of Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity
	Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity_UNSET E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity = 0
	// Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity_include corresponds to the value include of Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity
	Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity_include E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity = 1
	// Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity_include_strict corresponds to the value include_strict of Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity
	Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity_include_strict E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity = 2
	// Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity_exclude corresponds to the value exclude of Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity
	Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity_exclude E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity = 3
	// Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity_exclude_all corresponds to the value exclude_all of Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity
	Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity_exclude_all E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity = 4
	// Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity_ignore corresponds to the value ignore of Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity
	Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity_ignore E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity = 5
)


// E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelId is a derived int64 type which is used to represent
// the enumerated node Cisco_IOS_XRMplsTeCfg_MplsTeTunnelId. An additional value named
// Cisco_IOS_XRMplsTeCfg_MplsTeTunnelId_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelId int64

// IsYANGGoEnum ensures that Cisco_IOS_XRMplsTeCfg_MplsTeTunnelId implements the yang.GoEnum
// interface. This ensures that Cisco_IOS_XRMplsTeCfg_MplsTeTunnelId can be identified as a
// mapped type for a YANG enumeration.
func (E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelId) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Cisco_IOS_XRMplsTeCfg_MplsTeTunnelId.
func (E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelId) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelId.
func (e E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelId) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelId")
}

const (
	// Cisco_IOS_XRMplsTeCfg_MplsTeTunnelId_UNSET corresponds to the value UNSET of Cisco_IOS_XRMplsTeCfg_MplsTeTunnelId
	Cisco_IOS_XRMplsTeCfg_MplsTeTunnelId_UNSET E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelId = 0
	// Cisco_IOS_XRMplsTeCfg_MplsTeTunnelId_auto corresponds to the value auto of Cisco_IOS_XRMplsTeCfg_MplsTeTunnelId
	Cisco_IOS_XRMplsTeCfg_MplsTeTunnelId_auto E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelId = 1
	// Cisco_IOS_XRMplsTeCfg_MplsTeTunnelId_explicit corresponds to the value explicit of Cisco_IOS_XRMplsTeCfg_MplsTeTunnelId
	Cisco_IOS_XRMplsTeCfg_MplsTeTunnelId_explicit E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelId = 2
)


// E_Cisco_IOS_XRMplsTeCfg_MplsTeUniInPlaceBit is a derived int64 type which is used to represent
// the enumerated node Cisco_IOS_XRMplsTeCfg_MplsTeUniInPlaceBit. An additional value named
// Cisco_IOS_XRMplsTeCfg_MplsTeUniInPlaceBit_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Cisco_IOS_XRMplsTeCfg_MplsTeUniInPlaceBit int64

// IsYANGGoEnum ensures that Cisco_IOS_XRMplsTeCfg_MplsTeUniInPlaceBit implements the yang.GoEnum
// interface. This ensures that Cisco_IOS_XRMplsTeCfg_MplsTeUniInPlaceBit can be identified as a
// mapped type for a YANG enumeration.
func (E_Cisco_IOS_XRMplsTeCfg_MplsTeUniInPlaceBit) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Cisco_IOS_XRMplsTeCfg_MplsTeUniInPlaceBit.
func (E_Cisco_IOS_XRMplsTeCfg_MplsTeUniInPlaceBit) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_Cisco_IOS_XRMplsTeCfg_MplsTeUniInPlaceBit.
func (e E_Cisco_IOS_XRMplsTeCfg_MplsTeUniInPlaceBit) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Cisco_IOS_XRMplsTeCfg_MplsTeUniInPlaceBit")
}

const (
	// Cisco_IOS_XRMplsTeCfg_MplsTeUniInPlaceBit_UNSET corresponds to the value UNSET of Cisco_IOS_XRMplsTeCfg_MplsTeUniInPlaceBit
	Cisco_IOS_XRMplsTeCfg_MplsTeUniInPlaceBit_UNSET E_Cisco_IOS_XRMplsTeCfg_MplsTeUniInPlaceBit = 0
	// Cisco_IOS_XRMplsTeCfg_MplsTeUniInPlaceBit_not_set corresponds to the value not_set of Cisco_IOS_XRMplsTeCfg_MplsTeUniInPlaceBit
	Cisco_IOS_XRMplsTeCfg_MplsTeUniInPlaceBit_not_set E_Cisco_IOS_XRMplsTeCfg_MplsTeUniInPlaceBit = 1
	// Cisco_IOS_XRMplsTeCfg_MplsTeUniInPlaceBit_set corresponds to the value set of Cisco_IOS_XRMplsTeCfg_MplsTeUniInPlaceBit
	Cisco_IOS_XRMplsTeCfg_MplsTeUniInPlaceBit_set E_Cisco_IOS_XRMplsTeCfg_MplsTeUniInPlaceBit = 2
)


// E_Cisco_IOS_XRMplsTeCfg_MplsTeUniLspSegFlag is a derived int64 type which is used to represent
// the enumerated node Cisco_IOS_XRMplsTeCfg_MplsTeUniLspSegFlag. An additional value named
// Cisco_IOS_XRMplsTeCfg_MplsTeUniLspSegFlag_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Cisco_IOS_XRMplsTeCfg_MplsTeUniLspSegFlag int64

// IsYANGGoEnum ensures that Cisco_IOS_XRMplsTeCfg_MplsTeUniLspSegFlag implements the yang.GoEnum
// interface. This ensures that Cisco_IOS_XRMplsTeCfg_MplsTeUniLspSegFlag can be identified as a
// mapped type for a YANG enumeration.
func (E_Cisco_IOS_XRMplsTeCfg_MplsTeUniLspSegFlag) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Cisco_IOS_XRMplsTeCfg_MplsTeUniLspSegFlag.
func (E_Cisco_IOS_XRMplsTeCfg_MplsTeUniLspSegFlag) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_Cisco_IOS_XRMplsTeCfg_MplsTeUniLspSegFlag.
func (e E_Cisco_IOS_XRMplsTeCfg_MplsTeUniLspSegFlag) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Cisco_IOS_XRMplsTeCfg_MplsTeUniLspSegFlag")
}

const (
	// Cisco_IOS_XRMplsTeCfg_MplsTeUniLspSegFlag_UNSET corresponds to the value UNSET of Cisco_IOS_XRMplsTeCfg_MplsTeUniLspSegFlag
	Cisco_IOS_XRMplsTeCfg_MplsTeUniLspSegFlag_UNSET E_Cisco_IOS_XRMplsTeCfg_MplsTeUniLspSegFlag = 0
	// Cisco_IOS_XRMplsTeCfg_MplsTeUniLspSegFlag_unprotected corresponds to the value unprotected of Cisco_IOS_XRMplsTeCfg_MplsTeUniLspSegFlag
	Cisco_IOS_XRMplsTeCfg_MplsTeUniLspSegFlag_unprotected E_Cisco_IOS_XRMplsTeCfg_MplsTeUniLspSegFlag = 1
	// Cisco_IOS_XRMplsTeCfg_MplsTeUniLspSegFlag_rerouting corresponds to the value rerouting of Cisco_IOS_XRMplsTeCfg_MplsTeUniLspSegFlag
	Cisco_IOS_XRMplsTeCfg_MplsTeUniLspSegFlag_rerouting E_Cisco_IOS_XRMplsTeCfg_MplsTeUniLspSegFlag = 2
	// Cisco_IOS_XRMplsTeCfg_MplsTeUniLspSegFlag_rerouting_no_et corresponds to the value rerouting_no_et of Cisco_IOS_XRMplsTeCfg_MplsTeUniLspSegFlag
	Cisco_IOS_XRMplsTeCfg_MplsTeUniLspSegFlag_rerouting_no_et E_Cisco_IOS_XRMplsTeCfg_MplsTeUniLspSegFlag = 3
	// Cisco_IOS_XRMplsTeCfg_MplsTeUniLspSegFlag_rerouting_one_to_n_et corresponds to the value rerouting_one_to_n_et of Cisco_IOS_XRMplsTeCfg_MplsTeUniLspSegFlag
	Cisco_IOS_XRMplsTeCfg_MplsTeUniLspSegFlag_rerouting_one_to_n_et E_Cisco_IOS_XRMplsTeCfg_MplsTeUniLspSegFlag = 4
	// Cisco_IOS_XRMplsTeCfg_MplsTeUniLspSegFlag_rerouting_one_plus_one_uni corresponds to the value rerouting_one_plus_one_uni of Cisco_IOS_XRMplsTeCfg_MplsTeUniLspSegFlag
	Cisco_IOS_XRMplsTeCfg_MplsTeUniLspSegFlag_rerouting_one_plus_one_uni E_Cisco_IOS_XRMplsTeCfg_MplsTeUniLspSegFlag = 5
	// Cisco_IOS_XRMplsTeCfg_MplsTeUniLspSegFlag_rerouting_one_plus_one_bi corresponds to the value rerouting_one_plus_one_bi of Cisco_IOS_XRMplsTeCfg_MplsTeUniLspSegFlag
	Cisco_IOS_XRMplsTeCfg_MplsTeUniLspSegFlag_rerouting_one_plus_one_bi E_Cisco_IOS_XRMplsTeCfg_MplsTeUniLspSegFlag = 6
)


// E_Cisco_IOS_XRMplsTeCfg_MplsTeUniRequiredBit is a derived int64 type which is used to represent
// the enumerated node Cisco_IOS_XRMplsTeCfg_MplsTeUniRequiredBit. An additional value named
// Cisco_IOS_XRMplsTeCfg_MplsTeUniRequiredBit_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Cisco_IOS_XRMplsTeCfg_MplsTeUniRequiredBit int64

// IsYANGGoEnum ensures that Cisco_IOS_XRMplsTeCfg_MplsTeUniRequiredBit implements the yang.GoEnum
// interface. This ensures that Cisco_IOS_XRMplsTeCfg_MplsTeUniRequiredBit can be identified as a
// mapped type for a YANG enumeration.
func (E_Cisco_IOS_XRMplsTeCfg_MplsTeUniRequiredBit) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Cisco_IOS_XRMplsTeCfg_MplsTeUniRequiredBit.
func (E_Cisco_IOS_XRMplsTeCfg_MplsTeUniRequiredBit) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_Cisco_IOS_XRMplsTeCfg_MplsTeUniRequiredBit.
func (e E_Cisco_IOS_XRMplsTeCfg_MplsTeUniRequiredBit) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Cisco_IOS_XRMplsTeCfg_MplsTeUniRequiredBit")
}

const (
	// Cisco_IOS_XRMplsTeCfg_MplsTeUniRequiredBit_UNSET corresponds to the value UNSET of Cisco_IOS_XRMplsTeCfg_MplsTeUniRequiredBit
	Cisco_IOS_XRMplsTeCfg_MplsTeUniRequiredBit_UNSET E_Cisco_IOS_XRMplsTeCfg_MplsTeUniRequiredBit = 0
	// Cisco_IOS_XRMplsTeCfg_MplsTeUniRequiredBit_not_set corresponds to the value not_set of Cisco_IOS_XRMplsTeCfg_MplsTeUniRequiredBit
	Cisco_IOS_XRMplsTeCfg_MplsTeUniRequiredBit_not_set E_Cisco_IOS_XRMplsTeCfg_MplsTeUniRequiredBit = 1
	// Cisco_IOS_XRMplsTeCfg_MplsTeUniRequiredBit_set corresponds to the value set of Cisco_IOS_XRMplsTeCfg_MplsTeUniRequiredBit
	Cisco_IOS_XRMplsTeCfg_MplsTeUniRequiredBit_set E_Cisco_IOS_XRMplsTeCfg_MplsTeUniRequiredBit = 2
)


// E_Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_Switchings_Switching_SwitchingId is a derived int64 type which is used to represent
// the enumerated node Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_Switchings_Switching_SwitchingId. An additional value named
// Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_Switchings_Switching_SwitchingId_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_Switchings_Switching_SwitchingId int64

// IsYANGGoEnum ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_Switchings_Switching_SwitchingId implements the yang.GoEnum
// interface. This ensures that Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_Switchings_Switching_SwitchingId can be identified as a
// mapped type for a YANG enumeration.
func (E_Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_Switchings_Switching_SwitchingId) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_Switchings_Switching_SwitchingId.
func (E_Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_Switchings_Switching_SwitchingId) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_Switchings_Switching_SwitchingId.
func (e E_Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_Switchings_Switching_SwitchingId) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_Switchings_Switching_SwitchingId")
}

const (
	// Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_Switchings_Switching_SwitchingId_UNSET corresponds to the value UNSET of Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_Switchings_Switching_SwitchingId
	Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_Switchings_Switching_SwitchingId_UNSET E_Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_Switchings_Switching_SwitchingId = 0
	// Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_Switchings_Switching_SwitchingId_link corresponds to the value link of Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_Switchings_Switching_SwitchingId
	Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_Switchings_Switching_SwitchingId_link E_Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_Switchings_Switching_SwitchingId = 1
)


// E_Cisco_IOS_XRMplsTeCfg_MplsTebfdSession is a derived int64 type which is used to represent
// the enumerated node Cisco_IOS_XRMplsTeCfg_MplsTebfdSession. An additional value named
// Cisco_IOS_XRMplsTeCfg_MplsTebfdSession_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Cisco_IOS_XRMplsTeCfg_MplsTebfdSession int64

// IsYANGGoEnum ensures that Cisco_IOS_XRMplsTeCfg_MplsTebfdSession implements the yang.GoEnum
// interface. This ensures that Cisco_IOS_XRMplsTeCfg_MplsTebfdSession can be identified as a
// mapped type for a YANG enumeration.
func (E_Cisco_IOS_XRMplsTeCfg_MplsTebfdSession) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Cisco_IOS_XRMplsTeCfg_MplsTebfdSession.
func (E_Cisco_IOS_XRMplsTeCfg_MplsTebfdSession) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_Cisco_IOS_XRMplsTeCfg_MplsTebfdSession.
func (e E_Cisco_IOS_XRMplsTeCfg_MplsTebfdSession) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Cisco_IOS_XRMplsTeCfg_MplsTebfdSession")
}

const (
	// Cisco_IOS_XRMplsTeCfg_MplsTebfdSession_UNSET corresponds to the value UNSET of Cisco_IOS_XRMplsTeCfg_MplsTebfdSession
	Cisco_IOS_XRMplsTeCfg_MplsTebfdSession_UNSET E_Cisco_IOS_XRMplsTeCfg_MplsTebfdSession = 0
	// Cisco_IOS_XRMplsTeCfg_MplsTebfdSession_regular_bfd corresponds to the value regular_bfd of Cisco_IOS_XRMplsTeCfg_MplsTebfdSession
	Cisco_IOS_XRMplsTeCfg_MplsTebfdSession_regular_bfd E_Cisco_IOS_XRMplsTeCfg_MplsTebfdSession = 1
	// Cisco_IOS_XRMplsTeCfg_MplsTebfdSession_sbfd corresponds to the value sbfd of Cisco_IOS_XRMplsTeCfg_MplsTebfdSession
	Cisco_IOS_XRMplsTeCfg_MplsTebfdSession_sbfd E_Cisco_IOS_XRMplsTeCfg_MplsTebfdSession = 2
	// Cisco_IOS_XRMplsTeCfg_MplsTebfdSession_redundant_sbfd corresponds to the value redundant_sbfd of Cisco_IOS_XRMplsTeCfg_MplsTebfdSession
	Cisco_IOS_XRMplsTeCfg_MplsTebfdSession_redundant_sbfd E_Cisco_IOS_XRMplsTeCfg_MplsTebfdSession = 3
)


// E_Cisco_IOS_XRMplsTeCfg_MplsTesrlgExclude is a derived int64 type which is used to represent
// the enumerated node Cisco_IOS_XRMplsTeCfg_MplsTesrlgExclude. An additional value named
// Cisco_IOS_XRMplsTeCfg_MplsTesrlgExclude_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Cisco_IOS_XRMplsTeCfg_MplsTesrlgExclude int64

// IsYANGGoEnum ensures that Cisco_IOS_XRMplsTeCfg_MplsTesrlgExclude implements the yang.GoEnum
// interface. This ensures that Cisco_IOS_XRMplsTeCfg_MplsTesrlgExclude can be identified as a
// mapped type for a YANG enumeration.
func (E_Cisco_IOS_XRMplsTeCfg_MplsTesrlgExclude) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Cisco_IOS_XRMplsTeCfg_MplsTesrlgExclude.
func (E_Cisco_IOS_XRMplsTeCfg_MplsTesrlgExclude) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_Cisco_IOS_XRMplsTeCfg_MplsTesrlgExclude.
func (e E_Cisco_IOS_XRMplsTeCfg_MplsTesrlgExclude) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Cisco_IOS_XRMplsTeCfg_MplsTesrlgExclude")
}

const (
	// Cisco_IOS_XRMplsTeCfg_MplsTesrlgExclude_UNSET corresponds to the value UNSET of Cisco_IOS_XRMplsTeCfg_MplsTesrlgExclude
	Cisco_IOS_XRMplsTeCfg_MplsTesrlgExclude_UNSET E_Cisco_IOS_XRMplsTeCfg_MplsTesrlgExclude = 0
	// Cisco_IOS_XRMplsTeCfg_MplsTesrlgExclude_mandatory corresponds to the value mandatory of Cisco_IOS_XRMplsTeCfg_MplsTesrlgExclude
	Cisco_IOS_XRMplsTeCfg_MplsTesrlgExclude_mandatory E_Cisco_IOS_XRMplsTeCfg_MplsTesrlgExclude = 1
	// Cisco_IOS_XRMplsTeCfg_MplsTesrlgExclude_preferred corresponds to the value preferred of Cisco_IOS_XRMplsTeCfg_MplsTesrlgExclude
	Cisco_IOS_XRMplsTeCfg_MplsTesrlgExclude_preferred E_Cisco_IOS_XRMplsTeCfg_MplsTesrlgExclude = 2
	// Cisco_IOS_XRMplsTeCfg_MplsTesrlgExclude_weighted corresponds to the value weighted of Cisco_IOS_XRMplsTeCfg_MplsTesrlgExclude
	Cisco_IOS_XRMplsTeCfg_MplsTesrlgExclude_weighted E_Cisco_IOS_XRMplsTeCfg_MplsTesrlgExclude = 3
)


// E_Cisco_IOS_XRMplsTeCfg_OspfAreaMode is a derived int64 type which is used to represent
// the enumerated node Cisco_IOS_XRMplsTeCfg_OspfAreaMode. An additional value named
// Cisco_IOS_XRMplsTeCfg_OspfAreaMode_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Cisco_IOS_XRMplsTeCfg_OspfAreaMode int64

// IsYANGGoEnum ensures that Cisco_IOS_XRMplsTeCfg_OspfAreaMode implements the yang.GoEnum
// interface. This ensures that Cisco_IOS_XRMplsTeCfg_OspfAreaMode can be identified as a
// mapped type for a YANG enumeration.
func (E_Cisco_IOS_XRMplsTeCfg_OspfAreaMode) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Cisco_IOS_XRMplsTeCfg_OspfAreaMode.
func (E_Cisco_IOS_XRMplsTeCfg_OspfAreaMode) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_Cisco_IOS_XRMplsTeCfg_OspfAreaMode.
func (e E_Cisco_IOS_XRMplsTeCfg_OspfAreaMode) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Cisco_IOS_XRMplsTeCfg_OspfAreaMode")
}

const (
	// Cisco_IOS_XRMplsTeCfg_OspfAreaMode_UNSET corresponds to the value UNSET of Cisco_IOS_XRMplsTeCfg_OspfAreaMode
	Cisco_IOS_XRMplsTeCfg_OspfAreaMode_UNSET E_Cisco_IOS_XRMplsTeCfg_OspfAreaMode = 0
	// Cisco_IOS_XRMplsTeCfg_OspfAreaMode_ospf_int corresponds to the value ospf_int of Cisco_IOS_XRMplsTeCfg_OspfAreaMode
	Cisco_IOS_XRMplsTeCfg_OspfAreaMode_ospf_int E_Cisco_IOS_XRMplsTeCfg_OspfAreaMode = 1
	// Cisco_IOS_XRMplsTeCfg_OspfAreaMode_ospfip_addr corresponds to the value ospfip_addr of Cisco_IOS_XRMplsTeCfg_OspfAreaMode
	Cisco_IOS_XRMplsTeCfg_OspfAreaMode_ospfip_addr E_Cisco_IOS_XRMplsTeCfg_OspfAreaMode = 2
)


// E_Cisco_IOS_XRMplsTeCfg_OtnDestination is a derived int64 type which is used to represent
// the enumerated node Cisco_IOS_XRMplsTeCfg_OtnDestination. An additional value named
// Cisco_IOS_XRMplsTeCfg_OtnDestination_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Cisco_IOS_XRMplsTeCfg_OtnDestination int64

// IsYANGGoEnum ensures that Cisco_IOS_XRMplsTeCfg_OtnDestination implements the yang.GoEnum
// interface. This ensures that Cisco_IOS_XRMplsTeCfg_OtnDestination can be identified as a
// mapped type for a YANG enumeration.
func (E_Cisco_IOS_XRMplsTeCfg_OtnDestination) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Cisco_IOS_XRMplsTeCfg_OtnDestination.
func (E_Cisco_IOS_XRMplsTeCfg_OtnDestination) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_Cisco_IOS_XRMplsTeCfg_OtnDestination.
func (e E_Cisco_IOS_XRMplsTeCfg_OtnDestination) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Cisco_IOS_XRMplsTeCfg_OtnDestination")
}

const (
	// Cisco_IOS_XRMplsTeCfg_OtnDestination_UNSET corresponds to the value UNSET of Cisco_IOS_XRMplsTeCfg_OtnDestination
	Cisco_IOS_XRMplsTeCfg_OtnDestination_UNSET E_Cisco_IOS_XRMplsTeCfg_OtnDestination = 0
	// Cisco_IOS_XRMplsTeCfg_OtnDestination_number_ed corresponds to the value number_ed of Cisco_IOS_XRMplsTeCfg_OtnDestination
	Cisco_IOS_XRMplsTeCfg_OtnDestination_number_ed E_Cisco_IOS_XRMplsTeCfg_OtnDestination = 1
	// Cisco_IOS_XRMplsTeCfg_OtnDestination_un_number_ed corresponds to the value un_number_ed of Cisco_IOS_XRMplsTeCfg_OtnDestination
	Cisco_IOS_XRMplsTeCfg_OtnDestination_un_number_ed E_Cisco_IOS_XRMplsTeCfg_OtnDestination = 2
)


// E_Cisco_IOS_XRMplsTeCfg_OtnPayload is a derived int64 type which is used to represent
// the enumerated node Cisco_IOS_XRMplsTeCfg_OtnPayload. An additional value named
// Cisco_IOS_XRMplsTeCfg_OtnPayload_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Cisco_IOS_XRMplsTeCfg_OtnPayload int64

// IsYANGGoEnum ensures that Cisco_IOS_XRMplsTeCfg_OtnPayload implements the yang.GoEnum
// interface. This ensures that Cisco_IOS_XRMplsTeCfg_OtnPayload can be identified as a
// mapped type for a YANG enumeration.
func (E_Cisco_IOS_XRMplsTeCfg_OtnPayload) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Cisco_IOS_XRMplsTeCfg_OtnPayload.
func (E_Cisco_IOS_XRMplsTeCfg_OtnPayload) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_Cisco_IOS_XRMplsTeCfg_OtnPayload.
func (e E_Cisco_IOS_XRMplsTeCfg_OtnPayload) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Cisco_IOS_XRMplsTeCfg_OtnPayload")
}

const (
	// Cisco_IOS_XRMplsTeCfg_OtnPayload_UNSET corresponds to the value UNSET of Cisco_IOS_XRMplsTeCfg_OtnPayload
	Cisco_IOS_XRMplsTeCfg_OtnPayload_UNSET E_Cisco_IOS_XRMplsTeCfg_OtnPayload = 0
	// Cisco_IOS_XRMplsTeCfg_OtnPayload_unknown corresponds to the value unknown of Cisco_IOS_XRMplsTeCfg_OtnPayload
	Cisco_IOS_XRMplsTeCfg_OtnPayload_unknown E_Cisco_IOS_XRMplsTeCfg_OtnPayload = 1
	// Cisco_IOS_XRMplsTeCfg_OtnPayload_bmp corresponds to the value bmp of Cisco_IOS_XRMplsTeCfg_OtnPayload
	Cisco_IOS_XRMplsTeCfg_OtnPayload_bmp E_Cisco_IOS_XRMplsTeCfg_OtnPayload = 2
	// Cisco_IOS_XRMplsTeCfg_OtnPayload_gfp_f corresponds to the value gfp_f of Cisco_IOS_XRMplsTeCfg_OtnPayload
	Cisco_IOS_XRMplsTeCfg_OtnPayload_gfp_f E_Cisco_IOS_XRMplsTeCfg_OtnPayload = 3
	// Cisco_IOS_XRMplsTeCfg_OtnPayload_gmp corresponds to the value gmp of Cisco_IOS_XRMplsTeCfg_OtnPayload
	Cisco_IOS_XRMplsTeCfg_OtnPayload_gmp E_Cisco_IOS_XRMplsTeCfg_OtnPayload = 4
	// Cisco_IOS_XRMplsTeCfg_OtnPayload_gfp_f_ext corresponds to the value gfp_f_ext of Cisco_IOS_XRMplsTeCfg_OtnPayload
	Cisco_IOS_XRMplsTeCfg_OtnPayload_gfp_f_ext E_Cisco_IOS_XRMplsTeCfg_OtnPayload = 5
)


// E_Cisco_IOS_XRMplsTeCfg_OtnProtectionSwitchLockout is a derived int64 type which is used to represent
// the enumerated node Cisco_IOS_XRMplsTeCfg_OtnProtectionSwitchLockout. An additional value named
// Cisco_IOS_XRMplsTeCfg_OtnProtectionSwitchLockout_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Cisco_IOS_XRMplsTeCfg_OtnProtectionSwitchLockout int64

// IsYANGGoEnum ensures that Cisco_IOS_XRMplsTeCfg_OtnProtectionSwitchLockout implements the yang.GoEnum
// interface. This ensures that Cisco_IOS_XRMplsTeCfg_OtnProtectionSwitchLockout can be identified as a
// mapped type for a YANG enumeration.
func (E_Cisco_IOS_XRMplsTeCfg_OtnProtectionSwitchLockout) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Cisco_IOS_XRMplsTeCfg_OtnProtectionSwitchLockout.
func (E_Cisco_IOS_XRMplsTeCfg_OtnProtectionSwitchLockout) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_Cisco_IOS_XRMplsTeCfg_OtnProtectionSwitchLockout.
func (e E_Cisco_IOS_XRMplsTeCfg_OtnProtectionSwitchLockout) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Cisco_IOS_XRMplsTeCfg_OtnProtectionSwitchLockout")
}

const (
	// Cisco_IOS_XRMplsTeCfg_OtnProtectionSwitchLockout_UNSET corresponds to the value UNSET of Cisco_IOS_XRMplsTeCfg_OtnProtectionSwitchLockout
	Cisco_IOS_XRMplsTeCfg_OtnProtectionSwitchLockout_UNSET E_Cisco_IOS_XRMplsTeCfg_OtnProtectionSwitchLockout = 0
	// Cisco_IOS_XRMplsTeCfg_OtnProtectionSwitchLockout_none corresponds to the value none of Cisco_IOS_XRMplsTeCfg_OtnProtectionSwitchLockout
	Cisco_IOS_XRMplsTeCfg_OtnProtectionSwitchLockout_none E_Cisco_IOS_XRMplsTeCfg_OtnProtectionSwitchLockout = 1
	// Cisco_IOS_XRMplsTeCfg_OtnProtectionSwitchLockout_working corresponds to the value working of Cisco_IOS_XRMplsTeCfg_OtnProtectionSwitchLockout
	Cisco_IOS_XRMplsTeCfg_OtnProtectionSwitchLockout_working E_Cisco_IOS_XRMplsTeCfg_OtnProtectionSwitchLockout = 2
)


// E_Cisco_IOS_XRMplsTeCfg_OtnSignaledBandwidth is a derived int64 type which is used to represent
// the enumerated node Cisco_IOS_XRMplsTeCfg_OtnSignaledBandwidth. An additional value named
// Cisco_IOS_XRMplsTeCfg_OtnSignaledBandwidth_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Cisco_IOS_XRMplsTeCfg_OtnSignaledBandwidth int64

// IsYANGGoEnum ensures that Cisco_IOS_XRMplsTeCfg_OtnSignaledBandwidth implements the yang.GoEnum
// interface. This ensures that Cisco_IOS_XRMplsTeCfg_OtnSignaledBandwidth can be identified as a
// mapped type for a YANG enumeration.
func (E_Cisco_IOS_XRMplsTeCfg_OtnSignaledBandwidth) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Cisco_IOS_XRMplsTeCfg_OtnSignaledBandwidth.
func (E_Cisco_IOS_XRMplsTeCfg_OtnSignaledBandwidth) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_Cisco_IOS_XRMplsTeCfg_OtnSignaledBandwidth.
func (e E_Cisco_IOS_XRMplsTeCfg_OtnSignaledBandwidth) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Cisco_IOS_XRMplsTeCfg_OtnSignaledBandwidth")
}

const (
	// Cisco_IOS_XRMplsTeCfg_OtnSignaledBandwidth_UNSET corresponds to the value UNSET of Cisco_IOS_XRMplsTeCfg_OtnSignaledBandwidth
	Cisco_IOS_XRMplsTeCfg_OtnSignaledBandwidth_UNSET E_Cisco_IOS_XRMplsTeCfg_OtnSignaledBandwidth = 0
	// Cisco_IOS_XRMplsTeCfg_OtnSignaledBandwidth_odu1 corresponds to the value odu1 of Cisco_IOS_XRMplsTeCfg_OtnSignaledBandwidth
	Cisco_IOS_XRMplsTeCfg_OtnSignaledBandwidth_odu1 E_Cisco_IOS_XRMplsTeCfg_OtnSignaledBandwidth = 1
	// Cisco_IOS_XRMplsTeCfg_OtnSignaledBandwidth_odu2 corresponds to the value odu2 of Cisco_IOS_XRMplsTeCfg_OtnSignaledBandwidth
	Cisco_IOS_XRMplsTeCfg_OtnSignaledBandwidth_odu2 E_Cisco_IOS_XRMplsTeCfg_OtnSignaledBandwidth = 2
	// Cisco_IOS_XRMplsTeCfg_OtnSignaledBandwidth_odu3 corresponds to the value odu3 of Cisco_IOS_XRMplsTeCfg_OtnSignaledBandwidth
	Cisco_IOS_XRMplsTeCfg_OtnSignaledBandwidth_odu3 E_Cisco_IOS_XRMplsTeCfg_OtnSignaledBandwidth = 3
	// Cisco_IOS_XRMplsTeCfg_OtnSignaledBandwidth_odu4 corresponds to the value odu4 of Cisco_IOS_XRMplsTeCfg_OtnSignaledBandwidth
	Cisco_IOS_XRMplsTeCfg_OtnSignaledBandwidth_odu4 E_Cisco_IOS_XRMplsTeCfg_OtnSignaledBandwidth = 4
	// Cisco_IOS_XRMplsTeCfg_OtnSignaledBandwidth_odu0 corresponds to the value odu0 of Cisco_IOS_XRMplsTeCfg_OtnSignaledBandwidth
	Cisco_IOS_XRMplsTeCfg_OtnSignaledBandwidth_odu0 E_Cisco_IOS_XRMplsTeCfg_OtnSignaledBandwidth = 5
	// Cisco_IOS_XRMplsTeCfg_OtnSignaledBandwidth_odu2e corresponds to the value odu2e of Cisco_IOS_XRMplsTeCfg_OtnSignaledBandwidth
	Cisco_IOS_XRMplsTeCfg_OtnSignaledBandwidth_odu2e E_Cisco_IOS_XRMplsTeCfg_OtnSignaledBandwidth = 6
	// Cisco_IOS_XRMplsTeCfg_OtnSignaledBandwidth_od_uflex_cbr corresponds to the value od_uflex_cbr of Cisco_IOS_XRMplsTeCfg_OtnSignaledBandwidth
	Cisco_IOS_XRMplsTeCfg_OtnSignaledBandwidth_od_uflex_cbr E_Cisco_IOS_XRMplsTeCfg_OtnSignaledBandwidth = 7
	// Cisco_IOS_XRMplsTeCfg_OtnSignaledBandwidth_od_uflex_gfp_resize corresponds to the value od_uflex_gfp_resize of Cisco_IOS_XRMplsTeCfg_OtnSignaledBandwidth
	Cisco_IOS_XRMplsTeCfg_OtnSignaledBandwidth_od_uflex_gfp_resize E_Cisco_IOS_XRMplsTeCfg_OtnSignaledBandwidth = 8
	// Cisco_IOS_XRMplsTeCfg_OtnSignaledBandwidth_od_uflex_gfp_not_resize corresponds to the value od_uflex_gfp_not_resize of Cisco_IOS_XRMplsTeCfg_OtnSignaledBandwidth
	Cisco_IOS_XRMplsTeCfg_OtnSignaledBandwidth_od_uflex_gfp_not_resize E_Cisco_IOS_XRMplsTeCfg_OtnSignaledBandwidth = 9
	// Cisco_IOS_XRMplsTeCfg_OtnSignaledBandwidth_odu1e corresponds to the value odu1e of Cisco_IOS_XRMplsTeCfg_OtnSignaledBandwidth
	Cisco_IOS_XRMplsTeCfg_OtnSignaledBandwidth_odu1e E_Cisco_IOS_XRMplsTeCfg_OtnSignaledBandwidth = 10
	// Cisco_IOS_XRMplsTeCfg_OtnSignaledBandwidth_odu1f corresponds to the value odu1f of Cisco_IOS_XRMplsTeCfg_OtnSignaledBandwidth
	Cisco_IOS_XRMplsTeCfg_OtnSignaledBandwidth_odu1f E_Cisco_IOS_XRMplsTeCfg_OtnSignaledBandwidth = 11
	// Cisco_IOS_XRMplsTeCfg_OtnSignaledBandwidth_odu2f corresponds to the value odu2f of Cisco_IOS_XRMplsTeCfg_OtnSignaledBandwidth
	Cisco_IOS_XRMplsTeCfg_OtnSignaledBandwidth_odu2f E_Cisco_IOS_XRMplsTeCfg_OtnSignaledBandwidth = 12
	// Cisco_IOS_XRMplsTeCfg_OtnSignaledBandwidth_odu3e1 corresponds to the value odu3e1 of Cisco_IOS_XRMplsTeCfg_OtnSignaledBandwidth
	Cisco_IOS_XRMplsTeCfg_OtnSignaledBandwidth_odu3e1 E_Cisco_IOS_XRMplsTeCfg_OtnSignaledBandwidth = 13
	// Cisco_IOS_XRMplsTeCfg_OtnSignaledBandwidth_odu3e2 corresponds to the value odu3e2 of Cisco_IOS_XRMplsTeCfg_OtnSignaledBandwidth
	Cisco_IOS_XRMplsTeCfg_OtnSignaledBandwidth_odu3e2 E_Cisco_IOS_XRMplsTeCfg_OtnSignaledBandwidth = 14
)


// E_Cisco_IOS_XRMplsTeCfg_OtnSignaledBandwidthFlexFraming is a derived int64 type which is used to represent
// the enumerated node Cisco_IOS_XRMplsTeCfg_OtnSignaledBandwidthFlexFraming. An additional value named
// Cisco_IOS_XRMplsTeCfg_OtnSignaledBandwidthFlexFraming_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Cisco_IOS_XRMplsTeCfg_OtnSignaledBandwidthFlexFraming int64

// IsYANGGoEnum ensures that Cisco_IOS_XRMplsTeCfg_OtnSignaledBandwidthFlexFraming implements the yang.GoEnum
// interface. This ensures that Cisco_IOS_XRMplsTeCfg_OtnSignaledBandwidthFlexFraming can be identified as a
// mapped type for a YANG enumeration.
func (E_Cisco_IOS_XRMplsTeCfg_OtnSignaledBandwidthFlexFraming) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Cisco_IOS_XRMplsTeCfg_OtnSignaledBandwidthFlexFraming.
func (E_Cisco_IOS_XRMplsTeCfg_OtnSignaledBandwidthFlexFraming) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_Cisco_IOS_XRMplsTeCfg_OtnSignaledBandwidthFlexFraming.
func (e E_Cisco_IOS_XRMplsTeCfg_OtnSignaledBandwidthFlexFraming) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Cisco_IOS_XRMplsTeCfg_OtnSignaledBandwidthFlexFraming")
}

const (
	// Cisco_IOS_XRMplsTeCfg_OtnSignaledBandwidthFlexFraming_UNSET corresponds to the value UNSET of Cisco_IOS_XRMplsTeCfg_OtnSignaledBandwidthFlexFraming
	Cisco_IOS_XRMplsTeCfg_OtnSignaledBandwidthFlexFraming_UNSET E_Cisco_IOS_XRMplsTeCfg_OtnSignaledBandwidthFlexFraming = 0
	// Cisco_IOS_XRMplsTeCfg_OtnSignaledBandwidthFlexFraming_cbr corresponds to the value cbr of Cisco_IOS_XRMplsTeCfg_OtnSignaledBandwidthFlexFraming
	Cisco_IOS_XRMplsTeCfg_OtnSignaledBandwidthFlexFraming_cbr E_Cisco_IOS_XRMplsTeCfg_OtnSignaledBandwidthFlexFraming = 1
	// Cisco_IOS_XRMplsTeCfg_OtnSignaledBandwidthFlexFraming_framed_gfp_fixed corresponds to the value framed_gfp_fixed of Cisco_IOS_XRMplsTeCfg_OtnSignaledBandwidthFlexFraming
	Cisco_IOS_XRMplsTeCfg_OtnSignaledBandwidthFlexFraming_framed_gfp_fixed E_Cisco_IOS_XRMplsTeCfg_OtnSignaledBandwidthFlexFraming = 2
	// Cisco_IOS_XRMplsTeCfg_OtnSignaledBandwidthFlexFraming_framed_gfp_resize corresponds to the value framed_gfp_resize of Cisco_IOS_XRMplsTeCfg_OtnSignaledBandwidthFlexFraming
	Cisco_IOS_XRMplsTeCfg_OtnSignaledBandwidthFlexFraming_framed_gfp_resize E_Cisco_IOS_XRMplsTeCfg_OtnSignaledBandwidthFlexFraming = 3
)


// E_Cisco_IOS_XRMplsTeCfg_OtnStaticUni is a derived int64 type which is used to represent
// the enumerated node Cisco_IOS_XRMplsTeCfg_OtnStaticUni. An additional value named
// Cisco_IOS_XRMplsTeCfg_OtnStaticUni_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Cisco_IOS_XRMplsTeCfg_OtnStaticUni int64

// IsYANGGoEnum ensures that Cisco_IOS_XRMplsTeCfg_OtnStaticUni implements the yang.GoEnum
// interface. This ensures that Cisco_IOS_XRMplsTeCfg_OtnStaticUni can be identified as a
// mapped type for a YANG enumeration.
func (E_Cisco_IOS_XRMplsTeCfg_OtnStaticUni) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Cisco_IOS_XRMplsTeCfg_OtnStaticUni.
func (E_Cisco_IOS_XRMplsTeCfg_OtnStaticUni) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_Cisco_IOS_XRMplsTeCfg_OtnStaticUni.
func (e E_Cisco_IOS_XRMplsTeCfg_OtnStaticUni) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Cisco_IOS_XRMplsTeCfg_OtnStaticUni")
}

const (
	// Cisco_IOS_XRMplsTeCfg_OtnStaticUni_UNSET corresponds to the value UNSET of Cisco_IOS_XRMplsTeCfg_OtnStaticUni
	Cisco_IOS_XRMplsTeCfg_OtnStaticUni_UNSET E_Cisco_IOS_XRMplsTeCfg_OtnStaticUni = 0
	// Cisco_IOS_XRMplsTeCfg_OtnStaticUni_unknown corresponds to the value unknown of Cisco_IOS_XRMplsTeCfg_OtnStaticUni
	Cisco_IOS_XRMplsTeCfg_OtnStaticUni_unknown E_Cisco_IOS_XRMplsTeCfg_OtnStaticUni = 1
	// Cisco_IOS_XRMplsTeCfg_OtnStaticUni_xc corresponds to the value xc of Cisco_IOS_XRMplsTeCfg_OtnStaticUni
	Cisco_IOS_XRMplsTeCfg_OtnStaticUni_xc E_Cisco_IOS_XRMplsTeCfg_OtnStaticUni = 2
	// Cisco_IOS_XRMplsTeCfg_OtnStaticUni_termination corresponds to the value termination of Cisco_IOS_XRMplsTeCfg_OtnStaticUni
	Cisco_IOS_XRMplsTeCfg_OtnStaticUni_termination E_Cisco_IOS_XRMplsTeCfg_OtnStaticUni = 3
)


// E_Cisco_IOS_XRMplsTeCfg_PathInvalidationAction is a derived int64 type which is used to represent
// the enumerated node Cisco_IOS_XRMplsTeCfg_PathInvalidationAction. An additional value named
// Cisco_IOS_XRMplsTeCfg_PathInvalidationAction_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Cisco_IOS_XRMplsTeCfg_PathInvalidationAction int64

// IsYANGGoEnum ensures that Cisco_IOS_XRMplsTeCfg_PathInvalidationAction implements the yang.GoEnum
// interface. This ensures that Cisco_IOS_XRMplsTeCfg_PathInvalidationAction can be identified as a
// mapped type for a YANG enumeration.
func (E_Cisco_IOS_XRMplsTeCfg_PathInvalidationAction) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Cisco_IOS_XRMplsTeCfg_PathInvalidationAction.
func (E_Cisco_IOS_XRMplsTeCfg_PathInvalidationAction) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_Cisco_IOS_XRMplsTeCfg_PathInvalidationAction.
func (e E_Cisco_IOS_XRMplsTeCfg_PathInvalidationAction) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Cisco_IOS_XRMplsTeCfg_PathInvalidationAction")
}

const (
	// Cisco_IOS_XRMplsTeCfg_PathInvalidationAction_UNSET corresponds to the value UNSET of Cisco_IOS_XRMplsTeCfg_PathInvalidationAction
	Cisco_IOS_XRMplsTeCfg_PathInvalidationAction_UNSET E_Cisco_IOS_XRMplsTeCfg_PathInvalidationAction = 0
	// Cisco_IOS_XRMplsTeCfg_PathInvalidationAction_tear corresponds to the value tear of Cisco_IOS_XRMplsTeCfg_PathInvalidationAction
	Cisco_IOS_XRMplsTeCfg_PathInvalidationAction_tear E_Cisco_IOS_XRMplsTeCfg_PathInvalidationAction = 1
	// Cisco_IOS_XRMplsTeCfg_PathInvalidationAction_drop corresponds to the value drop of Cisco_IOS_XRMplsTeCfg_PathInvalidationAction
	Cisco_IOS_XRMplsTeCfg_PathInvalidationAction_drop E_Cisco_IOS_XRMplsTeCfg_PathInvalidationAction = 2
)


// E_Cisco_IOS_XRMplsTeCfg_RoutePriorityRole is a derived int64 type which is used to represent
// the enumerated node Cisco_IOS_XRMplsTeCfg_RoutePriorityRole. An additional value named
// Cisco_IOS_XRMplsTeCfg_RoutePriorityRole_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Cisco_IOS_XRMplsTeCfg_RoutePriorityRole int64

// IsYANGGoEnum ensures that Cisco_IOS_XRMplsTeCfg_RoutePriorityRole implements the yang.GoEnum
// interface. This ensures that Cisco_IOS_XRMplsTeCfg_RoutePriorityRole can be identified as a
// mapped type for a YANG enumeration.
func (E_Cisco_IOS_XRMplsTeCfg_RoutePriorityRole) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Cisco_IOS_XRMplsTeCfg_RoutePriorityRole.
func (E_Cisco_IOS_XRMplsTeCfg_RoutePriorityRole) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_Cisco_IOS_XRMplsTeCfg_RoutePriorityRole.
func (e E_Cisco_IOS_XRMplsTeCfg_RoutePriorityRole) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Cisco_IOS_XRMplsTeCfg_RoutePriorityRole")
}

const (
	// Cisco_IOS_XRMplsTeCfg_RoutePriorityRole_UNSET corresponds to the value UNSET of Cisco_IOS_XRMplsTeCfg_RoutePriorityRole
	Cisco_IOS_XRMplsTeCfg_RoutePriorityRole_UNSET E_Cisco_IOS_XRMplsTeCfg_RoutePriorityRole = 0
	// Cisco_IOS_XRMplsTeCfg_RoutePriorityRole_route_priority_role_head_back_up corresponds to the value route_priority_role_head_back_up of Cisco_IOS_XRMplsTeCfg_RoutePriorityRole
	Cisco_IOS_XRMplsTeCfg_RoutePriorityRole_route_priority_role_head_back_up E_Cisco_IOS_XRMplsTeCfg_RoutePriorityRole = 1
	// Cisco_IOS_XRMplsTeCfg_RoutePriorityRole_route_priority_role_head_primary corresponds to the value route_priority_role_head_primary of Cisco_IOS_XRMplsTeCfg_RoutePriorityRole
	Cisco_IOS_XRMplsTeCfg_RoutePriorityRole_route_priority_role_head_primary E_Cisco_IOS_XRMplsTeCfg_RoutePriorityRole = 2
	// Cisco_IOS_XRMplsTeCfg_RoutePriorityRole_route_priority_role_middle corresponds to the value route_priority_role_middle of Cisco_IOS_XRMplsTeCfg_RoutePriorityRole
	Cisco_IOS_XRMplsTeCfg_RoutePriorityRole_route_priority_role_middle E_Cisco_IOS_XRMplsTeCfg_RoutePriorityRole = 3
)


// E_Cisco_IOS_XRMplsTeCfg_SrPrepend is a derived int64 type which is used to represent
// the enumerated node Cisco_IOS_XRMplsTeCfg_SrPrepend. An additional value named
// Cisco_IOS_XRMplsTeCfg_SrPrepend_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Cisco_IOS_XRMplsTeCfg_SrPrepend int64

// IsYANGGoEnum ensures that Cisco_IOS_XRMplsTeCfg_SrPrepend implements the yang.GoEnum
// interface. This ensures that Cisco_IOS_XRMplsTeCfg_SrPrepend can be identified as a
// mapped type for a YANG enumeration.
func (E_Cisco_IOS_XRMplsTeCfg_SrPrepend) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Cisco_IOS_XRMplsTeCfg_SrPrepend.
func (E_Cisco_IOS_XRMplsTeCfg_SrPrepend) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_Cisco_IOS_XRMplsTeCfg_SrPrepend.
func (e E_Cisco_IOS_XRMplsTeCfg_SrPrepend) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Cisco_IOS_XRMplsTeCfg_SrPrepend")
}

const (
	// Cisco_IOS_XRMplsTeCfg_SrPrepend_UNSET corresponds to the value UNSET of Cisco_IOS_XRMplsTeCfg_SrPrepend
	Cisco_IOS_XRMplsTeCfg_SrPrepend_UNSET E_Cisco_IOS_XRMplsTeCfg_SrPrepend = 0
	// Cisco_IOS_XRMplsTeCfg_SrPrepend_none_type corresponds to the value none_type of Cisco_IOS_XRMplsTeCfg_SrPrepend
	Cisco_IOS_XRMplsTeCfg_SrPrepend_none_type E_Cisco_IOS_XRMplsTeCfg_SrPrepend = 1
	// Cisco_IOS_XRMplsTeCfg_SrPrepend_next_label corresponds to the value next_label of Cisco_IOS_XRMplsTeCfg_SrPrepend
	Cisco_IOS_XRMplsTeCfg_SrPrepend_next_label E_Cisco_IOS_XRMplsTeCfg_SrPrepend = 2
	// Cisco_IOS_XRMplsTeCfg_SrPrepend_bgp_n_hop corresponds to the value bgp_n_hop of Cisco_IOS_XRMplsTeCfg_SrPrepend
	Cisco_IOS_XRMplsTeCfg_SrPrepend_bgp_n_hop E_Cisco_IOS_XRMplsTeCfg_SrPrepend = 3
)


// E_Cisco_IOS_XRSnmpAgentCfg_GroupSnmpVersion is a derived int64 type which is used to represent
// the enumerated node Cisco_IOS_XRSnmpAgentCfg_GroupSnmpVersion. An additional value named
// Cisco_IOS_XRSnmpAgentCfg_GroupSnmpVersion_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Cisco_IOS_XRSnmpAgentCfg_GroupSnmpVersion int64

// IsYANGGoEnum ensures that Cisco_IOS_XRSnmpAgentCfg_GroupSnmpVersion implements the yang.GoEnum
// interface. This ensures that Cisco_IOS_XRSnmpAgentCfg_GroupSnmpVersion can be identified as a
// mapped type for a YANG enumeration.
func (E_Cisco_IOS_XRSnmpAgentCfg_GroupSnmpVersion) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Cisco_IOS_XRSnmpAgentCfg_GroupSnmpVersion.
func (E_Cisco_IOS_XRSnmpAgentCfg_GroupSnmpVersion) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_Cisco_IOS_XRSnmpAgentCfg_GroupSnmpVersion.
func (e E_Cisco_IOS_XRSnmpAgentCfg_GroupSnmpVersion) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Cisco_IOS_XRSnmpAgentCfg_GroupSnmpVersion")
}

const (
	// Cisco_IOS_XRSnmpAgentCfg_GroupSnmpVersion_UNSET corresponds to the value UNSET of Cisco_IOS_XRSnmpAgentCfg_GroupSnmpVersion
	Cisco_IOS_XRSnmpAgentCfg_GroupSnmpVersion_UNSET E_Cisco_IOS_XRSnmpAgentCfg_GroupSnmpVersion = 0
	// Cisco_IOS_XRSnmpAgentCfg_GroupSnmpVersion_v1 corresponds to the value v1 of Cisco_IOS_XRSnmpAgentCfg_GroupSnmpVersion
	Cisco_IOS_XRSnmpAgentCfg_GroupSnmpVersion_v1 E_Cisco_IOS_XRSnmpAgentCfg_GroupSnmpVersion = 1
	// Cisco_IOS_XRSnmpAgentCfg_GroupSnmpVersion_v2c corresponds to the value v2c of Cisco_IOS_XRSnmpAgentCfg_GroupSnmpVersion
	Cisco_IOS_XRSnmpAgentCfg_GroupSnmpVersion_v2c E_Cisco_IOS_XRSnmpAgentCfg_GroupSnmpVersion = 2
	// Cisco_IOS_XRSnmpAgentCfg_GroupSnmpVersion_v3 corresponds to the value v3 of Cisco_IOS_XRSnmpAgentCfg_GroupSnmpVersion
	Cisco_IOS_XRSnmpAgentCfg_GroupSnmpVersion_v3 E_Cisco_IOS_XRSnmpAgentCfg_GroupSnmpVersion = 3
)


// E_Cisco_IOS_XRSnmpAgentCfg_SnmpAccessLevel is a derived int64 type which is used to represent
// the enumerated node Cisco_IOS_XRSnmpAgentCfg_SnmpAccessLevel. An additional value named
// Cisco_IOS_XRSnmpAgentCfg_SnmpAccessLevel_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Cisco_IOS_XRSnmpAgentCfg_SnmpAccessLevel int64

// IsYANGGoEnum ensures that Cisco_IOS_XRSnmpAgentCfg_SnmpAccessLevel implements the yang.GoEnum
// interface. This ensures that Cisco_IOS_XRSnmpAgentCfg_SnmpAccessLevel can be identified as a
// mapped type for a YANG enumeration.
func (E_Cisco_IOS_XRSnmpAgentCfg_SnmpAccessLevel) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Cisco_IOS_XRSnmpAgentCfg_SnmpAccessLevel.
func (E_Cisco_IOS_XRSnmpAgentCfg_SnmpAccessLevel) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_Cisco_IOS_XRSnmpAgentCfg_SnmpAccessLevel.
func (e E_Cisco_IOS_XRSnmpAgentCfg_SnmpAccessLevel) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Cisco_IOS_XRSnmpAgentCfg_SnmpAccessLevel")
}

const (
	// Cisco_IOS_XRSnmpAgentCfg_SnmpAccessLevel_UNSET corresponds to the value UNSET of Cisco_IOS_XRSnmpAgentCfg_SnmpAccessLevel
	Cisco_IOS_XRSnmpAgentCfg_SnmpAccessLevel_UNSET E_Cisco_IOS_XRSnmpAgentCfg_SnmpAccessLevel = 0
	// Cisco_IOS_XRSnmpAgentCfg_SnmpAccessLevel_read_only corresponds to the value read_only of Cisco_IOS_XRSnmpAgentCfg_SnmpAccessLevel
	Cisco_IOS_XRSnmpAgentCfg_SnmpAccessLevel_read_only E_Cisco_IOS_XRSnmpAgentCfg_SnmpAccessLevel = 1
	// Cisco_IOS_XRSnmpAgentCfg_SnmpAccessLevel_read_write corresponds to the value read_write of Cisco_IOS_XRSnmpAgentCfg_SnmpAccessLevel
	Cisco_IOS_XRSnmpAgentCfg_SnmpAccessLevel_read_write E_Cisco_IOS_XRSnmpAgentCfg_SnmpAccessLevel = 2
)


// E_Cisco_IOS_XRSnmpAgentCfg_SnmpBulkstatFileFormat is a derived int64 type which is used to represent
// the enumerated node Cisco_IOS_XRSnmpAgentCfg_SnmpBulkstatFileFormat. An additional value named
// Cisco_IOS_XRSnmpAgentCfg_SnmpBulkstatFileFormat_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Cisco_IOS_XRSnmpAgentCfg_SnmpBulkstatFileFormat int64

// IsYANGGoEnum ensures that Cisco_IOS_XRSnmpAgentCfg_SnmpBulkstatFileFormat implements the yang.GoEnum
// interface. This ensures that Cisco_IOS_XRSnmpAgentCfg_SnmpBulkstatFileFormat can be identified as a
// mapped type for a YANG enumeration.
func (E_Cisco_IOS_XRSnmpAgentCfg_SnmpBulkstatFileFormat) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Cisco_IOS_XRSnmpAgentCfg_SnmpBulkstatFileFormat.
func (E_Cisco_IOS_XRSnmpAgentCfg_SnmpBulkstatFileFormat) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_Cisco_IOS_XRSnmpAgentCfg_SnmpBulkstatFileFormat.
func (e E_Cisco_IOS_XRSnmpAgentCfg_SnmpBulkstatFileFormat) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Cisco_IOS_XRSnmpAgentCfg_SnmpBulkstatFileFormat")
}

const (
	// Cisco_IOS_XRSnmpAgentCfg_SnmpBulkstatFileFormat_UNSET corresponds to the value UNSET of Cisco_IOS_XRSnmpAgentCfg_SnmpBulkstatFileFormat
	Cisco_IOS_XRSnmpAgentCfg_SnmpBulkstatFileFormat_UNSET E_Cisco_IOS_XRSnmpAgentCfg_SnmpBulkstatFileFormat = 0
	// Cisco_IOS_XRSnmpAgentCfg_SnmpBulkstatFileFormat_schema_ascii corresponds to the value schema_ascii of Cisco_IOS_XRSnmpAgentCfg_SnmpBulkstatFileFormat
	Cisco_IOS_XRSnmpAgentCfg_SnmpBulkstatFileFormat_schema_ascii E_Cisco_IOS_XRSnmpAgentCfg_SnmpBulkstatFileFormat = 1
	// Cisco_IOS_XRSnmpAgentCfg_SnmpBulkstatFileFormat_bulk_ascii corresponds to the value bulk_ascii of Cisco_IOS_XRSnmpAgentCfg_SnmpBulkstatFileFormat
	Cisco_IOS_XRSnmpAgentCfg_SnmpBulkstatFileFormat_bulk_ascii E_Cisco_IOS_XRSnmpAgentCfg_SnmpBulkstatFileFormat = 2
	// Cisco_IOS_XRSnmpAgentCfg_SnmpBulkstatFileFormat_bulk_binary corresponds to the value bulk_binary of Cisco_IOS_XRSnmpAgentCfg_SnmpBulkstatFileFormat
	Cisco_IOS_XRSnmpAgentCfg_SnmpBulkstatFileFormat_bulk_binary E_Cisco_IOS_XRSnmpAgentCfg_SnmpBulkstatFileFormat = 3
)


// E_Cisco_IOS_XRSnmpAgentCfg_SnmpBulkstatSchema is a derived int64 type which is used to represent
// the enumerated node Cisco_IOS_XRSnmpAgentCfg_SnmpBulkstatSchema. An additional value named
// Cisco_IOS_XRSnmpAgentCfg_SnmpBulkstatSchema_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Cisco_IOS_XRSnmpAgentCfg_SnmpBulkstatSchema int64

// IsYANGGoEnum ensures that Cisco_IOS_XRSnmpAgentCfg_SnmpBulkstatSchema implements the yang.GoEnum
// interface. This ensures that Cisco_IOS_XRSnmpAgentCfg_SnmpBulkstatSchema can be identified as a
// mapped type for a YANG enumeration.
func (E_Cisco_IOS_XRSnmpAgentCfg_SnmpBulkstatSchema) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Cisco_IOS_XRSnmpAgentCfg_SnmpBulkstatSchema.
func (E_Cisco_IOS_XRSnmpAgentCfg_SnmpBulkstatSchema) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_Cisco_IOS_XRSnmpAgentCfg_SnmpBulkstatSchema.
func (e E_Cisco_IOS_XRSnmpAgentCfg_SnmpBulkstatSchema) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Cisco_IOS_XRSnmpAgentCfg_SnmpBulkstatSchema")
}

const (
	// Cisco_IOS_XRSnmpAgentCfg_SnmpBulkstatSchema_UNSET corresponds to the value UNSET of Cisco_IOS_XRSnmpAgentCfg_SnmpBulkstatSchema
	Cisco_IOS_XRSnmpAgentCfg_SnmpBulkstatSchema_UNSET E_Cisco_IOS_XRSnmpAgentCfg_SnmpBulkstatSchema = 0
	// Cisco_IOS_XRSnmpAgentCfg_SnmpBulkstatSchema_exact_interface corresponds to the value exact_interface of Cisco_IOS_XRSnmpAgentCfg_SnmpBulkstatSchema
	Cisco_IOS_XRSnmpAgentCfg_SnmpBulkstatSchema_exact_interface E_Cisco_IOS_XRSnmpAgentCfg_SnmpBulkstatSchema = 1
	// Cisco_IOS_XRSnmpAgentCfg_SnmpBulkstatSchema_exact_oid corresponds to the value exact_oid of Cisco_IOS_XRSnmpAgentCfg_SnmpBulkstatSchema
	Cisco_IOS_XRSnmpAgentCfg_SnmpBulkstatSchema_exact_oid E_Cisco_IOS_XRSnmpAgentCfg_SnmpBulkstatSchema = 2
	// Cisco_IOS_XRSnmpAgentCfg_SnmpBulkstatSchema_wild_interface corresponds to the value wild_interface of Cisco_IOS_XRSnmpAgentCfg_SnmpBulkstatSchema
	Cisco_IOS_XRSnmpAgentCfg_SnmpBulkstatSchema_wild_interface E_Cisco_IOS_XRSnmpAgentCfg_SnmpBulkstatSchema = 3
	// Cisco_IOS_XRSnmpAgentCfg_SnmpBulkstatSchema_wild_oid corresponds to the value wild_oid of Cisco_IOS_XRSnmpAgentCfg_SnmpBulkstatSchema
	Cisco_IOS_XRSnmpAgentCfg_SnmpBulkstatSchema_wild_oid E_Cisco_IOS_XRSnmpAgentCfg_SnmpBulkstatSchema = 4
	// Cisco_IOS_XRSnmpAgentCfg_SnmpBulkstatSchema_range_oid corresponds to the value range_oid of Cisco_IOS_XRSnmpAgentCfg_SnmpBulkstatSchema
	Cisco_IOS_XRSnmpAgentCfg_SnmpBulkstatSchema_range_oid E_Cisco_IOS_XRSnmpAgentCfg_SnmpBulkstatSchema = 5
	// Cisco_IOS_XRSnmpAgentCfg_SnmpBulkstatSchema_repeat_oid corresponds to the value repeat_oid of Cisco_IOS_XRSnmpAgentCfg_SnmpBulkstatSchema
	Cisco_IOS_XRSnmpAgentCfg_SnmpBulkstatSchema_repeat_oid E_Cisco_IOS_XRSnmpAgentCfg_SnmpBulkstatSchema = 6
)


// E_Cisco_IOS_XRSnmpAgentCfg_SnmpContext is a derived int64 type which is used to represent
// the enumerated node Cisco_IOS_XRSnmpAgentCfg_SnmpContext. An additional value named
// Cisco_IOS_XRSnmpAgentCfg_SnmpContext_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Cisco_IOS_XRSnmpAgentCfg_SnmpContext int64

// IsYANGGoEnum ensures that Cisco_IOS_XRSnmpAgentCfg_SnmpContext implements the yang.GoEnum
// interface. This ensures that Cisco_IOS_XRSnmpAgentCfg_SnmpContext can be identified as a
// mapped type for a YANG enumeration.
func (E_Cisco_IOS_XRSnmpAgentCfg_SnmpContext) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Cisco_IOS_XRSnmpAgentCfg_SnmpContext.
func (E_Cisco_IOS_XRSnmpAgentCfg_SnmpContext) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_Cisco_IOS_XRSnmpAgentCfg_SnmpContext.
func (e E_Cisco_IOS_XRSnmpAgentCfg_SnmpContext) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Cisco_IOS_XRSnmpAgentCfg_SnmpContext")
}

const (
	// Cisco_IOS_XRSnmpAgentCfg_SnmpContext_UNSET corresponds to the value UNSET of Cisco_IOS_XRSnmpAgentCfg_SnmpContext
	Cisco_IOS_XRSnmpAgentCfg_SnmpContext_UNSET E_Cisco_IOS_XRSnmpAgentCfg_SnmpContext = 0
	// Cisco_IOS_XRSnmpAgentCfg_SnmpContext_vrf corresponds to the value vrf of Cisco_IOS_XRSnmpAgentCfg_SnmpContext
	Cisco_IOS_XRSnmpAgentCfg_SnmpContext_vrf E_Cisco_IOS_XRSnmpAgentCfg_SnmpContext = 1
	// Cisco_IOS_XRSnmpAgentCfg_SnmpContext_bridge corresponds to the value bridge of Cisco_IOS_XRSnmpAgentCfg_SnmpContext
	Cisco_IOS_XRSnmpAgentCfg_SnmpContext_bridge E_Cisco_IOS_XRSnmpAgentCfg_SnmpContext = 2
	// Cisco_IOS_XRSnmpAgentCfg_SnmpContext_ospf corresponds to the value ospf of Cisco_IOS_XRSnmpAgentCfg_SnmpContext
	Cisco_IOS_XRSnmpAgentCfg_SnmpContext_ospf E_Cisco_IOS_XRSnmpAgentCfg_SnmpContext = 3
	// Cisco_IOS_XRSnmpAgentCfg_SnmpContext_ospfv3 corresponds to the value ospfv3 of Cisco_IOS_XRSnmpAgentCfg_SnmpContext
	Cisco_IOS_XRSnmpAgentCfg_SnmpContext_ospfv3 E_Cisco_IOS_XRSnmpAgentCfg_SnmpContext = 4
)


// E_Cisco_IOS_XRSnmpAgentCfg_SnmpHashAlgorithm is a derived int64 type which is used to represent
// the enumerated node Cisco_IOS_XRSnmpAgentCfg_SnmpHashAlgorithm. An additional value named
// Cisco_IOS_XRSnmpAgentCfg_SnmpHashAlgorithm_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Cisco_IOS_XRSnmpAgentCfg_SnmpHashAlgorithm int64

// IsYANGGoEnum ensures that Cisco_IOS_XRSnmpAgentCfg_SnmpHashAlgorithm implements the yang.GoEnum
// interface. This ensures that Cisco_IOS_XRSnmpAgentCfg_SnmpHashAlgorithm can be identified as a
// mapped type for a YANG enumeration.
func (E_Cisco_IOS_XRSnmpAgentCfg_SnmpHashAlgorithm) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Cisco_IOS_XRSnmpAgentCfg_SnmpHashAlgorithm.
func (E_Cisco_IOS_XRSnmpAgentCfg_SnmpHashAlgorithm) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_Cisco_IOS_XRSnmpAgentCfg_SnmpHashAlgorithm.
func (e E_Cisco_IOS_XRSnmpAgentCfg_SnmpHashAlgorithm) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Cisco_IOS_XRSnmpAgentCfg_SnmpHashAlgorithm")
}

const (
	// Cisco_IOS_XRSnmpAgentCfg_SnmpHashAlgorithm_UNSET corresponds to the value UNSET of Cisco_IOS_XRSnmpAgentCfg_SnmpHashAlgorithm
	Cisco_IOS_XRSnmpAgentCfg_SnmpHashAlgorithm_UNSET E_Cisco_IOS_XRSnmpAgentCfg_SnmpHashAlgorithm = 0
	// Cisco_IOS_XRSnmpAgentCfg_SnmpHashAlgorithm_none corresponds to the value none of Cisco_IOS_XRSnmpAgentCfg_SnmpHashAlgorithm
	Cisco_IOS_XRSnmpAgentCfg_SnmpHashAlgorithm_none E_Cisco_IOS_XRSnmpAgentCfg_SnmpHashAlgorithm = 1
	// Cisco_IOS_XRSnmpAgentCfg_SnmpHashAlgorithm_md5 corresponds to the value md5 of Cisco_IOS_XRSnmpAgentCfg_SnmpHashAlgorithm
	Cisco_IOS_XRSnmpAgentCfg_SnmpHashAlgorithm_md5 E_Cisco_IOS_XRSnmpAgentCfg_SnmpHashAlgorithm = 2
	// Cisco_IOS_XRSnmpAgentCfg_SnmpHashAlgorithm_sha corresponds to the value sha of Cisco_IOS_XRSnmpAgentCfg_SnmpHashAlgorithm
	Cisco_IOS_XRSnmpAgentCfg_SnmpHashAlgorithm_sha E_Cisco_IOS_XRSnmpAgentCfg_SnmpHashAlgorithm = 3
)


// E_Cisco_IOS_XRSnmpAgentCfg_SnmpMibViewInclusion is a derived int64 type which is used to represent
// the enumerated node Cisco_IOS_XRSnmpAgentCfg_SnmpMibViewInclusion. An additional value named
// Cisco_IOS_XRSnmpAgentCfg_SnmpMibViewInclusion_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Cisco_IOS_XRSnmpAgentCfg_SnmpMibViewInclusion int64

// IsYANGGoEnum ensures that Cisco_IOS_XRSnmpAgentCfg_SnmpMibViewInclusion implements the yang.GoEnum
// interface. This ensures that Cisco_IOS_XRSnmpAgentCfg_SnmpMibViewInclusion can be identified as a
// mapped type for a YANG enumeration.
func (E_Cisco_IOS_XRSnmpAgentCfg_SnmpMibViewInclusion) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Cisco_IOS_XRSnmpAgentCfg_SnmpMibViewInclusion.
func (E_Cisco_IOS_XRSnmpAgentCfg_SnmpMibViewInclusion) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_Cisco_IOS_XRSnmpAgentCfg_SnmpMibViewInclusion.
func (e E_Cisco_IOS_XRSnmpAgentCfg_SnmpMibViewInclusion) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Cisco_IOS_XRSnmpAgentCfg_SnmpMibViewInclusion")
}

const (
	// Cisco_IOS_XRSnmpAgentCfg_SnmpMibViewInclusion_UNSET corresponds to the value UNSET of Cisco_IOS_XRSnmpAgentCfg_SnmpMibViewInclusion
	Cisco_IOS_XRSnmpAgentCfg_SnmpMibViewInclusion_UNSET E_Cisco_IOS_XRSnmpAgentCfg_SnmpMibViewInclusion = 0
	// Cisco_IOS_XRSnmpAgentCfg_SnmpMibViewInclusion_included corresponds to the value included of Cisco_IOS_XRSnmpAgentCfg_SnmpMibViewInclusion
	Cisco_IOS_XRSnmpAgentCfg_SnmpMibViewInclusion_included E_Cisco_IOS_XRSnmpAgentCfg_SnmpMibViewInclusion = 1
	// Cisco_IOS_XRSnmpAgentCfg_SnmpMibViewInclusion_excluded corresponds to the value excluded of Cisco_IOS_XRSnmpAgentCfg_SnmpMibViewInclusion
	Cisco_IOS_XRSnmpAgentCfg_SnmpMibViewInclusion_excluded E_Cisco_IOS_XRSnmpAgentCfg_SnmpMibViewInclusion = 2
)


// E_Cisco_IOS_XRSnmpAgentCfg_SnmpOwnerAccess is a derived int64 type which is used to represent
// the enumerated node Cisco_IOS_XRSnmpAgentCfg_SnmpOwnerAccess. An additional value named
// Cisco_IOS_XRSnmpAgentCfg_SnmpOwnerAccess_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Cisco_IOS_XRSnmpAgentCfg_SnmpOwnerAccess int64

// IsYANGGoEnum ensures that Cisco_IOS_XRSnmpAgentCfg_SnmpOwnerAccess implements the yang.GoEnum
// interface. This ensures that Cisco_IOS_XRSnmpAgentCfg_SnmpOwnerAccess can be identified as a
// mapped type for a YANG enumeration.
func (E_Cisco_IOS_XRSnmpAgentCfg_SnmpOwnerAccess) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Cisco_IOS_XRSnmpAgentCfg_SnmpOwnerAccess.
func (E_Cisco_IOS_XRSnmpAgentCfg_SnmpOwnerAccess) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_Cisco_IOS_XRSnmpAgentCfg_SnmpOwnerAccess.
func (e E_Cisco_IOS_XRSnmpAgentCfg_SnmpOwnerAccess) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Cisco_IOS_XRSnmpAgentCfg_SnmpOwnerAccess")
}

const (
	// Cisco_IOS_XRSnmpAgentCfg_SnmpOwnerAccess_UNSET corresponds to the value UNSET of Cisco_IOS_XRSnmpAgentCfg_SnmpOwnerAccess
	Cisco_IOS_XRSnmpAgentCfg_SnmpOwnerAccess_UNSET E_Cisco_IOS_XRSnmpAgentCfg_SnmpOwnerAccess = 0
	// Cisco_IOS_XRSnmpAgentCfg_SnmpOwnerAccess_sdr_owner corresponds to the value sdr_owner of Cisco_IOS_XRSnmpAgentCfg_SnmpOwnerAccess
	Cisco_IOS_XRSnmpAgentCfg_SnmpOwnerAccess_sdr_owner E_Cisco_IOS_XRSnmpAgentCfg_SnmpOwnerAccess = 1
	// Cisco_IOS_XRSnmpAgentCfg_SnmpOwnerAccess_system_owner corresponds to the value system_owner of Cisco_IOS_XRSnmpAgentCfg_SnmpOwnerAccess
	Cisco_IOS_XRSnmpAgentCfg_SnmpOwnerAccess_system_owner E_Cisco_IOS_XRSnmpAgentCfg_SnmpOwnerAccess = 2
)


// E_Cisco_IOS_XRSnmpAgentCfg_SnmpPrivAlgorithm is a derived int64 type which is used to represent
// the enumerated node Cisco_IOS_XRSnmpAgentCfg_SnmpPrivAlgorithm. An additional value named
// Cisco_IOS_XRSnmpAgentCfg_SnmpPrivAlgorithm_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Cisco_IOS_XRSnmpAgentCfg_SnmpPrivAlgorithm int64

// IsYANGGoEnum ensures that Cisco_IOS_XRSnmpAgentCfg_SnmpPrivAlgorithm implements the yang.GoEnum
// interface. This ensures that Cisco_IOS_XRSnmpAgentCfg_SnmpPrivAlgorithm can be identified as a
// mapped type for a YANG enumeration.
func (E_Cisco_IOS_XRSnmpAgentCfg_SnmpPrivAlgorithm) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Cisco_IOS_XRSnmpAgentCfg_SnmpPrivAlgorithm.
func (E_Cisco_IOS_XRSnmpAgentCfg_SnmpPrivAlgorithm) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_Cisco_IOS_XRSnmpAgentCfg_SnmpPrivAlgorithm.
func (e E_Cisco_IOS_XRSnmpAgentCfg_SnmpPrivAlgorithm) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Cisco_IOS_XRSnmpAgentCfg_SnmpPrivAlgorithm")
}

const (
	// Cisco_IOS_XRSnmpAgentCfg_SnmpPrivAlgorithm_UNSET corresponds to the value UNSET of Cisco_IOS_XRSnmpAgentCfg_SnmpPrivAlgorithm
	Cisco_IOS_XRSnmpAgentCfg_SnmpPrivAlgorithm_UNSET E_Cisco_IOS_XRSnmpAgentCfg_SnmpPrivAlgorithm = 0
	// Cisco_IOS_XRSnmpAgentCfg_SnmpPrivAlgorithm_none corresponds to the value none of Cisco_IOS_XRSnmpAgentCfg_SnmpPrivAlgorithm
	Cisco_IOS_XRSnmpAgentCfg_SnmpPrivAlgorithm_none E_Cisco_IOS_XRSnmpAgentCfg_SnmpPrivAlgorithm = 1
	// Cisco_IOS_XRSnmpAgentCfg_SnmpPrivAlgorithm_des corresponds to the value des of Cisco_IOS_XRSnmpAgentCfg_SnmpPrivAlgorithm
	Cisco_IOS_XRSnmpAgentCfg_SnmpPrivAlgorithm_des E_Cisco_IOS_XRSnmpAgentCfg_SnmpPrivAlgorithm = 2
	// Cisco_IOS_XRSnmpAgentCfg_SnmpPrivAlgorithm_3des corresponds to the value 3des of Cisco_IOS_XRSnmpAgentCfg_SnmpPrivAlgorithm
	Cisco_IOS_XRSnmpAgentCfg_SnmpPrivAlgorithm_3des E_Cisco_IOS_XRSnmpAgentCfg_SnmpPrivAlgorithm = 3
	// Cisco_IOS_XRSnmpAgentCfg_SnmpPrivAlgorithm_aes128 corresponds to the value aes128 of Cisco_IOS_XRSnmpAgentCfg_SnmpPrivAlgorithm
	Cisco_IOS_XRSnmpAgentCfg_SnmpPrivAlgorithm_aes128 E_Cisco_IOS_XRSnmpAgentCfg_SnmpPrivAlgorithm = 4
	// Cisco_IOS_XRSnmpAgentCfg_SnmpPrivAlgorithm_aes192 corresponds to the value aes192 of Cisco_IOS_XRSnmpAgentCfg_SnmpPrivAlgorithm
	Cisco_IOS_XRSnmpAgentCfg_SnmpPrivAlgorithm_aes192 E_Cisco_IOS_XRSnmpAgentCfg_SnmpPrivAlgorithm = 5
	// Cisco_IOS_XRSnmpAgentCfg_SnmpPrivAlgorithm_aes256 corresponds to the value aes256 of Cisco_IOS_XRSnmpAgentCfg_SnmpPrivAlgorithm
	Cisco_IOS_XRSnmpAgentCfg_SnmpPrivAlgorithm_aes256 E_Cisco_IOS_XRSnmpAgentCfg_SnmpPrivAlgorithm = 6
)


// E_Cisco_IOS_XRSnmpAgentCfg_SnmpSecurityModel is a derived int64 type which is used to represent
// the enumerated node Cisco_IOS_XRSnmpAgentCfg_SnmpSecurityModel. An additional value named
// Cisco_IOS_XRSnmpAgentCfg_SnmpSecurityModel_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Cisco_IOS_XRSnmpAgentCfg_SnmpSecurityModel int64

// IsYANGGoEnum ensures that Cisco_IOS_XRSnmpAgentCfg_SnmpSecurityModel implements the yang.GoEnum
// interface. This ensures that Cisco_IOS_XRSnmpAgentCfg_SnmpSecurityModel can be identified as a
// mapped type for a YANG enumeration.
func (E_Cisco_IOS_XRSnmpAgentCfg_SnmpSecurityModel) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Cisco_IOS_XRSnmpAgentCfg_SnmpSecurityModel.
func (E_Cisco_IOS_XRSnmpAgentCfg_SnmpSecurityModel) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_Cisco_IOS_XRSnmpAgentCfg_SnmpSecurityModel.
func (e E_Cisco_IOS_XRSnmpAgentCfg_SnmpSecurityModel) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Cisco_IOS_XRSnmpAgentCfg_SnmpSecurityModel")
}

const (
	// Cisco_IOS_XRSnmpAgentCfg_SnmpSecurityModel_UNSET corresponds to the value UNSET of Cisco_IOS_XRSnmpAgentCfg_SnmpSecurityModel
	Cisco_IOS_XRSnmpAgentCfg_SnmpSecurityModel_UNSET E_Cisco_IOS_XRSnmpAgentCfg_SnmpSecurityModel = 0
	// Cisco_IOS_XRSnmpAgentCfg_SnmpSecurityModel_no_authentication corresponds to the value no_authentication of Cisco_IOS_XRSnmpAgentCfg_SnmpSecurityModel
	Cisco_IOS_XRSnmpAgentCfg_SnmpSecurityModel_no_authentication E_Cisco_IOS_XRSnmpAgentCfg_SnmpSecurityModel = 1
	// Cisco_IOS_XRSnmpAgentCfg_SnmpSecurityModel_authentication corresponds to the value authentication of Cisco_IOS_XRSnmpAgentCfg_SnmpSecurityModel
	Cisco_IOS_XRSnmpAgentCfg_SnmpSecurityModel_authentication E_Cisco_IOS_XRSnmpAgentCfg_SnmpSecurityModel = 2
	// Cisco_IOS_XRSnmpAgentCfg_SnmpSecurityModel_privacy corresponds to the value privacy of Cisco_IOS_XRSnmpAgentCfg_SnmpSecurityModel
	Cisco_IOS_XRSnmpAgentCfg_SnmpSecurityModel_privacy E_Cisco_IOS_XRSnmpAgentCfg_SnmpSecurityModel = 3
)


// E_Cisco_IOS_XRSnmpAgentCfg_SnmpTos is a derived int64 type which is used to represent
// the enumerated node Cisco_IOS_XRSnmpAgentCfg_SnmpTos. An additional value named
// Cisco_IOS_XRSnmpAgentCfg_SnmpTos_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Cisco_IOS_XRSnmpAgentCfg_SnmpTos int64

// IsYANGGoEnum ensures that Cisco_IOS_XRSnmpAgentCfg_SnmpTos implements the yang.GoEnum
// interface. This ensures that Cisco_IOS_XRSnmpAgentCfg_SnmpTos can be identified as a
// mapped type for a YANG enumeration.
func (E_Cisco_IOS_XRSnmpAgentCfg_SnmpTos) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Cisco_IOS_XRSnmpAgentCfg_SnmpTos.
func (E_Cisco_IOS_XRSnmpAgentCfg_SnmpTos) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_Cisco_IOS_XRSnmpAgentCfg_SnmpTos.
func (e E_Cisco_IOS_XRSnmpAgentCfg_SnmpTos) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Cisco_IOS_XRSnmpAgentCfg_SnmpTos")
}

const (
	// Cisco_IOS_XRSnmpAgentCfg_SnmpTos_UNSET corresponds to the value UNSET of Cisco_IOS_XRSnmpAgentCfg_SnmpTos
	Cisco_IOS_XRSnmpAgentCfg_SnmpTos_UNSET E_Cisco_IOS_XRSnmpAgentCfg_SnmpTos = 0
	// Cisco_IOS_XRSnmpAgentCfg_SnmpTos_precedence corresponds to the value precedence of Cisco_IOS_XRSnmpAgentCfg_SnmpTos
	Cisco_IOS_XRSnmpAgentCfg_SnmpTos_precedence E_Cisco_IOS_XRSnmpAgentCfg_SnmpTos = 1
	// Cisco_IOS_XRSnmpAgentCfg_SnmpTos_dscp corresponds to the value dscp of Cisco_IOS_XRSnmpAgentCfg_SnmpTos
	Cisco_IOS_XRSnmpAgentCfg_SnmpTos_dscp E_Cisco_IOS_XRSnmpAgentCfg_SnmpTos = 2
)


// E_Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Dscp is a derived int64 type which is used to represent
// the enumerated node Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Dscp. An additional value named
// Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Dscp_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Dscp int64

// IsYANGGoEnum ensures that Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Dscp implements the yang.GoEnum
// interface. This ensures that Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Dscp can be identified as a
// mapped type for a YANG enumeration.
func (E_Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Dscp) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Dscp.
func (E_Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Dscp) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Dscp.
func (e E_Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Dscp) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Dscp")
}

const (
	// Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Dscp_UNSET corresponds to the value UNSET of Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Dscp
	Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Dscp_UNSET E_Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Dscp = 0
	// Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Dscp_default corresponds to the value default of Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Dscp
	Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Dscp_default E_Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Dscp = 1
	// Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Dscp_cs1 corresponds to the value cs1 of Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Dscp
	Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Dscp_cs1 E_Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Dscp = 2
	// Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Dscp_af11 corresponds to the value af11 of Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Dscp
	Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Dscp_af11 E_Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Dscp = 3
	// Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Dscp_af12 corresponds to the value af12 of Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Dscp
	Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Dscp_af12 E_Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Dscp = 4
	// Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Dscp_af13 corresponds to the value af13 of Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Dscp
	Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Dscp_af13 E_Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Dscp = 5
	// Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Dscp_cs2 corresponds to the value cs2 of Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Dscp
	Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Dscp_cs2 E_Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Dscp = 6
	// Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Dscp_af21 corresponds to the value af21 of Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Dscp
	Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Dscp_af21 E_Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Dscp = 7
	// Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Dscp_af22 corresponds to the value af22 of Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Dscp
	Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Dscp_af22 E_Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Dscp = 8
	// Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Dscp_af23 corresponds to the value af23 of Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Dscp
	Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Dscp_af23 E_Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Dscp = 9
	// Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Dscp_cs3 corresponds to the value cs3 of Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Dscp
	Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Dscp_cs3 E_Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Dscp = 10
	// Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Dscp_af31 corresponds to the value af31 of Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Dscp
	Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Dscp_af31 E_Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Dscp = 11
	// Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Dscp_af32 corresponds to the value af32 of Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Dscp
	Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Dscp_af32 E_Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Dscp = 12
	// Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Dscp_af33 corresponds to the value af33 of Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Dscp
	Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Dscp_af33 E_Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Dscp = 13
	// Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Dscp_cs4 corresponds to the value cs4 of Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Dscp
	Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Dscp_cs4 E_Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Dscp = 14
	// Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Dscp_af41 corresponds to the value af41 of Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Dscp
	Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Dscp_af41 E_Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Dscp = 15
	// Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Dscp_af42 corresponds to the value af42 of Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Dscp
	Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Dscp_af42 E_Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Dscp = 16
	// Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Dscp_af43 corresponds to the value af43 of Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Dscp
	Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Dscp_af43 E_Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Dscp = 17
	// Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Dscp_cs5 corresponds to the value cs5 of Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Dscp
	Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Dscp_cs5 E_Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Dscp = 18
	// Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Dscp_ef corresponds to the value ef of Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Dscp
	Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Dscp_ef E_Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Dscp = 19
	// Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Dscp_cs6 corresponds to the value cs6 of Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Dscp
	Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Dscp_cs6 E_Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Dscp = 20
	// Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Dscp_cs7 corresponds to the value cs7 of Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Dscp
	Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Dscp_cs7 E_Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Dscp = 21
)


// E_Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Precedence is a derived int64 type which is used to represent
// the enumerated node Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Precedence. An additional value named
// Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Precedence_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Precedence int64

// IsYANGGoEnum ensures that Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Precedence implements the yang.GoEnum
// interface. This ensures that Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Precedence can be identified as a
// mapped type for a YANG enumeration.
func (E_Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Precedence) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Precedence.
func (E_Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Precedence) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Precedence.
func (e E_Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Precedence) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Precedence")
}

const (
	// Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Precedence_UNSET corresponds to the value UNSET of Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Precedence
	Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Precedence_UNSET E_Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Precedence = 0
	// Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Precedence_routine corresponds to the value routine of Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Precedence
	Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Precedence_routine E_Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Precedence = 1
	// Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Precedence_priority corresponds to the value priority of Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Precedence
	Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Precedence_priority E_Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Precedence = 2
	// Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Precedence_immediate corresponds to the value immediate of Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Precedence
	Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Precedence_immediate E_Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Precedence = 3
	// Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Precedence_flash corresponds to the value flash of Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Precedence
	Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Precedence_flash E_Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Precedence = 4
	// Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Precedence_flash_override corresponds to the value flash_override of Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Precedence
	Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Precedence_flash_override E_Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Precedence = 5
	// Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Precedence_critical corresponds to the value critical of Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Precedence
	Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Precedence_critical E_Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Precedence = 6
	// Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Precedence_internet corresponds to the value internet of Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Precedence
	Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Precedence_internet E_Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Precedence = 7
	// Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Precedence_network corresponds to the value network of Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Precedence
	Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Precedence_network E_Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Precedence = 8
)


// E_Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Dscp is a derived int64 type which is used to represent
// the enumerated node Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Dscp. An additional value named
// Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Dscp_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Dscp int64

// IsYANGGoEnum ensures that Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Dscp implements the yang.GoEnum
// interface. This ensures that Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Dscp can be identified as a
// mapped type for a YANG enumeration.
func (E_Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Dscp) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Dscp.
func (E_Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Dscp) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Dscp.
func (e E_Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Dscp) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Dscp")
}

const (
	// Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Dscp_UNSET corresponds to the value UNSET of Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Dscp
	Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Dscp_UNSET E_Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Dscp = 0
	// Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Dscp_default corresponds to the value default of Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Dscp
	Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Dscp_default E_Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Dscp = 1
	// Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Dscp_cs1 corresponds to the value cs1 of Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Dscp
	Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Dscp_cs1 E_Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Dscp = 2
	// Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Dscp_af11 corresponds to the value af11 of Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Dscp
	Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Dscp_af11 E_Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Dscp = 3
	// Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Dscp_af12 corresponds to the value af12 of Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Dscp
	Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Dscp_af12 E_Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Dscp = 4
	// Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Dscp_af13 corresponds to the value af13 of Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Dscp
	Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Dscp_af13 E_Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Dscp = 5
	// Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Dscp_cs2 corresponds to the value cs2 of Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Dscp
	Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Dscp_cs2 E_Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Dscp = 6
	// Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Dscp_af21 corresponds to the value af21 of Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Dscp
	Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Dscp_af21 E_Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Dscp = 7
	// Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Dscp_af22 corresponds to the value af22 of Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Dscp
	Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Dscp_af22 E_Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Dscp = 8
	// Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Dscp_af23 corresponds to the value af23 of Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Dscp
	Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Dscp_af23 E_Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Dscp = 9
	// Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Dscp_cs3 corresponds to the value cs3 of Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Dscp
	Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Dscp_cs3 E_Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Dscp = 10
	// Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Dscp_af31 corresponds to the value af31 of Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Dscp
	Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Dscp_af31 E_Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Dscp = 11
	// Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Dscp_af32 corresponds to the value af32 of Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Dscp
	Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Dscp_af32 E_Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Dscp = 12
	// Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Dscp_af33 corresponds to the value af33 of Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Dscp
	Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Dscp_af33 E_Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Dscp = 13
	// Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Dscp_cs4 corresponds to the value cs4 of Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Dscp
	Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Dscp_cs4 E_Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Dscp = 14
	// Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Dscp_af41 corresponds to the value af41 of Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Dscp
	Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Dscp_af41 E_Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Dscp = 15
	// Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Dscp_af42 corresponds to the value af42 of Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Dscp
	Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Dscp_af42 E_Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Dscp = 16
	// Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Dscp_af43 corresponds to the value af43 of Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Dscp
	Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Dscp_af43 E_Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Dscp = 17
	// Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Dscp_cs5 corresponds to the value cs5 of Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Dscp
	Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Dscp_cs5 E_Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Dscp = 18
	// Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Dscp_ef corresponds to the value ef of Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Dscp
	Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Dscp_ef E_Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Dscp = 19
	// Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Dscp_cs6 corresponds to the value cs6 of Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Dscp
	Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Dscp_cs6 E_Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Dscp = 20
	// Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Dscp_cs7 corresponds to the value cs7 of Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Dscp
	Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Dscp_cs7 E_Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Dscp = 21
)


// E_Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Precedence is a derived int64 type which is used to represent
// the enumerated node Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Precedence. An additional value named
// Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Precedence_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Precedence int64

// IsYANGGoEnum ensures that Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Precedence implements the yang.GoEnum
// interface. This ensures that Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Precedence can be identified as a
// mapped type for a YANG enumeration.
func (E_Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Precedence) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Precedence.
func (E_Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Precedence) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Precedence.
func (e E_Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Precedence) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Precedence")
}

const (
	// Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Precedence_UNSET corresponds to the value UNSET of Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Precedence
	Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Precedence_UNSET E_Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Precedence = 0
	// Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Precedence_routine corresponds to the value routine of Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Precedence
	Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Precedence_routine E_Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Precedence = 1
	// Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Precedence_priority corresponds to the value priority of Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Precedence
	Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Precedence_priority E_Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Precedence = 2
	// Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Precedence_immediate corresponds to the value immediate of Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Precedence
	Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Precedence_immediate E_Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Precedence = 3
	// Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Precedence_flash corresponds to the value flash of Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Precedence
	Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Precedence_flash E_Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Precedence = 4
	// Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Precedence_flash_override corresponds to the value flash_override of Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Precedence
	Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Precedence_flash_override E_Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Precedence = 5
	// Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Precedence_critical corresponds to the value critical of Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Precedence
	Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Precedence_critical E_Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Precedence = 6
	// Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Precedence_internet corresponds to the value internet of Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Precedence
	Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Precedence_internet E_Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Precedence = 7
	// Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Precedence_network corresponds to the value network of Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Precedence
	Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Precedence_network E_Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Precedence = 8
)


// E_Cisco_IOS_XRSnmpAgentCfg_Snmpacl is a derived int64 type which is used to represent
// the enumerated node Cisco_IOS_XRSnmpAgentCfg_Snmpacl. An additional value named
// Cisco_IOS_XRSnmpAgentCfg_Snmpacl_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Cisco_IOS_XRSnmpAgentCfg_Snmpacl int64

// IsYANGGoEnum ensures that Cisco_IOS_XRSnmpAgentCfg_Snmpacl implements the yang.GoEnum
// interface. This ensures that Cisco_IOS_XRSnmpAgentCfg_Snmpacl can be identified as a
// mapped type for a YANG enumeration.
func (E_Cisco_IOS_XRSnmpAgentCfg_Snmpacl) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Cisco_IOS_XRSnmpAgentCfg_Snmpacl.
func (E_Cisco_IOS_XRSnmpAgentCfg_Snmpacl) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_Cisco_IOS_XRSnmpAgentCfg_Snmpacl.
func (e E_Cisco_IOS_XRSnmpAgentCfg_Snmpacl) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Cisco_IOS_XRSnmpAgentCfg_Snmpacl")
}

const (
	// Cisco_IOS_XRSnmpAgentCfg_Snmpacl_UNSET corresponds to the value UNSET of Cisco_IOS_XRSnmpAgentCfg_Snmpacl
	Cisco_IOS_XRSnmpAgentCfg_Snmpacl_UNSET E_Cisco_IOS_XRSnmpAgentCfg_Snmpacl = 0
	// Cisco_IOS_XRSnmpAgentCfg_Snmpacl_ipv4 corresponds to the value ipv4 of Cisco_IOS_XRSnmpAgentCfg_Snmpacl
	Cisco_IOS_XRSnmpAgentCfg_Snmpacl_ipv4 E_Cisco_IOS_XRSnmpAgentCfg_Snmpacl = 1
	// Cisco_IOS_XRSnmpAgentCfg_Snmpacl_ipv6 corresponds to the value ipv6 of Cisco_IOS_XRSnmpAgentCfg_Snmpacl
	Cisco_IOS_XRSnmpAgentCfg_Snmpacl_ipv6 E_Cisco_IOS_XRSnmpAgentCfg_Snmpacl = 2
)


// E_Cisco_IOS_XRSnmpAgentCfg_UserSnmpVersion is a derived int64 type which is used to represent
// the enumerated node Cisco_IOS_XRSnmpAgentCfg_UserSnmpVersion. An additional value named
// Cisco_IOS_XRSnmpAgentCfg_UserSnmpVersion_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Cisco_IOS_XRSnmpAgentCfg_UserSnmpVersion int64

// IsYANGGoEnum ensures that Cisco_IOS_XRSnmpAgentCfg_UserSnmpVersion implements the yang.GoEnum
// interface. This ensures that Cisco_IOS_XRSnmpAgentCfg_UserSnmpVersion can be identified as a
// mapped type for a YANG enumeration.
func (E_Cisco_IOS_XRSnmpAgentCfg_UserSnmpVersion) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Cisco_IOS_XRSnmpAgentCfg_UserSnmpVersion.
func (E_Cisco_IOS_XRSnmpAgentCfg_UserSnmpVersion) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_Cisco_IOS_XRSnmpAgentCfg_UserSnmpVersion.
func (e E_Cisco_IOS_XRSnmpAgentCfg_UserSnmpVersion) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Cisco_IOS_XRSnmpAgentCfg_UserSnmpVersion")
}

const (
	// Cisco_IOS_XRSnmpAgentCfg_UserSnmpVersion_UNSET corresponds to the value UNSET of Cisco_IOS_XRSnmpAgentCfg_UserSnmpVersion
	Cisco_IOS_XRSnmpAgentCfg_UserSnmpVersion_UNSET E_Cisco_IOS_XRSnmpAgentCfg_UserSnmpVersion = 0
	// Cisco_IOS_XRSnmpAgentCfg_UserSnmpVersion_v1 corresponds to the value v1 of Cisco_IOS_XRSnmpAgentCfg_UserSnmpVersion
	Cisco_IOS_XRSnmpAgentCfg_UserSnmpVersion_v1 E_Cisco_IOS_XRSnmpAgentCfg_UserSnmpVersion = 1
	// Cisco_IOS_XRSnmpAgentCfg_UserSnmpVersion_v2c corresponds to the value v2c of Cisco_IOS_XRSnmpAgentCfg_UserSnmpVersion
	Cisco_IOS_XRSnmpAgentCfg_UserSnmpVersion_v2c E_Cisco_IOS_XRSnmpAgentCfg_UserSnmpVersion = 2
	// Cisco_IOS_XRSnmpAgentCfg_UserSnmpVersion_v3 corresponds to the value v3 of Cisco_IOS_XRSnmpAgentCfg_UserSnmpVersion
	Cisco_IOS_XRSnmpAgentCfg_UserSnmpVersion_v3 E_Cisco_IOS_XRSnmpAgentCfg_UserSnmpVersion = 3
)


// ΛEnum is a map, keyed by the name of the type defined for each enum in the
// generated Go code, which provides a mapping between the constant int64 value
// of each value of the enumeration, and the string that is used to represent it
// in the YANG schema. The map is named ΛEnum in order to avoid clash with any
// valid YANG identifier.
var ΛEnum = map[string]map[int64]ygot.EnumDefinition{
	"E_Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Dampening_Args": {
		1: {Name: "default-values"},
		2: {Name: "specify-half-life"},
		3: {Name: "specify-all"},
		4: {Name: "specify-rp"},
	},
	"E_Cisco_IOS_XRIfmgrCfg_InterfaceModeEnum": {
		1: {Name: "default"},
		2: {Name: "point-to-point"},
		3: {Name: "multipoint"},
		4: {Name: "l2-transport"},
	},
	"E_Cisco_IOS_XRIfmgrCfg_LinkStatusEnum": {
		1: {Name: "default"},
		2: {Name: "disable"},
		3: {Name: "software-interfaces"},
	},
	"E_Cisco_IOS_XRIfmgrCfg_SecondaryAdminStateEnum": {
		1: {Name: "normal"},
		2: {Name: "maintenance"},
	},
	"E_Cisco_IOS_XRMplsTeCfg_BandwidthConstraint": {
		1: {Name: "bandwidth-constraint-maximum-allocation-model"},
	},
	"E_Cisco_IOS_XRMplsTeCfg_BfdReversePath": {
		1: {Name: "bfd-reverse-path-binding-label"},
	},
	"E_Cisco_IOS_XRMplsTeCfg_BindingSegmentId": {
		1: {Name: "any-label"},
		2: {Name: "specified-label"},
	},
	"E_Cisco_IOS_XRMplsTeCfg_GmplsttiMode": {
		1: {Name: "sm"},
		2: {Name: "pm"},
		3: {Name: "tcm"},
	},
	"E_Cisco_IOS_XRMplsTeCfg_IETFMode": {
		1: {Name: "standard"},
	},
	"E_Cisco_IOS_XRMplsTeCfg_LinkNextHop": {
		1: {Name: "none"},
		2: {Name: "ipv4-address"},
	},
	"E_Cisco_IOS_XRMplsTeCfg_MplsLcacFloodingIgp": {
		1: {Name: "ospf"},
	},
	"E_Cisco_IOS_XRMplsTeCfg_MplsTeAffinityValue": {
		1: {Name: "hex-value"},
		2: {Name: "bit-position"},
	},
	"E_Cisco_IOS_XRMplsTeCfg_MplsTeAutorouteMetric": {
		1: {Name: "relative"},
		2: {Name: "absolute"},
		3: {Name: "constant"},
	},
	"E_Cisco_IOS_XRMplsTeCfg_MplsTeBackupBandwidthClass": {
		1: {Name: "class0"},
		2: {Name: "class1"},
		3: {Name: "any-class"},
	},
	"E_Cisco_IOS_XRMplsTeCfg_MplsTeBackupBandwidthPool": {
		1: {Name: "any-pool"},
		2: {Name: "global-pool"},
		3: {Name: "sub-pool"},
	},
	"E_Cisco_IOS_XRMplsTeCfg_MplsTeBandwidthDste": {
		1: {Name: "standard-dste"},
		2: {Name: "pre-standard-dste"},
	},
	"E_Cisco_IOS_XRMplsTeCfg_MplsTeBandwidthLimit": {
		1: {Name: "unlimited"},
		2: {Name: "limited"},
	},
	"E_Cisco_IOS_XRMplsTeCfg_MplsTeBfdSessionDownAction": {
		1: {Name: "re-setup"},
	},
	"E_Cisco_IOS_XRMplsTeCfg_MplsTeConfigTunnel": {
		1: {Name: "p2p"},
		2: {Name: "p2mp"},
	},
	"E_Cisco_IOS_XRMplsTeCfg_MplsTeIgpProtocol": {
		1: {Name: "none"},
		2: {Name: "isis"},
		3: {Name: "ospf"},
	},
	"E_Cisco_IOS_XRMplsTeCfg_MplsTeLogFrrProtection": {
		1: {Name: "frr-active-primary"},
		2: {Name: "backup"},
		3: {Name: "frr-ready-primary"},
		4: {Name: "primary"},
		5: {Name: "all"},
	},
	"E_Cisco_IOS_XRMplsTeCfg_MplsTeLspEnc": {
		1: {Name: "ethernet-type1"},
		2: {Name: "ethernet-type2"},
		3: {Name: "lambda"},
		4: {Name: "fiber"},
	},
	"E_Cisco_IOS_XRMplsTeCfg_MplsTeLspSwitch": {
		1: {Name: "dcsc"},
		2: {Name: "lsc"},
		3: {Name: "fsc"},
	},
	"E_Cisco_IOS_XRMplsTeCfg_MplsTeOtnApsProtection": {
		1: {Name: "1plus1-unidir-no-aps"},
		2: {Name: "1plus1-unidir-aps"},
		3: {Name: "1plus1-bdir-aps"},
	},
	"E_Cisco_IOS_XRMplsTeCfg_MplsTeOtnApsProtectionMode": {
		1: {Name: "revertive"},
		2: {Name: "non-revertive"},
	},
	"E_Cisco_IOS_XRMplsTeCfg_MplsTeOtnApsRestorationStyle": {
		1: {Name: "keep-failed-lsp"},
		2: {Name: "delete-failed-lsp"},
	},
	"E_Cisco_IOS_XRMplsTeCfg_MplsTeOtnSncMode": {
		1: {Name: "snc-n"},
		2: {Name: "snc-i"},
		3: {Name: "snc-s"},
	},
	"E_Cisco_IOS_XRMplsTeCfg_MplsTePathComputationMethod": {
		1: {Name: "not-set"},
		2: {Name: "dynamic"},
		3: {Name: "pce"},
		4: {Name: "explicit"},
	},
	"E_Cisco_IOS_XRMplsTeCfg_MplsTePathDiversityConformance": {
		1: {Name: "strict"},
		2: {Name: "best-effort"},
	},
	"E_Cisco_IOS_XRMplsTeCfg_MplsTePathOption": {
		1: {Name: "not-set"},
		2: {Name: "dynamic"},
		3: {Name: "explicit-name"},
		4: {Name: "explicit-number"},
		5: {Name: "no-ero"},
		6: {Name: "sr"},
	},
	"E_Cisco_IOS_XRMplsTeCfg_MplsTePathOptionProperty": {
		1: {Name: "none"},
		2: {Name: "lockdown"},
		3: {Name: "verbatim"},
		4: {Name: "pce"},
		5: {Name: "segment-routing"},
		6: {Name: "sticky"},
	},
	"E_Cisco_IOS_XRMplsTeCfg_MplsTePathOptionProtection": {
		1: {Name: "active"},
		2: {Name: "protecting"},
	},
	"E_Cisco_IOS_XRMplsTeCfg_MplsTePathOptionXro": {
		1: {Name: "not-set"},
		2: {Name: "xro-attribute-set-type"},
	},
	"E_Cisco_IOS_XRMplsTeCfg_MplsTePathSelectionInvalidationTimerExpire": {
		1: {Name: "tunnel-action-tear"},
		2: {Name: "tunnel-action-drop"},
	},
	"E_Cisco_IOS_XRMplsTeCfg_MplsTePathSelectionMetric": {
		1: {Name: "igp"},
		2: {Name: "te"},
		3: {Name: "delay"},
	},
	"E_Cisco_IOS_XRMplsTeCfg_MplsTePathSelectionSegmentRoutingAdjacencyProtection": {
		1: {Name: "not-set"},
		2: {Name: "adj-unprotected"},
		3: {Name: "adj-protected"},
	},
	"E_Cisco_IOS_XRMplsTeCfg_MplsTePathSelectionTiebreaker": {
		1: {Name: "min-fill"},
		2: {Name: "max-fill"},
		3: {Name: "random"},
	},
	"E_Cisco_IOS_XRMplsTeCfg_MplsTeSigNameOption": {
		1: {Name: "none"},
		2: {Name: "address"},
		3: {Name: "name"},
	},
	"E_Cisco_IOS_XRMplsTeCfg_MplsTeSignaledLabel": {
		1: {Name: "not-set"},
		2: {Name: "dwdm"},
	},
	"E_Cisco_IOS_XRMplsTeCfg_MplsTeSwitchingCap": {
		1: {Name: "psc1"},
		2: {Name: "lsc"},
		3: {Name: "fsc"},
	},
	"E_Cisco_IOS_XRMplsTeCfg_MplsTeSwitchingEncode": {
		1: {Name: "none"},
		2: {Name: "packet"},
		3: {Name: "ethernet"},
		4: {Name: "sondet-sdh"},
	},
	"E_Cisco_IOS_XRMplsTeCfg_MplsTeSwitchingEncoding": {
		1: {Name: "packet"},
		2: {Name: "ethernet"},
		3: {Name: "sondet-sdh"},
	},
	"E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity": {
		1: {Name: "include"},
		2: {Name: "include-strict"},
		3: {Name: "exclude"},
		4: {Name: "exclude-all"},
		5: {Name: "ignore"},
	},
	"E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelId": {
		1: {Name: "auto"},
		2: {Name: "explicit"},
	},
	"E_Cisco_IOS_XRMplsTeCfg_MplsTeUniInPlaceBit": {
		1: {Name: "not-set"},
		2: {Name: "set"},
	},
	"E_Cisco_IOS_XRMplsTeCfg_MplsTeUniLspSegFlag": {
		1: {Name: "unprotected"},
		2: {Name: "rerouting"},
		3: {Name: "rerouting-no-et"},
		4: {Name: "rerouting-one-to-n-et"},
		5: {Name: "rerouting-one-plus-one-uni"},
		6: {Name: "rerouting-one-plus-one-bi"},
	},
	"E_Cisco_IOS_XRMplsTeCfg_MplsTeUniRequiredBit": {
		1: {Name: "not-set"},
		2: {Name: "set"},
	},
	"E_Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_Switchings_Switching_SwitchingId": {
		1: {Name: "link"},
	},
	"E_Cisco_IOS_XRMplsTeCfg_MplsTebfdSession": {
		1: {Name: "regular-bfd"},
		2: {Name: "sbfd"},
		3: {Name: "redundant-sbfd"},
	},
	"E_Cisco_IOS_XRMplsTeCfg_MplsTesrlgExclude": {
		1: {Name: "mandatory"},
		2: {Name: "preferred"},
		3: {Name: "weighted"},
	},
	"E_Cisco_IOS_XRMplsTeCfg_OspfAreaMode": {
		1: {Name: "ospf-int"},
		2: {Name: "ospfip-addr"},
	},
	"E_Cisco_IOS_XRMplsTeCfg_OtnDestination": {
		1: {Name: "number-ed"},
		2: {Name: "un-number-ed"},
	},
	"E_Cisco_IOS_XRMplsTeCfg_OtnPayload": {
		1: {Name: "unknown"},
		2: {Name: "bmp"},
		3: {Name: "gfp-f"},
		4: {Name: "gmp"},
		5: {Name: "gfp-f-ext"},
	},
	"E_Cisco_IOS_XRMplsTeCfg_OtnProtectionSwitchLockout": {
		1: {Name: "none"},
		2: {Name: "working"},
	},
	"E_Cisco_IOS_XRMplsTeCfg_OtnSignaledBandwidth": {
		1: {Name: "odu1"},
		2: {Name: "odu2"},
		3: {Name: "odu3"},
		4: {Name: "odu4"},
		5: {Name: "odu0"},
		6: {Name: "odu2e"},
		7: {Name: "od-uflex-cbr"},
		8: {Name: "od-uflex-gfp-resize"},
		9: {Name: "od-uflex-gfp-not-resize"},
		10: {Name: "odu1e"},
		11: {Name: "odu1f"},
		12: {Name: "odu2f"},
		13: {Name: "odu3e1"},
		14: {Name: "odu3e2"},
	},
	"E_Cisco_IOS_XRMplsTeCfg_OtnSignaledBandwidthFlexFraming": {
		1: {Name: "cbr"},
		2: {Name: "framed-gfp-fixed"},
		3: {Name: "framed-gfp-resize"},
	},
	"E_Cisco_IOS_XRMplsTeCfg_OtnStaticUni": {
		1: {Name: "unknown"},
		2: {Name: "xc"},
		3: {Name: "termination"},
	},
	"E_Cisco_IOS_XRMplsTeCfg_PathInvalidationAction": {
		1: {Name: "tear"},
		2: {Name: "drop"},
	},
	"E_Cisco_IOS_XRMplsTeCfg_RoutePriorityRole": {
		1: {Name: "route-priority-role-head-back-up"},
		2: {Name: "route-priority-role-head-primary"},
		3: {Name: "route-priority-role-middle"},
	},
	"E_Cisco_IOS_XRMplsTeCfg_SrPrepend": {
		1: {Name: "none-type"},
		2: {Name: "next-label"},
		3: {Name: "bgp-n-hop"},
	},
	"E_Cisco_IOS_XRSnmpAgentCfg_GroupSnmpVersion": {
		1: {Name: "v1"},
		2: {Name: "v2c"},
		3: {Name: "v3"},
	},
	"E_Cisco_IOS_XRSnmpAgentCfg_SnmpAccessLevel": {
		1: {Name: "read-only"},
		2: {Name: "read-write"},
	},
	"E_Cisco_IOS_XRSnmpAgentCfg_SnmpBulkstatFileFormat": {
		1: {Name: "schema-ascii"},
		2: {Name: "bulk-ascii"},
		3: {Name: "bulk-binary"},
	},
	"E_Cisco_IOS_XRSnmpAgentCfg_SnmpBulkstatSchema": {
		1: {Name: "exact-interface"},
		2: {Name: "exact-oid"},
		3: {Name: "wild-interface"},
		4: {Name: "wild-oid"},
		5: {Name: "range-oid"},
		6: {Name: "repeat-oid"},
	},
	"E_Cisco_IOS_XRSnmpAgentCfg_SnmpContext": {
		1: {Name: "vrf"},
		2: {Name: "bridge"},
		3: {Name: "ospf"},
		4: {Name: "ospfv3"},
	},
	"E_Cisco_IOS_XRSnmpAgentCfg_SnmpHashAlgorithm": {
		1: {Name: "none"},
		2: {Name: "md5"},
		3: {Name: "sha"},
	},
	"E_Cisco_IOS_XRSnmpAgentCfg_SnmpMibViewInclusion": {
		1: {Name: "included"},
		2: {Name: "excluded"},
	},
	"E_Cisco_IOS_XRSnmpAgentCfg_SnmpOwnerAccess": {
		1: {Name: "sdr-owner"},
		2: {Name: "system-owner"},
	},
	"E_Cisco_IOS_XRSnmpAgentCfg_SnmpPrivAlgorithm": {
		1: {Name: "none"},
		2: {Name: "des"},
		3: {Name: "3des"},
		4: {Name: "aes128"},
		5: {Name: "aes192"},
		6: {Name: "aes256"},
	},
	"E_Cisco_IOS_XRSnmpAgentCfg_SnmpSecurityModel": {
		1: {Name: "no-authentication"},
		2: {Name: "authentication"},
		3: {Name: "privacy"},
	},
	"E_Cisco_IOS_XRSnmpAgentCfg_SnmpTos": {
		1: {Name: "precedence"},
		2: {Name: "dscp"},
	},
	"E_Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Dscp": {
		1: {Name: "default"},
		2: {Name: "cs1"},
		3: {Name: "af11"},
		4: {Name: "af12"},
		5: {Name: "af13"},
		6: {Name: "cs2"},
		7: {Name: "af21"},
		8: {Name: "af22"},
		9: {Name: "af23"},
		10: {Name: "cs3"},
		11: {Name: "af31"},
		12: {Name: "af32"},
		13: {Name: "af33"},
		14: {Name: "cs4"},
		15: {Name: "af41"},
		16: {Name: "af42"},
		17: {Name: "af43"},
		18: {Name: "cs5"},
		19: {Name: "ef"},
		20: {Name: "cs6"},
		21: {Name: "cs7"},
	},
	"E_Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Precedence": {
		1: {Name: "routine"},
		2: {Name: "priority"},
		3: {Name: "immediate"},
		4: {Name: "flash"},
		5: {Name: "flash-override"},
		6: {Name: "critical"},
		7: {Name: "internet"},
		8: {Name: "network"},
	},
	"E_Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Dscp": {
		1: {Name: "default"},
		2: {Name: "cs1"},
		3: {Name: "af11"},
		4: {Name: "af12"},
		5: {Name: "af13"},
		6: {Name: "cs2"},
		7: {Name: "af21"},
		8: {Name: "af22"},
		9: {Name: "af23"},
		10: {Name: "cs3"},
		11: {Name: "af31"},
		12: {Name: "af32"},
		13: {Name: "af33"},
		14: {Name: "cs4"},
		15: {Name: "af41"},
		16: {Name: "af42"},
		17: {Name: "af43"},
		18: {Name: "cs5"},
		19: {Name: "ef"},
		20: {Name: "cs6"},
		21: {Name: "cs7"},
	},
	"E_Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Precedence": {
		1: {Name: "routine"},
		2: {Name: "priority"},
		3: {Name: "immediate"},
		4: {Name: "flash"},
		5: {Name: "flash-override"},
		6: {Name: "critical"},
		7: {Name: "internet"},
		8: {Name: "network"},
	},
	"E_Cisco_IOS_XRSnmpAgentCfg_Snmpacl": {
		1: {Name: "ipv4"},
		2: {Name: "ipv6"},
	},
	"E_Cisco_IOS_XRSnmpAgentCfg_UserSnmpVersion": {
		1: {Name: "v1"},
		2: {Name: "v2c"},
		3: {Name: "v3"},
	},
}


var (
	// ySchema is a byte slice contain a gzip compressed representation of the
	// YANG schema from which the Go code was generated. When uncompressed the
	// contents of the byte slice is a JSON document containing an object, keyed
	// on the name of the generated struct, and containing the JSON marshalled
	// contents of a goyang yang.Entry struct, which defines the schema for the
	// fields within the struct.
	ySchema = []byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0xbd, 0xfd, 0x73, 0xdb, 0x46,
		0x96, 0xee, 0xff, 0xbb, 0xff, 0x0a, 0x14, 0x77, 0xa7, 0x26, 0xd9, 0x18, 0x36, 0x29, 0x51, 0x92,
		0xa5, 0xad, 0xa9, 0x5d, 0x65, 0x92, 0xdc, 0x71, 0xad, 0x35, 0x71, 0xc5, 0xbe, 0xfb, 0xdd, 0xba,
		0x96, 0xca, 0x05, 0x11, 0x2d, 0x09, 0x37, 0x20, 0xc0, 0x0b, 0x80, 0xb6, 0x34, 0x19, 0xff, 0xef,
		0xdf, 0xe2, 0x1b, 0xf8, 0x4e, 0x01, 0xdd, 0xa7, 0x41, 0x90, 0xfc, 0x64, 0xaa, 0x26, 0x8a, 0x2d,
		0x1c, 0x82, 0xfd, 0xf2, 0x3c, 0xcf, 0x39, 0x7d, 0xce, 0xe9, 0x3f, 0x5e, 0x38, 0x8e, 0xe3, 0x34,
		0xfe, 0xee, 0x75, 0x55, 0xe3, 0xc2, 0x69, 0x04, 0x51, 0xa6, 0x92, 0x3b, 0xaf, 0xa3, 0xd2, 0xc6,
		0xcb, 0xd1, 0xdf, 0xfc, 0x57, 0x10, 0xf9, 0x8d, 0x0b, 0xa7, 0x35, 0xfe, 0xcf, 0xbf, 0xc6, 0xd1,
		0x5d, 0x70, 0xdf, 0xb8, 0x70, 0x9a, 0xe3, 0x3f, 0xf8, 0x29, 0x48, 0x1a, 0x17, 0xce, 0xc8, 0xcc,
		0xf0, 0x0f, 0xee, 0xc3, 0xf8, 0xd6, 0x0b, 0xdd, 0xdc, 0x92, 0xdb, 0x19, 0x3e, 0xd2, 0x4f, 0xbc,
		0x2c, 0x88, 0xa3, 0xb9, 0xdf, 0x9d, 0xfb, 0xe8, 0x67, 0x9e, 0x7b, 0x39, 0xff, 0xd4, 0xfc, 0x6b,
		0xe5, 0x7f, 0xbc, 0xf8, 0x7a, 0xf9, 0x5f, 0xbc, 0x4f, 0xd4, 0x5d, 0xf0, 0xb8, 0xf4, 0xe9, 0xf3,
		0x5f, 0xfe, 0xae, 0x7b, 0x9f, 0xb8, 0x9d, 0xbb, 0xfb, 0x85, 0x0f, 0x1b, 0xfe, 0xd2, 0x87, 0xb8,
		0x9f, 0x74, 0xd4, 0x4a, 0x03, 0xa3, 0x17, 0x52, 0x4f, 0x5f, 0xe3, 0x64, 0xf0, 0x4e, 0x8d, 0xde,
		0xe8, 0xb3, 0x5e, 0xae, 0xfe, 0xc5, 0xbf, 0x79, 0xe9, 0x65, 0x72, 0xdf, 0xef, 0xaa, 0x28, 0x6b,
		0x5c, 0x38, 0x59, 0xd2, 0x57, 0x6b, 0x7e, 0x71, 0xe6, 0xb7, 0x66, 0x5e, 0x6d, 0xe9, 0x77, 0xbf,
		0xcd, 0xfd, 0xc9, 0xb7, 0x85, 0xef, 0xbd, 0x38, 0x3d, 0xf9, 0x5f, 0x84, 0x41, 0xf4, 0xbb, 0x9b,
		0x66, 0x5e, 0xd6, 0x4f, 0xd7, 0x7f, 0xa9, 0xc9, 0xc8, 0xcc, 0xfe, 0xf2, 0x9a, 0xb7, 0xfd, 0x49,
		0xdd, 0x79, 0xfd, 0x70, 0xf0, 0xb2, 0x9f, 0x56, 0xfe, 0xc2, 0xf0, 0x97, 0xfc, 0xf1, 0x2f, 0xad,
		0xfc, 0x8d, 0x9b, 0x35, 0x96, 0xc7, 0x53, 0xdd, 0x5c, 0xf3, 0xd7, 0xeb, 0xa6, 0xbc, 0xc8, 0xd4,
		0x97, 0x5a, 0x02, 0x45, 0x97, 0x42, 0xe9, 0x25, 0x51, 0x7a, 0x69, 0x94, 0x5d, 0x22, 0xab, 0x97,
		0xca, 0x9a, 0x25, 0x93, 0x1b, 0xff, 0xf8, 0xd4, 0x53, 0xc5, 0x46, 0xed, 0xdd, 0x74, 0x79, 0xb8,
		0x2a, 0xea, 0x77, 0x37, 0x0d, 0xde, 0x64, 0xe3, 0xb6, 0x37, 0xfc, 0xce, 0xcf, 0x03, 0x1b, 0xcf,
		0x0e, 0xef, 0xc7, 0xf8, 0x43, 0x96, 0x04, 0xd1, 0xfd, 0xb3, 0xbf, 0x39, 0xfc, 0xed, 0xe6, 0xe0,
		0x45, 0x27, 0xeb, 0xef, 0xe5, 0xf3, 0xbf, 0xdf, 0x1a, 0xfe, 0x7e, 0x90, 0x7a, 0xb7, 0xa1, 0x2a,
		0xf2, 0xfb, 0x47, 0x83, 0xdf, 0x4f, 0xe3, 0xbb, 0xec, 0xab, 0x97, 0x28, 0x77, 0x06, 0x47, 0x37,
		0x3e, 0xfa, 0xed, 0xe5, 0x73, 0xdf, 0xf1, 0xed, 0x70, 0x76, 0x0b, 0x7c, 0x41, 0x3f, 0xdf, 0x80,
		0xcd, 0x02, 0xaf, 0x3b, 0xf9, 0x66, 0x4b, 0x10, 0xba, 0xf2, 0xb7, 0x57, 0x7d, 0xaf, 0x0b, 0xe7,
		0x68, 0xf3, 0x57, 0x2b, 0xbb, 0x0c, 0x4b, 0x22, 0xdb, 0x65, 0x14, 0xc5, 0xd9, 0x6a, 0x4e, 0x19,
		0xbd, 0x73, 0xe7, 0x41, 0x75, 0xbd, 0x9e, 0x97, 0x3d, 0x0c, 0x66, 0xe6, 0xf5, 0x5f, 0x83, 0xb4,
		0x13, 0xbb, 0x6f, 0x7f, 0xfd, 0xe0, 0xfe, 0xcf, 0x6f, 0x6e, 0xbe, 0x57, 0x5e, 0x97, 0x62, 0x9d,
		0x91, 0xdd, 0x2c, 0xe9, 0x77, 0xb2, 0x68, 0xbc, 0xf4, 0x87, 0x66, 0x3f, 0xbf, 0xfd, 0xf5, 0xc3,
		0xe7, 0xff, 0xf9, 0xed, 0xed, 0xc0, 0xea, 0x5f, 0xef, 0xee, 0x3f, 0xff, 0xaf, 0xa1, 0xd1, 0xb7,
		0x13, 0x9b, 0x7f, 0x9d, 0x33, 0xf9, 0x62, 0xf5, 0x57, 0x9c, 0xf9, 0x7a, 0x8d, 0x35, 0x6f, 0x93,
		0xae, 0x27, 0xcf, 0xb5, 0x4f, 0x40, 0x9b, 0xb2, 0xb4, 0x59, 0x54, 0xd6, 0x14, 0x9d, 0xa1, 0xc6,
		0x66, 0xd2, 0x6b, 0x41, 0x7a, 0xd5, 0x92, 0xde, 0xba, 0x89, 0xcf, 0x7f, 0xc1, 0xeb, 0x64, 0xc1,
		0x97, 0x02, 0xe3, 0x30, 0x19, 0xdc, 0xf1, 0xef, 0x3f, 0xf3, 0x9d, 0x36, 0x6b, 0x9c, 0xc2, 0xd3,
		0x5e, 0x66, 0xfa, 0xb5, 0x96, 0x41, 0xd9, 0xe5, 0xa0, 0xbd, 0x2c, 0xb4, 0x97, 0x87, 0xee, 0x32,
		0x79, 0x9e, 0xb6, 0x0a, 0xf1, 0xf5, 0x73, 0x9a, 0x69, 0x69, 0xd4, 0x73, 0x96, 0x70, 0x0b, 0xad,
		0x94, 0x39, 0x70, 0x78, 0x53, 0xe0, 0x77, 0xdf, 0x7b, 0x59, 0xa6, 0x92, 0x68, 0xa3, 0x2e, 0x9f,
		0x7b, 0xe0, 0x3b, 0xaf, 0x93, 0x7d, 0xff, 0xcf, 0xef, 0x7a, 0x89, 0xfa, 0xfe, 0xf9, 0xd1, 0xba,
		0xd1, 0x95, 0x00, 0x1b, 0x90, 0xe6, 0xd6, 0x8b, 0xfc, 0xaf, 0x81, 0x3f, 0xe4, 0xed, 0x82, 0x9b,
		0x6c, 0xfa, 0x08, 0xfb, 0x8c, 0x7d, 0xb6, 0x72, 0xd4, 0xfb, 0x41, 0x94, 0x9d, 0xb6, 0x4b, 0xec,
		0xae, 0x22, 0x9b, 0xeb, 0x37, 0x2f, 0xba, 0x57, 0x85, 0xb7, 0x56, 0xb1, 0x29, 0x1c, 0x1a, 0xbe,
		0x0a, 0xa2, 0xc2, 0x73, 0x9e, 0x3f, 0xf4, 0xdf, 0x5e, 0xd8, 0x57, 0xc5, 0xf4, 0xff, 0xdc, 0x73,
		0xbf, 0x24, 0x03, 0xe8, 0x89, 0xa3, 0x9f, 0x82, 0xfb, 0x20, 0x4b, 0x35, 0x0c, 0xfc, 0x5d, 0xdd,
		0x7b, 0x63, 0x56, 0xbc, 0xf3, 0xc2, 0x54, 0x15, 0x7e, 0xfa, 0xdb, 0xcb, 0x12, 0x43, 0xe2, 0x3d,
		0xea, 0x0f, 0x49, 0xeb, 0x4d, 0xbb, 0x7d, 0x7a, 0xd6, 0x6e, 0x37, 0xcf, 0x8e, 0xcf, 0x9a, 0xe7,
		0x27, 0x27, 0xad, 0xd3, 0xd6, 0xc9, 0xee, 0x8c, 0xd2, 0x0b, 0x99, 0xdf, 0xb2, 0x01, 0xd6, 0xbe,
		0xd7, 0xed, 0xa9, 0xa8, 0x88, 0x17, 0x9e, 0xef, 0xc4, 0xe9, 0x23, 0xc5, 0xc0, 0xba, 0x05, 0x58,
		0xef, 0x36, 0x58, 0x3f, 0xa7, 0xa9, 0xa7, 0xda, 0x3a, 0xb9, 0x4f, 0x8b, 0x8f, 0x5e, 0xae, 0xb0,
		0x07, 0x4f, 0x15, 0xfc, 0xfe, 0xc5, 0xf8, 0xbf, 0xf4, 0xd2, 0xd2, 0x59, 0x62, 0x46, 0x4b, 0x4d,
		0x77, 0xc9, 0x19, 0x2f, 0x3d, 0xe3, 0x25, 0x68, 0xba, 0x14, 0x4b, 0x82, 0x62, 0xc1, 0x79, 0x2b,
		0xac, 0x27, 0x96, 0x66, 0x4d, 0x45, 0xfd, 0xae, 0xda, 0xe8, 0xcb, 0xeb, 0x86, 0x41, 0xf5, 0xc2,
		0xa2, 0x66, 0x61, 0xd2, 0x8d, 0x61, 0x53, 0xf7, 0xcb, 0x80, 0x4d, 0xd3, 0x92, 0x2b, 0x65, 0x1a,
		0x4d, 0x4d, 0x7b, 0xaa, 0x13, 0xdc, 0x3d, 0xb9, 0x0f, 0x5e, 0x78, 0xe7, 0x86, 0xc1, 0x9d, 0xd2,
		0xb1, 0xd4, 0x9e, 0xb5, 0xe4, 0x85, 0xa1, 0x8e, 0x8d, 0x93, 0x59, 0x1b, 0x49, 0xaf, 0x51, 0xca,
		0xc2, 0xb7, 0x97, 0x65, 0xc7, 0xbf, 0x68, 0x08, 0x77, 0x5d, 0x48, 0x77, 0x32, 0xee, 0xa5, 0x25,
		0xc7, 0x28, 0x5e, 0x39, 0x33, 0x56, 0x17, 0x4e, 0xdb, 0xc0, 0xc2, 0x74, 0xde, 0x0a, 0x45, 0x8d,
		0xd7, 0xda, 0x49, 0x7a, 0x8d, 0x0b, 0xe7, 0xa4, 0xdc, 0xa0, 0x57, 0x2e, 0x96, 0x0a, 0x4c, 0x73,
		0x63, 0x76, 0x40, 0x4a, 0x92, 0x56, 0xd9, 0x3d, 0x00, 0x73, 0xc1, 0x5c, 0xc2, 0xcc, 0x35, 0xf0,
		0x88, 0x8f, 0x8f, 0x34, 0x48, 0xeb, 0xac, 0xc4, 0x23, 0xe5, 0x3c, 0xe4, 0xf2, 0x9e, 0xb2, 0x91,
		0xc7, 0xbc, 0xec, 0x26, 0xbe, 0xd4, 0x7b, 0xde, 0xd4, 0x37, 0x34, 0xf7, 0x11, 0x35, 0xd9, 0x49,
		0xdb, 0xb3, 0x5e, 0x1a, 0xba, 0xf6, 0xc9, 0xee, 0x8f, 0x9d, 0x25, 0x4a, 0xba, 0x11, 0xdd, 0xf0,
		0xea, 0x31, 0x4b, 0x3c, 0xb7, 0x1f, 0xa5, 0xd9, 0xf8, 0x00, 0xb7, 0xc4, 0xd6, 0xff, 0xfa, 0xa0,
		0xa2, 0x2a, 0x36, 0xe3, 0x04, 0x62, 0x5e, 0xbd, 0x7a, 0x3d, 0xf0, 0xce, 0x9c, 0xbf, 0x38, 0x7f,
		0x5e, 0x12, 0x11, 0x7f, 0x76, 0xe2, 0xc4, 0x59, 0xf1, 0x0b, 0x5e, 0x18, 0xae, 0xfb, 0xab, 0xa4,
		0xf7, 0x67, 0x1d, 0xb9, 0xa7, 0xc9, 0x34, 0xab, 0x18, 0x67, 0x38, 0x80, 0x9a, 0xeb, 0xd3, 0x94,
		0x77, 0x56, 0xf2, 0x8f, 0x85, 0x11, 0xae, 0x04, 0x73, 0x7e, 0x52, 0x69, 0x27, 0x09, 0x7a, 0x1b,
		0xcf, 0x4e, 0xcb, 0x2c, 0xb3, 0xcb, 0xd1, 0x17, 0xf9, 0x30, 0xfa, 0x1e, 0x7f, 0xf3, 0xc2, 0xbb,
		0x77, 0xc1, 0x9d, 0x1a, 0x7f, 0xcb, 0xd1, 0x5f, 0x5e, 0x47, 0xe3, 0xbf, 0xbd, 0x0c, 0xc3, 0xb9,
		0xbf, 0x98, 0x3c, 0xf5, 0xdb, 0x7b, 0xdd, 0xa9, 0x35, 0x5c, 0x61, 0x8b, 0xab, 0xcc, 0x9f, 0x19,
		0x9c, 0x97, 0xfa, 0x16, 0xa5, 0x16, 0xdc, 0xaa, 0x45, 0x27, 0x34, 0xde, 0x5a, 0xef, 0xf3, 0x6d,
		0xd7, 0x90, 0x5d, 0xc4, 0xd9, 0x48, 0x54, 0x9a, 0x79, 0x49, 0xe6, 0xf6, 0x54, 0xe4, 0x85, 0xd9,
		0x53, 0x79, 0x97, 0x63, 0xd1, 0x00, 0x8e, 0x07, 0x8e, 0x07, 0x8e, 0x47, 0x3d, 0x1c, 0x8f, 0x26,
		0x8e, 0x87, 0xee, 0xd0, 0x1d, 0x35, 0x9b, 0xcd, 0x26, 0xbe, 0x07, 0xbe, 0xc7, 0xf3, 0xbe, 0x07,
		0xfe, 0x43, 0x11, 0xff, 0x61, 0x4f, 0x7c, 0x00, 0xd4, 0xbc, 0xae, 0x9a, 0x47, 0x97, 0x97, 0xd3,
		0xe5, 0xfd, 0x54, 0xb9, 0xd9, 0x43, 0xa2, 0xd2, 0x87, 0x38, 0xf4, 0x75, 0x74, 0xf9, 0xbc, 0x01,
		0x74, 0x39, 0xba, 0x1c, 0x5d, 0x5e, 0x0f, 0x5d, 0xce, 0x81, 0x00, 0xba, 0x1c, 0x5d, 0x6e, 0x5b,
		0x97, 0x13, 0xf2, 0x37, 0x94, 0xec, 0xfb, 0x1f, 0xd1, 0x27, 0x66, 0x2f, 0xad, 0xf2, 0x89, 0xca,
		0x4b, 0xa8, 0xff, 0xb4, 0xdf, 0xeb, 0x25, 0x2a, 0x4d, 0x4d, 0x1c, 0x80, 0x15, 0x36, 0xf0, 0x01,
		0xf0, 0x01, 0xf0, 0x01, 0xf0, 0x01, 0xf0, 0x01, 0xf0, 0x01, 0xf0, 0x01, 0xf0, 0x01, 0xf0, 0x01,
		0xf0, 0x01, 0xf0, 0x01, 0x6a, 0xef, 0x03, 0x04, 0x5d, 0x65, 0x22, 0xff, 0x07, 0x8f, 0xa3, 0xfc,
		0x51, 0xfe, 0x28, 0x7f, 0x94, 0xff, 0xae, 0x2b, 0xff, 0x13, 0xea, 0x01, 0xd0, 0xfd, 0xe8, 0x7e,
		0x74, 0x3f, 0xba, 0x1f, 0xdd, 0xbf, 0x83, 0xba, 0xdf, 0xa8, 0xe3, 0xc5, 0x33, 0xbd, 0x29, 0x97,
		0x3d, 0x88, 0x42, 0xbd, 0x2a, 0xd7, 0x35, 0x79, 0x5c, 0xf7, 0x17, 0xaf, 0x8b, 0x76, 0x5a, 0x71,
		0x0a, 0xf6, 0xb5, 0x5c, 0xdd, 0xd1, 0x32, 0x5d, 0xf3, 0xe7, 0x9f, 0x7f, 0xca, 0x3f, 0xde, 0x46,
		0xe3, 0x99, 0x12, 0x90, 0x33, 0x6d, 0x3d, 0x53, 0x78, 0xa3, 0xd2, 0x29, 0x4c, 0x1c, 0xa6, 0x76,
		0xa5, 0x53, 0x58, 0x3a, 0x6a, 0x97, 0x51, 0xa6, 0x0f, 0x9f, 0x85, 0xf5, 0xad, 0xa2, 0x8e, 0xd7,
		0x4b, 0xfb, 0xa1, 0x57, 0x6e, 0x85, 0xcf, 0x3f, 0x46, 0x83, 0x25, 0x1a, 0x2c, 0xcd, 0xfe, 0xe2,
		0xcc, 0xda, 0x70, 0xe3, 0xde, 0xea, 0x9e, 0xc2, 0xcf, 0xce, 0xd8, 0x2a, 0x23, 0x44, 0xad, 0x88,
		0x5a, 0x11, 0xb5, 0xaa, 0x47, 0xd4, 0x8a, 0x5a, 0x32, 0xed, 0xa1, 0x6b, 0x1f, 0x9d, 0xb7, 0xcf,
		0x4f, 0xcf, 0x8e, 0xce, 0x09, 0x5e, 0x59, 0x77, 0xb0, 0x0a, 0xd0, 0x7d, 0x39, 0x0d, 0x64, 0xa4,
		0x85, 0xa0, 0x28, 0x28, 0xca, 0x12, 0x45, 0x15, 0xf6, 0x27, 0x4a, 0xfa, 0x15, 0x07, 0x16, 0xcc,
		0x28, 0xbb, 0x9b, 0x2d, 0x04, 0x34, 0x7e, 0x9e, 0x7b, 0x05, 0x0b, 0x4e, 0xdf, 0xf4, 0xbb, 0x77,
		0x63, 0x5f, 0xb9, 0x51, 0x1c, 0xb9, 0xbd, 0x87, 0xa7, 0x34, 0xe8, 0x78, 0x61, 0x71, 0x17, 0x70,
		0x93, 0x91, 0xe7, 0x1c, 0x89, 0x02, 0x97, 0x38, 0xcd, 0x44, 0x60, 0x36, 0x5c, 0xe6, 0x94, 0xd3,
		0x05, 0x61, 0x16, 0xc2, 0x2c, 0x2b, 0x47, 0xfd, 0xed, 0xfc, 0x32, 0x7d, 0xe6, 0xde, 0xa8, 0x25,
		0x6c, 0x2c, 0xd0, 0xc8, 0xb2, 0x5c, 0xc3, 0x54, 0xbd, 0x46, 0xa9, 0x65, 0xef, 0x95, 0xca, 0x9f,
		0x1b, 0x76, 0x44, 0xed, 0xc5, 0x41, 0x94, 0xb9, 0x59, 0xec, 0x0e, 0x7f, 0x28, 0xf3, 0xf8, 0xf0,
		0xba, 0xa9, 0x6e, 0x3f, 0xcc, 0x82, 0xd2, 0x8f, 0x1e, 0x0f, 0x6f, 0x74, 0x3b, 0x72, 0xb3, 0xc4,
		0x8b, 0xd2, 0x5e, 0x9c, 0x64, 0x0d, 0x59, 0xa2, 0x2c, 0xdd, 0xef, 0xb4, 0xdc, 0xd5, 0x55, 0xf9,
		0x53, 0x73, 0x5f, 0xe1, 0xc2, 0x39, 0x2e, 0xf1, 0xe8, 0xcc, 0xc0, 0x5d, 0x38, 0x47, 0x25, 0x1e,
		0x5c, 0x98, 0xb0, 0x0b, 0xa7, 0x55, 0x0d, 0x45, 0x1b, 0xb2, 0xc9, 0x98, 0x04, 0x4b, 0x13, 0xc8,
		0xf0, 0x39, 0x10, 0x1c, 0x04, 0x7f, 0x06, 0xc1, 0x0b, 0xac, 0x13, 0xc7, 0xfa, 0xc5, 0x35, 0x9f,
		0x3c, 0xf7, 0x1f, 0x97, 0xee, 0xff, 0x69, 0xba, 0xe7, 0xaf, 0x2e, 0x3e, 0xbf, 0x76, 0x6f, 0x7e,
		0xd8, 0xce, 0xf5, 0x35, 0xd3, 0xdd, 0xf3, 0x25, 0x48, 0xb2, 0xbe, 0x9e, 0x72, 0x9b, 0x3c, 0xca,
		0xde, 0x63, 0xef, 0xad, 0x8e, 0x6d, 0x74, 0x7b, 0x85, 0x5a, 0xb8, 0xe5, 0x5b, 0xee, 0xd8, 0xc2,
		0x52, 0x2f, 0x72, 0x87, 0xec, 0xd2, 0x9b, 0x3f, 0x7f, 0x97, 0x2c, 0xcb, 0x9b, 0xe5, 0x5d, 0x87,
		0xe5, 0xdd, 0xcd, 0x94, 0x9b, 0xf5, 0xa3, 0x48, 0x85, 0xae, 0x97, 0x65, 0x49, 0x70, 0xdb, 0xcf,
		0x54, 0x89, 0x85, 0xbe, 0xfa, 0xf1, 0x1d, 0x38, 0x92, 0xed, 0xf6, 0xc2, 0xd4, 0xcd, 0xd4, 0x7e,
		0x2e, 0xfa, 0xd9, 0x2f, 0x57, 0x9b, 0x7b, 0x6f, 0xee, 0xee, 0x82, 0x28, 0xc8, 0x9e, 0xdc, 0xae,
		0x97, 0xfe, 0xae, 0x71, 0x01, 0xce, 0xdc, 0xe3, 0xe5, 0xe2, 0xdc, 0xad, 0x3a, 0xc6, 0xb9, 0xcb,
		0x2d, 0xc0, 0x3d, 0x8b, 0x74, 0x97, 0x5a, 0xa0, 0x76, 0x62, 0xdd, 0x45, 0x17, 0xee, 0xd2, 0x02,
		0x2e, 0x3f, 0xf6, 0x8b, 0x6b, 0xb8, 0xec, 0xd0, 0x97, 0x3b, 0xae, 0xd1, 0x5e, 0xce, 0x26, 0xcb,
		0x5a, 0x68, 0x79, 0x9b, 0x2e, 0x73, 0xb1, 0xe5, 0x2e, 0xb6, 0xec, 0xe5, 0x96, 0x7f, 0xb9, 0x6d,
		0x50, 0x72, 0x3b, 0x94, 0x97, 0x31, 0x6b, 0x67, 0xfe, 0x6f, 0xea, 0x71, 0x78, 0xd5, 0xf8, 0xbd,
		0x4a, 0x74, 0x66, 0xbe, 0x84, 0xfb, 0x6c, 0xec, 0x4e, 0x2f, 0xbb, 0xd7, 0x4d, 0xf7, 0xdc, 0x73,
		0xef, 0x2e, 0xdd, 0x5f, 0x6e, 0xfe, 0x68, 0xbd, 0x7c, 0xf3, 0xad, 0xfc, 0xec, 0xdc, 0xd8, 0xba,
		0xf2, 0xa7, 0x4c, 0xe4, 0xaf, 0x0c, 0xc3, 0x2e, 0xef, 0xdc, 0xe2, 0x04, 0x0b, 0x42, 0x81, 0x50,
		0x20, 0x14, 0x08, 0x65, 0x41, 0x9e, 0x95, 0x3c, 0x90, 0xcf, 0x9f, 0xb3, 0x74, 0x30, 0xbf, 0xd2,
		0xcf, 0x7d, 0xad, 0xe3, 0x94, 0x38, 0x76, 0x8e, 0xed, 0xaf, 0x32, 0xf5, 0x71, 0xf8, 0x7e, 0x97,
		0xf9, 0xeb, 0x7d, 0xbe, 0x1c, 0xbf, 0xde, 0xd5, 0xe0, 0xed, 0x2a, 0x4c, 0x69, 0x2a, 0x7e, 0xb9,
		0xf9, 0xd2, 0xd6, 0x2c, 0x7a, 0xc9, 0x39, 0x2e, 0x1e, 0x2e, 0x9e, 0xbc, 0x8b, 0x57, 0x7e, 0xe1,
		0x1a, 0x2f, 0x60, 0x24, 0x14, 0x12, 0x6a, 0x07, 0x25, 0x54, 0xe9, 0x94, 0xf4, 0xc5, 0x75, 0x7e,
		0xa6, 0xf1, 0xa8, 0x5e, 0x8a, 0xfa, 0xe4, 0x1f, 0x83, 0x32, 0x58, 0x93, 0x94, 0xf5, 0xdc, 0x88,
		0x61, 0xea, 0x7a, 0x6e, 0x47, 0x2a, 0xfd, 0x7a, 0x3a, 0xa7, 0xa6, 0x69, 0xd8, 0x9a, 0xcb, 0x70,
		0x7e, 0x88, 0x0d, 0x52, 0xdb, 0x97, 0x86, 0xd8, 0x34, 0xc5, 0x7d, 0x17, 0xc6, 0xba, 0xa2, 0x1a,
		0xe6, 0x3a, 0xc4, 0x33, 0x3a, 0xa1, 0x97, 0xa6, 0x6e, 0x9c, 0xb8, 0xbd, 0x38, 0x0e, 0xdd, 0x4c,
		0x07, 0xbc, 0xa6, 0x85, 0x5d, 0xcb, 0xb6, 0x20, 0x6a, 0x88, 0x1a, 0xa2, 0x86, 0xa8, 0x21, 0xea,
		0xca, 0x89, 0xba, 0x05, 0x3f, 0xef, 0x01, 0x3f, 0xfb, 0x69, 0xa6, 0x0c, 0x69, 0x79, 0x6a, 0x02,
		0x36, 0x86, 0x8d, 0xf7, 0x96, 0x8d, 0xaf, 0xc6, 0x5f, 0x2e, 0x8f, 0x12, 0xb9, 0x83, 0x85, 0x6f,
		0x72, 0x08, 0xd1, 0xd6, 0x78, 0xb6, 0x54, 0xc9, 0xc8, 0xf2, 0x28, 0xe8, 0x94, 0x90, 0x2c, 0x59,
		0x69, 0x8e, 0xaa, 0x06, 0xbd, 0xc8, 0xf7, 0x12, 0x5f, 0x77, 0x14, 0x72, 0x6b, 0xad, 0xf1, 0x62,
		0x76, 0xe7, 0x2d, 0xbe, 0xa8, 0x90, 0x1c, 0x35, 0x6a, 0x42, 0x96, 0x4c, 0x2c, 0x7f, 0x03, 0x23,
		0x8a, 0x6c, 0x2c, 0xda, 0x6a, 0xee, 0x78, 0xe3, 0xab, 0x03, 0x3c, 0x62, 0xd2, 0x89, 0x27, 0x57,
		0x74, 0xbc, 0xf4, 0x63, 0xfe, 0x6a, 0x15, 0x9e, 0x2d, 0xf9, 0x2a, 0xcd, 0x82, 0x68, 0xd4, 0x98,
		0x25, 0x54, 0xde, 0x9d, 0x46, 0x6f, 0x97, 0x65, 0x13, 0x9c, 0x35, 0x71, 0xd6, 0x64, 0x08, 0x26,
		0xa5, 0xcf, 0x9a, 0x16, 0x57, 0xa1, 0x81, 0x76, 0x5e, 0xb4, 0xa4, 0x27, 0xa1, 0x5b, 0x48, 0x68,
		0x24, 0xb4, 0x6d, 0x09, 0x5d, 0x76, 0x9b, 0xe4, 0x0f, 0x7a, 0xbe, 0x9f, 0xa8, 0x34, 0x35, 0xef,
		0xbc, 0x3a, 0x31, 0xa4, 0x39, 0xce, 0x7a, 0xfe, 0xa6, 0xf1, 0xa6, 0x91, 0xd8, 0x3c, 0xc2, 0x9b,
		0x48, 0x6a, 0x33, 0x89, 0x6f, 0x2a, 0xf1, 0xcd, 0x25, 0xbf, 0xc9, 0x0c, 0xa3, 0x44, 0xba, 0x1e,
		0x8a, 0xae, 0xff, 0xba, 0xb4, 0x72, 0x82, 0xde, 0x97, 0xb6, 0x3b, 0xde, 0x49, 0x6e, 0x14, 0xbb,
		0xff, 0x88, 0x23, 0x23, 0xff, 0xcd, 0x20, 0xa5, 0x6e, 0xba, 0x33, 0x0c, 0x53, 0xeb, 0x72, 0x43,
		0xdf, 0x7d, 0xf7, 0xa9, 0xe9, 0x9e, 0xdf, 0xfc, 0xf3, 0x53, 0xcb, 0x3d, 0xbf, 0x19, 0xfd, 0xd8,
		0x1a, 0xfe, 0x6b, 0xf4, 0xf3, 0xd1, 0xa7, 0xa6, 0xdb, 0x9e, 0xfc, 0x7c, 0xf2, 0xa9, 0xe9, 0x9e,
		0xdc, 0x7c, 0x7f, 0x7d, 0xfd, 0xea, 0xfb, 0x3f, 0x8e, 0xbf, 0x95, 0x7f, 0xf0, 0xbb, 0x3f, 0x7d,
		0xba, 0xbe, 0xee, 0xfd, 0xf1, 0xf7, 0x6f, 0x83, 0xff, 0x7f, 0xf7, 0xed, 0xe6, 0x87, 0xef, 0xff,
		0xc3, 0x74, 0xd5, 0x0f, 0x3e, 0xe0, 0xfa, 0xfa, 0xd5, 0xcd, 0xbf, 0xe9, 0x2f, 0xcb, 0x9b, 0xaa,
		0xfc, 0x44, 0x0d, 0xea, 0x9e, 0x51, 0x3b, 0xe6, 0x64, 0x30, 0x6b, 0x0c, 0x42, 0x80, 0x10, 0x20,
		0x04, 0xcd, 0x95, 0x53, 0xb4, 0x96, 0xf5, 0x59, 0x06, 0x38, 0xde, 0x0d, 0xe8, 0x71, 0xfd, 0x20,
		0x2d, 0x7d, 0x15, 0xc5, 0xb3, 0xde, 0xdb, 0xc4, 0x28, 0x50, 0x04, 0x14, 0x01, 0x45, 0x40, 0xd1,
		0xfa, 0x77, 0xec, 0x79, 0xd9, 0x43, 0xe9, 0xee, 0xd6, 0x6b, 0x87, 0x6c, 0xce, 0x9a, 0x19, 0xf8,
		0xb4, 0x00, 0x1f, 0xc0, 0x67, 0xd7, 0xc0, 0x47, 0x37, 0x2a, 0xb5, 0x6a, 0x3b, 0x9a, 0x4f, 0xf7,
		0x8a, 0x5d, 0x69, 0x3a, 0xe1, 0x66, 0x9b, 0x53, 0x6c, 0x93, 0x4a, 0x6e, 0x56, 0x4b, 0x9b, 0x56,
		0x7a, 0xf3, 0x5a, 0xdb, 0xc4, 0xd6, 0x36, 0xb3, 0xbd, 0x4d, 0x6d, 0xb6, 0xb9, 0x0d, 0x37, 0xb9,
		0xd8, 0x66, 0xcf, 0x0d, 0x85, 0x71, 0xe7, 0x77, 0x3f, 0xfe, 0x1a, 0xc9, 0xad, 0x91, 0xbc, 0x7d,
		0xd4, 0xc4, 0xb2, 0xd0, 0x4c, 0x9a, 0x39, 0x06, 0xd6, 0x60, 0xc0, 0x06, 0x1c, 0x58, 0x86, 0x05,
		0x5b, 0xf0, 0x60, 0x1d, 0x26, 0xac, 0xc3, 0x85, 0x7d, 0xd8, 0x90, 0x81, 0x0f, 0x21, 0x18, 0x91,
		0x73, 0x5c, 0xd6, 0xae, 0xdc, 0x49, 0xb2, 0xd8, 0x8c, 0x0e, 0x70, 0x7b, 0x49, 0xdc, 0x53, 0x89,
		0x91, 0x7f, 0xb3, 0x56, 0x1c, 0xb4, 0x05, 0x6d, 0x1a, 0xa5, 0x98, 0xad, 0x1f, 0x6b, 0x89, 0xd4,
		0xb3, 0xb5, 0xd6, 0x87, 0x29, 0x69, 0x91, 0xd9, 0x49, 0xc6, 0x5a, 0xe3, 0x2d, 0x0b, 0xb8, 0x3e,
		0xff, 0x01, 0xa7, 0xc3, 0x8c, 0x3a, 0x75, 0x3f, 0xd8, 0x7b, 0x6e, 0x12, 0xf7, 0xb3, 0x72, 0x0d,
		0xf9, 0x0b, 0x7f, 0xd0, 0xf1, 0xd1, 0x28, 0x75, 0x2f, 0xe8, 0xfc, 0xfe, 0x64, 0xc3, 0x7e, 0x7b,
		0x60, 0xfe, 0x8b, 0x4a, 0x6e, 0xbd, 0x2c, 0xe8, 0xda, 0xf8, 0x80, 0x37, 0x43, 0x70, 0xed, 0xa8,
		0x86, 0xa8, 0xe9, 0x6f, 0x2f, 0xa5, 0xd7, 0xba, 0x69, 0x3a, 0x61, 0x11, 0xe1, 0xd2, 0xb2, 0x30,
		0xbe, 0xc3, 0x2d, 0x24, 0x26, 0x0e, 0xe6, 0xfd, 0xac, 0x21, 0xe5, 0xbe, 0xb1, 0x60, 0x79, 0x71,
		0xe3, 0x5c, 0x38, 0xad, 0x53, 0x1b, 0x1f, 0x33, 0xda, 0x36, 0x17, 0xce, 0xf1, 0x91, 0x05, 0xeb,
		0xf9, 0xae, 0xb9, 0x70, 0xda, 0xb2, 0x8b, 0xbb, 0x6e, 0xe4, 0xfd, 0xa2, 0x06, 0xdb, 0x75, 0xe4,
		0xa0, 0x07, 0xbe, 0xbc, 0xfe, 0x9f, 0x18, 0x46, 0xfe, 0x23, 0xff, 0x91, 0xff, 0x07, 0x2a, 0xff,
		0xb5, 0x2b, 0x37, 0x9f, 0xc3, 0x81, 0x33, 0x41, 0x93, 0x66, 0x95, 0x9e, 0xeb, 0xfe, 0xb1, 0xa0,
		0x79, 0x24, 0x2a, 0x43, 0xd7, 0x1a, 0x17, 0x2a, 0x67, 0x5c, 0x6b, 0x5f, 0xba, 0xcc, 0x71, 0xfd,
		0xda, 0x93, 0x2a, 0x7f, 0xac, 0x48, 0x25, 0x3b, 0x52, 0x15, 0xa9, 0xcf, 0x4e, 0xed, 0xe9, 0xc9,
		0xc9, 0xf1, 0x09, 0xd3, 0x5b, 0x99, 0x4e, 0x94, 0xb5, 0x76, 0xb3, 0x6f, 0xaa, 0xb3, 0xd0, 0x65,
		0x37, 0x7a, 0xba, 0xb3, 0xe0, 0x3d, 0x27, 0x28, 0x4f, 0x94, 0x27, 0xca, 0x73, 0x2f, 0x95, 0x67,
		0xe9, 0xcb, 0x3c, 0x8b, 0xe2, 0x40, 0xc1, 0xcb, 0x3e, 0x77, 0x08, 0x87, 0x33, 0xc9, 0x49, 0x98,
		0xc7, 0x61, 0x8d, 0x6e, 0x08, 0xe0, 0x30, 0x38, 0x0c, 0x0e, 0xef, 0x0d, 0x0e, 0xaf, 0x38, 0x00,
		0xe4, 0xdc, 0xcf, 0xda, 0xb9, 0x5f, 0xe6, 0xa6, 0x2a, 0xb3, 0x76, 0xf4, 0xe7, 0x3f, 0x45, 0x5e,
		0x37, 0xe8, 0x58, 0x39, 0x90, 0x1b, 0x66, 0xbd, 0x3e, 0xf6, 0xc2, 0xa0, 0x13, 0x64, 0x92, 0xf2,
		0x7d, 0xee, 0x53, 0xda, 0xf3, 0x9f, 0xd2, 0xef, 0xde, 0x6a, 0x75, 0x4f, 0x7f, 0xf6, 0x73, 0x4e,
		0x46, 0xb3, 0xe1, 0xaa, 0x24, 0xb6, 0x61, 0x7e, 0x74, 0x4a, 0x9a, 0x1c, 0xec, 0xd9, 0xdf, 0x64,
		0x1d, 0xda, 0x39, 0xfa, 0x9b, 0x5f, 0x85, 0xa5, 0xee, 0xab, 0xd5, 0xf8, 0x8c, 0xd1, 0x1a, 0xbc,
		0x70, 0xda, 0x56, 0x0e, 0x31, 0x87, 0x2b, 0xf0, 0xc2, 0x39, 0xb1, 0x62, 0x7c, 0x04, 0x36, 0x76,
		0x0e, 0x49, 0xd3, 0xc1, 0x98, 0x9c, 0x72, 0xfe, 0x67, 0xdf, 0x03, 0x48, 0xd4, 0x9d, 0x4a, 0x54,
		0xd4, 0x51, 0x6e, 0xa8, 0xbe, 0xa8, 0xd0, 0x82, 0x23, 0xb0, 0xf8, 0x09, 0xf8, 0x03, 0xf8, 0x03,
		0xf8, 0x03, 0x07, 0xea, 0x0f, 0x70, 0x22, 0x28, 0xb9, 0x2c, 0x39, 0x11, 0x2c, 0xb4, 0xf6, 0x38,
		0x11, 0x5c, 0x37, 0xb5, 0xcd, 0x66, 0x93, 0xd9, 0xad, 0x4c, 0x38, 0x3a, 0x1c, 0x08, 0xae, 0x99,
		0xc4, 0x99, 0xac, 0x3f, 0x61, 0xf9, 0x29, 0x9c, 0x85, 0x8b, 0xec, 0x44, 0x76, 0x22, 0x3b, 0x77,
		0x4e, 0x76, 0x52, 0x87, 0xb2, 0x34, 0xd6, 0xd4, 0xa1, 0xac, 0xff, 0x00, 0xea, 0x50, 0x0a, 0x7e,
		0x00, 0x75, 0x28, 0xd4, 0xa1, 0x2c, 0x59, 0xa6, 0x0e, 0xa5, 0x1a, 0x07, 0xa0, 0x36, 0x71, 0xe8,
		0xad, 0xd6, 0xc2, 0xff, 0x97, 0x7a, 0xb2, 0x10, 0x66, 0x6e, 0xbc, 0x0b, 0xd2, 0xec, 0x32, 0xcb,
		0x84, 0xea, 0xec, 0xaf, 0x82, 0xe8, 0xe7, 0x50, 0x0d, 0x76, 0x85, 0x90, 0x2b, 0xdc, 0xb8, 0xf2,
		0x1e, 0x67, 0x2c, 0xb6, 0xde, 0xb4, 0xdb, 0xa7, 0x67, 0xed, 0x76, 0xf3, 0xec, 0xf8, 0xac, 0x79,
		0x7e, 0x72, 0xd2, 0x3a, 0x6d, 0x09, 0x1c, 0xfa, 0x34, 0x7e, 0x4d, 0x7c, 0x95, 0x28, 0xff, 0xc7,
		0xc1, 0x08, 0x47, 0xfd, 0x30, 0xdc, 0xea, 0x44, 0x6b, 0xf6, 0xba, 0x5f, 0x8f, 0x1f, 0x55, 0xf6,
		0xc0, 0x5f, 0x6a, 0xd8, 0xbe, 0xf4, 0x27, 0xaf, 0x67, 0x3b, 0x18, 0xbd, 0x96, 0xcd, 0x97, 0xa8,
		0xa8, 0x9b, 0xfe, 0x4f, 0xd3, 0xaf, 0xf4, 0x6e, 0xf0, 0x1d, 0x17, 0xff, 0xe0, 0xf3, 0x7b, 0x2f,
		0x7b, 0xf8, 0x75, 0xf4, 0x0d, 0x67, 0x7e, 0x36, 0x13, 0x0f, 0xdf, 0x76, 0xa4, 0x41, 0x8f, 0xd0,
		0xf2, 0xad, 0xf5, 0xb2, 0x6d, 0x18, 0x5d, 0xf4, 0x51, 0xb7, 0x25, 0xda, 0xa8, 0x71, 0xf3, 0xb4,
		0xf4, 0x28, 0x74, 0xc3, 0xf8, 0xfe, 0xde, 0xc4, 0x83, 0x9b, 0x26, 0xcb, 0xce, 0x18, 0xa3, 0x75,
		0x1a, 0xad, 0xd3, 0xb6, 0x1e, 0xa6, 0xda, 0xb1, 0xd6, 0x69, 0x83, 0xfd, 0x13, 0x44, 0x69, 0xff,
		0xee, 0x2e, 0xe8, 0x04, 0x03, 0xcf, 0xe7, 0xf6, 0xab, 0xdb, 0x55, 0x69, 0x9a, 0x7a, 0xf7, 0x4a,
		0xae, 0x97, 0xda, 0xc6, 0x4f, 0x91, 0x69, 0xae, 0xd6, 0xa4, 0xb9, 0x5a, 0xd5, 0xdb, 0xdb, 0xda,
		0x36, 0xb7, 0x1e, 0xa5, 0xde, 0xd7, 0xe6, 0x6a, 0x62, 0x51, 0x68, 0xb1, 0x76, 0xae, 0x4b, 0x2c,
		0x7b, 0xbc, 0x2d, 0xc5, 0xfc, 0xd2, 0x0c, 0x24, 0x7b, 0x1d, 0x2f, 0xec, 0xb8, 0x77, 0x5e, 0x10,
		0xf6, 0x13, 0x35, 0x04, 0x2f, 0x71, 0x84, 0x5c, 0xfd, 0x11, 0xc0, 0x23, 0xf0, 0x08, 0x3c, 0x02,
		0x8f, 0xf5, 0x86, 0xc7, 0x44, 0x25, 0x71, 0x3f, 0x53, 0x96, 0xb4, 0xe3, 0x92, 0x75, 0x40, 0x11,
		0x50, 0x04, 0x14, 0x01, 0xc5, 0x7a, 0x83, 0x62, 0x9a, 0x79, 0x99, 0x25, 0xad, 0x38, 0x6f, 0x1a,
		0x38, 0x04, 0x0e, 0x81, 0x43, 0xe0, 0xd0, 0x32, 0x1c, 0x72, 0xe8, 0x24, 0x70, 0xe8, 0x64, 0x7e,
		0x62, 0xe1, 0xd4, 0xe8, 0xcc, 0xe9, 0xc3, 0xd1, 0xbb, 0x77, 0xe3, 0x2f, 0x53, 0xcf, 0xdb, 0xed,
		0x5f, 0x96, 0xbe, 0x59, 0x5b, 0xff, 0x9a, 0x5a, 0xb3, 0xcc, 0x0b, 0xf3, 0x4c, 0x0b, 0x2b, 0x99,
		0x15, 0x66, 0x99, 0x14, 0x65, 0xc7, 0xdf, 0x70, 0xd7, 0xd7, 0x6d, 0xb7, 0xeb, 0xdc, 0x8e, 0x5d,
		0x8f, 0x9d, 0x5d, 0x6e, 0x3b, 0x7f, 0xdb, 0xd2, 0xbd, 0xef, 0x9a, 0xcb, 0x65, 0xcb, 0xcb, 0xa4,
		0xc4, 0xaa, 0xd8, 0xd2, 0x6a, 0x28, 0x36, 0xfb, 0xcf, 0xcf, 0x65, 0x81, 0x79, 0x6c, 0xdc, 0x79,
		0x69, 0x36, 0x89, 0xf0, 0x14, 0x9e, 0xc5, 0x5c, 0x5d, 0xcd, 0x3d, 0x5d, 0x70, 0xd5, 0x94, 0xf3,
		0x77, 0x4a, 0xfb, 0x35, 0x3a, 0xfe, 0x8b, 0xa1, 0x9f, 0xa2, 0xeb, 0x8f, 0x18, 0xfb, 0x1d, 0xc6,
		0xfe, 0x85, 0xb9, 0x1f, 0x21, 0x8b, 0x28, 0xa5, 0xf5, 0xbf, 0xb6, 0xce, 0x2f, 0xa9, 0xe7, 0x65,
		0x36, 0x5b, 0xd0, 0xed, 0xc5, 0xa9, 0x72, 0x67, 0xba, 0x78, 0x84, 0x61, 0xf9, 0x4d, 0xb7, 0xd2,
		0x0a, 0x9b, 0x8f, 0xcd, 0xc7, 0xe6, 0xdb, 0xf4, 0x99, 0x65, 0xb3, 0xde, 0x66, 0x6e, 0x24, 0x2b,
		0xe3, 0x2f, 0x96, 0xcc, 0x68, 0x63, 0x8b, 0x1d, 0xd2, 0x16, 0x2b, 0x9b, 0x31, 0xd6, 0xf0, 0xc2,
		0xf2, 0x9d, 0x75, 0xf2, 0xd9, 0xf6, 0xc2, 0xb2, 0xd5, 0x0c, 0x9a, 0xc1, 0x68, 0xed, 0xe0, 0xb3,
		0x49, 0xb0, 0x59, 0x28, 0xb8, 0x6c, 0x1a, 0x4c, 0x16, 0x0b, 0x1e, 0x8b, 0x05, 0x8b, 0xe5, 0x82,
		0xc3, 0x76, 0xa3, 0x3d, 0xda, 0xc1, 0x5e, 0xe3, 0xe0, 0xae, 0x66, 0x30, 0xb7, 0x84, 0x9f, 0x5d,
		0x02, 0x5c, 0x6f, 0xbd, 0xc8, 0xff, 0x1a, 0xf8, 0xd9, 0x83, 0xdb, 0x79, 0xf0, 0xa2, 0x7b, 0xfd,
		0x23, 0xab, 0x7c, 0x58, 0xd6, 0x5a, 0x04, 0x0c, 0x00, 0x03, 0xc0, 0xa0, 0xce, 0x60, 0xb0, 0x2a,
		0x4f, 0xdb, 0x08, 0x0b, 0xd6, 0x19, 0x04, 0x0a, 0x80, 0x02, 0xa0, 0xa0, 0xce, 0x50, 0x20, 0x93,
		0xf3, 0x3c, 0x6d, 0xa7, 0x29, 0x90, 0xdf, 0x0c, 0x0c, 0x00, 0x03, 0xc0, 0x40, 0xb5, 0x30, 0x90,
		0xa8, 0xb8, 0x97, 0x05, 0xdd, 0xe0, 0x1f, 0xca, 0xf5, 0xb2, 0x6c, 0xf0, 0x95, 0x52, 0x73, 0x30,
		0xd8, 0x64, 0x14, 0x48, 0x00, 0x12, 0x80, 0x84, 0xdd, 0x80, 0x04, 0x5f, 0x12, 0x0a, 0x7c, 0x20,
		0x00, 0x08, 0x00, 0x02, 0x76, 0x04, 0x02, 0x0c, 0x2b, 0x7e, 0x66, 0xf6, 0xbf, 0x51, 0x75, 0x0f,
		0x9b, 0x9f, 0xcd, 0xcf, 0xe6, 0xaf, 0x76, 0xf3, 0x9b, 0x55, 0xb6, 0xcc, 0x5c, 0x75, 0xa8, 0x5f,
		0xc5, 0xc2, 0xb6, 0x67, 0xdb, 0xb3, 0xed, 0x2b, 0xde, 0xf6, 0xfd, 0x5b, 0x37, 0x4c, 0x7b, 0xae,
		0xd4, 0xf6, 0x5f, 0x69, 0x0e, 0x18, 0x00, 0x06, 0x80, 0x81, 0xca, 0x61, 0xe0, 0xf0, 0xf2, 0xf2,
		0xcb, 0x57, 0x61, 0x55, 0x94, 0x8d, 0x5f, 0xaa, 0xa2, 0x4a, 0x26, 0x35, 0x31, 0x52, 0x5f, 0xdd,
		0x34, 0x7b, 0x0a, 0x95, 0xeb, 0xdd, 0xdd, 0x05, 0x51, 0x90, 0x3d, 0x4d, 0x7f, 0xc8, 0x9e, 0x7a,
		0x2a, 0x2d, 0x9f, 0xb4, 0xf8, 0xbc, 0x49, 0xd2, 0x19, 0x49, 0x67, 0x34, 0x04, 0x9a, 0xd2, 0xe9,
		0x8c, 0xcf, 0xad, 0x4a, 0x7d, 0x35, 0xf3, 0xac, 0x65, 0x3d, 0x61, 0xd3, 0x42, 0xd8, 0x20, 0x6c,
		0x6c, 0x0b, 0x1b, 0xdd, 0x3e, 0x92, 0x0d, 0xb3, 0xbd, 0xb3, 0xb4, 0x7e, 0x4c, 0x36, 0x8c, 0xa1,
		0x47, 0x60, 0xbc, 0x81, 0x24, 0x36, 0x92, 0xf0, 0x86, 0x92, 0xda, 0x58, 0xe2, 0x1b, 0x4c, 0x7c,
		0xa3, 0xc9, 0x6f, 0x38, 0xbd, 0x8d, 0xa7, 0xb9, 0x01, 0xcd, 0x3d, 0x8c, 0xa5, 0x95, 0x33, 0xb9,
		0x37, 0x68, 0xa2, 0x7b, 0xc7, 0x3b, 0xcb, 0x64, 0x15, 0x09, 0x5c, 0x11, 0x24, 0x73, 0x25, 0x90,
		0xec, 0x15, 0x40, 0xa3, 0x5b, 0x79, 0x82, 0xa8, 0x13, 0xf6, 0x7d, 0x89, 0x5b, 0x7f, 0x1a, 0x47,
		0x33, 0xf6, 0xdc, 0x34, 0x4b, 0x82, 0x8e, 0xc4, 0xcd, 0xf6, 0x93, 0x9b, 0xe6, 0xc5, 0x5e, 0xb3,
		0x3d, 0x63, 0xcf, 0x2d, 0x5f, 0xa9, 0xb1, 0xd2, 0xe6, 0xf0, 0xfe, 0xf8, 0xe0, 0x3e, 0x8a, 0x13,
		0xc3, 0x8b, 0x75, 0x8c, 0xfb, 0xb8, 0x88, 0x5d, 0x9c, 0x93, 0x0f, 0xb9, 0xc8, 0x85, 0xea, 0x73,
		0x03, 0x2e, 0x72, 0x79, 0xfa, 0x64, 0xb8, 0x45, 0x2e, 0x4b, 0xcf, 0xb7, 0x81, 0xc8, 0xa5, 0x40,
		0x8b, 0x9b, 0xe0, 0xc2, 0x39, 0xda, 0xad, 0xde, 0x35, 0x35, 0xed, 0x4e, 0x62, 0xe2, 0x56, 0xd0,
		0xa3, 0xc4, 0x74, 0x16, 0x76, 0xaa, 0x47, 0xc9, 0xb3, 0x51, 0x98, 0xd7, 0xc2, 0x7e, 0x6b, 0x85,
		0x71, 0xb2, 0xbf, 0xab, 0xaf, 0x1f, 0x06, 0x2f, 0x7e, 0x39, 0x7e, 0xdd, 0xc9, 0xbf, 0x07, 0x22,
		0x6a, 0xf3, 0xdf, 0x36, 0x6a, 0x70, 0x98, 0xf2, 0xdc, 0xb8, 0xe7, 0xff, 0xd5, 0xb2, 0x17, 0x93,
		0x98, 0xf9, 0x0c, 0xa2, 0x13, 0x44, 0x27, 0x88, 0x4e, 0x10, 0x9d, 0x20, 0x3a, 0x41, 0x74, 0x82,
		0xe8, 0x04, 0xd1, 0x09, 0xa2, 0x13, 0x44, 0x27, 0x88, 0x4e, 0xec, 0x59, 0x74, 0xe2, 0xa5, 0xbe,
		0x86, 0x6a, 0xc9, 0xe9, 0xa7, 0x16, 0xda, 0x09, 0xed, 0x84, 0x76, 0xd2, 0x5d, 0x39, 0xa3, 0x80,
		0x51, 0x10, 0xa7, 0xee, 0x63, 0x32, 0xc4, 0x2e, 0xb3, 0x4e, 0xd2, 0x13, 0xdd, 0x64, 0x70, 0x9f,
		0x7a, 0xe3, 0xbd, 0x97, 0x65, 0x2a, 0x89, 0x1a, 0x17, 0xce, 0x27, 0xb3, 0x49, 0xfe, 0x74, 0x7d,
		0xfd, 0xf5, 0xfa, 0xda, 0xbd, 0xbe, 0x7e, 0x75, 0xf1, 0xf2, 0xf3, 0x7f, 0xfe, 0xcb, 0x9f, 0xfe,
		0xf5, 0xfa, 0xfa, 0x87, 0xbf, 0x5c, 0x5f, 0xff, 0xf3, 0xdf, 0x6f, 0x7e, 0xd0, 0x9f, 0xe8, 0x9b,
		0xbd, 0x0d, 0xfe, 0x3a, 0xda, 0xf1, 0x1b, 0xc2, 0xc0, 0x84, 0x81, 0x4b, 0x85, 0x81, 0x5d, 0x13,
		0xf6, 0xae, 0x7d, 0x40, 0xf8, 0x32, 0xff, 0x72, 0x3b, 0x15, 0x19, 0xce, 0x7f, 0x3a, 0xaa, 0x22,
		0x46, 0x3c, 0xf3, 0x69, 0x44, 0x8b, 0x89, 0x16, 0x13, 0x2d, 0x26, 0x5a, 0x8c, 0xc7, 0x83, 0xc7,
		0x43, 0xb4, 0x98, 0x68, 0x31, 0xd1, 0x62, 0xa2, 0xc5, 0x44, 0x8b, 0x89, 0x16, 0x13, 0x2d, 0x46,
		0x3b, 0xa1, 0x9d, 0x88, 0x16, 0x13, 0x2d, 0xb6, 0x0a, 0xaf, 0x47, 0x72, 0xf0, 0x7a, 0x04, 0xbc,
		0x02, 0xaf, 0xc0, 0x2b, 0xf0, 0xba, 0x6f, 0xf0, 0xba, 0xc5, 0xc3, 0x38, 0x47, 0x3b, 0x50, 0xce,
		0xb1, 0x9c, 0xe9, 0xcc, 0x1c, 0xec, 0xb1, 0x9c, 0x6b, 0xc2, 0xe8, 0xbb, 0x73, 0x40, 0x77, 0x99,
		0x7f, 0xcb, 0x1d, 0x3d, 0xa9, 0xcb, 0x7f, 0x3a, 0xae, 0xf6, 0xcc, 0x6e, 0xe6, 0x73, 0x39, 0xbd,
		0xb3, 0xac, 0xe4, 0x38, 0xbd, 0xd3, 0x85, 0x6f, 0x4e, 0xef, 0x70, 0x91, 0x70, 0x91, 0xf6, 0xca,
		0x45, 0xe2, 0xf4, 0xae, 0xb0, 0x35, 0x4e, 0xef, 0x38, 0xbd, 0xdb, 0x60, 0x8a, 0xd3, 0x3b, 0x53,
		0x6b, 0x9c, 0xde, 0x15, 0xd1, 0x50, 0x9c, 0xde, 0xa1, 0x9d, 0xd0, 0x4e, 0x84, 0x97, 0x09, 0x2f,
		0x5b, 0x81, 0x57, 0x4e, 0xef, 0x80, 0x57, 0xe0, 0x15, 0x78, 0x05, 0x5e, 0xad, 0xc0, 0xeb, 0xb1,
		0x1c, 0xbc, 0x1e, 0x03, 0xaf, 0xc0, 0x2b, 0xf0, 0x0a, 0xbc, 0xee, 0x1b, 0xbc, 0xd6, 0x22, 0x39,
		0xc2, 0xd1, 0x3e, 0x91, 0x24, 0x4d, 0xc2, 0x74, 0x8e, 0x48, 0x93, 0xd0, 0x3f, 0x10, 0x77, 0x76,
		0x33, 0x61, 0xe2, 0x32, 0xff, 0xba, 0x3b, 0x9f, 0x39, 0x91, 0xff, 0xd4, 0xde, 0x56, 0x0e, 0xc5,
		0xcc, 0x1b, 0x90, 0x4d, 0x61, 0x59, 0xfa, 0x91, 0x4d, 0xa1, 0x8b, 0xf2, 0x64, 0x53, 0xe0, 0x53,
		0xe1, 0x53, 0xed, 0x95, 0x4f, 0x45, 0x36, 0x45, 0x61, 0x6b, 0x64, 0x53, 0x90, 0x4d, 0xb1, 0xc1,
		0x14, 0xd9, 0x14, 0xa6, 0xd6, 0xc8, 0xa6, 0x28, 0xa2, 0xa1, 0xc8, 0xa6, 0x40, 0x3b, 0xa1, 0x9d,
		0x88, 0x47, 0x13, 0x8f, 0xb6, 0x02, 0xaf, 0x64, 0x53, 0x00, 0xaf, 0xc0, 0x2b, 0xf0, 0x0a, 0xbc,
		0x5a, 0x81, 0x57, 0xb2, 0x29, 0x80, 0x57, 0xe0, 0x15, 0x78, 0x05, 0x5e, 0xad, 0xc0, 0x6b, 0x5b,
		0x0e, 0x5e, 0xdb, 0xc0, 0x2b, 0xf0, 0x0a, 0xbc, 0x02, 0xaf, 0xfb, 0x06, 0xaf, 0x35, 0x4b, 0x56,
		0x73, 0xb4, 0x53, 0x3f, 0x48, 0x5b, 0x33, 0x9d, 0x2d, 0xd2, 0xd6, 0x24, 0x72, 0x90, 0x9c, 0x1d,
		0x4f, 0x60, 0xbb, 0xcc, 0xbf, 0xf7, 0x1e, 0x65, 0xb2, 0xe5, 0x3f, 0x9d, 0x6c, 0x3f, 0xa7, 0x6d,
		0xe6, 0x5d, 0xc8, 0x6e, 0xb3, 0xac, 0x15, 0xc9, 0x6e, 0xd3, 0x25, 0x03, 0xb2, 0xdb, 0x70, 0xc2,
		0x70, 0xc2, 0xf6, 0xca, 0x09, 0x23, 0xbb, 0xad, 0xb0, 0x35, 0xb2, 0xdb, 0xc8, 0x6e, 0xdb, 0x60,
		0x8a, 0xec, 0x36, 0x53, 0x6b, 0x64, 0xb7, 0x15, 0xd1, 0x50, 0x64, 0xb7, 0xa1, 0x9d, 0xd0, 0x4e,
		0x04, 0xb0, 0x09, 0x60, 0x5b, 0x81, 0x57, 0xb2, 0xdb, 0x80, 0x57, 0xe0, 0x15, 0x78, 0x05, 0x5e,
		0xad, 0xc0, 0x2b, 0xd9, 0x6d, 0xc0, 0x2b, 0xf0, 0x0a, 0xbc, 0x02, 0xaf, 0x56, 0xe0, 0x95, 0xec,
		0x36, 0xe0, 0x15, 0x78, 0x05, 0x5e, 0x81, 0x57, 0x2b, 0xf0, 0x7a, 0x22, 0x07, 0xaf, 0x27, 0xc0,
		0x2b, 0xf0, 0x0a, 0xbc, 0x02, 0xaf, 0xfb, 0x06, 0xaf, 0xb5, 0x4d, 0x1e, 0x76, 0xb4, 0x73, 0xec,
		0x48, 0x23, 0x36, 0x9d, 0x37, 0xd2, 0x88, 0x65, 0xd3, 0x3e, 0x9d, 0x7d, 0x49, 0x28, 0xbe, 0xcc,
		0x07, 0x60, 0x2f, 0x33, 0x8b, 0xf3, 0x9f, 0x4e, 0xeb, 0x94, 0x63, 0x3c, 0xf3, 0x56, 0x64, 0x1b,
		0x5b, 0x16, 0x97, 0x64, 0x1b, 0xeb, 0x72, 0x06, 0xd9, 0xc6, 0x78, 0x6d, 0x78, 0x6d, 0x7b, 0xe5,
		0xb5, 0x91, 0x6d, 0x5c, 0xd8, 0x1a, 0xd9, 0xc6, 0x64, 0x1b, 0x6f, 0x30, 0x45, 0xb6, 0xb1, 0xa9,
		0x35, 0xb2, 0x8d, 0x8b, 0x68, 0x28, 0xb2, 0x8d, 0xd1, 0x4e, 0x68, 0x27, 0x22, 0xde, 0x44, 0xbc,
		0xad, 0xc0, 0x2b, 0xd9, 0xc6, 0xc0, 0x2b, 0xf0, 0x0a, 0xbc, 0x02, 0xaf, 0x56, 0xe0, 0x95, 0x6c,
		0x63, 0xe0, 0x15, 0x78, 0x05, 0x5e, 0x81, 0x57, 0x2b, 0xf0, 0x4a, 0xb6, 0x31, 0xf0, 0x0a, 0xbc,
		0x02, 0xaf, 0xc0, 0xab, 0x15, 0x78, 0x25, 0xdb, 0x18, 0x78, 0x05, 0x5e, 0x81, 0x57, 0xe0, 0xd5,
		0x0a, 0xbc, 0x9e, 0xca, 0xc1, 0xeb, 0x29, 0xf0, 0x0a, 0xbc, 0x02, 0xaf, 0xc0, 0xeb, 0xbe, 0xc1,
		0xeb, 0x0e, 0x14, 0x73, 0x38, 0xda, 0xc9, 0xcc, 0x94, 0x75, 0x98, 0xce, 0x20, 0x65, 0x1d, 0xb6,
		0x32, 0xed, 0x9d, 0xbd, 0x2b, 0xf0, 0xb8, 0xcc, 0x47, 0x62, 0xcf, 0x2b, 0x3d, 0xf2, 0x9f, 0xce,
		0xea, 0x59, 0xf3, 0x31, 0xf3, 0x7e, 0x54, 0x7f, 0x58, 0x56, 0xa3, 0x54, 0x7f, 0xe8, 0x52, 0x0b,
		0xd5, 0x1f, 0xb8, 0x79, 0xb8, 0x79, 0x7b, 0xe5, 0xe6, 0x51, 0xfd, 0x51, 0xd8, 0x1a, 0xd5, 0x1f,
		0x54, 0x7f, 0x6c, 0x30, 0x45, 0xf5, 0x87, 0xa9, 0x35, 0xaa, 0x3f, 0x8a, 0x68, 0x28, 0xaa, 0x3f,
		0xd0, 0x4e, 0x68, 0x27, 0x42, 0xe4, 0x84, 0xc8, 0xad, 0xc0, 0x2b, 0xd5, 0x1f, 0xc0, 0x2b, 0xf0,
		0x0a, 0xbc, 0x02, 0xaf, 0x56, 0xe0, 0x95, 0xea, 0x0f, 0xe0, 0x15, 0x78, 0x05, 0x5e, 0x81, 0x57,
		0x2b, 0xf0, 0x4a, 0xf5, 0x07, 0xf0, 0x0a, 0xbc, 0x02, 0xaf, 0xc0, 0xab, 0x15, 0x78, 0xa5, 0xfa,
		0x03, 0x78, 0x05, 0x5e, 0x81, 0x57, 0xe0, 0xd5, 0x0a, 0xbc, 0x52, 0xfd, 0x01, 0xbc, 0x02, 0xaf,
		0xc0, 0x2b, 0xf0, 0x6a, 0x05, 0x5e, 0xcf, 0xe4, 0xe0, 0xf5, 0x0c, 0x78, 0x05, 0x5e, 0x81, 0x57,
		0xe0, 0x75, 0xdf, 0xe0, 0x75, 0xa7, 0x8a, 0xeb, 0x1c, 0xed, 0xaa, 0x11, 0xca, 0xec, 0x4c, 0xe7,
		0x92, 0x32, 0x3b, 0xfb, 0xc5, 0x4d, 0xce, 0xfe, 0x16, 0xdc, 0x5d, 0xe6, 0x43, 0x72, 0x30, 0x95,
		0x77, 0xf9, 0x4f, 0x6f, 0xea, 0x5e, 0x83, 0x37, 0xf3, 0xa6, 0x54, 0xe3, 0x59, 0x96, 0xaf, 0x54,
		0xe3, 0xe9, 0x32, 0x10, 0xd5, 0x78, 0xf8, 0x85, 0xf8, 0x85, 0x7b, 0xe5, 0x17, 0x52, 0x8d, 0x57,
		0xd8, 0x1a, 0xd5, 0x78, 0x54, 0xe3, 0x6d, 0x30, 0x45, 0x35, 0x9e, 0xa9, 0x35, 0xaa, 0xf1, 0x8a,
		0x68, 0x28, 0xaa, 0xf1, 0xd0, 0x4e, 0x68, 0x27, 0x62, 0xea, 0xc4, 0xd4, 0xad, 0xc0, 0x2b, 0xd5,
		0x78, 0xc0, 0x2b, 0xf0, 0x0a, 0xbc, 0x02, 0xaf, 0x56, 0xe0, 0x95, 0x6a, 0x3c, 0xe0, 0x15, 0x78,
		0x05, 0x5e, 0x81, 0x57, 0x2b, 0xf0, 0x4a, 0x35, 0x1e, 0xf0, 0x0a, 0xbc, 0x02, 0xaf, 0xc0, 0xab,
		0x15, 0x78, 0xa5, 0x1a, 0x0f, 0x78, 0x05, 0x5e, 0x81, 0x57, 0xe0, 0xd5, 0x0a, 0xbc, 0x52, 0x8d,
		0x07, 0xbc, 0x02, 0xaf, 0xc0, 0x2b, 0xf0, 0x6a, 0x05, 0x5e, 0xa9, 0xc6, 0x03, 0x5e, 0x81, 0x57,
		0xe0, 0x15, 0x78, 0xb5, 0x02, 0xaf, 0x6f, 0xe4, 0xe0, 0xf5, 0x0d, 0xf0, 0x0a, 0xbc, 0x02, 0xaf,
		0xc0, 0xeb, 0xbe, 0xc1, 0xeb, 0x8e, 0x16, 0x3b, 0x3b, 0xda, 0xe5, 0x79, 0x94, 0x3d, 0x9b, 0xce,
		0x2a, 0x65, 0xcf, 0x55, 0xd6, 0x93, 0x3a, 0x07, 0x50, 0x00, 0x7d, 0x99, 0x8f, 0xcd, 0x01, 0x56,
		0x42, 0xe7, 0x3f, 0x9d, 0xef, 0x4e, 0x4d, 0xf4, 0xcc, 0x3b, 0x53, 0x1d, 0x6d, 0x59, 0xef, 0x52,
		0x1d, 0xad, 0x4b, 0x54, 0x54, 0x47, 0xe3, 0x48, 0xe2, 0x48, 0xee, 0x95, 0x23, 0x49, 0x75, 0x74,
		0x61, 0x6b, 0x54, 0x47, 0x53, 0x1d, 0xbd, 0xc1, 0x14, 0xd5, 0xd1, 0xa6, 0xd6, 0xa8, 0x8e, 0x2e,
		0xa2, 0xa1, 0xa8, 0x8e, 0x46, 0x3b, 0xa1, 0x9d, 0x08, 0xc2, 0x13, 0x84, 0xb7, 0x02, 0xaf, 0x54,
		0x47, 0x03, 0xaf, 0xc0, 0x2b, 0xf0, 0x0a, 0xbc, 0x5a, 0x81, 0x57, 0xaa, 0xa3, 0x81, 0x57, 0xe0,
		0x15, 0x78, 0x05, 0x5e, 0xad, 0xc0, 0x2b, 0xd5, 0xd1, 0xc0, 0x2b, 0xf0, 0x0a, 0xbc, 0x02, 0xaf,
		0x56, 0xe0, 0x95, 0xea, 0x68, 0xe0, 0x15, 0x78, 0x05, 0x5e, 0x81, 0x57, 0x2b, 0xf0, 0x4a, 0x75,
		0x34, 0xf0, 0x0a, 0xbc, 0x02, 0xaf, 0xc0, 0xab, 0x15, 0x78, 0xa5, 0x3a, 0x1a, 0x78, 0x05, 0x5e,
		0x81, 0x57, 0xe0, 0xd5, 0x0a, 0xbc, 0x52, 0x1d, 0x0d, 0xbc, 0x02, 0xaf, 0xc0, 0x2b, 0xf0, 0x6a,
		0x05, 0x5e, 0xcf, 0xe5, 0xe0, 0xf5, 0x1c, 0x78, 0x05, 0x5e, 0x81, 0x57, 0xe0, 0x75, 0xdf, 0xe0,
		0x75, 0xe7, 0x9b, 0x4f, 0x38, 0xda, 0x75, 0xd0, 0xb4, 0xa1, 0x30, 0x9d, 0x5f, 0xda, 0x50, 0x6c,
		0xa7, 0x84, 0xdf, 0x39, 0xa4, 0x86, 0x14, 0x97, 0xf9, 0x20, 0x1d, 0x74, 0x67, 0x8a, 0xa9, 0xe5,
		0xe6, 0x2e, 0x36, 0xa9, 0x98, 0x7d, 0x7d, 0xfa, 0x55, 0x58, 0x96, 0xc8, 0xf4, 0xab, 0xd0, 0x65,
		0x34, 0xfa, 0x55, 0xe0, 0x7b, 0xe2, 0x7b, 0xee, 0x95, 0xef, 0x49, 0xbf, 0x8a, 0xc2, 0xd6, 0xe8,
		0x57, 0x41, 0xbf, 0x8a, 0x0d, 0xa6, 0xe8, 0x57, 0x61, 0x6a, 0x8d, 0x7e, 0x15, 0x45, 0x34, 0x14,
		0xfd, 0x2a, 0xd0, 0x4e, 0x68, 0x27, 0xe2, 0xf6, 0xc4, 0xed, 0xed, 0xc0, 0x6b, 0x53, 0x10, 0x5f,
		0x9b, 0x00, 0x2c, 0x00, 0x0b, 0xc0, 0x02, 0xb0, 0x00, 0x2c, 0x0d, 0x81, 0x80, 0x57, 0xe0, 0x15,
		0x78, 0x05, 0x5e, 0xed, 0xc2, 0x2b, 0x0d, 0x81, 0x80, 0x57, 0xe0, 0x15, 0x78, 0x05, 0x5e, 0xad,
		0xc0, 0x2b, 0x0d, 0x81, 0x80, 0x57, 0xe0, 0x15, 0x78, 0x05, 0x5e, 0xad, 0xc0, 0x2b, 0x0d, 0x81,
		0x80, 0x57, 0xe0, 0x15, 0x78, 0x05, 0x5e, 0xad, 0xc0, 0x2b, 0x0d, 0x81, 0x80, 0x57, 0xe0, 0x15,
		0x78, 0x05, 0x5e, 0xad, 0xc0, 0x2b, 0x0d, 0x81, 0x80, 0x57, 0xe0, 0x15, 0x78, 0x05, 0x5e, 0xad,
		0xc0, 0x2b, 0x0d, 0x81, 0x80, 0x57, 0xe0, 0x15, 0x78, 0x05, 0x5e, 0xad, 0xc0, 0x2b, 0x0d, 0x81,
		0x80, 0x57, 0xe0, 0x15, 0x78, 0x05, 0x5e, 0x85, 0x9e, 0xa8, 0x77, 0x43, 0x20, 0x47, 0xbf, 0xe7,
		0x04, 0xbd, 0x81, 0x4c, 0xa7, 0x9a, 0xde, 0x40, 0x5b, 0xef, 0x9c, 0xe2, 0x1c, 0x64, 0x9b, 0xa0,
		0xcb, 0xe9, 0x70, 0xd9, 0x6a, 0x18, 0xf4, 0x42, 0x70, 0xc3, 0xe8, 0x6e, 0x94, 0x9a, 0x6d, 0x90,
		0x12, 0x4b, 0xb3, 0x0e, 0x4b, 0xb2, 0xd8, 0xd2, 0x78, 0x7e, 0xa2, 0x0b, 0x4c, 0x72, 0x63, 0x30,
		0x45, 0x6e, 0xaa, 0x42, 0xd5, 0x19, 0xbc, 0xab, 0xdb, 0x55, 0x59, 0x12, 0x74, 0x0a, 0xcf, 0x75,
		0x2e, 0x99, 0x56, 0x9b, 0x29, 0xb8, 0xc8, 0xca, 0x79, 0x1d, 0xa5, 0xbd, 0x0c, 0x1d, 0xaf, 0xc2,
		0xd0, 0x8b, 0xd0, 0xf5, 0x1a, 0x8c, 0xbd, 0x04, 0x63, 0xaf, 0xc0, 0xdc, 0x0b, 0x90, 0x05, 0xa0,
		0xd2, 0xaa, 0x7e, 0xa9, 0xb5, 0x8a, 0xc9, 0xd2, 0x74, 0x34, 0x1b, 0xaa, 0xe8, 0x35, 0x50, 0x31,
		0x6b, 0x98, 0x32, 0x6e, 0x90, 0x72, 0xdf, 0xd3, 0x21, 0xe2, 0x61, 0x33, 0x94, 0x4c, 0xa7, 0x61,
		0xc9, 0xa8, 0x41, 0x89, 0xaf, 0x42, 0xef, 0xa9, 0x61, 0x55, 0xb3, 0xe9, 0xf7, 0x0a, 0x19, 0xbf,
		0x9d, 0x56, 0x1f, 0x8f, 0xe1, 0x80, 0x6a, 0xb5, 0xd9, 0x18, 0x0c, 0x67, 0xd9, 0x56, 0x1a, 0xe2,
		0x34, 0x2f, 0xc3, 0x11, 0x49, 0x10, 0x27, 0x41, 0xf6, 0xa4, 0x41, 0x0b, 0x93, 0x27, 0xcb, 0x31,
		0x41, 0x0b, 0x26, 0x80, 0x09, 0x16, 0x5f, 0xa7, 0x6c, 0xf7, 0xbb, 0xc6, 0x43, 0x1c, 0xfa, 0x6e,
		0xe9, 0xb5, 0xbb, 0x34, 0xef, 0xf3, 0x66, 0xf4, 0xda, 0x43, 0x36, 0x69, 0x0f, 0x59, 0x79, 0xa0,
		0xf4, 0xe0, 0xda, 0x43, 0x5e, 0x79, 0x91, 0xef, 0x65, 0x71, 0xf2, 0xa4, 0xd1, 0x8f, 0x54, 0x3b,
		0x78, 0x9a, 0xaf, 0x9a, 0x7e, 0x10, 0x65, 0xc7, 0x3a, 0x15, 0xe1, 0x93, 0x3d, 0x72, 0xa6, 0xf1,
		0xe8, 0x6f, 0x5e, 0x74, 0xaf, 0xb4, 0x83, 0xa2, 0x06, 0xa1, 0xe2, 0xab, 0x20, 0x32, 0x3f, 0x12,
		0xf8, 0x6f, 0x2f, 0xec, 0x2b, 0xfd, 0xd3, 0x92, 0xdc, 0xce, 0x2f, 0x89, 0x37, 0xd4, 0xb6, 0x3f,
		0x05, 0xf7, 0x81, 0x6e, 0x50, 0x6f, 0x7e, 0x4e, 0xd5, 0xbd, 0x97, 0x05, 0x5f, 0x06, 0xef, 0x76,
		0xe7, 0x85, 0xa9, 0xd2, 0x3f, 0x01, 0x30, 0x08, 0x79, 0x5f, 0x79, 0x8f, 0x72, 0x43, 0x7c, 0xb6,
		0xbf, 0x43, 0x5c, 0x51, 0xec, 0xfd, 0xa6, 0x06, 0x0d, 0xae, 0x53, 0x95, 0xf5, 0x7b, 0x02, 0x94,
		0xbe, 0x60, 0x07, 0x4e, 0x87, 0xd3, 0xe1, 0x74, 0x38, 0x1d, 0x4e, 0x87, 0xd3, 0xe1, 0xf4, 0xea,
		0x82, 0x53, 0x05, 0x1d, 0x7f, 0xf5, 0x98, 0x25, 0x9e, 0xdb, 0x8f, 0xd2, 0xcc, 0xbb, 0x0d, 0x4b,
		0x06, 0x83, 0x7b, 0x89, 0x4a, 0x55, 0xd4, 0x29, 0x8f, 0x27, 0x06, 0xa8, 0xf9, 0x36, 0xf2, 0x83,
		0x8e, 0x97, 0xa9, 0xd4, 0xf1, 0x9c, 0x89, 0xc6, 0x70, 0xa2, 0xd8, 0x57, 0x4e, 0x90, 0x3a, 0x93,
		0xf3, 0x2c, 0xe5, 0xbf, 0xda, 0x3e, 0x11, 0x8f, 0x86, 0xa6, 0x4e, 0x54, 0x5c, 0x78, 0xec, 0x6c,
		0xf3, 0xf4, 0x0b, 0xd9, 0x3d, 0xb4, 0x57, 0xe7, 0xad, 0x1a, 0xc2, 0xb9, 0xa2, 0x63, 0xd5, 0xf7,
		0x93, 0x37, 0xab, 0x30, 0x3a, 0x9e, 0xa8, 0x4e, 0x9c, 0xf8, 0x6e, 0x12, 0xf7, 0x33, 0x55, 0x3e,
		0x42, 0x3e, 0xf7, 0x34, 0xe7, 0xa5, 0x44, 0xc9, 0x0d, 0x01, 0x44, 0xff, 0xbc, 0x54, 0x75, 0x7b,
		0xe5, 0xb6, 0xf4, 0xe4, 0xb0, 0xe6, 0xb8, 0xc2, 0xcd, 0x96, 0x06, 0xf7, 0x91, 0x17, 0x86, 0xca,
		0x77, 0xc7, 0x50, 0x52, 0x72, 0xbb, 0x2d, 0x3c, 0xcf, 0x86, 0x63, 0xc3, 0x6d, 0x6d, 0xc3, 0x95,
		0xce, 0x2c, 0xd6, 0xc9, 0x24, 0x6e, 0xbc, 0x53, 0xd1, 0xfd, 0x50, 0x15, 0x58, 0xd7, 0xbf, 0x26,
		0xfe, 0x73, 0xee, 0xd4, 0x69, 0xde, 0x67, 0x21, 0xe6, 0xcc, 0x99, 0x3b, 0x71, 0xdf, 0xf4, 0x32,
		0x6a, 0xcd, 0x87, 0xee, 0xe8, 0xa4, 0xbd, 0xfb, 0x83, 0xb7, 0x5d, 0x95, 0x2e, 0xcc, 0x51, 0x3d,
		0xef, 0x29, 0x8c, 0x3d, 0xdf, 0x84, 0xa6, 0x26, 0x26, 0x60, 0x2a, 0x98, 0x6a, 0x6b, 0x4c, 0xf5,
		0x37, 0xf5, 0xe8, 0x0e, 0x5c, 0xc4, 0x7b, 0x95, 0xd8, 0xa6, 0x2b, 0xdd, 0x42, 0x97, 0xc6, 0xa7,
		0xa6, 0x7b, 0xee, 0xb9, 0x77, 0x97, 0xee, 0x2f, 0x37, 0x7f, 0xb4, 0x5e, 0xbe, 0xf9, 0xd6, 0xa8,
		0x1e, 0x1b, 0x5e, 0x18, 0xcc, 0x92, 0x4e, 0x94, 0xab, 0x91, 0x66, 0x5e, 0xd6, 0x4f, 0x0b, 0x8f,
		0x95, 0xc6, 0xcc, 0xfb, 0xaa, 0x97, 0xa8, 0x8e, 0x97, 0x29, 0xbf, 0xe2, 0x2d, 0x3b, 0xfe, 0x6a,
		0xdb, 0xdc, 0xb2, 0x33, 0xdf, 0xbd, 0xf2, 0xb4, 0xbc, 0x1b, 0xa3, 0xb5, 0x54, 0x32, 0x8a, 0x54,
		0x69, 0xf4, 0xa8, 0x51, 0x84, 0x41, 0xab, 0x08, 0x16, 0x6d, 0x9e, 0xd4, 0xf5, 0x53, 0xb4, 0x61,
		0xf0, 0x1b, 0xdd, 0xd1, 0x76, 0xdc, 0x3c, 0xe4, 0x53, 0x42, 0x7c, 0x7e, 0x85, 0x17, 0xcc, 0x88,
		0x2c, 0x4c, 0xe4, 0x65, 0x08, 0x3c, 0x7f, 0xcf, 0x7c, 0x09, 0x14, 0x99, 0xbb, 0x92, 0x7b, 0x5f,
		0x9b, 0xa6, 0xb5, 0xf7, 0xfa, 0xdc, 0x1e, 0x9f, 0x7e, 0x35, 0xcb, 0xf0, 0x5e, 0x34, 0x7b, 0x71,
		0xb0, 0x28, 0xca, 0xeb, 0xc5, 0xc1, 0x43, 0x7b, 0x90, 0x62, 0x5b, 0x66, 0xa1, 0xed, 0x99, 0x3e,
		0x2c, 0xb1, 0x10, 0xed, 0xa8, 0xc3, 0xd2, 0xe9, 0xb5, 0x65, 0x16, 0xaa, 0xc1, 0x82, 0xd5, 0x74,
		0x6d, 0xb4, 0x17, 0xb0, 0xc9, 0x42, 0x16, 0x59, 0xd0, 0xa6, 0x0b, 0x5b, 0x6c, 0x81, 0x8b, 0x2d,
		0x74, 0xa9, 0x05, 0xaf, 0x19, 0x24, 0x20, 0xe5, 0xe6, 0xb9, 0x47, 0xf7, 0x23, 0xe5, 0xe6, 0xb4,
		0x4d, 0xce, 0x8d, 0x70, 0x6c, 0x71, 0x79, 0x8c, 0x4f, 0x4e, 0x8e, 0x4f, 0xc8, 0xbb, 0x31, 0x7c,
		0xaa, 0x0e, 0xb9, 0xb4, 0xf1, 0xd7, 0x48, 0x25, 0xfa, 0x04, 0x3e, 0x7a, 0x1c, 0x0a, 0x87, 0xc2,
		0x6b, 0x48, 0xe1, 0xe6, 0x34, 0x2c, 0xd3, 0x02, 0xc8, 0xa4, 0xf5, 0x8f, 0x71, 0xcb, 0x1f, 0xd9,
		0x56, 0x3f, 0xbb, 0x91, 0x2a, 0x38, 0x6e, 0xe1, 0x53, 0x06, 0x9c, 0xf4, 0xba, 0xe9, 0xe8, 0x77,
		0xd1, 0x11, 0xed, 0x9e, 0xa3, 0xd7, 0x35, 0x67, 0x67, 0x93, 0xd1, 0xfa, 0xe9, 0xeb, 0x72, 0x8e,
		0xa3, 0x95, 0x48, 0x62, 0x3f, 0x1d, 0xfc, 0x5f, 0xa3, 0x16, 0xa7, 0x06, 0xb5, 0x89, 0xf4, 0xf6,
		0xb7, 0x16, 0xd8, 0xed, 0x5b, 0x89, 0xe4, 0xa6, 0xaa, 0x13, 0x47, 0xbe, 0x97, 0x3c, 0xb9, 0x9e,
		0xdf, 0x0d, 0x22, 0x37, 0xcd, 0xbc, 0x02, 0xe9, 0x7d, 0x33, 0x15, 0x46, 0xab, 0x1e, 0x2f, 0x16,
		0xeb, 0x6d, 0x12, 0xeb, 0xdd, 0xed, 0x58, 0x6f, 0x61, 0xf9, 0x91, 0x8f, 0xfa, 0x87, 0x55, 0xcb,
		0xc5, 0x55, 0x51, 0xbf, 0x5b, 0x64, 0x1a, 0x4a, 0x34, 0x28, 0x29, 0xd7, 0x98, 0x44, 0xaf, 0x21,
		0x49, 0xa3, 0x39, 0xf8, 0x4a, 0x51, 0x9c, 0x74, 0xbd, 0xb0, 0x0c, 0x56, 0x0f, 0xfb, 0x97, 0x74,
		0xbd, 0x01, 0xc6, 0x44, 0x5e, 0xd4, 0x51, 0x0d, 0xd9, 0xd3, 0xef, 0xd2, 0xed, 0x43, 0xe6, 0xde,
		0xa5, 0x54, 0x2c, 0x68, 0xf2, 0xe5, 0x2f, 0x9c, 0x66, 0x35, 0x2c, 0xa1, 0x07, 0x71, 0x0f, 0xfd,
		0xcc, 0x8f, 0xbf, 0x46, 0x25, 0x50, 0x6d, 0xf2, 0x04, 0x40, 0x06, 0x90, 0xad, 0x1c, 0xf5, 0xa2,
		0x49, 0xc4, 0x05, 0x93, 0x87, 0xf5, 0x16, 0x76, 0x96, 0x78, 0x51, 0xda, 0x8b, 0x93, 0xcc, 0xed,
		0x25, 0xf1, 0x5d, 0x10, 0x4e, 0x4e, 0xa1, 0x8b, 0x2f, 0xf4, 0xb5, 0x16, 0x76, 0xe0, 0xb4, 0xb6,
		0x5c, 0x9a, 0xd5, 0x8e, 0x2d, 0xfd, 0x52, 0x69, 0x54, 0x15, 0x9d, 0xd8, 0xde, 0xde, 0x69, 0x64,
		0xf8, 0x0d, 0x1e, 0xa2, 0x29, 0x12, 0x39, 0x7d, 0x86, 0xaa, 0xa6, 0xf4, 0xa9, 0xad, 0xaf, 0xb2,
		0x49, 0x23, 0xbc, 0x7e, 0x98, 0x05, 0xbd, 0x30, 0x30, 0x89, 0x02, 0xaf, 0xb4, 0x46, 0x3b, 0x85,
		0xc3, 0x0e, 0x0b, 0xd7, 0xb8, 0x9d, 0x02, 0xe7, 0xb3, 0xe5, 0x3e, 0x58, 0xf4, 0x7c, 0xf6, 0x88,
		0xe3, 0xd9, 0xd5, 0xe1, 0x60, 0xb9, 0x21, 0x6e, 0x35, 0x39, 0x9b, 0x35, 0x7c, 0xaa, 0x0e, 0x67,
		0xb3, 0x2a, 0x2a, 0xdd, 0xe9, 0x60, 0xde, 0x0b, 0x1b, 0x3d, 0x0f, 0x11, 0x43, 0xc4, 0x7b, 0x4b,
		0xc4, 0x65, 0xcb, 0x95, 0x4b, 0x46, 0x1e, 0xaa, 0xd9, 0xe8, 0xdd, 0x20, 0x1a, 0x16, 0xd6, 0x24,
		0x5f, 0xbc, 0xd0, 0x20, 0x99, 0x72, 0xd6, 0x8a, 0xde, 0xa6, 0x6f, 0xb1, 0xe9, 0xd9, 0xf4, 0xb6,
		0x37, 0x7d, 0x59, 0x67, 0x35, 0x7f, 0x70, 0xb2, 0xb8, 0xdd, 0x6e, 0x6a, 0x7e, 0x49, 0xda, 0xac,
		0x31, 0xae, 0x49, 0xe3, 0x9a, 0xb4, 0xad, 0x6d, 0x36, 0x43, 0x65, 0xbb, 0xf5, 0x6b, 0xd2, 0xb4,
		0x5d, 0x61, 0x01, 0x97, 0x58, 0xc8, 0x35, 0x36, 0x77, 0x91, 0x45, 0x5d, 0xe5, 0x25, 0x7f, 0xee,
		0xf8, 0xa5, 0x8c, 0x3d, 0x69, 0xb7, 0x4e, 0xde, 0xbd, 0x13, 0x70, 0xa5, 0x45, 0x5d, 0xea, 0xa5,
		0xa9, 0x38, 0x69, 0x36, 0x9b, 0x87, 0x37, 0x1b, 0x2f, 0xb6, 0xf3, 0x74, 0x9d, 0xef, 0x6b, 0xcd,
		0xf5, 0x43, 0x5f, 0x52, 0x8c, 0xf4, 0x11, 0x23, 0x88, 0x11, 0xc4, 0x08, 0x62, 0xa4, 0xc6, 0x62,
		0xe4, 0x20, 0x19, 0xb0, 0xce, 0x7a, 0x04, 0x49, 0xb2, 0x87, 0x92, 0xe4, 0x10, 0x2f, 0xbe, 0x5d,
		0x97, 0x6f, 0xf5, 0xfa, 0xf6, 0xce, 0x7f, 0x6d, 0x10, 0xde, 0x74, 0xec, 0x24, 0x9d, 0x7f, 0x9c,
		0xbc, 0xee, 0xfb, 0xd1, 0xdb, 0x8e, 0x5a, 0x8b, 0x7c, 0xfe, 0xf1, 0xce, 0xff, 0x7c, 0x15, 0x44,
		0x6f, 0x27, 0xef, 0x5a, 0xb3, 0x00, 0xb3, 0x9b, 0x66, 0x5e, 0xe4, 0xdf, 0x3e, 0xc9, 0x04, 0x9a,
		0x73, 0x6b, 0x04, 0x9c, 0x2d, 0xcb, 0x51, 0x02, 0xce, 0xba, 0x68, 0x67, 0x1e, 0x70, 0x1e, 0x2f,
		0x72, 0xd9, 0xc0, 0xf3, 0x8c, 0x51, 0x7c, 0x3e, 0x7c, 0x3e, 0x7c, 0x3e, 0x7c, 0x3e, 0x02, 0xd0,
		0x38, 0x7c, 0x05, 0x1c, 0x3e, 0xbc, 0xbd, 0x7d, 0xf3, 0xf6, 0x5e, 0x0a, 0x88, 0x93, 0xbe, 0x0d,
		0x71, 0x42, 0x40, 0x1a, 0x71, 0x82, 0x38, 0x41, 0x9c, 0x10, 0x90, 0x46, 0x9f, 0x14, 0xd6, 0x27,
		0x48, 0x94, 0x3d, 0x94, 0x28, 0x04, 0xa4, 0x37, 0x04, 0xa4, 0x35, 0xc3, 0xa0, 0xce, 0x36, 0x03,
		0xd3, 0x1f, 0xc6, 0xaf, 0x5c, 0x87, 0xf8, 0x74, 0x5e, 0x36, 0x28, 0x10, 0x9d, 0x5e, 0xb6, 0x45,
		0x05, 0x84, 0x65, 0x65, 0x4a, 0x6c, 0x5a, 0x17, 0xf8, 0x28, 0x45, 0xac, 0x5e, 0x41, 0x52, 0x8a,
		0x68, 0x5d, 0x16, 0x52, 0x8a, 0x28, 0xf7, 0xd4, 0x6e, 0xf4, 0x5c, 0xac, 0x59, 0x97, 0xc0, 0x4d,
		0xca, 0x6d, 0xbb, 0x9d, 0x03, 0xd7, 0x8b, 0xb3, 0x2a, 0xaf, 0xab, 0xf5, 0x55, 0x9a, 0x05, 0x51,
		0xb9, 0xf9, 0x9a, 0xe9, 0xf7, 0x30, 0x7d, 0x98, 0xee, 0x25, 0x74, 0x2f, 0x31, 0x84, 0x8e, 0xd2,
		0xdd, 0x4b, 0xee, 0xc3, 0xf8, 0xd6, 0x0b, 0xdd, 0xc0, 0xd7, 0xf7, 0x12, 0xa6, 0x26, 0x70, 0x0e,
		0x70, 0x0e, 0x70, 0x0e, 0x70, 0x0e, 0x96, 0x94, 0x2b, 0xce, 0x81, 0x6d, 0xe7, 0x80, 0x6b, 0x24,
		0x6a, 0xed, 0x1f, 0x94, 0xea, 0x74, 0xea, 0x2b, 0x23, 0x3e, 0x9e, 0x18, 0x80, 0x8d, 0x61, 0xe3,
		0xbd, 0x65, 0xe3, 0xa0, 0xf7, 0xa5, 0xed, 0x7a, 0xbe, 0x9f, 0xa8, 0x34, 0x75, 0xa3, 0xd8, 0xfd,
		0x47, 0x1c, 0xa9, 0x9d, 0xbb, 0x4f, 0xe2, 0xbb, 0xef, 0x3e, 0x35, 0xdd, 0xf3, 0x9b, 0x7f, 0x7e,
		0x6a, 0xb9, 0xe7, 0x37, 0xa3, 0x1f, 0x5b, 0xc3, 0x7f, 0x8d, 0x7e, 0x3e, 0xfa, 0xd4, 0x74, 0xdb,
		0x93, 0x9f, 0x4f, 0x3e, 0x35, 0xdd, 0x93, 0x9b, 0xef, 0xaf, 0xaf, 0x5f, 0x7d, 0xff, 0xc7, 0xf1,
		0xb7, 0xf2, 0x0f, 0x7e, 0xf7, 0xa7, 0x4f, 0xd7, 0xd7, 0xbd, 0x3f, 0xfe, 0xfe, 0x6d, 0xf0, 0xff,
		0xef, 0xbe, 0xdd, 0xfc, 0xf0, 0xfd, 0x7f, 0xe8, 0xae, 0xd6, 0x81, 0xe1, 0xeb, 0xeb, 0x57, 0x37,
		0xff, 0xd6, 0xd8, 0x49, 0x80, 0x1d, 0x5f, 0xa0, 0x6a, 0x02, 0xb1, 0x53, 0x13, 0x80, 0x2c, 0x20,
		0x8b, 0xcb, 0x83, 0xcb, 0xb3, 0xa8, 0xc7, 0x9b, 0xb8, 0x3c, 0xb8, 0x3c, 0x1c, 0x89, 0x48, 0xc5,
		0x35, 0x77, 0xe5, 0x48, 0xa4, 0x7c, 0x38, 0xdf, 0xa9, 0xf4, 0x68, 0xe4, 0xa7, 0x99, 0xf7, 0xab,
		0xf0, 0x88, 0xe4, 0xce, 0xeb, 0x87, 0x59, 0xf9, 0xc3, 0x91, 0xd1, 0x63, 0x1c, 0x8b, 0x70, 0x2c,
		0x62, 0x08, 0x1f, 0xa5, 0x8f, 0x45, 0xe8, 0x17, 0x8b, 0x77, 0x80, 0x77, 0xf0, 0xcc, 0x1a, 0xdf,
		0x87, 0x7e, 0xb1, 0xbd, 0x24, 0x9e, 0x5c, 0xb8, 0x90, 0x25, 0xc1, 0xfd, 0xbd, 0xc9, 0xdd, 0x0d,
		0x2b, 0x6c, 0x51, 0xca, 0x0f, 0x00, 0xec, 0x5b, 0x29, 0xbf, 0x17, 0x08, 0x54, 0xc7, 0x0d, 0x8c,
		0x50, 0x0d, 0x47, 0x35, 0xdc, 0xd6, 0x36, 0x97, 0xa1, 0x9f, 0xbd, 0xf5, 0x6a, 0xb8, 0xdb, 0x38,
		0x0e, 0x95, 0x17, 0x09, 0x94, 0xc3, 0xb5, 0x5a, 0x35, 0x2e, 0xcd, 0x0d, 0xfd, 0xc0, 0x1c, 0x6c,
		0x06, 0x46, 0x00, 0x1b, 0xc0, 0x06, 0xb0, 0x01, 0x6c, 0x36, 0x82, 0xcd, 0xef, 0x89, 0x00, 0xd8,
		0xfc, 0x9e, 0x00, 0x36, 0x80, 0x0d, 0x60, 0x73, 0x48, 0x60, 0x43, 0x45, 0xef, 0xcc, 0x21, 0xc8,
		0x30, 0x6c, 0xff, 0xda, 0x38, 0x1a, 0xe2, 0x54, 0x7a, 0x32, 0xf2, 0xcb, 0xe0, 0xa5, 0x3f, 0xbf,
		0xcf, 0x5f, 0xfa, 0xe3, 0xf8, 0x9d, 0x39, 0x1e, 0x93, 0x5e, 0x19, 0xb5, 0x3c, 0x18, 0x1b, 0x4e,
		0x7f, 0x95, 0x47, 0x62, 0xe3, 0xed, 0xe1, 0x86, 0x69, 0xaf, 0xfc, 0xc1, 0xd8, 0xec, 0xc3, 0x1c,
		0x8f, 0x71, 0x3c, 0x66, 0x08, 0x1f, 0xa5, 0x8f, 0xc7, 0x82, 0xc8, 0x0d, 0xbd, 0x5b, 0x65, 0x70,
		0xc3, 0x5a, 0x6e, 0x81, 0x23, 0x32, 0x22, 0xe4, 0x24, 0xd0, 0xad, 0x5b, 0xe7, 0x07, 0x5c, 0x33,
		0x74, 0x4a, 0x06, 0xdd, 0xaa, 0x31, 0x96, 0xcc, 0xa0, 0x6b, 0x37, 0x5b, 0x24, 0xd0, 0x99, 0x3e,
		0x55, 0x87, 0x94, 0xf6, 0x30, 0xee, 0xfc, 0x1e, 0xf7, 0x33, 0x7d, 0x3a, 0x9e, 0x18, 0x80, 0x8d,
		0x61, 0x63, 0x12, 0x56, 0xd6, 0xf9, 0x4e, 0x75, 0x48, 0x58, 0x09, 0xd3, 0x9e, 0x51, 0xe9, 0xca,
		0xf8, 0xf9, 0xb2, 0xc9, 0x02, 0x6a, 0x92, 0xc2, 0x59, 0x5e, 0x55, 0x34, 0x5a, 0xe5, 0x96, 0xd2,
		0x0d, 0x20, 0x04, 0x08, 0xe1, 0x12, 0xe0, 0x12, 0x2c, 0xca, 0x55, 0x6a, 0x6a, 0xac, 0x7b, 0x04,
		0xd4, 0xd4, 0xec, 0x8b, 0x4b, 0x10, 0xf7, 0x33, 0xd3, 0x18, 0xdd, 0xd4, 0x04, 0x69, 0xac, 0x30,
		0xf2, 0xbe, 0xa5, 0xb1, 0xea, 0x6d, 0x8e, 0x65, 0x3d, 0xad, 0xb1, 0x41, 0x0c, 0xa5, 0xab, 0xf1,
		0x86, 0x91, 0xd8, 0x38, 0xc2, 0x1b, 0x48, 0x6a, 0x23, 0x89, 0x6f, 0x28, 0xf1, 0x8d, 0x25, 0xbf,
		0xc1, 0x0c, 0xe9, 0x8d, 0x8b, 0x1d, 0xf6, 0xff, 0x62, 0x07, 0xd3, 0x68, 0xba, 0x35, 0x71, 0x27,
		0x2f, 0xf2, 0x04, 0x34, 0xb5, 0xa8, 0xb6, 0x5e, 0x9e, 0x8b, 0x66, 0xfb, 0xcd, 0xc9, 0xd9, 0x09,
		0xd7, 0x3a, 0x54, 0xf4, 0x74, 0x9d, 0x6f, 0x9e, 0x0a, 0x83, 0xe8, 0x77, 0x01, 0x0d, 0x32, 0xb0,
		0x82, 0x04, 0x41, 0x82, 0x1c, 0x98, 0x04, 0xb9, 0xf2, 0x22, 0xdf, 0xcb, 0xe2, 0xe4, 0x49, 0xbf,
		0xc7, 0x24, 0x32, 0x66, 0xa7, 0x64, 0x0c, 0x2a, 0xa6, 0x2e, 0x2a, 0x46, 0x20, 0x52, 0x88, 0x86,
		0xa9, 0x9f, 0x86, 0xb1, 0x1a, 0xab, 0x51, 0x8f, 0x59, 0xe2, 0xb9, 0xfd, 0x28, 0xcd, 0xb4, 0xba,
		0x6b, 0x38, 0xa3, 0xbc, 0x59, 0x95, 0xaa, 0xa8, 0xb3, 0x95, 0xd3, 0x8c, 0x09, 0xd2, 0xbf, 0x8d,
		0xfc, 0xa0, 0xe3, 0x65, 0x2a, 0x75, 0x3c, 0x27, 0x0f, 0x92, 0x3a, 0x51, 0xec, 0x2b, 0x27, 0x48,
		0x9d, 0x49, 0x2e, 0xb4, 0xf2, 0x5f, 0xd5, 0x4f, 0x85, 0x8c, 0xc6, 0xae, 0xce, 0x3a, 0xa4, 0xf8,
		0xe0, 0xee, 0xdb, 0x39, 0xc0, 0x9e, 0x97, 0x85, 0xcc, 0x24, 0xad, 0xbf, 0xd6, 0x3d, 0x5a, 0x70,
		0x2a, 0x2d, 0x0a, 0x18, 0x57, 0x83, 0xbc, 0x4b, 0x7b, 0x9f, 0x7f, 0xed, 0x67, 0xef, 0x86, 0xef,
		0x4b, 0x3d, 0x88, 0x9d, 0x25, 0x51, 0xcb, 0xaa, 0x90, 0xe9, 0x02, 0xa8, 0xb2, 0x34, 0x24, 0x2d,
		0x87, 0xfc, 0x39, 0x2d, 0x8d, 0x9f, 0x2b, 0x57, 0x10, 0xd2, 0xa4, 0x20, 0x84, 0x82, 0x10, 0x63,
		0xa7, 0x58, 0xaa, 0x2f, 0xb7, 0x4e, 0x3f, 0x6e, 0xed, 0x3e, 0xdc, 0x3b, 0xd6, 0x7f, 0x5b, 0xa7,
		0xef, 0xf6, 0x4d, 0x85, 0xb0, 0xf5, 0x35, 0x4e, 0x7e, 0x0f, 0xa2, 0x7b, 0xbd, 0x8a, 0xb6, 0xd9,
		0x87, 0xa9, 0x68, 0x03, 0xc0, 0x0c, 0x01, 0x8c, 0x8a, 0x36, 0x1b, 0x01, 0x77, 0x92, 0x65, 0xac,
		0x07, 0xd2, 0x49, 0x5f, 0x15, 0x0f, 0x6a, 0x53, 0xd1, 0x66, 0x3d, 0x3c, 0x4a, 0x45, 0x5b, 0x25,
		0xa3, 0x4c, 0x45, 0x5b, 0x71, 0xa0, 0xa2, 0xa2, 0x0d, 0x36, 0xa6, 0xa2, 0xed, 0x39, 0xdf, 0x89,
		0x8a, 0x36, 0xad, 0x8a, 0xb6, 0x26, 0x15, 0x6d, 0x80, 0x10, 0x20, 0x84, 0x4b, 0x60, 0x28, 0x57,
		0xa9, 0x68, 0xb3, 0xee, 0x11, 0x50, 0xd1, 0xb6, 0x2f, 0x2e, 0x01, 0x15, 0x6d, 0x30, 0x32, 0x15,
		0x6d, 0x9b, 0x84, 0x34, 0x15, 0x6d, 0xa4, 0x93, 0x6f, 0x61, 0x63, 0xc9, 0x6f, 0x30, 0x43, 0x7a,
		0x23, 0x15, 0x9c, 0x8a, 0xb6, 0xad, 0x89, 0x3b, 0x79, 0x91, 0x27, 0xa0, 0xa9, 0x45, 0xb5, 0xf5,
		0xf2, 0x5c, 0x50, 0xd1, 0x56, 0xe9, 0xd3, 0x54, 0xb4, 0x21, 0x41, 0x90, 0x20, 0xfb, 0x28, 0x41,
		0xa8, 0x68, 0x3b, 0x34, 0x19, 0x83, 0x8a, 0xa9, 0x8b, 0x8a, 0xa1, 0xa2, 0x6d, 0x2f, 0x35, 0x0c,
		0x15, 0x6d, 0x05, 0x90, 0x9e, 0x8a, 0x36, 0x2a, 0xda, 0xe4, 0x77, 0xed, 0xbe, 0x57, 0xb4, 0xcd,
		0x24, 0xad, 0xef, 0x48, 0x45, 0xdb, 0xff, 0x37, 0x7a, 0x63, 0x2a, 0xda, 0x2a, 0x58, 0x12, 0xb5,
		0xac, 0x68, 0x9b, 0x2e, 0x00, 0xb1, 0x8a, 0xb6, 0x17, 0x06, 0xf3, 0xab, 0x43, 0xa0, 0x8d, 0x34,
		0xf3, 0xb2, 0x7e, 0x5a, 0x98, 0x2e, 0x35, 0xca, 0x37, 0x7c, 0xd5, 0x4b, 0xd4, 0x00, 0xb2, 0xfd,
		0x8a, 0xab, 0x37, 0xc6, 0x5f, 0x6d, 0x9b, 0xd5, 0x1b, 0x33, 0xdf, 0x5d, 0x7a, 0xaf, 0xbf, 0x30,
		0xa3, 0x97, 0xe7, 0xd6, 0x52, 0x49, 0x8c, 0xa8, 0x1a, 0x1b, 0x1a, 0x45, 0x4a, 0x3f, 0x2b, 0xc2,
		0x81, 0xcd, 0x53, 0xbb, 0x7e, 0xa2, 0x36, 0x4c, 0x41, 0x63, 0xf4, 0x2d, 0xdd, 0x4c, 0xb9, 0x5e,
		0x96, 0x25, 0xc1, 0x6d, 0x3f, 0x53, 0xcf, 0x5f, 0x14, 0x9f, 0x6f, 0xb9, 0x95, 0x4f, 0x3f, 0x33,
		0xe1, 0xc5, 0x4e, 0xe5, 0x0b, 0x47, 0xf4, 0xca, 0x44, 0xee, 0x34, 0x23, 0x74, 0x65, 0x31, 0x42,
		0x3b, 0xe2, 0xa6, 0x8d, 0x09, 0xfa, 0x11, 0x34, 0x33, 0x22, 0x28, 0x7a, 0xea, 0xdd, 0xf0, 0xfc,
		0x6e, 0x10, 0xb9, 0xdd, 0xd8, 0xd7, 0xa8, 0x90, 0x9e, 0x79, 0x96, 0x22, 0x43, 0x8a, 0x0c, 0x0d,
		0x35, 0x69, 0xe9, 0x22, 0x43, 0x5f, 0x79, 0x9d, 0x2c, 0xf8, 0xe2, 0x65, 0x39, 0x25, 0x68, 0x67,
		0x32, 0x2d, 0x9b, 0x22, 0xc7, 0xd8, 0x72, 0xfc, 0x81, 0x8c, 0x26, 0x5d, 0xbf, 0x7e, 0x9f, 0x0b,
		0x1d, 0xf6, 0xda, 0xcb, 0x5d, 0xa1, 0xc9, 0x5e, 0x97, 0xe6, 0x50, 0x5b, 0xc2, 0x76, 0xf8, 0x72,
		0x1f, 0xd5, 0x65, 0xfe, 0x6a, 0x9f, 0x2f, 0x07, 0xaf, 0x76, 0x35, 0x78, 0xb3, 0x0a, 0xdb, 0x1e,
		0x78, 0x77, 0x77, 0x41, 0x14, 0x64, 0x4f, 0x6e, 0xd7, 0x4b, 0x7f, 0xd7, 0x90, 0x24, 0x73, 0x8f,
		0xa3, 0x4a, 0x50, 0x25, 0x55, 0xab, 0x92, 0xc9, 0x0a, 0xd4, 0x17, 0x23, 0xb9, 0x05, 0x34, 0x08,
		0x1a, 0xa4, 0xa6, 0x1a, 0xc4, 0x20, 0xb3, 0x42, 0x40, 0xbf, 0xfc, 0x4d, 0x3d, 0xba, 0x03, 0x96,
		0xbd, 0x57, 0x89, 0x89, 0x8a, 0x79, 0xa3, 0xf1, 0xac, 0x6e, 0x77, 0xa4, 0xdc, 0xc0, 0xa7, 0xa6,
		0x7b, 0xee, 0xb9, 0x77, 0x97, 0xee, 0x2f, 0x37, 0x7f, 0xb4, 0x5e, 0xbe, 0xf9, 0xd6, 0xd8, 0xc9,
		0xea, 0x91, 0x52, 0xec, 0xbc, 0xbc, 0xeb, 0x8b, 0x93, 0x33, 0xe8, 0x06, 0xba, 0x81, 0x6e, 0xa0,
		0x5b, 0xcd, 0x5c, 0x4b, 0x83, 0x4c, 0x15, 0xfd, 0x0c, 0x15, 0x83, 0x35, 0x35, 0x9b, 0x34, 0x31,
		0xe7, 0x23, 0x09, 0x65, 0xa5, 0x08, 0x63, 0x95, 0x49, 0x16, 0x8a, 0x1d, 0xb4, 0x2a, 0x37, 0x80,
		0xb6, 0xf1, 0x4c, 0xba, 0x63, 0xe1, 0x3e, 0x05, 0x54, 0x34, 0x22, 0x00, 0x15, 0xc6, 0x54, 0xc6,
		0x6f, 0x77, 0x35, 0x78, 0xb9, 0x2a, 0xc3, 0x2a, 0xfd, 0x2c, 0x76, 0x6f, 0xbd, 0xc8, 0xff, 0x1a,
		0xf8, 0xc3, 0x59, 0x28, 0x1b, 0x57, 0x99, 0x7f, 0x9e, 0xc0, 0x0a, 0x81, 0x95, 0xca, 0x03, 0x2b,
		0xfe, 0xff, 0xed, 0xa7, 0xd9, 0xe0, 0x1b, 0xb8, 0xd9, 0x43, 0xa2, 0xd2, 0x87, 0x38, 0x34, 0x68,
		0x73, 0xb3, 0xd2, 0x1a, 0x65, 0xec, 0xb8, 0x24, 0xfb, 0x56, 0xc6, 0xbe, 0x6a, 0xa1, 0xbb, 0x3d,
		0x95, 0x74, 0x46, 0xdf, 0xd9, 0xb0, 0xb2, 0x6c, 0xa3, 0x75, 0x2a, 0xce, 0xa8, 0x38, 0xdb, 0xda,
		0x76, 0xd4, 0xdb, 0x96, 0x9a, 0xdb, 0x53, 0x22, 0x72, 0x60, 0x1e, 0x41, 0x58, 0x5a, 0x7d, 0x54,
		0x9c, 0xcd, 0xcd, 0x0d, 0x15, 0x67, 0x7b, 0x5e, 0x37, 0xdf, 0xa4, 0xde, 0xac, 0xa2, 0xa7, 0xeb,
		0x5c, 0x33, 0xbf, 0x52, 0x93, 0x7c, 0x19, 0x2f, 0x12, 0x1b, 0x7a, 0x67, 0x64, 0x1b, 0xb5, 0x83,
		0xda, 0x41, 0xed, 0xa0, 0x76, 0xf6, 0x5a, 0xed, 0x34, 0x91, 0x3b, 0x75, 0x91, 0x3b, 0xed, 0xa3,
		0xf3, 0xf6, 0xf9, 0xe9, 0xd9, 0xd1, 0x39, 0x55, 0xf6, 0x7b, 0xa7, 0x7a, 0xa8, 0xb2, 0x2f, 0x80,
		0xf7, 0x73, 0x47, 0x72, 0x2b, 0x74, 0x19, 0x05, 0xf7, 0x32, 0xc2, 0x44, 0x6b, 0x9c, 0xa9, 0xbd,
		0xaf, 0x65, 0xed, 0xfd, 0xca, 0x13, 0xd3, 0xb9, 0xb3, 0xbd, 0xd7, 0x02, 0x27, 0x23, 0x4e, 0x75,
		0xe7, 0xa9, 0xfd, 0x2c, 0xfe, 0x71, 0xf2, 0xea, 0x9f, 0x2f, 0xf3, 0x57, 0xff, 0x98, 0xbf, 0x79,
		0x0d, 0x92, 0xe5, 0xbc, 0x5e, 0x2f, 0x1c, 0xec, 0xa0, 0x20, 0x8e, 0xdc, 0xbb, 0x44, 0xfd, 0xbf,
		0xbe, 0x8a, 0x3a, 0x26, 0xf9, 0xc1, 0x2b, 0xcd, 0x91, 0x4e, 0x67, 0x19, 0xbf, 0x39, 0xbb, 0xd2,
		0x05, 0x43, 0x2e, 0x45, 0xa8, 0xde, 0x75, 0xcb, 0xdd, 0x84, 0x13, 0x2e, 0x45, 0xb0, 0xe4, 0x91,
		0xcd, 0x06, 0x9e, 0xdf, 0x34, 0xb9, 0x14, 0xa1, 0x5a, 0x41, 0x66, 0x87, 0xa9, 0x07, 0x52, 0xa8,
		0xe3, 0xf5, 0xbc, 0x8e, 0x59, 0x05, 0xcf, 0x9c, 0x19, 0xb2, 0x4a, 0x60, 0xe6, 0x7d, 0xcb, 0x2a,
		0xe9, 0x84, 0x71, 0xa4, 0x52, 0xb7, 0xeb, 0x3d, 0x06, 0xdd, 0x7e, 0xd7, 0xfc, 0x5c, 0x65, 0xc1,
		0x9e, 0xe6, 0xa8, 0x9b, 0xdc, 0x42, 0x96, 0x1b, 0x39, 0x3d, 0xd6, 0x73, 0x5e, 0x6f, 0x38, 0x00,
		0xe2, 0x00, 0x68, 0x6b, 0x38, 0x61, 0xc8, 0xd6, 0x1c, 0xde, 0xec, 0xff, 0xe1, 0x0d, 0x67, 0x37,
		0xdb, 0xf2, 0x14, 0x96, 0xa6, 0xe2, 0xf4, 0x98, 0x33, 0x9b, 0x8a, 0x9e, 0xae, 0x73, 0xa6, 0xca,
		0x44, 0xf5, 0x04, 0x91, 0xac, 0x8a, 0x1a, 0xdb, 0xdb, 0xa6, 0x8a, 0x6a, 0x22, 0xa2, 0x10, 0x51,
		0x88, 0x28, 0x44, 0x14, 0x22, 0x0a, 0x11, 0x85, 0x88, 0x42, 0x44, 0x59, 0x13, 0x51, 0x2a, 0xd2,
		0x4e, 0x63, 0x99, 0x03, 0xcf, 0xb1, 0x1d, 0x04, 0x08, 0x02, 0x04, 0x01, 0xa2, 0xb9, 0x72, 0x6e,
		0xe3, 0x38, 0x54, 0x5e, 0x24, 0xa0, 0x40, 0x5a, 0xad, 0x1a, 0x43, 0x4e, 0x57, 0x25, 0xf7, 0x4a,
		0xa3, 0x9c, 0x7e, 0xfd, 0x8e, 0x5b, 0x30, 0x08, 0x08, 0x01, 0x42, 0x80, 0x10, 0x5e, 0x10, 0x5e,
		0x10, 0x5e, 0xd0, 0x33, 0x53, 0x41, 0x19, 0x00, 0xde, 0xd0, 0xcc, 0x20, 0x47, 0x71, 0x37, 0x88,
		0xbc, 0x50, 0x52, 0x9c, 0x2c, 0x9b, 0x44, 0x9e, 0x20, 0x4f, 0x90, 0x27, 0xc8, 0x13, 0xe4, 0x09,
		0xf2, 0x04, 0x79, 0x82, 0x3c, 0x29, 0x3e, 0xc8, 0x69, 0x2f, 0x0c, 0x32, 0x49, 0x71, 0xb2, 0x68,
		0x10, 0x69, 0x82, 0x34, 0x41, 0x9a, 0x20, 0x4d, 0x90, 0x26, 0x48, 0x13, 0xa4, 0xc9, 0xc1, 0x4a,
		0x13, 0x8a, 0xbb, 0xd7, 0x14, 0x77, 0x1b, 0x54, 0x26, 0x39, 0xdb, 0xaa, 0xea, 0xee, 0x67, 0xf1,
		0x5f, 0x27, 0xaf, 0x5c, 0x83, 0x22, 0xb1, 0x7c, 0x34, 0xdd, 0x30, 0xe8, 0x8e, 0x36, 0xba, 0x66,
		0x9d, 0xd8, 0x92, 0x25, 0x4a, 0xc5, 0x2c, 0xab, 0x52, 0x4a, 0xc5, 0x74, 0x41, 0x4f, 0xbb, 0x54,
		0x6c, 0xba, 0xc8, 0xbb, 0xde, 0xe3, 0x68, 0xa1, 0x9b, 0xbb, 0x7d, 0xab, 0x8c, 0xe2, 0xfa, 0xe1,
		0xfa, 0x1d, 0x98, 0xeb, 0x47, 0x03, 0x3e, 0xdc, 0x47, 0xdc, 0x47, 0xdc, 0x47, 0xdc, 0x47, 0x59,
		0xf7, 0xf1, 0xa5, 0x91, 0xcc, 0x09, 0x22, 0x0b, 0x32, 0x27, 0x37, 0x8a, 0xcc, 0x41, 0xe6, 0x20,
		0x73, 0x90, 0x39, 0xc8, 0x1c, 0x64, 0x0e, 0x32, 0x07, 0x99, 0x63, 0x20, 0x73, 0x68, 0x33, 0x5c,
		0x00, 0xee, 0x67, 0xdb, 0xdf, 0x2e, 0x06, 0x6c, 0x69, 0x31, 0x2c, 0xa3, 0x49, 0x4a, 0x8f, 0x31,
		0xed, 0x85, 0x77, 0xf5, 0x04, 0xca, 0xf0, 0xcc, 0xc3, 0xd9, 0xd2, 0x21, 0x54, 0xfe, 0xd3, 0xbb,
		0xd1, 0x5b, 0xd7, 0xe0, 0x1c, 0xaa, 0x13, 0x87, 0xa1, 0x1a, 0x52, 0xa9, 0x1b, 0x47, 0xa1, 0x41,
		0xbb, 0xc2, 0x45, 0x43, 0xb4, 0x12, 0xb6, 0x8c, 0xd3, 0x9c, 0x42, 0xe9, 0x02, 0x9f, 0x79, 0x2b,
		0x61, 0xd5, 0xed, 0xe9, 0x9d, 0x7c, 0x4f, 0x0e, 0x5b, 0x8f, 0x6b, 0xb0, 0xf5, 0x47, 0xb5, 0xea,
		0x06, 0xd7, 0xdf, 0x4e, 0x0c, 0xb0, 0xd5, 0xd9, 0xea, 0x7b, 0xbb, 0xd5, 0xf5, 0xab, 0xd1, 0x35,
		0xab, 0xd0, 0xed, 0x6c, 0xf6, 0xf8, 0x8b, 0x4a, 0xee, 0xc2, 0xf8, 0xab, 0xfe, 0x6e, 0xcf, 0x2d,
		0x90, 0x5f, 0xc2, 0x76, 0xdf, 0xb7, 0xfc, 0x92, 0xc9, 0xe2, 0x9e, 0xb9, 0x90, 0x51, 0xe8, 0xf4,
		0x65, 0xad, 0x65, 0x8e, 0x60, 0x38, 0x82, 0xd9, 0xda, 0x36, 0x34, 0x8c, 0x64, 0x70, 0x04, 0xe3,
		0x70, 0x04, 0xb3, 0xc1, 0x18, 0x17, 0x5b, 0x1b, 0x4d, 0x85, 0x9d, 0x8b, 0xad, 0x39, 0x7a, 0xa9,
		0xe8, 0xe9, 0x3a, 0x67, 0x98, 0xac, 0x90, 0x23, 0x3d, 0x95, 0x74, 0x46, 0x9c, 0x22, 0x2f, 0x75,
		0x26, 0xb6, 0x11, 0x3b, 0x88, 0x1d, 0xc4, 0x0e, 0x62, 0x07, 0xb1, 0x83, 0xd8, 0xa9, 0x44, 0xec,
		0xa0, 0x76, 0x50, 0x3b, 0x2b, 0x15, 0xc9, 0x97, 0xf1, 0x12, 0x91, 0xd7, 0x3a, 0x23, 0xcb, 0x28,
		0x1d, 0x94, 0x0e, 0x4a, 0x07, 0xa5, 0xb3, 0xd7, 0x4a, 0x87, 0xd4, 0xda, 0xda, 0x48, 0x1d, 0x52,
		0x6b, 0xf7, 0x57, 0xf1, 0x90, 0x5a, 0x5b, 0x00, 0xef, 0x67, 0xd3, 0x3e, 0x27, 0xaa, 0x8c, 0x94,
		0x5a, 0x19, 0x31, 0x52, 0x78, 0x6c, 0x49, 0xa5, 0xdd, 0xd5, 0x54, 0x5a, 0xcd, 0xb4, 0x0e, 0x67,
		0x4b, 0x29, 0xb4, 0xbf, 0x4e, 0x5e, 0xb7, 0x46, 0x39, 0x35, 0xae, 0xe6, 0xed, 0x31, 0xcb, 0xce,
		0xa4, 0xd6, 0xf5, 0x31, 0x24, 0xd4, 0x6d, 0xcf, 0x27, 0x24, 0xa1, 0xae, 0xf4, 0xcc, 0xef, 0x49,
		0x42, 0x5d, 0xa2, 0xd2, 0xe0, 0x3e, 0xf2, 0x42, 0x37, 0xf4, 0xd2, 0x99, 0xde, 0xa1, 0x6e, 0x16,
		0x74, 0x95, 0x1b, 0xf7, 0x33, 0x7d, 0x34, 0x78, 0xd6, 0x32, 0xf0, 0x00, 0x3c, 0xec, 0x2d, 0x3c,
		0x68, 0x87, 0x6f, 0x0c, 0xc2, 0x36, 0x86, 0xe1, 0x1a, 0x03, 0x27, 0x46, 0x22, 0x3c, 0x23, 0x75,
		0x00, 0x25, 0xee, 0xf9, 0xcb, 0x79, 0xfc, 0x06, 0xd1, 0x17, 0x91, 0xa8, 0x4b, 0x3e, 0xc4, 0xc7,
		0xa7, 0xcd, 0xc1, 0x3f, 0xfb, 0x3b, 0xd0, 0xf5, 0x74, 0xc7, 0xac, 0x30, 0x78, 0x3f, 0xf2, 0x4d,
		0x73, 0xe2, 0xa7, 0x26, 0x48, 0x8a, 0x87, 0x93, 0xf7, 0x2d, 0x29, 0x3e, 0x5f, 0xdd, 0xf2, 0x59,
		0xf1, 0xeb, 0x4d, 0x73, 0x7e, 0xca, 0xf9, 0xe9, 0xd6, 0x36, 0xa2, 0x21, 0x0d, 0x72, 0x7e, 0xea,
		0x70, 0x7e, 0x6a, 0x5f, 0xa8, 0x5b, 0xd3, 0x91, 0xf2, 0x7a, 0x52, 0x40, 0xc0, 0x8b, 0x0a, 0xf9,
		0xe5, 0xa9, 0x20, 0x51, 0xac, 0xaa, 0xa7, 0xeb, 0x9c, 0x28, 0xb6, 0x4a, 0x8f, 0x88, 0xe5, 0xc5,
		0x6f, 0x32, 0x8e, 0xdc, 0x41, 0xee, 0x20, 0x77, 0x90, 0x3b, 0xc8, 0x1d, 0xe4, 0x4e, 0x25, 0x72,
		0x07, 0xbd, 0x83, 0xde, 0x59, 0x2d, 0x49, 0x84, 0x32, 0xe3, 0xd7, 0x9b, 0x46, 0xeb, 0xa0, 0x75,
		0xd0, 0x3a, 0x68, 0x1d, 0x52, 0xe3, 0x11, 0x3b, 0x55, 0x88, 0x1d, 0x52, 0xe3, 0xf7, 0x57, 0xf3,
		0x90, 0x1a, 0x5f, 0x00, 0xef, 0x67, 0xd3, 0xb7, 0x73, 0x59, 0x46, 0x6e, 0xbc, 0x8c, 0x1a, 0x29,
		0x3e, 0xb8, 0x24, 0xc7, 0xef, 0x6a, 0x72, 0xbc, 0x6e, 0x7e, 0x87, 0xb3, 0xa5, 0xec, 0xf8, 0xff,
		0x9d, 0xbf, 0x6f, 0x9d, 0xf2, 0x6b, 0x8c, 0xf3, 0xe3, 0x97, 0x2c, 0x91, 0x01, 0x6b, 0x19, 0x95,
		0xc9, 0xb6, 0xd1, 0x45, 0xbb, 0xfd, 0x4e, 0x90, 0x7f, 0x21, 0x38, 0x64, 0xba, 0xc4, 0xb0, 0x45,
		0x42, 0x28, 0x31, 0x27, 0x5b, 0x80, 0xff, 0x62, 0x5b, 0xe1, 0xf9, 0x39, 0x2c, 0x30, 0x7f, 0x8d,
		0xc1, 0xb8, 0x24, 0x71, 0x3f, 0x2b, 0xbe, 0xd6, 0xf3, 0xf5, 0x3d, 0x7d, 0xb4, 0xe0, 0x3a, 0x29,
		0x97, 0x2c, 0x59, 0x1a, 0xb6, 0x75, 0xe0, 0xda, 0x10, 0xa6, 0x75, 0xe1, 0xd9, 0x18, 0x96, 0x8d,
		0xe1, 0xd8, 0x1c, 0x86, 0x65, 0x31, 0xa4, 0x6c, 0x72, 0xe3, 0x74, 0xf5, 0xb9, 0x5e, 0x14, 0xc5,
		0xfd, 0xa8, 0x63, 0xa0, 0x4b, 0x56, 0xd8, 0x22, 0x0f, 0x18, 0x65, 0xb2, 0x6f, 0x79, 0xc0, 0x9a,
		0xf2, 0x7d, 0x69, 0xe1, 0x68, 0x89, 0x77, 0x43, 0x11, 0x6f, 0xbc, 0x65, 0x24, 0xb6, 0x8e, 0xf0,
		0x16, 0xb2, 0x1c, 0x7a, 0xe1, 0x18, 0x48, 0x3a, 0xd4, 0x2d, 0x78, 0x84, 0xa3, 0x7b, 0xf3, 0xcc,
		0x12, 0xe3, 0x1c, 0xd7, 0xf8, 0x74, 0x5a, 0x3d, 0x76, 0xc2, 0xbe, 0xaf, 0xdc, 0x2c, 0xf1, 0xee,
		0xee, 0x82, 0x8e, 0x00, 0xf2, 0x2c, 0x18, 0x34, 0x83, 0xa0, 0x16, 0x10, 0x04, 0x04, 0xed, 0x1a,
		0x04, 0xe9, 0xb2, 0xff, 0xd4, 0x9f, 0x55, 0xf7, 0x83, 0xaf, 0xef, 0x0e, 0x04, 0x6f, 0x10, 0xdd,
		0x9b, 0x4f, 0xf9, 0x64, 0x25, 0x2e, 0x1a, 0x36, 0x9c, 0x27, 0x33, 0x9d, 0x20, 0xb6, 0x59, 0x25,
		0x37, 0xad, 0xa5, 0xcd, 0x2b, 0xbd, 0x89, 0xad, 0x6d, 0x66, 0x6b, 0x9b, 0xda, 0xde, 0xe6, 0x36,
		0xdb, 0xe4, 0x86, 0x9b, 0x5d, 0x4e, 0x77, 0x88, 0xeb, 0x0f, 0x21, 0x1d, 0x62, 0x3e, 0xbc, 0xd5,
		0xa2, 0xaf, 0xe1, 0x19, 0xd8, 0xd6, 0x42, 0x9f, 0xc3, 0xe8, 0xc6, 0xeb, 0xe5, 0x38, 0xc7, 0x6b,
		0x19, 0x45, 0x55, 0x6d, 0xa0, 0x74, 0xf8, 0x15, 0xa6, 0x3f, 0x5d, 0x8e, 0xbf, 0xcb, 0xe7, 0x9f,
		0x47, 0xdf, 0xe5, 0xe3, 0xf8, 0xab, 0xd4, 0x58, 0x18, 0x07, 0xd1, 0x68, 0xd4, 0x83, 0xde, 0x97,
		0x53, 0x73, 0x55, 0x3c, 0x67, 0x0d, 0xaf, 0x1c, 0x49, 0x8c, 0x57, 0x8e, 0x57, 0xbe, 0xfe, 0x1d,
		0xbb, 0x2a, 0x4b, 0x24, 0x9c, 0xf1, 0xb1, 0x1d, 0x7c, 0x70, 0x00, 0x07, 0x1f, 0xbc, 0x9c, 0x01,
		0xef, 0x36, 0x8d, 0xc3, 0x81, 0x0e, 0x33, 0xdc, 0x8b, 0x4b, 0x2b, 0x71, 0xd1, 0x30, 0x3e, 0x38,
		0x3e, 0x38, 0x3e, 0x78, 0x4d, 0x7d, 0x70, 0xe3, 0x32, 0x8e, 0xc5, 0x7d, 0x7a, 0x26, 0x60, 0x4a,
		0xa6, 0xac, 0x63, 0xf2, 0x8f, 0xcc, 0x26, 0x70, 0xa4, 0xcb, 0x3c, 0x72, 0xa3, 0xc2, 0xa5, 0xad,
		0xb9, 0x5d, 0x5b, 0x15, 0x06, 0xd3, 0x35, 0x24, 0x5d, 0x69, 0x20, 0xb4, 0x4d, 0xe6, 0xa7, 0x4c,
		0xb0, 0x1a, 0x64, 0x69, 0xca, 0x8e, 0x5a, 0xed, 0xb3, 0xf6, 0x9b, 0xe3, 0xd3, 0xf6, 0x19, 0x73,
		0x27, 0x02, 0x90, 0x72, 0x56, 0x6e, 0xb6, 0x0a, 0xd4, 0x02, 0x55, 0x1f, 0x4b, 0x36, 0xbf, 0x3e,
		0xa8, 0xa8, 0x8e, 0xa0, 0x38, 0xa1, 0x92, 0x57, 0xaf, 0x5e, 0x8f, 0x14, 0x9f, 0x9b, 0x3d, 0xf5,
		0x94, 0xf3, 0x17, 0xe7, 0xcf, 0x13, 0x25, 0xf8, 0xe7, 0x86, 0xe0, 0x86, 0x16, 0x16, 0x37, 0xab,
		0x44, 0xce, 0x70, 0xa4, 0x85, 0x37, 0x9c, 0x2d, 0xa9, 0xb3, 0x52, 0xf2, 0x6c, 0x9a, 0x8a, 0x5a,
		0xa2, 0xf4, 0x4f, 0x2a, 0xed, 0x24, 0x41, 0xcf, 0x38, 0xa8, 0xfd, 0xdc, 0x02, 0xbd, 0x1a, 0x8e,
		0xca, 0xc7, 0xd1, 0xa0, 0x5c, 0x8e, 0xc7, 0x44, 0x7a, 0xaa, 0x2d, 0xad, 0xd0, 0xc5, 0x55, 0xea,
		0xcf, 0x8c, 0xd9, 0x4b, 0xf9, 0x4f, 0xb2, 0xbd, 0x60, 0x57, 0x2d, 0xda, 0xd5, 0xd3, 0x23, 0xfa,
		0xb1, 0xdf, 0x60, 0x3a, 0xa1, 0xcf, 0x37, 0x69, 0xa4, 0xdc, 0x89, 0x07, 0xd4, 0x18, 0x65, 0xe2,
		0xc1, 0x87, 0x45, 0xc3, 0x04, 0x1f, 0x08, 0x3e, 0x10, 0x7c, 0x20, 0xf8, 0x40, 0xf0, 0x81, 0xe0,
		0x03, 0xc1, 0x07, 0x82, 0x0f, 0x04, 0x1f, 0x0e, 0x25, 0xf8, 0x30, 0x51, 0x82, 0x04, 0x1f, 0xb6,
		0x1e, 0x7c, 0x98, 0x4e, 0x05, 0xc1, 0x87, 0x89, 0x77, 0xfb, 0xd7, 0xf1, 0x98, 0x10, 0x7c, 0xa8,
		0x65, 0xf0, 0x21, 0x9f, 0x1e, 0x82, 0x0f, 0x7b, 0x17, 0x7c, 0x98, 0x41, 0x27, 0xb9, 0xc0, 0xc3,
		0xac, 0x51, 0x82, 0x0e, 0x04, 0x1d, 0x08, 0x3a, 0xd4, 0x34, 0xe8, 0x70, 0x35, 0x1e, 0x9c, 0x69,
		0x22, 0xba, 0x48, 0xa8, 0x70, 0x76, 0xe7, 0xb6, 0xda, 0x02, 0xb6, 0x7e, 0x8e, 0xfa, 0x5d, 0xb9,
		0x05, 0xfd, 0x31, 0xfe, 0x90, 0x25, 0x12, 0xa5, 0x56, 0x73, 0x56, 0x5b, 0xa3, 0x3b, 0x46, 0xc3,
		0x91, 0x37, 0x27, 0x28, 0xc9, 0x8e, 0x66, 0x13, 0xc9, 0x24, 0x0d, 0x1f, 0xcf, 0x06, 0x89, 0x65,
		0xc8, 0x5d, 0x48, 0x8a, 0x36, 0x3e, 0xc6, 0x6f, 0x0d, 0x6e, 0x88, 0x58, 0x69, 0x32, 0x1f, 0xc1,
		0x0b, 0xe7, 0x48, 0x70, 0x10, 0xf3, 0xf1, 0xbb, 0x70, 0x8e, 0x05, 0xcd, 0xe6, 0x0b, 0xe9, 0xc2,
		0x69, 0xd5, 0x44, 0xde, 0x7c, 0xdb, 0x41, 0x79, 0x33, 0x19, 0x46, 0xf1, 0xb3, 0x95, 0x45, 0xc3,
		0xc8, 0x1c, 0x64, 0x0e, 0x32, 0xa7, 0xa6, 0x32, 0x47, 0xfa, 0x68, 0xe5, 0x98, 0xa3, 0x95, 0x92,
		0x46, 0xa5, 0xdb, 0x78, 0xe7, 0x86, 0xab, 0x8c, 0xcf, 0x0f, 0xb6, 0xee, 0xe1, 0x1d, 0xad, 0xec,
		0xf4, 0x94, 0x71, 0xa4, 0x22, 0x8f, 0xcf, 0x1c, 0xa9, 0x38, 0x7f, 0x71, 0xfe, 0x3c, 0x11, 0x80,
		0x1c, 0xa9, 0x6c, 0xfd, 0x48, 0x65, 0x3a, 0x15, 0x1c, 0xa9, 0x4c, 0x62, 0xf6, 0xbf, 0xc9, 0x07,
		0x22, 0x1c, 0x8e, 0x54, 0x4c, 0x16, 0xed, 0xea, 0xe9, 0xe1, 0x48, 0xc5, 0x26, 0xd3, 0xd1, 0xc5,
		0x64, 0x3b, 0x5d, 0x4c, 0x8c, 0x83, 0x22, 0xdb, 0x6f, 0x5e, 0x32, 0xda, 0xae, 0x8d, 0xbd, 0xb8,
		0x77, 0x65, 0xd7, 0x6e, 0x8a, 0x58, 0xb7, 0xae, 0x6a, 0x7d, 0x5b, 0xc4, 0x9a, 0x85, 0x54, 0x87,
		0x1b, 0x23, 0x7c, 0x95, 0x66, 0x41, 0x34, 0xfa, 0x56, 0xfa, 0x5d, 0x99, 0xe7, 0xac, 0xd0, 0x8f,
		0xd9, 0xb2, 0x52, 0xa2, 0x1f, 0xb3, 0x2e, 0xda, 0x69, 0xf7, 0x63, 0x9e, 0x59, 0xe0, 0xe6, 0xdd,
		0x58, 0x66, 0x8d, 0xd1, 0x92, 0x85, 0x96, 0x2c, 0x5b, 0xdb, 0x6c, 0xdb, 0x91, 0xb4, 0xc6, 0x2d,
		0x59, 0x66, 0xf6, 0x8f, 0xeb, 0xf9, 0x7e, 0xa2, 0xd2, 0x54, 0xee, 0xf4, 0x6e, 0x95, 0x71, 0x4e,
		0xf0, 0x2a, 0xda, 0xc4, 0xb6, 0x62, 0x09, 0x9c, 0xe0, 0x49, 0x79, 0xde, 0x35, 0x3c, 0xc1, 0xeb,
		0x7d, 0x69, 0x4f, 0x76, 0xaa, 0x1b, 0xc5, 0xee, 0x3f, 0xe2, 0x48, 0x49, 0x26, 0x29, 0xbd, 0x11,
		0xb0, 0xf5, 0xde, 0xcb, 0x32, 0x95, 0xc8, 0x85, 0xb1, 0x1b, 0xdf, 0x7d, 0xf7, 0xa9, 0xe9, 0x9e,
		0xdf, 0xfc, 0xf3, 0x53, 0xcb, 0x3d, 0xbf, 0x19, 0xfd, 0xd8, 0x1a, 0xfe, 0x6b, 0xf4, 0xf3, 0xd1,
		0xa7, 0xa6, 0xdb, 0x9e, 0xfc, 0x7c, 0xf2, 0xa9, 0xe9, 0x9e, 0xdc, 0x7c, 0x7f, 0x7d, 0xfd, 0xea,
		0xfb, 0x3f, 0x8e, 0xbf, 0x95, 0x7f, 0xf0, 0xbb, 0x3f, 0x7d, 0xba, 0xbe, 0xee, 0xfd, 0xf1, 0xf7,
		0x6f, 0x83, 0xff, 0x7f, 0xf7, 0xed, 0xe6, 0x87, 0xef, 0xff, 0x43, 0x6a, 0xf7, 0x0c, 0x3e, 0xe8,
		0xfa, 0xfa, 0xd5, 0xcd, 0xbf, 0x35, 0x08, 0x07, 0x15, 0xc5, 0x31, 0x59, 0x92, 0x6a, 0xbc, 0x0b,
		0xd2, 0x6c, 0xe0, 0xae, 0x9a, 0x51, 0xf2, 0x55, 0x10, 0xfd, 0x1c, 0xaa, 0x01, 0x5e, 0x19, 0x9e,
		0xda, 0x35, 0xae, 0xbc, 0xc7, 0x19, 0x4b, 0xad, 0x37, 0xed, 0xf6, 0xe9, 0x59, 0xbb, 0xdd, 0x3c,
		0x3b, 0x3e, 0x6b, 0x9e, 0x9f, 0x9c, 0xb4, 0x4e, 0x5b, 0x06, 0x37, 0x0b, 0x37, 0x7e, 0x4d, 0x7c,
		0x95, 0x28, 0xff, 0xc7, 0xc1, 0x20, 0x46, 0xfd, 0x30, 0x24, 0x94, 0x57, 0x38, 0xe4, 0x32, 0xeb,
		0xe2, 0xbf, 0x36, 0xf7, 0x60, 0xb6, 0x11, 0x80, 0xf9, 0x69, 0xe6, 0x2b, 0xcc, 0xfe, 0x07, 0x91,
		0xbc, 0x7a, 0x2c, 0xab, 0x1d, 0x88, 0xe1, 0xcd, 0x2e, 0xa1, 0x06, 0x37, 0x3e, 0x4a, 0x2f, 0x87,
		0x5a, 0x5e, 0xf6, 0x38, 0x7a, 0xb3, 0x0a, 0x2f, 0x7a, 0xbc, 0xf5, 0x3a, 0xbf, 0xf7, 0x7b, 0x33,
		0x57, 0x60, 0x96, 0xbe, 0xef, 0x71, 0xc9, 0x02, 0xd7, 0x3e, 0x72, 0xed, 0xa3, 0x21, 0x90, 0x94,
		0xbe, 0xf6, 0x51, 0x7b, 0x19, 0x4b, 0x2d, 0x67, 0xc3, 0x00, 0x0c, 0x47, 0x0c, 0x1c, 0x31, 0x6c,
		0xe3, 0x32, 0x6a, 0xed, 0x76, 0x2f, 0x06, 0xed, 0x5d, 0x0c, 0x73, 0x8e, 0xcd, 0x3c, 0x47, 0xf3,
		0xe0, 0xad, 0x50, 0x7b, 0x16, 0xf1, 0xfc, 0x53, 0xb9, 0x7c, 0xd3, 0x6f, 0x66, 0x2e, 0xb5, 0xdc,
		0x10, 0xb7, 0x8f, 0xce, 0xdb, 0xe7, 0xa7, 0x67, 0x47, 0xe7, 0x27, 0xfb, 0x3b, 0xd6, 0x15, 0xf9,
		0x83, 0x37, 0x35, 0x38, 0xff, 0xef, 0x84, 0x5e, 0x9a, 0xea, 0xd5, 0x78, 0x4f, 0x9b, 0xc9, 0x4d,
		0x6d, 0x40, 0xcc, 0x10, 0xf3, 0xde, 0x12, 0xf3, 0xa4, 0x24, 0x7a, 0x51, 0x8e, 0xba, 0xc3, 0x0d,
		0x60, 0x40, 0xd8, 0x3a, 0x85, 0xd0, 0x66, 0x85, 0xcf, 0x32, 0x85, 0xce, 0x8d, 0x66, 0xbe, 0xfd,
		0x9b, 0x26, 0x71, 0xc0, 0x56, 0x6e, 0xa6, 0x65, 0x62, 0xe6, 0x7c, 0x58, 0x0d, 0x1d, 0x3d, 0x8d,
		0xe7, 0xa3, 0xda, 0x8b, 0x8d, 0x8c, 0xab, 0x92, 0x67, 0xde, 0xfc, 0xc2, 0x39, 0x37, 0x69, 0x1a,
		0x3a, 0x9a, 0x0f, 0xb3, 0x30, 0xfc, 0x78, 0x36, 0x74, 0x4b, 0x8c, 0xad, 0x07, 0x47, 0xed, 0x24,
		0xc3, 0xa5, 0x99, 0x32, 0xe4, 0xc2, 0xa9, 0x09, 0xa8, 0x10, 0x2a, 0x3c, 0x00, 0x2a, 0x9c, 0x70,
		0xe0, 0x60, 0xe1, 0x1f, 0x2c, 0x05, 0xa6, 0x99, 0x17, 0xf9, 0x5e, 0xe2, 0xeb, 0x8e, 0xc2, 0x3c,
		0x13, 0xf6, 0x12, 0xe5, 0xce, 0x5b, 0xdc, 0x35, 0x2a, 0x5b, 0xfe, 0x06, 0x46, 0xbe, 0x79, 0x63,
		0xd1, 0x56, 0xf3, 0x80, 0x48, 0x29, 0x0c, 0xba, 0x41, 0x66, 0xc8, 0x4a, 0x33, 0x36, 0xa0, 0x25,
		0x68, 0xe9, 0x80, 0x68, 0x69, 0xb8, 0xf2, 0x0f, 0x91, 0x97, 0x5a, 0x47, 0x6f, 0xf2, 0x9d, 0xaf,
		0x7c, 0x13, 0x4e, 0x3a, 0x6d, 0x0f, 0xa3, 0xd2, 0xd1, 0xc4, 0xd4, 0xae, 0x91, 0xd1, 0xe4, 0xbd,
		0x2f, 0x9c, 0xd6, 0x91, 0x41, 0x32, 0xdf, 0xcc, 0x08, 0x5c, 0x38, 0xa7, 0xed, 0x03, 0x62, 0xa0,
		0x5e, 0x1c, 0x87, 0x86, 0x04, 0x34, 0x35, 0x01, 0xff, 0xc0, 0x3f, 0x87, 0x17, 0x21, 0x1c, 0xac,
		0xff, 0x83, 0x64, 0xa1, 0x49, 0x48, 0x4e, 0x73, 0x00, 0x72, 0x43, 0xc3, 0x4e, 0x87, 0xf7, 0x61,
		0x7c, 0xeb, 0x85, 0xc6, 0xb6, 0x86, 0x7c, 0x96, 0xf6, 0x6f, 0x47, 0x86, 0x76, 0x31, 0x4c, 0x38,
		0x7c, 0x71, 0x33, 0x97, 0x6a, 0x76, 0x2c, 0x8d, 0xda, 0x1e, 0x4e, 0x47, 0xf2, 0xc2, 0xd9, 0x79,
		0x56, 0x3c, 0xb8, 0xd4, 0x3b, 0x83, 0xd4, 0x9a, 0x6a, 0x32, 0xf0, 0x7e, 0x1c, 0xbe, 0xe0, 0x8f,
		0xf9, 0xfb, 0x55, 0x9a, 0x87, 0x67, 0x90, 0x80, 0x47, 0xe6, 0x1d, 0x99, 0x77, 0x42, 0x38, 0xa2,
		0x91, 0x79, 0x27, 0x90, 0x72, 0x47, 0xae, 0x1d, 0x82, 0xbd, 0xe6, 0x82, 0xfd, 0xca, 0x8b, 0x7c,
		0x2f, 0x8b, 0x93, 0x27, 0x8d, 0xfe, 0x11, 0xe4, 0xe9, 0x95, 0xfb, 0x60, 0xd1, 0x3c, 0xbd, 0x26,
		0x79, 0x7a, 0x2b, 0x97, 0x33, 0x79, 0x7a, 0x76, 0xfd, 0x06, 0x67, 0xc7, 0xf3, 0xf4, 0xe2, 0xc4,
		0x15, 0x08, 0xc6, 0xad, 0xb0, 0x05, 0xc9, 0x43, 0xf2, 0x90, 0x3c, 0x24, 0x0f, 0xc9, 0xef, 0x14,
		0xc9, 0xb7, 0xe0, 0xf6, 0x3d, 0xe0, 0x76, 0xd2, 0x0e, 0x61, 0x72, 0x98, 0xdc, 0x36, 0x93, 0x93,
		0xb2, 0x38, 0xb1, 0x42, 0xca, 0xe2, 0x0a, 0x13, 0xa4, 0x2c, 0x4a, 0xfc, 0x66, 0xd1, 0x90, 0xb6,
		0xc1, 0x45, 0x11, 0x83, 0x99, 0x4a, 0x55, 0xd4, 0x29, 0x2f, 0x90, 0x0d, 0xc0, 0xe3, 0x6d, 0xe4,
		0x07, 0x1d, 0x2f, 0x53, 0xa9, 0xe3, 0x39, 0x39, 0x80, 0x38, 0x51, 0xec, 0x2b, 0x27, 0x48, 0x9d,
		0xc9, 0x39, 0x9b, 0xf2, 0x5f, 0x6d, 0x9f, 0x90, 0x46, 0x63, 0x53, 0x27, 0x4a, 0x2a, 0x3e, 0x78,
		0xb5, 0x59, 0xed, 0x37, 0x07, 0x78, 0x10, 0x5c, 0xdf, 0x13, 0xe0, 0x6d, 0x9c, 0xfd, 0xde, 0xf9,
		0x6e, 0xfc, 0x45, 0x25, 0x6e, 0x98, 0xf6, 0x34, 0x8e, 0x7f, 0x67, 0x9f, 0xe6, 0x04, 0x98, 0x13,
		0x60, 0x43, 0x00, 0x29, 0x7f, 0x02, 0x3c, 0x50, 0x89, 0xfd, 0x9e, 0x9b, 0x05, 0x5d, 0x15, 0xf7,
		0x33, 0x83, 0x73, 0xe0, 0x05, 0x43, 0xb8, 0x97, 0xb8, 0x97, 0x74, 0x5e, 0x21, 0xd8, 0xbb, 0x14,
		0x89, 0x24, 0xda, 0x6b, 0x3d, 0xda, 0x7b, 0x7c, 0xda, 0x6c, 0x12, 0xf0, 0xdd, 0x87, 0x80, 0xaf,
		0xd7, 0xed, 0xa9, 0x28, 0x88, 0xee, 0xdd, 0x20, 0x0a, 0xb2, 0xc0, 0x0b, 0xdd, 0xaf, 0x5e, 0x60,
		0x40, 0xd2, 0x6b, 0xec, 0xc1, 0xd5, 0x70, 0x35, 0x5c, 0x0d, 0x57, 0x2f, 0x71, 0x35, 0x54, 0x6d,
		0x9b, 0xaa, 0x4f, 0x5a, 0x6f, 0xda, 0xcd, 0xc1, 0x3f, 0xf0, 0xf5, 0x5e, 0xf1, 0x75, 0xd7, 0x7b,
		0x0c, 0xba, 0xfd, 0xae, 0x18, 0x5f, 0xcf, 0xd9, 0x83, 0xaf, 0xe1, 0x6b, 0xf8, 0x1a, 0xbe, 0x86,
		0xaf, 0xe1, 0x6b, 0xf8, 0x5a, 0x84, 0xaf, 0x53, 0xd5, 0x89, 0x23, 0xdf, 0x4b, 0x9e, 0xc4, 0x18,
		0x7b, 0xc1, 0x22, 0x9c, 0x0d, 0x67, 0xc3, 0xd9, 0x70, 0x36, 0x9c, 0x0d, 0x67, 0xc3, 0xd9, 0x06,
		0x9c, 0xad, 0xa2, 0xd2, 0x99, 0x60, 0x73, 0x58, 0x35, 0x7e, 0x1e, 0x3e, 0x86, 0x8f, 0xf7, 0x96,
		0x8f, 0x55, 0xb7, 0x97, 0x3d, 0x99, 0x64, 0x2c, 0x1f, 0xd7, 0x62, 0xa3, 0x77, 0xbc, 0x9e, 0xdb,
		0x8d, 0x7d, 0xa3, 0xcd, 0x9e, 0xdb, 0x60, 0xc3, 0xb3, 0xe1, 0x11, 0xe0, 0x08, 0xf0, 0x45, 0x75,
		0x48, 0x3e, 0x8a, 0x75, 0x01, 0x4e, 0xf5, 0xe1, 0x3e, 0x08, 0xef, 0x3b, 0x2f, 0xcd, 0x5c, 0x5f,
		0x65, 0xaa, 0x63, 0x10, 0x1f, 0x9b, 0x35, 0x02, 0x23, 0xc3, 0xc8, 0xfb, 0xde, 0xe1, 0xf3, 0xf6,
		0xce, 0x77, 0x53, 0x95, 0xa6, 0x7a, 0x17, 0x60, 0xef, 0x47, 0x5b, 0xcf, 0x44, 0xdd, 0xf7, 0x43,
		0x2f, 0x71, 0x6f, 0xef, 0x7c, 0xe3, 0xce, 0x9e, 0xa9, 0xa1, 0x91, 0xe3, 0xd1, 0x0b, 0xf9, 0xfd,
		0xc8, 0xf7, 0xa2, 0xcc, 0x1d, 0x9a, 0xdb, 0xb5, 0x0a, 0xc4, 0x85, 0xd7, 0xbf, 0x70, 0x8e, 0x5f,
		0x9a, 0x18, 0x9b, 0x4e, 0x8e, 0x61, 0x21, 0xe3, 0xc8, 0xc4, 0xd1, 0x01, 0x35, 0xbc, 0xee, 0x06,
		0xd1, 0x30, 0x2b, 0x63, 0x58, 0x40, 0xf5, 0xc5, 0x0b, 0xf5, 0x79, 0x71, 0xc9, 0x12, 0xe4, 0x08,
		0x39, 0xe2, 0xae, 0xe2, 0xae, 0x2e, 0xfa, 0x52, 0xc7, 0xb8, 0xab, 0xb6, 0xdd, 0xd5, 0x63, 0xce,
		0x8a, 0xf6, 0xc4, 0x65, 0xed, 0xf6, 0xc3, 0x2c, 0xe8, 0x85, 0x81, 0x4a, 0x0c, 0x98, 0x79, 0x6a,
		0x03, 0x4e, 0x86, 0x93, 0xe1, 0x64, 0x38, 0x19, 0x4e, 0xae, 0x9c, 0x93, 0x5b, 0x10, 0xf2, 0x3e,
		0x10, 0x72, 0x4f, 0x25, 0x41, 0xec, 0x07, 0x1d, 0xb7, 0x17, 0x44, 0xf7, 0xae, 0x1f, 0xa4, 0x66,
		0xb9, 0x1c, 0xab, 0xcd, 0x41, 0xd3, 0xd0, 0x34, 0xa9, 0x1d, 0x6b, 0x96, 0x79, 0x2d, 0x52, 0x3b,
		0xe6, 0xf7, 0xad, 0x79, 0xf4, 0x6c, 0x8d, 0x3d, 0x80, 0x00, 0x20, 0x40, 0xaf, 0xa3, 0xd7, 0x17,
		0xc5, 0xe4, 0x29, 0x39, 0x1f, 0xf6, 0x83, 0x68, 0xf4, 0x20, 0xa9, 0xb1, 0x64, 0x3f, 0xbc, 0xae,
		0x85, 0xe5, 0x1b, 0xed, 0x39, 0xd5, 0x35, 0x2e, 0xbc, 0xf3, 0x7f, 0xfd, 0xa2, 0x92, 0x77, 0x69,
		0xaf, 0xd2, 0xce, 0x85, 0x81, 0x1f, 0x24, 0x6a, 0xb8, 0xc3, 0x4a, 0x68, 0xaf, 0x69, 0xc3, 0xb7,
		0xb9, 0xc7, 0xe9, 0x5d, 0x48, 0xef, 0x42, 0x43, 0x18, 0x29, 0xdd, 0xbb, 0xd0, 0x4b, 0xd3, 0xb8,
		0x13, 0x0c, 0x77, 0x95, 0xdb, 0x89, 0x93, 0xb8, 0x9f, 0x29, 0xdf, 0xb0, 0x3d, 0xfe, 0x7a, 0x93,
		0x7a, 0xbe, 0x44, 0x0b, 0x5f, 0x02, 0x5f, 0xc2, 0xb6, 0x2f, 0x51, 0x76, 0xe3, 0xe4, 0x0f, 0x8e,
		0x03, 0x66, 0x6e, 0x2f, 0x89, 0xb3, 0x11, 0x92, 0xbb, 0xf1, 0xed, 0xff, 0xd5, 0xc9, 0xef, 0x5c,
		0x5a, 0x4b, 0xeb, 0x4d, 0x6b, 0xce, 0x85, 0x9e, 0x73, 0x6e, 0xbc, 0xb1, 0x24, 0x36, 0x98, 0xf0,
		0x46, 0x93, 0xda, 0x70, 0xe2, 0x1b, 0x4f, 0x7c, 0x03, 0xca, 0x6f, 0x44, 0x43, 0x01, 0xaf, 0x9b,
		0xf3, 0xa7, 0xeb, 0xec, 0x8b, 0x45, 0xff, 0x0c, 0xa3, 0x80, 0xfa, 0xc3, 0xa6, 0x31, 0x64, 0xba,
		0x15, 0x9e, 0xcb, 0x83, 0xa5, 0x53, 0xe9, 0x09, 0xe0, 0x00, 0x38, 0x00, 0xce, 0x61, 0x01, 0xce,
		0x9d, 0xd7, 0x0f, 0x33, 0x37, 0xf6, 0xba, 0xe6, 0x98, 0x33, 0x35, 0x65, 0x06, 0x3b, 0x2d, 0x60,
		0x07, 0xd8, 0xd9, 0x35, 0xd8, 0xd1, 0x75, 0x44, 0xa4, 0x98, 0x5f, 0x56, 0x01, 0x08, 0x29, 0x01,
		0xb1, 0xad, 0x29, 0xb9, 0x45, 0x2d, 0x6d, 0x55, 0xe9, 0x2d, 0x6b, 0x6d, 0xeb, 0x5a, 0xdb, 0xc2,
		0xf6, 0xb6, 0xb2, 0xd9, 0x96, 0x36, 0xdc, 0xda, 0x72, 0xca, 0x42, 0x5c, 0x61, 0x08, 0x29, 0x0d,
		0xf3, 0xe1, 0xad, 0x16, 0x6b, 0x35, 0x0f, 0x5d, 0x96, 0xec, 0x54, 0x7a, 0x08, 0x33, 0x7b, 0x64,
		0xf0, 0x7a, 0x6d, 0xac, 0xf5, 0xb5, 0xa9, 0x88, 0x72, 0xaa, 0x3b, 0xb9, 0x99, 0xfd, 0x46, 0x9f,
		0x2f, 0xa7, 0xdf, 0xe8, 0xaf, 0xe3, 0x2f, 0x34, 0xd8, 0x2f, 0x9f, 0x7f, 0x19, 0x7c, 0x9f, 0x5f,
		0xbd, 0x6e, 0xa3, 0xc6, 0x1a, 0xf8, 0x6b, 0xe2, 0xf5, 0x66, 0xa3, 0x75, 0x52, 0x4e, 0xf8, 0x1a,
		0xbb, 0x38, 0xe5, 0xa8, 0x63, 0x9c, 0xf2, 0x83, 0x71, 0xca, 0xad, 0x9e, 0x7f, 0x18, 0x52, 0x61,
		0x1d, 0x29, 0x50, 0xe7, 0xfc, 0xad, 0x3e, 0x84, 0xd7, 0xa8, 0x41, 0x8a, 0xe9, 0xec, 0xd0, 0xf6,
		0xbc, 0xc4, 0xeb, 0xaa, 0x4c, 0x25, 0xa9, 0xcc, 0xc9, 0xf0, 0x8c, 0x3d, 0x8e, 0x85, 0x2d, 0xf3,
		0x13, 0xc7, 0xc2, 0xba, 0xb0, 0xa8, 0x7d, 0x2c, 0x3c, 0xbb, 0xd4, 0xef, 0xc3, 0xf8, 0xd6, 0x0b,
		0xdd, 0xc0, 0x37, 0x57, 0x82, 0xab, 0xcd, 0x22, 0x04, 0x11, 0x82, 0x08, 0x41, 0xcd, 0x95, 0xa3,
		0x9d, 0x03, 0xbe, 0xb8, 0x8f, 0xce, 0x0c, 0x4c, 0x98, 0xe5, 0x84, 0x4f, 0xfe, 0x11, 0x88, 0x28,
		0x49, 0xe4, 0x88, 0xe7, 0xc6, 0x84, 0xda, 0x03, 0xe6, 0xf6, 0xa4, 0x93, 0x99, 0xa7, 0x6b, 0x41,
		0x2a, 0xa9, 0x59, 0x28, 0x44, 0xe8, 0x48, 0xa5, 0x92, 0x2f, 0x4d, 0x45, 0xfb, 0xe8, 0xbc, 0x7d,
		0x7e, 0x7a, 0x76, 0x74, 0x7e, 0x72, 0x78, 0x73, 0xb2, 0xa5, 0x98, 0xe6, 0x4d, 0x8d, 0x23, 0x56,
		0xb3, 0x7a, 0x42, 0x5a, 0x9f, 0x20, 0x4c, 0x10, 0x26, 0x87, 0x27, 0x4c, 0xae, 0xbc, 0xc8, 0xf7,
		0xb2, 0x38, 0x79, 0x32, 0x48, 0x40, 0x40, 0xdc, 0x20, 0x6e, 0x10, 0x37, 0xe5, 0xa7, 0xe2, 0xf4,
		0xe4, 0xe4, 0x18, 0x5d, 0x83, 0xae, 0x59, 0xd0, 0x21, 0xe9, 0x34, 0x54, 0x92, 0x87, 0x97, 0x95,
		0xb4, 0xd8, 0x59, 0xf3, 0x21, 0x28, 0x20, 0x14, 0x10, 0xa1, 0x19, 0xcd, 0x95, 0x73, 0x1b, 0xc7,
		0xa1, 0xf2, 0x22, 0x89, 0x53, 0xba, 0xd6, 0x8e, 0x80, 0x55, 0x3a, 0x5c, 0xe5, 0xae, 0xe7, 0xfb,
		0x89, 0x4a, 0x53, 0x59, 0x8c, 0x5a, 0xb0, 0x0d, 0x34, 0x01, 0x4d, 0x38, 0x67, 0x5b, 0x84, 0xb7,
		0xa0, 0xf7, 0xa5, 0x3d, 0xd9, 0x8d, 0x6e, 0x14, 0xbb, 0xff, 0x88, 0x23, 0x25, 0x81, 0x75, 0x6f,
		0x0c, 0x6c, 0xbc, 0xf7, 0xb2, 0x4c, 0x25, 0x91, 0xb1, 0xb7, 0xd6, 0xf8, 0xee, 0xbb, 0x4f, 0x4d,
		0xf7, 0xfc, 0xe6, 0x9f, 0x9f, 0x5a, 0xee, 0xf9, 0xcd, 0xe8, 0xc7, 0xd6, 0xf0, 0x5f, 0xa3, 0x9f,
		0x8f, 0x3e, 0x35, 0xdd, 0xf6, 0xe4, 0xe7, 0x93, 0x4f, 0x4d, 0xf7, 0xe4, 0xe6, 0xfb, 0xeb, 0xeb,
		0x57, 0xdf, 0xff, 0x71, 0xfc, 0xad, 0xfc, 0x83, 0xdf, 0xfd, 0xe9, 0xd3, 0xf5, 0x75, 0xef, 0x8f,
		0xbf, 0x7f, 0x1b, 0xfc, 0xff, 0xbb, 0x6f, 0x37, 0x3f, 0x7c, 0xff, 0x1f, 0xa6, 0x3b, 0x67, 0xf0,
		0x01, 0xd7, 0xd7, 0xaf, 0x6e, 0xfe, 0xad, 0x51, 0x7f, 0x7d, 0x6c, 0xf5, 0x04, 0x54, 0x3d, 0x66,
		0x89, 0xe7, 0xf6, 0xa3, 0x34, 0xd3, 0xce, 0x65, 0x1b, 0x80, 0x59, 0xaa, 0xa2, 0xce, 0x56, 0x9a,
		0xde, 0x4c, 0x36, 0xdb, 0xdb, 0xc8, 0x0f, 0x3a, 0x5e, 0xa6, 0x52, 0xc7, 0x73, 0x56, 0xe7, 0x21,
		0x38, 0x51, 0xec, 0x2b, 0x27, 0x48, 0x9d, 0xa9, 0x7c, 0x7f, 0x55, 0x3f, 0x56, 0x18, 0x0d, 0x64,
		0x9d, 0x79, 0x41, 0x73, 0xa4, 0xf7, 0xad, 0x91, 0xcc, 0x41, 0x26, 0x60, 0x69, 0x67, 0xf5, 0x38,
		0xdb, 0xcf, 0xbe, 0x7a, 0x3f, 0x7d, 0xf7, 0xda, 0x5c, 0xd1, 0xea, 0x9b, 0xde, 0xd1, 0xea, 0xd3,
		0xc0, 0xcf, 0x36, 0x50, 0x93, 0x5d, 0xa5, 0x8b, 0x79, 0xfb, 0xdc, 0xc9, 0xf3, 0xf0, 0xba, 0x83,
		0x69, 0xf4, 0xb2, 0xda, 0x12, 0xea, 0x57, 0xdb, 0x21, 0x2c, 0xf2, 0x83, 0xe8, 0xde, 0x4d, 0xd5,
		0xfd, 0x60, 0x47, 0xba, 0x81, 0xef, 0x0e, 0x76, 0xa4, 0x4e, 0xaf, 0xb0, 0xd5, 0x86, 0xe8, 0x1a,
		0x46, 0xd7, 0x30, 0x43, 0x78, 0x29, 0xdd, 0x35, 0x2c, 0xf4, 0x6e, 0x55, 0xe8, 0x7e, 0x19, 0x1f,
		0xbb, 0x69, 0x0a, 0x94, 0x59, 0x23, 0x88, 0x14, 0x44, 0x0a, 0x5d, 0x86, 0xd7, 0xad, 0xf3, 0xc3,
		0xed, 0x32, 0xdc, 0x3a, 0xa5, 0xcb, 0xf0, 0xca, 0x38, 0xb6, 0x60, 0x97, 0xe1, 0x76, 0xb3, 0x75,
		0x42, 0x97, 0xe1, 0x5a, 0x07, 0x87, 0x24, 0x82, 0xb0, 0x5f, 0x1f, 0x54, 0xb4, 0xcd, 0x00, 0xec,
		0xab, 0x57, 0xaf, 0x67, 0xa4, 0x6b, 0xf6, 0xd4, 0x53, 0xce, 0x5f, 0x9c, 0x3f, 0xa7, 0x3d, 0xd5,
		0x09, 0xee, 0x02, 0xe5, 0xbb, 0x43, 0x39, 0xf0, 0xe7, 0x9a, 0x05, 0x5c, 0x87, 0x83, 0x56, 0xe7,
		0x60, 0x6b, 0xc1, 0x51, 0xdd, 0x0a, 0x4a, 0xfd, 0xa4, 0xd2, 0x4e, 0x12, 0xf4, 0x8c, 0xfb, 0x2b,
		0x2c, 0x2e, 0xa3, 0x0f, 0xa3, 0x2f, 0xfc, 0xf6, 0xa7, 0x8f, 0xa3, 0xaf, 0xfb, 0x61, 0xf2, 0x6d,
		0xdf, 0x0d, 0xbe, 0xac, 0xe9, 0x74, 0x09, 0xb6, 0x5d, 0x99, 0x5d, 0x49, 0xfe, 0xcc, 0x60, 0x08,
		0xe4, 0xcf, 0xd9, 0xe8, 0xb9, 0xb2, 0xb8, 0xb0, 0x9e, 0x19, 0xe7, 0xdd, 0x6a, 0x11, 0xb2, 0x93,
		0x57, 0x3d, 0x2d, 0x6c, 0x6d, 0x7d, 0x5f, 0x6b, 0xd1, 0x10, 0xfe, 0x16, 0xfe, 0xd6, 0xde, 0xfa,
		0x5b, 0x3f, 0x2e, 0x45, 0xca, 0x4c, 0x22, 0xc4, 0x6d, 0x8d, 0x67, 0x7f, 0x8e, 0xfa, 0x06, 0x7d,
		0x10, 0x3f, 0xc6, 0x1f, 0xb2, 0x24, 0x88, 0xee, 0xcd, 0xb2, 0x4c, 0x5a, 0xc3, 0xf4, 0xaf, 0xe8,
		0x69, 0x24, 0x01, 0x4c, 0x74, 0xd5, 0xd1, 0x10, 0x41, 0xe6, 0x25, 0xc5, 0xce, 0x5d, 0xf8, 0x3f,
		0x1d, 0x09, 0xc3, 0x1b, 0xfa, 0x17, 0xc6, 0x61, 0x0f, 0x2e, 0xeb, 0x3f, 0xc0, 0xa3, 0x0a, 0x93,
		0x50, 0xba, 0x53, 0xe1, 0xa1, 0xc5, 0xf0, 0x3d, 0x27, 0x3a, 0xcc, 0xbf, 0x1a, 0xbc, 0x64, 0x85,
		0x67, 0x17, 0xbe, 0x0a, 0xbd, 0x27, 0xb7, 0xab, 0xbc, 0xb4, 0x9f, 0xa8, 0x31, 0x75, 0x94, 0x3c,
		0xb5, 0x58, 0x36, 0x51, 0xee, 0xbc, 0xa2, 0xc9, 0x79, 0x05, 0xe7, 0x15, 0xc6, 0x12, 0x41, 0xfb,
		0xbc, 0xb8, 0xe4, 0x39, 0xb1, 0xd4, 0xb6, 0x4b, 0xb3, 0x20, 0x2a, 0x87, 0xa1, 0x33, 0x1b, 0x6e,
		0xfa, 0x30, 0x5b, 0x8d, 0xad, 0xb6, 0xb5, 0xad, 0x66, 0x98, 0xdd, 0xac, 0x93, 0xcd, 0xac, 0x9d,
		0xbd, 0xbc, 0x63, 0xd9, 0xca, 0x3a, 0xd9, 0xc9, 0x37, 0x15, 0x02, 0xd8, 0x9d, 0x97, 0x66, 0x6e,
		0xa2, 0x86, 0xcd, 0xcc, 0xca, 0x23, 0xd8, 0xdc, 0xd3, 0x64, 0x37, 0x00, 0x61, 0x86, 0x10, 0x56,
		0x3a, 0xbb, 0xe1, 0xd6, 0x8b, 0xfc, 0xaf, 0x81, 0x9f, 0x3d, 0xcc, 0xf4, 0x5c, 0xd5, 0x0f, 0xbd,
		0xad, 0xb4, 0x46, 0xfc, 0x8d, 0xf8, 0x5b, 0x4d, 0xe3, 0x6f, 0x06, 0x35, 0x52, 0xe4, 0x4a, 0x94,
		0xfc, 0x60, 0xd1, 0x5c, 0x09, 0x2e, 0x64, 0x5e, 0xbd, 0x9c, 0x05, 0x53, 0x25, 0x5a, 0xe4, 0x49,
		0x18, 0x3e, 0x55, 0x87, 0x53, 0xb5, 0x28, 0xf6, 0x95, 0x08, 0xb5, 0x2f, 0x1a, 0x82, 0xd5, 0x61,
		0x75, 0x58, 0x1d, 0x56, 0x87, 0xd5, 0x61, 0x75, 0x58, 0x5d, 0x82, 0xd5, 0x45, 0x03, 0x01, 0x06,
		0x59, 0x94, 0xfa, 0x25, 0xec, 0x06, 0xa8, 0x39, 0x5b, 0x48, 0x3d, 0x1b, 0x14, 0x13, 0x2a, 0x54,
		0x17, 0x26, 0x63, 0x93, 0xc2, 0x74, 0x3b, 0x74, 0x5c, 0x6a, 0xfc, 0x6a, 0x73, 0x1c, 0x7f, 0x73,
		0x70, 0xc7, 0xf1, 0x1a, 0x01, 0x5f, 0xa7, 0xb2, 0x33, 0xf8, 0x5f, 0xbc, 0x34, 0xfb, 0x6d, 0xfc,
		0x6e, 0x55, 0x86, 0xd0, 0xe3, 0xe4, 0xab, 0x97, 0xf8, 0x6e, 0x27, 0xf4, 0x52, 0x8d, 0x62, 0xc1,
		0xf9, 0xc7, 0x39, 0x07, 0x24, 0x88, 0x6e, 0x88, 0x23, 0xfa, 0xe7, 0x80, 0xa5, 0xb5, 0xbf, 0x86,
		0xe6, 0xd7, 0xd4, 0xfa, 0x1a, 0xdc, 0x6c, 0xa2, 0xed, 0x4d, 0x35, 0xbd, 0x98, 0xd0, 0x34, 0x17,
		0x98, 0x3a, 0x6d, 0xee, 0x4c, 0x34, 0x7b, 0x3e, 0x74, 0x67, 0xbb, 0x3f, 0x74, 0xdb, 0xd5, 0x0d,
		0x92, 0xec, 0x14, 0x44, 0xf7, 0xae, 0xe7, 0xff, 0x5f, 0xaf, 0xa3, 0xa2, 0xce, 0x93, 0x36, 0x49,
		0xcd, 0x5b, 0xe1, 0xc0, 0x17, 0xae, 0x32, 0xe4, 0xaa, 0xd2, 0x07, 0xbe, 0x9a, 0xf7, 0x74, 0x9a,
		0x5d, 0x91, 0x4d, 0xf8, 0x97, 0xf0, 0x6f, 0x65, 0xe1, 0xdf, 0x7d, 0xee, 0xb4, 0x53, 0x02, 0x62,
		0x1f, 0xe2, 0xd0, 0x77, 0xb3, 0xa0, 0x6b, 0xb0, 0xd7, 0xa7, 0x26, 0xd8, 0xee, 0x6c, 0x77, 0x7a,
		0x56, 0x08, 0x78, 0x6f, 0x86, 0x5e, 0x9c, 0xbe, 0x37, 0x27, 0xe2, 0xd5, 0x49, 0x79, 0x77, 0xe2,
		0xae, 0x8a, 0x9c, 0xcb, 0x62, 0xe0, 0xf5, 0x89, 0x78, 0x7f, 0x4b, 0x43, 0x7c, 0xd4, 0x6c, 0x36,
		0x9b, 0x9c, 0xda, 0x18, 0x3e, 0x55, 0x87, 0x5c, 0x8c, 0x20, 0xea, 0x84, 0x7d, 0x5f, 0xb9, 0x41,
		0xef, 0xcb, 0xa9, 0x3e, 0x29, 0xcf, 0x59, 0x81, 0x97, 0xe1, 0x65, 0x64, 0x78, 0xe5, 0x32, 0xfc,
		0xf0, 0x8e, 0xad, 0xf4, 0xc3, 0x57, 0x4e, 0x75, 0xc7, 0x57, 0xf9, 0x4b, 0x5e, 0xe6, 0xef, 0x58,
		0x61, 0xa0, 0x30, 0x8c, 0x3d, 0xdf, 0x4d, 0x1f, 0xbc, 0x44, 0xa3, 0x0e, 0x64, 0xe6, 0x59, 0x0e,
		0xb0, 0x08, 0x0a, 0x1a, 0x22, 0x0a, 0x07, 0x58, 0xe6, 0xae, 0x8e, 0x69, 0xc6, 0x14, 0x07, 0x58,
		0xe6, 0x17, 0x30, 0x73, 0x92, 0x25, 0x4c, 0x50, 0xf7, 0xf7, 0x65, 0x5a, 0xad, 0xcc, 0xb0, 0xd3,
		0xe8, 0x41, 0xce, 0xab, 0xa0, 0x26, 0x43, 0x6a, 0x2a, 0x7d, 0x5e, 0xe5, 0x85, 0xa1, 0xbe, 0xaf,
		0x3c, 0x78, 0x18, 0x17, 0x19, 0x17, 0x19, 0x17, 0xb9, 0x72, 0x17, 0xf9, 0xa5, 0x4e, 0x0d, 0x72,
		0xe7, 0x61, 0x20, 0x0d, 0xdd, 0xae, 0x4a, 0x53, 0xef, 0x5e, 0x49, 0xd4, 0x21, 0x2f, 0x58, 0x04,
		0x0c, 0x00, 0x03, 0xc0, 0xa0, 0xd6, 0x60, 0x70, 0xe7, 0xbb, 0x69, 0xe6, 0x65, 0x12, 0x28, 0xb0,
		0x64, 0x8a, 0xed, 0xcf, 0xf6, 0x67, 0xfb, 0xd7, 0x79, 0xfb, 0x07, 0x51, 0xda, 0xbf, 0xbb, 0x0b,
		0x3a, 0x81, 0x8a, 0x32, 0xf7, 0xf6, 0xab, 0x39, 0x08, 0xac, 0x33, 0x08, 0x14, 0x00, 0x05, 0x40,
		0x41, 0x9d, 0xa1, 0x20, 0x4c, 0x7b, 0x6e, 0xfa, 0x35, 0xc8, 0x3a, 0x0f, 0x6e, 0xfc, 0x45, 0x25,
		0x62, 0xce, 0xc1, 0x33, 0x76, 0x01, 0x06, 0x80, 0x01, 0x60, 0xa8, 0x33, 0x30, 0xf4, 0xbc, 0xec,
		0xc1, 0x55, 0x49, 0x12, 0x27, 0xe6, 0x60, 0xb0, 0xc2, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb5,
		0x06, 0x80, 0x8e, 0x17, 0x76, 0xdc, 0x3b, 0x2f, 0x08, 0xfb, 0x89, 0x80, 0x20, 0x58, 0x6d, 0x0e,
		0x18, 0x00, 0x06, 0x80, 0x81, 0x3a, 0xc3, 0x40, 0xa2, 0x3a, 0x71, 0xe2, 0xbb, 0xc3, 0x7e, 0x05,
		0xc3, 0x6d, 0x6b, 0x06, 0x03, 0xab, 0xcd, 0x01, 0x03, 0xc0, 0x00, 0x30, 0x50, 0x6f, 0x18, 0x88,
		0x7b, 0x59, 0xd0, 0x0d, 0xfe, 0x31, 0xcc, 0x58, 0x1d, 0x7c, 0xa5, 0xd4, 0x5c, 0x13, 0x6c, 0x32,
		0x0a, 0x24, 0x00, 0x09, 0x40, 0xc2, 0x6e, 0x40, 0x82, 0x2f, 0x09, 0x05, 0x3e, 0x10, 0x00, 0x04,
		0x00, 0x01, 0x3b, 0x02, 0x01, 0x72, 0x7e, 0x01, 0x2e, 0x01, 0x9b, 0x9f, 0xcd, 0xbf, 0x43, 0x9b,
		0x5f, 0x28, 0x81, 0x88, 0xe4, 0x21, 0xb6, 0x3d, 0xdb, 0x7e, 0xcb, 0xdb, 0xfe, 0xe0, 0x6a, 0x6d,
		0xcb, 0x55, 0xdb, 0x38, 0x95, 0x95, 0xd7, 0xbe, 0x1b, 0xbf, 0x57, 0x85, 0x15, 0x4b, 0x91, 0xfa,
		0xea, 0xa6, 0xd9, 0x53, 0xa8, 0x5c, 0xef, 0xee, 0x2e, 0x88, 0x82, 0xec, 0x69, 0xfa, 0x43, 0xf6,
		0xd4, 0x53, 0x1a, 0xdd, 0x62, 0x9f, 0x37, 0x49, 0x95, 0x13, 0x55, 0x4e, 0x86, 0x30, 0x53, 0xba,
		0xca, 0xe9, 0xb9, 0x55, 0x69, 0x70, 0x6f, 0xcb, 0x73, 0x96, 0xf5, 0x64, 0x4d, 0x0b, 0x59, 0x83,
		0xac, 0xb1, 0x2d, 0x6b, 0xca, 0x6e, 0xa3, 0xfc, 0x41, 0xb3, 0xbd, 0xb3, 0xb4, 0x7e, 0x4c, 0x36,
		0x8c, 0xa1, 0x3f, 0x60, 0xbc, 0x81, 0x24, 0x36, 0x92, 0xf0, 0x86, 0x92, 0xda, 0x58, 0xe2, 0x1b,
		0x4c, 0x7c, 0xa3, 0xc9, 0x6f, 0x38, 0xbd, 0x8d, 0xa7, 0xb9, 0x01, 0xcd, 0xfd, 0x8b, 0xa5, 0x95,
		0x73, 0x35, 0xfe, 0xf2, 0x63, 0xe5, 0x3b, 0xd9, 0x59, 0x26, 0xab, 0x68, 0xc2, 0x48, 0x6d, 0x03,
		0x1b, 0x3f, 0x47, 0xfd, 0xae, 0xf9, 0x3a, 0xfc, 0x18, 0x7f, 0xc8, 0x92, 0x32, 0x15, 0xf6, 0x1b,
		0xad, 0xb5, 0x66, 0xba, 0x7d, 0x19, 0x2e, 0xe8, 0xa1, 0xbd, 0xa3, 0xd9, 0xee, 0x61, 0x69, 0x96,
		0x04, 0x9d, 0x4c, 0xc2, 0xec, 0xf1, 0xd0, 0x7d, 0x7c, 0x14, 0x7b, 0xcd, 0xf6, 0x8c, 0x3d, 0xb7,
		0x7c, 0x01, 0xf7, 0x4a, 0x9b, 0x27, 0xc3, 0xaf, 0x7e, 0x1f, 0xc5, 0x89, 0x6a, 0x18, 0x59, 0xfb,
		0xf6, 0xd2, 0x74, 0x85, 0xbc, 0x1d, 0x82, 0x80, 0xc0, 0xf2, 0x98, 0x0c, 0xf9, 0x85, 0x73, 0xfc,
		0x52, 0xcc, 0x9a, 0x3b, 0x2a, 0xb7, 0x6f, 0x0b, 0x58, 0x1c, 0x0f, 0xf7, 0x85, 0x73, 0x22, 0x61,
		0x2c, 0x9a, 0x7c, 0xd9, 0x96, 0x9c, 0xb5, 0xc9, 0x26, 0xb8, 0x70, 0x8e, 0xcc, 0x16, 0x45, 0xed,
		0xbb, 0x1f, 0xda, 0x95, 0x69, 0xff, 0xa5, 0x9e, 0x4c, 0x55, 0x52, 0xe3, 0x5d, 0x90, 0x66, 0x97,
		0x59, 0xa6, 0xa9, 0xf7, 0xae, 0x82, 0xe8, 0xe7, 0x50, 0x0d, 0x08, 0x56, 0xb3, 0x49, 0x4c, 0xe3,
		0xca, 0x7b, 0x9c, 0xb1, 0xd0, 0x7a, 0xd3, 0x6e, 0x9f, 0x9e, 0xb5, 0xdb, 0xcd, 0xb3, 0xe3, 0xb3,
		0xe6, 0xf9, 0xc9, 0x49, 0xeb, 0xb4, 0xa5, 0xb1, 0x8a, 0x1b, 0xbf, 0x26, 0xbe, 0x4a, 0x94, 0xff,
		0xe3, 0x60, 0x78, 0xa2, 0x7e, 0x18, 0x5a, 0x9d, 0x05, 0xcd, 0xd0, 0xd6, 0x56, 0x42, 0x5c, 0xcf,
		0x06, 0x61, 0x5e, 0x0b, 0xbb, 0xad, 0xd5, 0x45, 0xc9, 0xfe, 0xae, 0xbe, 0x7e, 0x18, 0xbc, 0xf7,
		0xe5, 0xf8, 0x6d, 0x27, 0xff, 0x1e, 0x48, 0xa8, 0xcd, 0x7f, 0xdb, 0xa8, 0xc3, 0x75, 0xb1, 0xcf,
		0x0c, 0x7b, 0xfe, 0x5f, 0x2d, 0x7b, 0x11, 0x89, 0x99, 0xcf, 0x20, 0x36, 0x41, 0x6c, 0x82, 0xd8,
		0x04, 0xb1, 0x09, 0x62, 0x13, 0xc4, 0x26, 0x88, 0x4d, 0x10, 0x9b, 0x20, 0x36, 0x41, 0x6c, 0x82,
		0xd8, 0xc4, 0x9e, 0xc5, 0x26, 0x5e, 0xea, 0x6b, 0xa8, 0x96, 0x9c, 0x7e, 0x6a, 0xa1, 0x9d, 0xd0,
		0x4e, 0x68, 0x27, 0xdd, 0x95, 0x33, 0x0a, 0x17, 0x05, 0x71, 0xea, 0x3e, 0x26, 0x43, 0xec, 0x8a,
		0xee, 0x25, 0x74, 0xd3, 0x1b, 0x03, 0x1b, 0xef, 0xbd, 0x2c, 0x53, 0x49, 0xa4, 0x7d, 0xc7, 0x52,
		0x6e, 0xe8, 0xd3, 0xf5, 0xf5, 0xd7, 0xeb, 0x6b, 0xf7, 0xfa, 0xfa, 0xd5, 0xc5, 0xcb, 0xcf, 0xff,
		0xf9, 0x2f, 0x7f, 0xfa, 0xd7, 0xeb, 0xeb, 0x1f, 0xfe, 0x72, 0x7d, 0xfd, 0xcf, 0x7f, 0xbf, 0xf9,
		0x41, 0x7f, 0xa2, 0x6f, 0xf6, 0x36, 0xf4, 0xeb, 0x68, 0xc7, 0x6f, 0x08, 0x02, 0x13, 0x04, 0x2e,
		0x13, 0x04, 0x76, 0x4d, 0xc8, 0xbb, 0xee, 0xe1, 0xe0, 0xcb, 0xfc, 0xbb, 0xed, 0x54, 0x5c, 0x38,
		0xff, 0xe9, 0xa8, 0x8a, 0x08, 0xf1, 0xcc, 0xa7, 0x11, 0x2b, 0x26, 0x56, 0x4c, 0xac, 0x98, 0x58,
		0x31, 0xfe, 0x0e, 0xfe, 0x0e, 0xb1, 0x62, 0x62, 0xc5, 0xc4, 0x8a, 0x89, 0x15, 0x13, 0x2b, 0x26,
		0x56, 0x4c, 0xac, 0x18, 0xed, 0x84, 0x76, 0x22, 0x56, 0x4c, 0xac, 0xd8, 0x2a, 0xbc, 0x1e, 0xc9,
		0xc1, 0xeb, 0x11, 0xf0, 0x0a, 0xbc, 0x02, 0xaf, 0xc0, 0xeb, 0xbe, 0xc1, 0xeb, 0x16, 0x8f, 0xe2,
		0x1c, 0xed, 0x40, 0x39, 0x87, 0x72, 0xa6, 0x33, 0x73, 0xa8, 0x87, 0x72, 0xae, 0x09, 0xa1, 0xef,
		0xcc, 0xf1, 0xdc, 0x65, 0xfe, 0x25, 0x77, 0xf4, 0x9c, 0x2e, 0xff, 0xe9, 0xb8, 0xda, 0x13, 0xbb,
		0x99, 0xcf, 0xe5, 0xec, 0xce, 0xb2, 0x8e, 0xe3, 0xec, 0x4e, 0x17, 0xbc, 0x39, 0xbb, 0xc3, 0x41,
		0xc2, 0x41, 0xda, 0x2b, 0x07, 0x89, 0xb3, 0xbb, 0xc2, 0xd6, 0x38, 0xbb, 0xe3, 0xec, 0x6e, 0x83,
		0x29, 0xce, 0xee, 0x4c, 0xad, 0x71, 0x76, 0x57, 0x44, 0x43, 0x71, 0x76, 0x87, 0x76, 0x42, 0x3b,
		0x11, 0x5c, 0x26, 0xb8, 0x6c, 0x05, 0x5e, 0x39, 0xbb, 0x03, 0x5e, 0x81, 0x57, 0xe0, 0x15, 0x78,
		0xb5, 0x02, 0xaf, 0xc7, 0x72, 0xf0, 0x7a, 0x0c, 0xbc, 0x02, 0xaf, 0xc0, 0x2b, 0xf0, 0xba, 0x6f,
		0xf0, 0x5a, 0x8b, 0xd4, 0x08, 0x47, 0xfb, 0x44, 0x92, 0x24, 0x09, 0xd3, 0x39, 0x22, 0x49, 0xc2,
		0x35, 0x21, 0xf9, 0xdd, 0x4b, 0x97, 0xb8, 0xcc, 0xbf, 0xed, 0xce, 0xe7, 0x4d, 0xe4, 0x3f, 0xb5,
		0xb7, 0x95, 0x41, 0x31, 0xf3, 0x06, 0xe4, 0x52, 0x58, 0x16, 0x7e, 0xe4, 0x52, 0xe8, 0x62, 0x3c,
		0xb9, 0x14, 0x78, 0x54, 0x78, 0x54, 0x7b, 0xe5, 0x51, 0x91, 0x4b, 0x51, 0xd8, 0x1a, 0xb9, 0x14,
		0xe4, 0x52, 0x6c, 0x30, 0x45, 0x2e, 0x85, 0xa9, 0x35, 0x72, 0x29, 0x8a, 0x68, 0x28, 0x72, 0x29,
		0xd0, 0x4e, 0x68, 0x27, 0xa2, 0xd1, 0x44, 0xa3, 0xad, 0xc0, 0x2b, 0xb9, 0x14, 0xc0, 0x2b, 0xf0,
		0x0a, 0xbc, 0x02, 0xaf, 0x56, 0xe0, 0x95, 0x5c, 0x0a, 0xe0, 0x15, 0x78, 0x05, 0x5e, 0x81, 0x57,
		0x2b, 0xf0, 0xda, 0x96, 0x83, 0xd7, 0x36, 0xf0, 0x0a, 0xbc, 0x02, 0xaf, 0xc0, 0xeb, 0xbe, 0xc1,
		0x6b, 0xcd, 0x52, 0xd5, 0x1c, 0xed, 0xd4, 0x0f, 0x92, 0xd6, 0x4c, 0x67, 0x8b, 0xa4, 0x35, 0x81,
		0x14, 0x24, 0x67, 0xb7, 0xd3, 0xd7, 0x2e, 0xf3, 0xaf, 0xbd, 0x47, 0x79, 0x6c, 0xf9, 0x4f, 0x27,
		0xdb, 0xcf, 0x68, 0x9b, 0x79, 0x17, 0x72, 0xdb, 0x2c, 0x2b, 0x45, 0x72, 0xdb, 0x74, 0xa9, 0x80,
		0xdc, 0x36, 0x5c, 0x30, 0x5c, 0xb0, 0xbd, 0x72, 0xc1, 0xc8, 0x6d, 0x2b, 0x6c, 0x8d, 0xdc, 0x36,
		0x72, 0xdb, 0x36, 0x98, 0x22, 0xb7, 0xcd, 0xd4, 0x1a, 0xb9, 0x6d, 0x45, 0x34, 0x14, 0xb9, 0x6d,
		0x68, 0x27, 0xb4, 0x13, 0xe1, 0x6b, 0xc2, 0xd7, 0x56, 0xe0, 0x95, 0xdc, 0x36, 0xe0, 0x15, 0x78,
		0x05, 0x5e, 0x81, 0x57, 0x2b, 0xf0, 0x4a, 0x6e, 0x1b, 0xf0, 0x0a, 0xbc, 0x02, 0xaf, 0xc0, 0xab,
		0x15, 0x78, 0x25, 0xb7, 0x0d, 0x78, 0x05, 0x5e, 0x81, 0x57, 0xe0, 0xd5, 0x0a, 0xbc, 0x9e, 0xc8,
		0xc1, 0xeb, 0x09, 0xf0, 0x0a, 0xbc, 0x02, 0xaf, 0xc0, 0xeb, 0xbe, 0xc1, 0x6b, 0x6d, 0x53, 0x87,
		0x1d, 0xed, 0x1c, 0x3b, 0x92, 0x88, 0x4d, 0xe7, 0x8d, 0x24, 0x62, 0xd1, 0xac, 0x4f, 0x67, 0x4f,
		0xd2, 0x89, 0x2f, 0xf3, 0xef, 0xbf, 0x97, 0x79, 0xc5, 0xf9, 0x4f, 0xa7, 0x75, 0xca, 0x30, 0x9e,
		0x79, 0x2b, 0x72, 0x8d, 0x2d, 0x4b, 0x4b, 0x72, 0x8d, 0x75, 0x19, 0x83, 0x5c, 0x63, 0x7c, 0x36,
		0x7c, 0xb6, 0xbd, 0xf2, 0xd9, 0xc8, 0x35, 0x2e, 0x6c, 0x8d, 0x5c, 0x63, 0x72, 0x8d, 0x37, 0x98,
		0x22, 0xd7, 0xd8, 0xd4, 0x1a, 0xb9, 0xc6, 0x45, 0x34, 0x14, 0xb9, 0xc6, 0x68, 0x27, 0xb4, 0x13,
		0xf1, 0x6e, 0xe2, 0xdd, 0x56, 0xe0, 0x95, 0x5c, 0x63, 0xe0, 0x15, 0x78, 0x05, 0x5e, 0x81, 0x57,
		0x2b, 0xf0, 0x4a, 0xae, 0x31, 0xf0, 0x0a, 0xbc, 0x02, 0xaf, 0xc0, 0xab, 0x15, 0x78, 0x25, 0xd7,
		0x18, 0x78, 0x05, 0x5e, 0x81, 0x57, 0xe0, 0xd5, 0x0a, 0xbc, 0x92, 0x6b, 0x0c, 0xbc, 0x02, 0xaf,
		0xc0, 0x2b, 0xf0, 0x6a, 0x05, 0x5e, 0x4f, 0xe5, 0xe0, 0xf5, 0x14, 0x78, 0x05, 0x5e, 0x81, 0x57,
		0xe0, 0x75, 0xdf, 0xe0, 0x75, 0x07, 0x4a, 0x39, 0x1c, 0xed, 0x64, 0x66, 0x8a, 0x3a, 0x4c, 0x67,
		0x90, 0xa2, 0x0e, 0x4b, 0x89, 0xf6, 0xce, 0xbe, 0x95, 0x77, 0x5c, 0xe6, 0x03, 0xb1, 0xe7, 0x75,
		0x1e, 0xf9, 0x4f, 0x67, 0xf5, 0xac, 0xf8, 0x98, 0x79, 0x3f, 0x6a, 0x3f, 0x2c, 0x6b, 0x51, 0x6a,
		0x3f, 0x74, 0x89, 0x85, 0xda, 0x0f, 0x9c, 0x3c, 0x9c, 0xbc, 0xbd, 0x72, 0xf2, 0xa8, 0xfd, 0x28,
		0x6c, 0x8d, 0xda, 0x0f, 0x6a, 0x3f, 0x36, 0x98, 0xa2, 0xf6, 0xc3, 0xd4, 0x1a, 0xb5, 0x1f, 0x45,
		0x34, 0x14, 0xb5, 0x1f, 0x68, 0x27, 0xb4, 0x13, 0x01, 0x72, 0x02, 0xe4, 0x56, 0xe0, 0x95, 0xda,
		0x0f, 0xe0, 0x15, 0x78, 0x05, 0x5e, 0x81, 0x57, 0x2b, 0xf0, 0x4a, 0xed, 0x07, 0xf0, 0x0a, 0xbc,
		0x02, 0xaf, 0xc0, 0xab, 0x15, 0x78, 0xa5, 0xf6, 0x03, 0x78, 0x05, 0x5e, 0x81, 0x57, 0xe0, 0xd5,
		0x0a, 0xbc, 0x52, 0xfb, 0x01, 0xbc, 0x02, 0xaf, 0xc0, 0x2b, 0xf0, 0x6a, 0x05, 0x5e, 0xa9, 0xfd,
		0x00, 0x5e, 0x81, 0x57, 0xe0, 0x15, 0x78, 0xb5, 0x02, 0xaf, 0x67, 0x72, 0xf0, 0x7a, 0x06, 0xbc,
		0x02, 0xaf, 0xc0, 0x2b, 0xf0, 0xba, 0x6f, 0xf0, 0xba, 0x53, 0xa5, 0x75, 0x8e, 0x76, 0xd5, 0x08,
		0x45, 0x76, 0xa6, 0x73, 0x49, 0x91, 0x9d, 0xf5, 0xda, 0x26, 0x67, 0x6f, 0xcb, 0xed, 0x2e, 0xf3,
		0x11, 0x39, 0x98, 0xba, 0xbb, 0xfc, 0xa7, 0x37, 0x75, 0xaf, 0xc0, 0x9b, 0x79, 0x53, 0x6a, 0xf1,
		0x2c, 0x8b, 0x57, 0x6a, 0xf1, 0x74, 0xf9, 0x87, 0x5a, 0x3c, 0xbc, 0x42, 0xbc, 0xc2, 0xbd, 0xf2,
		0x0a, 0xa9, 0xc5, 0x2b, 0x6c, 0x8d, 0x5a, 0x3c, 0x6a, 0xf1, 0x36, 0x98, 0xa2, 0x16, 0xcf, 0xd4,
		0x1a, 0xb5, 0x78, 0x45, 0x34, 0x14, 0xb5, 0x78, 0x68, 0x27, 0xb4, 0x13, 0x11, 0x75, 0x22, 0xea,
		0x56, 0xe0, 0x95, 0x5a, 0x3c, 0xe0, 0x15, 0x78, 0x05, 0x5e, 0x81, 0x57, 0x2b, 0xf0, 0x4a, 0x2d,
		0x1e, 0xf0, 0x0a, 0xbc, 0x02, 0xaf, 0xc0, 0xab, 0x15, 0x78, 0xa5, 0x16, 0x0f, 0x78, 0x05, 0x5e,
		0x81, 0x57, 0xe0, 0xd5, 0x0a, 0xbc, 0x52, 0x8b, 0x07, 0xbc, 0x02, 0xaf, 0xc0, 0x2b, 0xf0, 0x6a,
		0x05, 0x5e, 0xa9, 0xc5, 0x03, 0x5e, 0x81, 0x57, 0xe0, 0x15, 0x78, 0xb5, 0x02, 0xaf, 0xd4, 0xe2,
		0x01, 0xaf, 0xc0, 0x2b, 0xf0, 0x0a, 0xbc, 0x5a, 0x81, 0xd7, 0x37, 0x72, 0xf0, 0xfa, 0x06, 0x78,
		0x05, 0x5e, 0x81, 0x57, 0xe0, 0x75, 0xdf, 0xe0, 0x75, 0x47, 0x4b, 0x9d, 0x1d, 0xed, 0xf2, 0x3c,
		0x8a, 0x9e, 0x4d, 0x67, 0x95, 0xa2, 0xe7, 0x0a, 0xcb, 0x49, 0x9d, 0xfd, 0x2f, 0x7f, 0xbe, 0xcc,
		0x87, 0xe6, 0x00, 0xeb, 0xa0, 0xf3, 0x9f, 0xce, 0x77, 0xa7, 0x22, 0x7a, 0xe6, 0x9d, 0xa9, 0x8d,
		0xb6, 0xac, 0x76, 0xa9, 0x8d, 0xd6, 0xa5, 0x29, 0x6a, 0xa3, 0x71, 0x23, 0x71, 0x23, 0xf7, 0xca,
		0x8d, 0xa4, 0x36, 0xba, 0xb0, 0x35, 0x6a, 0xa3, 0xa9, 0x8d, 0xde, 0x60, 0x8a, 0xda, 0x68, 0x53,
		0x6b, 0xd4, 0x46, 0x17, 0xd1, 0x50, 0xd4, 0x46, 0xa3, 0x9d, 0xd0, 0x4e, 0x84, 0xe0, 0x09, 0xc1,
		0x5b, 0x81, 0x57, 0x6a, 0xa3, 0x81, 0x57, 0xe0, 0x15, 0x78, 0x05, 0x5e, 0xad, 0xc0, 0x2b, 0xb5,
		0xd1, 0xc0, 0x2b, 0xf0, 0x0a, 0xbc, 0x02, 0xaf, 0x56, 0xe0, 0x95, 0xda, 0x68, 0xe0, 0x15, 0x78,
		0x05, 0x5e, 0x81, 0x57, 0x2b, 0xf0, 0x4a, 0x6d, 0x34, 0xf0, 0x0a, 0xbc, 0x02, 0xaf, 0xc0, 0xab,
		0x15, 0x78, 0xa5, 0x36, 0x1a, 0x78, 0x05, 0x5e, 0x81, 0x57, 0xe0, 0xd5, 0x0a, 0xbc, 0x52, 0x1b,
		0x0d, 0xbc, 0x02, 0xaf, 0xc0, 0x2b, 0xf0, 0x6a, 0x05, 0x5e, 0xa9, 0x8d, 0x06, 0x5e, 0x81, 0x57,
		0xe0, 0x15, 0x78, 0xb5, 0x02, 0xaf, 0xe7, 0x72, 0xf0, 0x7a, 0x0e, 0xbc, 0x02, 0xaf, 0xc0, 0x2b,
		0xf0, 0xba, 0x6f, 0xf0, 0xba, 0xf3, 0xad, 0x27, 0x1c, 0xed, 0x3a, 0x68, 0x9a, 0x50, 0x98, 0xce,
		0x2f, 0x4d, 0x28, 0xb6, 0x52, 0xc1, 0xef, 0x1c, 0x50, 0x3b, 0x8a, 0xcb, 0x7c, 0x8c, 0x0e, 0xba,
		0x2f, 0xc5, 0xd4, 0x72, 0x73, 0x17, 0x5b, 0x54, 0xcc, 0xbe, 0x3e, 0xdd, 0x2a, 0x2c, 0x0b, 0x64,
		0xba, 0x55, 0xe8, 0xf2, 0x19, 0xdd, 0x2a, 0xf0, 0x3c, 0xf1, 0x3c, 0xf7, 0xca, 0xf3, 0xa4, 0x5b,
		0x45, 0x61, 0x6b, 0x74, 0xab, 0xa0, 0x5b, 0xc5, 0x06, 0x53, 0x74, 0xab, 0x30, 0xb5, 0x46, 0xb7,
		0x8a, 0x22, 0x1a, 0x8a, 0x6e, 0x15, 0x68, 0x27, 0xb4, 0x13, 0x51, 0x7b, 0xa2, 0xf6, 0x76, 0xe0,
		0xb5, 0x29, 0x88, 0xaf, 0x4d, 0x00, 0x16, 0x80, 0x05, 0x60, 0x01, 0x58, 0x00, 0x96, 0x76, 0x40,
		0xc0, 0x2b, 0xf0, 0x0a, 0xbc, 0x02, 0xaf, 0x76, 0xe1, 0x95, 0x76, 0x40, 0xc0, 0x2b, 0xf0, 0x0a,
		0xbc, 0x02, 0xaf, 0x56, 0xe0, 0x95, 0x76, 0x40, 0xc0, 0x2b, 0xf0, 0x0a, 0xbc, 0x02, 0xaf, 0x56,
		0xe0, 0x95, 0x76, 0x40, 0xc0, 0x2b, 0xf0, 0x0a, 0xbc, 0x02, 0xaf, 0x56, 0xe0, 0x95, 0x76, 0x40,
		0xc0, 0x2b, 0xf0, 0x0a, 0xbc, 0x02, 0xaf, 0x56, 0xe0, 0x95, 0x76, 0x40, 0xc0, 0x2b, 0xf0, 0x0a,
		0xbc, 0x02, 0xaf, 0x56, 0xe0, 0x95, 0x76, 0x40, 0xc0, 0x2b, 0xf0, 0x0a, 0xbc, 0x02, 0xaf, 0x56,
		0xe0, 0x95, 0x76, 0x40, 0xc0, 0x2b, 0xf0, 0x0a, 0xbc, 0x02, 0xaf, 0x42, 0x4f, 0xd4, 0xbb, 0x1d,
		0x90, 0xa3, 0xdf, 0x73, 0x82, 0xce, 0x40, 0xa6, 0x53, 0x4d, 0x67, 0xa0, 0x6d, 0x37, 0x4e, 0x71,
		0x0e, 0xb1, 0x49, 0xd0, 0xe5, 0x74, 0xb4, 0x6c, 0xb5, 0x0b, 0x7a, 0x21, 0xb8, 0x5d, 0x74, 0xb7,
		0x49, 0xbd, 0xb6, 0x47, 0x89, 0x85, 0x59, 0x83, 0x05, 0x59, 0x6c, 0x61, 0x3c, 0x3f, 0xcd, 0x05,
		0xa6, 0xb8, 0x31, 0x98, 0x20, 0x37, 0xee, 0x0d, 0xde, 0xd3, 0xed, 0x25, 0x71, 0xa6, 0x3a, 0x43,
		0x40, 0x2f, 0x36, 0xd1, 0xb9, 0x5a, 0x5a, 0x69, 0xa5, 0xe0, 0x02, 0x2b, 0xd7, 0x3d, 0xa9, 0xb4,
		0x7f, 0xa1, 0xe3, 0x4f, 0x18, 0xfa, 0x0f, 0xba, 0xfe, 0x82, 0xb1, 0x7f, 0x60, 0xec, 0x0f, 0x98,
		0xeb, 0x7f, 0x59, 0xf0, 0x29, 0xdb, 0xed, 0x68, 0xd5, 0x42, 0xd4, 0x6f, 0x46, 0xb6, 0xca, 0x18,
		0xad, 0xc1, 0x2c, 0x3b, 0xcb, 0xb4, 0x06, 0xd3, 0x15, 0xb4, 0xda, 0xad, 0xc1, 0x66, 0xd6, 0x79,
		0x6a, 0x1e, 0x80, 0x9a, 0xb3, 0x66, 0x16, 0x83, 0x6a, 0x11, 0x83, 0x22, 0x06, 0xb5, 0x6b, 0x31,
		0x28, 0xdd, 0x6d, 0xb8, 0x6a, 0x3b, 0x9a, 0x4f, 0xf7, 0x8a, 0x5d, 0x69, 0x3a, 0xe1, 0x66, 0x9b,
		0x53, 0x6c, 0x93, 0x4a, 0x6e, 0x56, 0x4b, 0x9b, 0x56, 0x7a, 0xf3, 0x5a, 0xdb, 0xc4, 0xd6, 0x36,
		0xb3, 0xbd, 0x4d, 0x6d, 0xb6, 0xb9, 0x0d, 0x37, 0xb9, 0xd8, 0x66, 0xcf, 0x0d, 0xf9, 0x2a, 0xcd,
		0x82, 0xc8, 0x13, 0xd9, 0xf4, 0x4b, 0xab, 0x79, 0xd6, 0xb8, 0xd0, 0x7c, 0xfe, 0xa4, 0xee, 0xbc,
		0x7e, 0x98, 0x19, 0x07, 0xa3, 0xe7, 0x8c, 0x36, 0x5f, 0x0d, 0xff, 0xd7, 0x10, 0xb1, 0x78, 0x23,
		0xf4, 0x4d, 0xcd, 0xce, 0xc3, 0xac, 0xc1, 0x9e, 0x0d, 0xf8, 0xb3, 0x0c, 0x83, 0xb6, 0xe0, 0xd0,
		0x3a, 0x2c, 0x5a, 0x87, 0x47, 0xfb, 0x30, 0x29, 0x03, 0x97, 0x42, 0xb0, 0x99, 0x7f, 0x5d, 0xe3,
		0xf3, 0xba, 0xb5, 0x2b, 0x37, 0xe8, 0x7d, 0x69, 0xbb, 0x9e, 0xef, 0x27, 0x2a, 0x4d, 0xdd, 0x28,
		0x76, 0xff, 0x11, 0x47, 0x4a, 0x72, 0x09, 0x0b, 0x1c, 0xe8, 0x2d, 0xef, 0x64, 0xa1, 0x03, 0xbe,
		0x25, 0xc3, 0xdf, 0x7d, 0xf7, 0xa9, 0xe9, 0x9e, 0xdf, 0xfc, 0xf3, 0x53, 0xcb, 0x3d, 0xbf, 0x19,
		0xfd, 0xd8, 0x1a, 0xfe, 0x6b, 0xf4, 0xf3, 0xd1, 0xa7, 0xa6, 0xdb, 0x9e, 0xfc, 0x7c, 0xf2, 0xa9,
		0xe9, 0x9e, 0xdc, 0x7c, 0x7f, 0x7d, 0xfd, 0xea, 0xfb, 0x3f, 0x8e, 0xbf, 0x95, 0x7f, 0xf0, 0xbb,
		0x3f, 0x7d, 0xba, 0xbe, 0xee, 0xfd, 0xf1, 0xf7, 0x6f, 0x83, 0xff, 0x7f, 0xf7, 0xed, 0xe6, 0x87,
		0xef, 0xff, 0x43, 0x7a, 0x17, 0x0e, 0x3e, 0xf0, 0xfa, 0xfa, 0xd5, 0xcd, 0xbf, 0xc9, 0x6d, 0x8b,
		0x9b, 0x17, 0xf5, 0xd8, 0x5c, 0xdf, 0x44, 0xba, 0x8c, 0xf6, 0x5c, 0x2f, 0x51, 0x9e, 0xbc, 0x8e,
		0xc8, 0x2d, 0xd7, 0x5a, 0x44, 0x20, 0x1f, 0x90, 0x0f, 0xc8, 0x07, 0xe4, 0x83, 0xc9, 0xca, 0xed,
		0x07, 0x51, 0x76, 0x7c, 0x64, 0x41, 0x30, 0x9c, 0x09, 0x9a, 0xfc, 0xcd, 0x8b, 0xee, 0x95, 0xb8,
		0x5a, 0x90, 0xdd, 0x54, 0xce, 0x38, 0xdd, 0x44, 0x7c, 0xb7, 0xe6, 0xc6, 0xff, 0xdb, 0x0b, 0xfb,
		0x4a, 0x0e, 0x10, 0x97, 0xec, 0xff, 0x92, 0x78, 0x9d, 0x81, 0xe7, 0xfc, 0x53, 0x70, 0x1f, 0xe8,
		0xa6, 0xcb, 0x14, 0x5b, 0x7b, 0xea, 0xde, 0xcb, 0x82, 0x2f, 0x83, 0xef, 0x72, 0xe7, 0x85, 0xa9,
		0x12, 0xff, 0x94, 0x6f, 0x2f, 0x2d, 0x4c, 0xad, 0xf7, 0x68, 0x7f, 0x6a, 0xdb, 0x47, 0xe7, 0xed,
		0xf3, 0xd3, 0xb3, 0xa3, 0xf3, 0x13, 0xe6, 0xb8, 0x12, 0x80, 0x96, 0xb7, 0xb6, 0x8f, 0x02, 0xdb,
		0x0d, 0x7a, 0xb9, 0x8b, 0x19, 0xf8, 0xf6, 0xe4, 0xf6, 0xc2, 0xe7, 0x10, 0xc1, 0x43, 0x82, 0x23,
		0xc1, 0x91, 0xe0, 0x44, 0xf0, 0x88, 0xe0, 0x11, 0xc1, 0xdb, 0x57, 0x81, 0x11, 0x44, 0x69, 0xe6,
		0x45, 0x92, 0x87, 0xc6, 0xb3, 0xb2, 0x22, 0xb7, 0x0e, 0xc5, 0x42, 0xb1, 0x50, 0xec, 0x81, 0x52,
		0xac, 0x71, 0x5d, 0x5b, 0x25, 0xa4, 0xfa, 0x4e, 0x45, 0xf7, 0xc3, 0x2a, 0x02, 0xe2, 0x5c, 0x42,
		0xb7, 0xbd, 0x11, 0xe7, 0xaa, 0x69, 0x9c, 0x8b, 0x18, 0x26, 0xf1, 0xad, 0x7a, 0xc8, 0xcf, 0x4c,
		0x92, 0x74, 0xe6, 0xa4, 0xa7, 0xc1, 0x85, 0xd1, 0xd5, 0xc4, 0xb0, 0xa2, 0x81, 0xa3, 0x49, 0x00,
		0x0b, 0x75, 0x8d, 0xba, 0x46, 0x5d, 0x1b, 0xac, 0xdc, 0xc9, 0xbd, 0xde, 0x03, 0xd0, 0xeb, 0x25,
		0x71, 0x16, 0x77, 0xe2, 0xd0, 0x86, 0xd6, 0x6e, 0x0b, 0xda, 0x14, 0xb9, 0xf4, 0x7b, 0x79, 0x8c,
		0x25, 0x2f, 0x01, 0x5f, 0xb2, 0xde, 0x1c, 0x0c, 0x76, 0x24, 0x1b, 0x1d, 0xcc, 0x8d, 0x8f, 0x6e,
		0x1c, 0x4f, 0x83, 0xd4, 0x86, 0xf1, 0xe1, 0xf5, 0xe3, 0x71, 0xda, 0xbb, 0x6b, 0xbc, 0xa8, 0xb1,
		0xfe, 0x15, 0xbc, 0xa1, 0x7b, 0x59, 0x6a, 0x0c, 0x46, 0xd6, 0x8a, 0x4f, 0x33, 0x5a, 0x11, 0x56,
		0x94, 0xee, 0x68, 0xca, 0x4c, 0xaf, 0xc8, 0xb6, 0xa7, 0x45, 0xbf, 0xed, 0x93, 0x16, 0x9d, 0x94,
		0xd4, 0x5b, 0x10, 0xa3, 0xb9, 0x69, 0x64, 0x1a, 0x32, 0x0d, 0x99, 0x76, 0xa0, 0x32, 0x2d, 0x6f,
		0xda, 0xe1, 0x0e, 0x7b, 0x7e, 0x1c, 0xea, 0x09, 0xe3, 0x27, 0xcf, 0xfd, 0xc7, 0xa5, 0xfb, 0x7f,
		0x9a, 0xee, 0xf9, 0xab, 0x8b, 0xcf, 0xaf, 0x5d, 0x93, 0x56, 0x60, 0xfb, 0x1c, 0x1b, 0x09, 0xe3,
		0xce, 0xef, 0x7e, 0xfc, 0xd5, 0x42, 0x91, 0x5e, 0x6e, 0x99, 0xd8, 0x08, 0xa4, 0x0b, 0xe9, 0x42,
		0xba, 0x87, 0x10, 0x1b, 0x59, 0x68, 0xb1, 0xd3, 0x53, 0x49, 0xf6, 0x44, 0x8c, 0x64, 0x17, 0x63,
		0x24, 0xc2, 0xf4, 0x35, 0xff, 0x01, 0xa7, 0xc3, 0xd3, 0x6a, 0x75, 0x3f, 0xd8, 0x7b, 0x6e, 0x12,
		0xf7, 0x33, 0xd9, 0x63, 0xeb, 0xfc, 0x83, 0x8e, 0x8f, 0x46, 0xc7, 0xe2, 0x41, 0xe7, 0xf7, 0x27,
		0x1b, 0xf6, 0xdb, 0x03, 0xf3, 0x5f, 0x54, 0x72, 0xeb, 0x65, 0x41, 0xd7, 0xc6, 0x07, 0xbc, 0x19,
		0x82, 0x6b, 0x47, 0x1d, 0x6c, 0x40, 0x69, 0x46, 0x9f, 0xed, 0x58, 0x50, 0xa9, 0x37, 0xa4, 0xdc,
		0x37, 0x16, 0x2c, 0x2f, 0x6e, 0x9c, 0x0b, 0xa7, 0x75, 0x6a, 0xe3, 0x63, 0x46, 0xdb, 0xe6, 0xc2,
		0x39, 0x3e, 0xb2, 0x60, 0x3d, 0xdf, 0x35, 0x17, 0x4e, 0x9b, 0xb8, 0x9b, 0x75, 0x3f, 0x27, 0xee,
		0x67, 0xbd, 0x7e, 0xe6, 0x86, 0xde, 0xad, 0x0a, 0xe5, 0x7d, 0x9d, 0x39, 0xeb, 0x14, 0x13, 0xe3,
		0xec, 0xe0, 0xec, 0xe0, 0xec, 0xec, 0xad, 0xb3, 0x43, 0x31, 0xb1, 0xe4, 0xb2, 0xa4, 0x98, 0xb8,
		0xd0, 0xda, 0x23, 0xc9, 0x72, 0xcd, 0xd4, 0x52, 0x4c, 0xbc, 0x05, 0x69, 0xec, 0x90, 0x6c, 0xb9,
		0xce, 0xed, 0xf3, 0xb2, 0x07, 0x2b, 0xd5, 0xc3, 0x13, 0xc3, 0x48, 0x4f, 0xa4, 0x27, 0xd2, 0x13,
		0xe9, 0x89, 0xf4, 0xdc, 0x0d, 0xe9, 0x49, 0x7d, 0xcf, 0xde, 0x4a, 0xcf, 0xd3, 0x93, 0x93, 0x63,
		0x54, 0x27, 0xaa, 0xb3, 0x26, 0xaa, 0x73, 0x7c, 0xc7, 0x91, 0x0d, 0xdd, 0x29, 0x98, 0x4a, 0x85,
		0xf2, 0x44, 0x79, 0xa2, 0x3c, 0x77, 0x4e, 0x79, 0x5a, 0xac, 0x2d, 0xdf, 0x37, 0x1c, 0x1e, 0xe7,
		0xbf, 0xe4, 0x17, 0xda, 0xb9, 0xa9, 0xca, 0x6c, 0x82, 0xf3, 0xfa, 0xcf, 0x03, 0xb1, 0x41, 0x6c,
		0x10, 0x1b, 0xc4, 0x06, 0xb1, 0x37, 0x23, 0x76, 0x9e, 0xaa, 0x68, 0x07, 0xa0, 0x85, 0x33, 0x21,
		0x49, 0x8d, 0x80, 0x73, 0xe0, 0x1c, 0x38, 0xa7, 0x86, 0x9c, 0x43, 0x7c, 0x5a, 0x72, 0x59, 0x92,
		0x1a, 0x51, 0x68, 0xed, 0x11, 0x9f, 0x5e, 0x33, 0xb5, 0xa4, 0x46, 0x54, 0x0c, 0xd0, 0xf2, 0xd6,
		0xf6, 0x2e, 0x48, 0x6d, 0xa7, 0x11, 0xd5, 0xd4, 0x34, 0xf2, 0x13, 0xf9, 0x89, 0xfc, 0xac, 0xb5,
		0xfc, 0xbc, 0xf2, 0x22, 0xdf, 0xcb, 0xe2, 0xe4, 0x49, 0xee, 0x74, 0xbc, 0xda, 0xd2, 0x46, 0x2a,
		0x1a, 0xad, 0x55, 0x34, 0x66, 0x6e, 0xaa, 0x32, 0x6b, 0x45, 0x8d, 0xfe, 0x53, 0xe4, 0x75, 0x83,
		0x8e, 0x95, 0x52, 0xc3, 0x81, 0x7d, 0xf5, 0xd8, 0x0b, 0x83, 0x4e, 0x90, 0x49, 0xb7, 0x9e, 0xc8,
		0x3f, 0xa5, 0x3d, 0xff, 0x29, 0xfd, 0xee, 0xad, 0x4a, 0x6c, 0x7c, 0xce, 0xc9, 0x68, 0x36, 0x5c,
		0x95, 0xc4, 0x36, 0xcc, 0x8f, 0xea, 0x3f, 0x93, 0x83, 0xad, 0x6a, 0x9c, 0xac, 0x43, 0x3b, 0x45,
		0x8d, 0xf3, 0xab, 0xf0, 0xc2, 0x39, 0xb6, 0xfa, 0x19, 0xa3, 0x35, 0x78, 0xe1, 0xb4, 0xad, 0x94,
		0x67, 0x0e, 0x57, 0xe0, 0x85, 0x73, 0x62, 0xc5, 0xf8, 0x08, 0x6c, 0xec, 0x94, 0x7f, 0xa6, 0x83,
		0x31, 0x39, 0xa5, 0xb2, 0xd1, 0xbe, 0x57, 0x61, 0xa3, 0x97, 0x58, 0xaf, 0x43, 0x4f, 0x5b, 0x1c,
		0x26, 0x1c, 0x26, 0x1c, 0xa6, 0x3a, 0x38, 0x4c, 0xf4, 0x6d, 0xd9, 0x33, 0x2f, 0x87, 0xbe, 0x2d,
		0xcf, 0x38, 0x53, 0xf4, 0x6d, 0xd9, 0x71, 0x0f, 0x87, 0xbe, 0x2d, 0x2b, 0x5c, 0x02, 0xfa, 0xb6,
		0xe0, 0xdd, 0x94, 0x5f, 0x8d, 0x93, 0x4b, 0x13, 0xad, 0x78, 0x39, 0xb9, 0x71, 0x6e, 0xa1, 0xc5,
		0xe1, 0xc1, 0xe1, 0xc1, 0xe1, 0xd9, 0x73, 0x87, 0x87, 0x5b, 0x68, 0x67, 0x0c, 0x73, 0x0b, 0xed,
		0xb3, 0x64, 0xb1, 0x4f, 0x52, 0x22, 0x51, 0x77, 0x2a, 0x51, 0x51, 0x47, 0xb9, 0xa1, 0xfa, 0x62,
		0xa3, 0x0d, 0xdc, 0xd2, 0x27, 0x40, 0xb5, 0x50, 0x2d, 0x54, 0x7b, 0xa0, 0x54, 0x4b, 0x2e, 0xb0,
		0xe4, 0xb2, 0xa4, 0x57, 0x45, 0xa1, 0xb5, 0x47, 0x2e, 0xf0, 0xba, 0xa9, 0x6d, 0x36, 0xc9, 0xf4,
		0xae, 0x2e, 0x06, 0xe5, 0x90, 0x05, 0xbc, 0x56, 0x86, 0xc6, 0x99, 0xea, 0x64, 0xca, 0x77, 0x6f,
		0x9f, 0xdc, 0x2a, 0x34, 0xe9, 0xa6, 0x8f, 0xab, 0x73, 0xd4, 0xab, 0x45, 0xbc, 0x0b, 0x11, 0x8e,
		0x08, 0x47, 0x84, 0x23, 0xc2, 0x11, 0xe1, 0xc8, 0x34, 0x44, 0x38, 0x22, 0x1c, 0x11, 0x2e, 0x24,
		0xc2, 0x97, 0x53, 0x11, 0x84, 0x65, 0xb7, 0x9d, 0x24, 0x21, 0x92, 0x69, 0xd1, 0xda, 0x68, 0x6d,
		0xb4, 0x76, 0x3d, 0xb5, 0x36, 0xc9, 0xb4, 0x4b, 0x63, 0x4d, 0x32, 0xed, 0xfa, 0x0f, 0x20, 0x99,
		0xb6, 0xe0, 0x07, 0x90, 0x4c, 0x4b, 0x32, 0x6d, 0x01, 0x05, 0x4b, 0x32, 0xad, 0x0d, 0xaf, 0x67,
		0x9f, 0x92, 0x69, 0xf3, 0xc9, 0x94, 0x76, 0x76, 0x24, 0xb1, 0x15, 0x1f, 0x07, 0x1f, 0x07, 0x1f,
		0x07, 0x1f, 0x07, 0x1f, 0x07, 0x1f, 0x07, 0x1f, 0x07, 0x1f, 0x07, 0x1f, 0x07, 0x1f, 0x07, 0x1f,
		0x07, 0x1f, 0xa7, 0xfc, 0x70, 0x0b, 0x7b, 0x39, 0xc2, 0xf0, 0x87, 0x9f, 0x83, 0x9f, 0x83, 0x9f,
		0x83, 0x9f, 0x83, 0x9f, 0x83, 0x9f, 0x83, 0x9f, 0x83, 0x9f, 0x83, 0x9f, 0x83, 0x9f, 0x83, 0x9f,
		0x73, 0x18, 0x7e, 0xce, 0x8b, 0x2d, 0x6e, 0xf6, 0x81, 0xca, 0xb3, 0x50, 0xac, 0xdc, 0x78, 0x17,
		0xa4, 0xd9, 0x65, 0x96, 0x25, 0x22, 0xb0, 0xd1, 0xb8, 0x0a, 0xa2, 0x9f, 0x43, 0x35, 0xd8, 0x15,
		0x42, 0xb9, 0x9c, 0x8d, 0x2b, 0xef, 0x71, 0xc6, 0x62, 0xeb, 0x4d, 0xbb, 0x7d, 0x7a, 0xd6, 0x6e,
		0x37, 0xcf, 0x8e, 0xcf, 0x9a, 0xe7, 0x27, 0x27, 0xad, 0xd3, 0x96, 0x40, 0x8f, 0xd5, 0xc6, 0xaf,
		0x89, 0xaf, 0x12, 0xe5, 0xff, 0x38, 0x18, 0xe1, 0xa8, 0x1f, 0x86, 0x5b, 0x9d, 0xe8, 0xcb, 0x28,
		0x8a, 0x33, 0x6f, 0xd8, 0xb0, 0x5b, 0x64, 0x4e, 0xd2, 0xce, 0x83, 0xea, 0x7a, 0x03, 0x45, 0x38,
		0x58, 0x3f, 0xaf, 0xff, 0x1a, 0xa4, 0x9d, 0xd8, 0x7d, 0xfb, 0xeb, 0x07, 0xf7, 0x7f, 0x7e, 0x73,
		0x83, 0xbb, 0xee, 0x7d, 0x32, 0x90, 0xda, 0xaf, 0x83, 0x28, 0x53, 0xc9, 0x9d, 0xd7, 0x51, 0x6e,
		0x67, 0xe8, 0xaa, 0xf5, 0x93, 0xe1, 0x2b, 0xa4, 0xeb, 0xfe, 0xe2, 0x75, 0xd6, 0x8f, 0x22, 0x15,
		0x0e, 0xc4, 0x66, 0x7e, 0x83, 0x63, 0xfa, 0x7a, 0x41, 0x77, 0x66, 0xaa, 0x93, 0xad, 0xfc, 0xc3,
		0xd9, 0x3f, 0x9b, 0xfb, 0x85, 0x86, 0xc8, 0x79, 0x69, 0xd2, 0xef, 0x64, 0xe3, 0x2e, 0xc2, 0x8d,
		0xe1, 0xf7, 0xfd, 0xfc, 0xf6, 0xd7, 0x0f, 0x9f, 0xff, 0xe7, 0xb7, 0xb7, 0x83, 0xaf, 0xfb, 0xd7,
		0xbb, 0xfb, 0xcf, 0x6f, 0x27, 0x5f, 0xea, 0xaf, 0x73, 0x5f, 0x76, 0xcd, 0x9f, 0x7f, 0xfe, 0x38,
		0xfc, 0xae, 0x1f, 0xd5, 0x65, 0xfe, 0x4d, 0x3f, 0xbf, 0xf7, 0xb2, 0x87, 0x5f, 0x87, 0xaf, 0xfc,
		0x7e, 0xfc, 0x3d, 0x97, 0xff, 0x68, 0xe6, 0x4f, 0x66, 0xff, 0xd6, 0x4c, 0x44, 0xe8, 0xa3, 0x90,
		0xde, 0x93, 0x9a, 0xcb, 0x59, 0x6a, 0x19, 0xd7, 0x7f, 0xf9, 0x1a, 0x2c, 0xd9, 0x7a, 0x2e, 0x55,
		0xbd, 0xf5, 0x59, 0x7e, 0x75, 0x69, 0xac, 0xac, 0x49, 0x5d, 0xa4, 0xc9, 0xaa, 0x5a, 0xac, 0xb1,
		0xd4, 0x47, 0x1d, 0xc3, 0x20, 0x99, 0x71, 0x50, 0x4c, 0x22, 0x08, 0x26, 0x1c, 0xf4, 0x92, 0x0a,
		0x72, 0x89, 0x07, 0xb5, 0xc4, 0x83, 0x58, 0xf2, 0x41, 0xab, 0x6a, 0xf1, 0xd9, 0x38, 0x08, 0xf5,
		0x5c, 0xd0, 0xc9, 0x6c, 0x6f, 0x49, 0x85, 0x99, 0x64, 0xc2, 0x4a, 0xb2, 0x61, 0xa4, 0x51, 0xd8,
		0xc8, 0xeb, 0x0c, 0xeb, 0x91, 0x04, 0x04, 0x4f, 0x6b, 0x16, 0xcd, 0x22, 0xc3, 0xb0, 0xa9, 0xa9,
		0x7c, 0x95, 0x0b, 0x42, 0x4c, 0x46, 0x48, 0xc6, 0x91, 0x98, 0x19, 0x9f, 0x0b, 0xa7, 0xb5, 0x5b,
		0x12, 0xec, 0x85, 0xdd, 0x27, 0x4a, 0x4e, 0xf9, 0xd4, 0x15, 0xd5, 0xdc, 0xe3, 0x66, 0x4e, 0xa7,
		0xb9, 0x93, 0x69, 0xc5, 0xa9, 0x34, 0x73, 0x22, 0xcb, 0x4e, 0x81, 0xa1, 0xba, 0xae, 0xa5, 0xaa,
		0xd6, 0x80, 0xc2, 0xfa, 0x08, 0xe8, 0x72, 0xa0, 0x5b, 0x7c, 0x7f, 0x16, 0xfb, 0xcd, 0x82, 0xcb,
		0x47, 0x77, 0xd9, 0x6c, 0x7d, 0xb9, 0x94, 0x58, 0x1a, 0xdb, 0x5a, 0x12, 0xc5, 0x16, 0xc0, 0xf3,
		0xd3, 0x59, 0x60, 0x2a, 0x47, 0xf7, 0x46, 0xa6, 0x2a, 0x1c, 0xa1, 0xaf, 0xdb, 0x55, 0x59, 0x32,
		0xbc, 0x96, 0xa9, 0xd8, 0x8c, 0xce, 0x5f, 0x3f, 0xb9, 0x64, 0xa6, 0xe0, 0x52, 0x2a, 0xe7, 0xfb,
		0x94, 0xf6, 0x75, 0x74, 0x7c, 0x1b, 0x43, 0x5f, 0x46, 0xd7, 0x77, 0x31, 0xf6, 0x55, 0x8c, 0x7d,
		0x13, 0x73, 0x5f, 0x44, 0x16, 0x66, 0x4a, 0xfb, 0x16, 0xab, 0x7d, 0x09, 0xcd, 0xa5, 0xa9, 0xeb,
		0x3a, 0xe8, 0xb9, 0x0a, 0x66, 0xae, 0xc1, 0x48, 0xbb, 0x07, 0xf7, 0x3d, 0x1d, 0xf2, 0x1b, 0x9e,
		0xaa, 0x66, 0x3a, 0x2e, 0xc4, 0xe8, 0xc4, 0xd4, 0x57, 0xa1, 0xf7, 0xd4, 0xb0, 0xaa, 0x53, 0xf4,
		0xbd, 0x81, 0xf1, 0xdb, 0x69, 0xdd, 0xd0, 0x36, 0x1c, 0x50, 0xad, 0x93, 0xca, 0xc1, 0x70, 0x5e,
		0x38, 0x47, 0xdb, 0x25, 0x73, 0x19, 0x8e, 0x28, 0x81, 0x64, 0x1a, 0x17, 0x88, 0xe5, 0x1b, 0x0c,
		0xfc, 0x07, 0xff, 0x17, 0x5f, 0xe7, 0xa7, 0xa0, 0x9c, 0x6b, 0x37, 0xd8, 0xeb, 0xc3, 0xfe, 0x2c,
		0x1a, 0xee, 0x4c, 0x3e, 0xe9, 0x33, 0x36, 0xca, 0xfa, 0xb3, 0xa5, 0x96, 0xb2, 0x71, 0xf8, 0xd6,
		0x24, 0x6c, 0x2b, 0x14, 0xae, 0x35, 0x0d, 0xd3, 0x8a, 0x85, 0x67, 0xc5, 0xc2, 0xb2, 0x72, 0xe1,
		0x58, 0xbb, 0xb1, 0x93, 0xb2, 0x5b, 0x23, 0x7f, 0x50, 0x45, 0xde, 0x6d, 0xa8, 0xcc, 0x4f, 0x3d,
		0xc6, 0x76, 0x38, 0xf1, 0xe0, 0xc4, 0x63, 0x6b, 0x5b, 0xcc, 0x30, 0x1c, 0xba, 0xf5, 0x13, 0x0f,
		0xd5, 0xed, 0x19, 0xe5, 0xd3, 0xe6, 0x8c, 0x73, 0x5c, 0xe3, 0xa3, 0xd6, 0x44, 0xc5, 0xbd, 0xcc,
		0x1c, 0x6f, 0x46, 0x66, 0x80, 0x1b, 0xe0, 0x06, 0xb8, 0x39, 0x18, 0xb8, 0xe1, 0xec, 0x63, 0x12,
		0xcc, 0xee, 0xa8, 0xd7, 0xda, 0x8e, 0x89, 0x53, 0x5d, 0x38, 0xbb, 0xa3, 0x3e, 0xff, 0x34, 0x7d,
		0x4d, 0x5b, 0xe1, 0x8f, 0x12, 0xbe, 0xb8, 0xa6, 0xdc, 0x35, 0x93, 0xb9, 0x9a, 0x7c, 0x83, 0x27,
		0x88, 0x27, 0xa8, 0x11, 0x1a, 0xd5, 0xe5, 0x07, 0x63, 0x5e, 0xd0, 0xe4, 0x03, 0x0e, 0x2d, 0x37,
		0xe2, 0x7c, 0xfd, 0xce, 0x28, 0x8b, 0xd6, 0x2b, 0x09, 0x05, 0x9c, 0xe3, 0x30, 0xe8, 0x3c, 0xb9,
		0x9d, 0xd0, 0x4b, 0x53, 0x95, 0x6a, 0xc4, 0x9e, 0xe7, 0x9f, 0x27, 0x0c, 0x4d, 0x18, 0xba, 0xea,
		0x30, 0xf4, 0xec, 0x12, 0xd4, 0x97, 0x1e, 0x73, 0x56, 0x10, 0x20, 0x08, 0x90, 0xbd, 0x15, 0x20,
		0xf9, 0x69, 0xfd, 0xcc, 0x8a, 0x77, 0x93, 0xe1, 0xb5, 0x18, 0xfa, 0xaa, 0x44, 0xe3, 0x8a, 0x0e,
		0xc3, 0xab, 0x38, 0x0c, 0x5c, 0x74, 0x89, 0xab, 0x35, 0xa4, 0xae, 0xd0, 0x10, 0xbf, 0x4c, 0x41,
		0xee, 0xd2, 0x04, 0x83, 0xa4, 0x62, 0x91, 0x2b, 0x2e, 0xf2, 0x21, 0x7e, 0xb3, 0xbf, 0x43, 0x5c,
		0x51, 0x6c, 0xe7, 0xc6, 0x2a, 0x26, 0xd5, 0x2b, 0x33, 0xf8, 0xac, 0xf2, 0x34, 0x60, 0x5c, 0xac,
		0xf5, 0x2e, 0x96, 0x8e, 0x7f, 0x50, 0xa1, 0xb7, 0x35, 0x7c, 0xbd, 0xbf, 0x8e, 0xdf, 0xae, 0x4a,
		0xbf, 0x2b, 0x09, 0xe2, 0x24, 0xc8, 0x9e, 0x34, 0x3c, 0xae, 0xc9, 0x93, 0xf8, 0x5a, 0xf8, 0x5a,
		0x55, 0xfb, 0x5a, 0x0f, 0x71, 0xe8, 0xbb, 0xa5, 0xd7, 0xee, 0xd2, 0xbc, 0xcf, 0x9b, 0xc1, 0xdb,
		0xc2, 0xdb, 0xaa, 0xa9, 0xb7, 0x75, 0xe5, 0x45, 0xbe, 0x97, 0xc5, 0xc9, 0x93, 0x46, 0xa6, 0x99,
		0xb9, 0xa7, 0xa6, 0x7d, 0xa1, 0x22, 0x5e, 0x59, 0x13, 0xaf, 0xcc, 0xb6, 0x57, 0x76, 0x86, 0x57,
		0x56, 0xad, 0x57, 0x66, 0xe5, 0xc8, 0x36, 0x55, 0x59, 0xbf, 0x27, 0x40, 0xe9, 0x0b, 0x76, 0xe0,
		0x74, 0x38, 0x1d, 0x4e, 0x87, 0xd3, 0xe1, 0x74, 0x38, 0x1d, 0x4e, 0xaf, 0x5d, 0xe8, 0x50, 0x3d,
		0x66, 0x89, 0xe7, 0xf6, 0xa3, 0x34, 0x2b, 0x9d, 0xb0, 0x35, 0x60, 0x9b, 0x54, 0x45, 0x9d, 0xf2,
		0x78, 0x62, 0x80, 0x9a, 0x6f, 0x23, 0x3f, 0xe8, 0x78, 0x99, 0x4a, 0x1d, 0xcf, 0x99, 0x68, 0x0c,
		0x27, 0x8a, 0x7d, 0xe5, 0x04, 0xa9, 0x33, 0x09, 0x43, 0x2a, 0xff, 0xd5, 0xf6, 0x89, 0x78, 0x34,
		0x34, 0x75, 0xa2, 0xe2, 0xc2, 0x63, 0x67, 0x9b, 0xa7, 0x5f, 0xc8, 0xee, 0xa1, 0xbd, 0x0a, 0x93,
		0x97, 0xd7, 0xcd, 0x15, 0x05, 0xc8, 0x27, 0x2f, 0x56, 0x61, 0x6c, 0x3c, 0x51, 0x9d, 0x38, 0xf1,
		0x87, 0x1d, 0x7a, 0x35, 0xaa, 0x61, 0xe7, 0x9e, 0xa6, 0x2d, 0x02, 0x31, 0x72, 0x43, 0xf8, 0xd0,
		0x6f, 0x8b, 0x50, 0x36, 0xd3, 0xb3, 0x64, 0x86, 0xa7, 0xcc, 0x66, 0x4b, 0x83, 0xfb, 0xc8, 0x0b,
		0x43, 0xe5, 0xbb, 0x63, 0x24, 0x29, 0xb9, 0xdd, 0x16, 0x9e, 0x67, 0xc3, 0xb1, 0xe1, 0xb6, 0xb6,
		0xe1, 0xd2, 0x51, 0x4b, 0x0f, 0x8d, 0x1d, 0x57, 0x22, 0xc3, 0xa4, 0xf1, 0x4e, 0x45, 0xf7, 0x43,
		0x4d, 0x60, 0x5d, 0xfd, 0x9a, 0x78, 0xcf, 0xa6, 0xf9, 0x49, 0x62, 0xae, 0x9c, 0xb9, 0x0b, 0xf7,
		0x4d, 0x2f, 0x25, 0xc4, 0x7c, 0xe8, 0x8e, 0x4e, 0xda, 0xbb, 0x3f, 0x78, 0xdb, 0xd5, 0xe8, 0x32,
		0x1c, 0x15, 0xdf, 0x65, 0x6e, 0x2f, 0x51, 0x03, 0x42, 0x2d, 0x23, 0xe3, 0xa7, 0xc0, 0xb0, 0x60,
		0x00, 0x96, 0x82, 0xa5, 0x90, 0x85, 0x1b, 0xb7, 0xdc, 0xd7, 0x20, 0xeb, 0x3c, 0x94, 0x69, 0x90,
		0x35, 0xdd, 0x6c, 0xf9, 0xa3, 0x64, 0x28, 0xb1, 0xcd, 0x0c, 0xb7, 0x59, 0xe9, 0x0c, 0x25, 0x15,
		0xf9, 0xbd, 0x38, 0xd0, 0x68, 0x5f, 0x36, 0x53, 0x84, 0x3a, 0xb6, 0x40, 0x43, 0xa2, 0x6a, 0x43,
		0xa7, 0x9c, 0x61, 0x16, 0x7e, 0x4d, 0xed, 0x86, 0x44, 0x1d, 0xaf, 0xe7, 0xdd, 0x06, 0xa1, 0xce,
		0x51, 0xff, 0xd2, 0xe2, 0x99, 0xb1, 0x45, 0xa7, 0x10, 0x3a, 0x85, 0x6c, 0x6d, 0xab, 0xe9, 0x6d,
		0x39, 0x03, 0xef, 0xd2, 0x31, 0x4c, 0x23, 0xd0, 0x17, 0x91, 0x6b, 0x57, 0xdf, 0xa4, 0xa8, 0x2b,
		0x17, 0x5f, 0x6e, 0xc7, 0xeb, 0x71, 0x8b, 0xc3, 0xb2, 0xb5, 0xd1, 0xb5, 0x0b, 0x69, 0xa7, 0x25,
		0x72, 0x87, 0xc3, 0xc9, 0xf0, 0x52, 0x88, 0x30, 0xed, 0x48, 0x58, 0x3b, 0x6a, 0x0e, 0xad, 0xdd,
		0xa5, 0x9d, 0xbd, 0xb9, 0x0c, 0x62, 0xf0, 0x5d, 0x2e, 0x9c, 0xa3, 0xa6, 0xc4, 0x5d, 0x10, 0xe1,
		0xd0, 0x56, 0xeb, 0x44, 0xe4, 0x5e, 0x89, 0xc1, 0x02, 0x38, 0x80, 0x1b, 0x25, 0x5e, 0xea, 0xb4,
		0x2c, 0xec, 0xc4, 0xbe, 0xc9, 0x76, 0x9b, 0x11, 0xd2, 0x63, 0x4b, 0xa8, 0x03, 0xd4, 0xc1, 0x81,
		0xa9, 0x03, 0x9b, 0xcc, 0x3e, 0xdc, 0x57, 0x0a, 0x72, 0x5f, 0xb6, 0x26, 0x79, 0xb3, 0xf7, 0x58,
		0x29, 0x78, 0x9d, 0xdf, 0x55, 0x26, 0xc2, 0xee, 0x43, 0x48, 0xcc, 0x1e, 0x54, 0x12, 0xc9, 0x18,
		0x3c, 0x19, 0x45, 0xb6, 0x23, 0x5f, 0x65, 0x6e, 0xea, 0x3f, 0xec, 0x8d, 0x66, 0xc8, 0xc7, 0xe8,
		0xc2, 0x11, 0xb8, 0x3b, 0x59, 0xf0, 0x96, 0xea, 0xc9, 0x62, 0x10, 0xb9, 0x4d, 0x7b, 0x76, 0xe6,
		0x2e, 0x9c, 0x13, 0xae, 0xb6, 0x32, 0x88, 0x86, 0x18, 0x64, 0x33, 0x4e, 0xe7, 0x56, 0x37, 0xab,
		0x71, 0xf2, 0x8f, 0x00, 0xd4, 0xcf, 0x66, 0xea, 0x4d, 0xa2, 0x90, 0x42, 0x59, 0x8e, 0x96, 0x15,
		0x84, 0x49, 0xd6, 0x63, 0x35, 0x1a, 0xa2, 0xf0, 0xd8, 0x1e, 0x78, 0x2f, 0x87, 0x5d, 0xea, 0xd3,
		0x99, 0x4b, 0xa2, 0xd7, 0x9a, 0x31, 0x7b, 0xa7, 0xb2, 0x3c, 0xca, 0x0f, 0x93, 0x57, 0xfd, 0xfc,
		0xf3, 0xe4, 0x55, 0x6b, 0x50, 0xfc, 0x95, 0x25, 0x5e, 0x94, 0x06, 0x06, 0x67, 0x25, 0x13, 0x03,
		0x1c, 0x95, 0x58, 0xc6, 0x5d, 0x8e, 0x4a, 0x74, 0x01, 0x8d, 0xa3, 0x12, 0x82, 0x21, 0x04, 0x43,
		0xb6, 0x1a, 0x0c, 0xe1, 0xa8, 0x64, 0x27, 0xa3, 0x29, 0x1c, 0x95, 0x54, 0x19, 0xf6, 0xe0, 0xa8,
		0x64, 0xbb, 0x11, 0x0a, 0x8e, 0x4a, 0x50, 0x07, 0xa8, 0x83, 0x2d, 0xa8, 0x03, 0x8e, 0x4a, 0xb6,
		0x41, 0xee, 0x1c, 0x95, 0xec, 0x81, 0x66, 0xe0, 0xa8, 0x64, 0x0f, 0x85, 0x08, 0x47, 0x25, 0x05,
		0xa0, 0x7e, 0x36, 0x9c, 0x3f, 0x0e, 0x42, 0x72, 0x52, 0x22, 0x23, 0x21, 0x8a, 0x0e, 0x2d, 0x07,
		0x25, 0x3b, 0x78, 0x50, 0xa2, 0x17, 0xb0, 0x77, 0xb6, 0x70, 0x4e, 0xf2, 0x71, 0xfc, 0xa6, 0xb4,
		0xe2, 0x96, 0x5e, 0x04, 0xb5, 0x6b, 0x32, 0x92, 0x4f, 0x7a, 0x95, 0x5d, 0x46, 0xc6, 0x63, 0x34,
		0x18, 0x7b, 0xb7, 0x97, 0xc4, 0x99, 0xea, 0xe8, 0xd5, 0x96, 0xae, 0xb1, 0x43, 0xed, 0x1b, 0xb5,
		0x6f, 0x86, 0xa0, 0xa2, 0x51, 0xfb, 0xc6, 0xf5, 0x8b, 0x55, 0xc4, 0x98, 0x38, 0xcc, 0xdd, 0x96,
		0xfb, 0xb2, 0xcf, 0xd7, 0x2f, 0xbe, 0x2c, 0xd3, 0x82, 0x6f, 0xc2, 0x33, 0x6e, 0x37, 0xf6, 0x0d,
		0x76, 0xfc, 0xa2, 0x21, 0xf2, 0x38, 0xd8, 0xfa, 0xfb, 0x96, 0xc7, 0x11, 0xc5, 0x91, 0x9b, 0xa8,
		0x2f, 0x2a, 0x19, 0xf7, 0x51, 0x31, 0x3c, 0xaa, 0x99, 0x37, 0xc7, 0x79, 0x0d, 0xe7, 0x35, 0x5b,
		0xdb, 0x70, 0x86, 0x01, 0x15, 0xae, 0xc8, 0xaf, 0x17, 0xc2, 0xed, 0x52, 0x44, 0x69, 0xb5, 0xd7,
		0xfb, 0xda, 0x4c, 0x4f, 0x54, 0x17, 0x71, 0x18, 0xfd, 0xd1, 0x7b, 0x2f, 0x7b, 0x78, 0x9f, 0xbf,
		0xf1, 0xe7, 0xe9, 0x8f, 0x57, 0x83, 0x77, 0xaf, 0xc3, 0xe5, 0x0c, 0x49, 0x78, 0xef, 0xfa, 0xc1,
		0x17, 0x95, 0xa4, 0x06, 0x22, 0x6f, 0xce, 0x0a, 0xce, 0x1d, 0x0a, 0x0f, 0xe7, 0xae, 0x72, 0xe7,
		0xee, 0xe0, 0xa2, 0xcd, 0x46, 0x61, 0xd1, 0xed, 0x12, 0xc1, 0xb6, 0xa2, 0xd0, 0xa9, 0x0a, 0x25,
		0x82, 0xd0, 0x53, 0x33, 0xc4, 0xa0, 0x89, 0x41, 0x57, 0x1d, 0x83, 0x0e, 0xa2, 0x2f, 0x5e, 0x18,
		0xf8, 0x7a, 0x32, 0x36, 0x9f, 0xf6, 0x39, 0x2b, 0x04, 0xa5, 0x90, 0x2c, 0xfb, 0x16, 0x94, 0x1a,
		0x22, 0xf5, 0xec, 0x2a, 0x77, 0xbd, 0x8e, 0xb6, 0xe7, 0x37, 0x1f, 0xd2, 0x5d, 0x67, 0x99, 0x50,
		0x15, 0xa1, 0x2a, 0x42, 0x55, 0x9a, 0x2b, 0xe7, 0xbd, 0xec, 0xae, 0x72, 0xf6, 0xbe, 0x6e, 0x28,
		0x53, 0x5e, 0x22, 0x96, 0x0b, 0xec, 0x27, 0x71, 0x6f, 0x6f, 0x92, 0x76, 0x87, 0x5f, 0x46, 0x26,
		0x61, 0x77, 0x38, 0xc8, 0xd4, 0xe6, 0x14, 0x23, 0xd8, 0x2c, 0xe8, 0xaa, 0xb8, 0x9f, 0xd9, 0x60,
		0xd8, 0x89, 0x69, 0x28, 0x16, 0x8a, 0x85, 0x62, 0x35, 0x57, 0x8e, 0xf6, 0xcd, 0xa8, 0x8b, 0xfb,
		0xc8, 0xe0, 0x12, 0x4b, 0xc3, 0x9b, 0x52, 0x27, 0xff, 0x08, 0xb0, 0x84, 0xc4, 0xcd, 0xa9, 0xb9,
		0x31, 0xa1, 0x1b, 0x54, 0x73, 0x7b, 0xd2, 0xd7, 0x7c, 0x4e, 0xd7, 0x82, 0xd4, 0x75, 0x9f, 0x42,
		0xbc, 0xef, 0x48, 0xdd, 0xb0, 0xba, 0x34, 0x15, 0xa7, 0xcd, 0x66, 0xf3, 0x00, 0xa7, 0x63, 0x4b,
		0x4a, 0xe5, 0x86, 0xe2, 0x9d, 0x89, 0x2e, 0xaa, 0x41, 0xf1, 0xce, 0x28, 0xcf, 0xd4, 0x31, 0x08,
		0xf2, 0x55, 0xa0, 0x15, 0xea, 0x5f, 0xa8, 0xb3, 0x6a, 0x18, 0x29, 0xca, 0xd9, 0xc9, 0x14, 0x8a,
		0xfc, 0xcc, 0xe6, 0xb5, 0xe1, 0xa6, 0xa8, 0xfa, 0xd4, 0xec, 0xc3, 0xe4, 0xc5, 0x3f, 0xbf, 0xd5,
		0x5e, 0x86, 0x96, 0x72, 0x64, 0xe7, 0xc6, 0xd5, 0xed, 0xc4, 0x69, 0xe6, 0x86, 0x41, 0xd7, 0xa4,
		0xdb, 0xd9, 0x7a, 0x93, 0x64, 0x55, 0x58, 0x06, 0x69, 0x8e, 0x28, 0x74, 0x21, 0xd1, 0x3c, 0xab,
		0x42, 0xdb, 0x31, 0x33, 0x70, 0xc8, 0x0c, 0x1d, 0x31, 0x03, 0x91, 0x22, 0xe1, 0x78, 0x99, 0x5e,
		0xbe, 0x69, 0x4d, 0xd9, 0xcb, 0x29, 0x7a, 0x03, 0xc7, 0x4a, 0xc4, 0xa1, 0xca, 0x87, 0xb8, 0x7d,
		0x74, 0xde, 0x3e, 0x3f, 0x3d, 0x3b, 0x3a, 0x3f, 0xd9, 0xdf, 0xb1, 0xae, 0xa7, 0x36, 0xab, 0x82,
		0xb6, 0x7d, 0x15, 0x7a, 0x4f, 0xc2, 0xbc, 0x3d, 0x6b, 0x13, 0xe2, 0x86, 0xb8, 0x21, 0x6e, 0x88,
		0x1b, 0xe2, 0x86, 0xb8, 0x21, 0x6e, 0x41, 0xe2, 0x7e, 0x88, 0x7b, 0xc2, 0xb4, 0x3d, 0xb5, 0x08,
		0x69, 0x43, 0xda, 0x90, 0x36, 0xa4, 0x0d, 0x69, 0x57, 0x4e, 0xda, 0x47, 0x27, 0xb0, 0xf5, 0x3e,
		0xb0, 0x75, 0x16, 0xa8, 0xdb, 0x44, 0x79, 0xbf, 0xab, 0xc4, 0xe0, 0xf2, 0x8f, 0xa9, 0x0d, 0x18,
		0x19, 0x46, 0xde, 0x5b, 0x46, 0x9e, 0xb4, 0x15, 0x5e, 0xd0, 0xa3, 0xda, 0xcb, 0xdf, 0x31, 0x4c,
		0xfe, 0x35, 0x4b, 0xfa, 0x95, 0x49, 0xf6, 0x1d, 0x25, 0xf9, 0x76, 0x83, 0xc8, 0xbd, 0x0b, 0xc2,
		0xd0, 0xe4, 0xf4, 0x7e, 0x98, 0xe0, 0xdb, 0xf5, 0x1e, 0x8d, 0x0d, 0x1d, 0x0f, 0x0c, 0x25, 0x5e,
		0xe4, 0xc7, 0xdd, 0x46, 0xb5, 0x29, 0x70, 0xc6, 0xb9, 0xc1, 0xd3, 0xef, 0x6f, 0x94, 0x17, 0x3c,
		0x9d, 0x0f, 0x23, 0x2d, 0x34, 0x19, 0xc4, 0x0b, 0xa7, 0xa6, 0x7d, 0x15, 0x28, 0xbb, 0x2d, 0x97,
		0x54, 0x50, 0xe3, 0xaa, 0xdb, 0x3c, 0x7f, 0x40, 0xac, 0xe8, 0xf6, 0x85, 0xc1, 0x54, 0xeb, 0x64,
		0x58, 0x35, 0xd2, 0xcc, 0xcb, 0xfa, 0x69, 0x61, 0xe7, 0x49, 0xa3, 0x08, 0xd6, 0x57, 0xbd, 0x44,
		0x75, 0xbc, 0x4c, 0xf9, 0x15, 0xd7, 0xc0, 0x8e, 0xbf, 0xda, 0x36, 0x6b, 0x60, 0x67, 0xbe, 0xbb,
		0xf4, 0xb6, 0x7f, 0x61, 0x26, 0xd4, 0x9f, 0x5b, 0x4b, 0x25, 0xe1, 0xa2, 0x4a, 0x98, 0x28, 0x30,
		0xa3, 0x95, 0x00, 0xc1, 0xe6, 0x29, 0x5d, 0x3f, 0x41, 0xab, 0xff, 0x66, 0xcd, 0x84, 0x0c, 0x16,
		0xf4, 0xe0, 0x2b, 0x0c, 0xdc, 0xce, 0x2f, 0xca, 0x99, 0x8e, 0xd3, 0xf0, 0xbb, 0xad, 0x79, 0xe6,
		0x5d, 0x90, 0x66, 0x83, 0xf7, 0xdc, 0x38, 0x75, 0x8d, 0xab, 0x20, 0xfa, 0x39, 0x54, 0x83, 0xa5,
		0xfa, 0x8c, 0x23, 0x3b, 0x70, 0xc2, 0x67, 0x7e, 0xb3, 0xf5, 0xa6, 0xdd, 0x3e, 0x3d, 0x6b, 0xb7,
		0x9b, 0x67, 0xc7, 0x67, 0xcd, 0xf3, 0x93, 0x93, 0xd6, 0x69, 0x6b, 0x83, 0x5b, 0xdd, 0xf8, 0x35,
		0xf1, 0x55, 0xa2, 0xfc, 0x1f, 0x07, 0x5f, 0x23, 0xea, 0x87, 0x61, 0xa9, 0x6f, 0x7f, 0xd9, 0xbf,
		0x1f, 0x7c, 0xac, 0xf2, 0x37, 0x22, 0xd4, 0xe6, 0xf5, 0x99, 0x23, 0xd1, 0x6b, 0xaf, 0x75, 0xb1,
		0x76, 0x05, 0xae, 0xff, 0xbb, 0x67, 0xd6, 0x5b, 0xe3, 0x27, 0x95, 0x76, 0x92, 0xa0, 0x37, 0xde,
		0x2b, 0x8d, 0x8f, 0x0f, 0x41, 0xea, 0x78, 0xa3, 0xf7, 0x76, 0xd4, 0x63, 0xa6, 0x22, 0x3f, 0x75,
		0xb2, 0x07, 0xe5, 0xcc, 0x19, 0x75, 0x7c, 0x2f, 0xf3, 0x9c, 0xf8, 0xee, 0x3a, 0xfa, 0xf3, 0xea,
		0xbd, 0xf2, 0xe7, 0xe7, 0x3e, 0xb6, 0x58, 0xa5, 0x78, 0x61, 0xb7, 0xb3, 0x8c, 0x9b, 0xa9, 0xe9,
		0x56, 0x96, 0x05, 0x75, 0x6d, 0xb7, 0x51, 0x1b, 0xc4, 0xf5, 0xdd, 0x42, 0x33, 0xe6, 0x2e, 0x5a,
		0x89, 0xdd, 0x58, 0x89, 0x87, 0xba, 0x0d, 0x37, 0xca, 0xa2, 0xea, 0xda, 0xd5, 0xde, 0x8d, 0x7d,
		0x15, 0x3a, 0x41, 0xea, 0x4c, 0xf9, 0xce, 0xf1, 0x22, 0x7f, 0xf0, 0x27, 0x89, 0xea, 0x85, 0x5e,
		0x47, 0xf9, 0xce, 0xed, 0xd3, 0x75, 0x34, 0xb7, 0xd2, 0xfb, 0x5d, 0x77, 0x66, 0x84, 0x5f, 0x3d,
		0x79, 0xd1, 0xbd, 0xf3, 0xf5, 0x21, 0xe8, 0x3c, 0x38, 0x5f, 0x83, 0x30, 0xbc, 0x8e, 0x7a, 0x49,
		0xfc, 0x25, 0xf0, 0xd5, 0x78, 0xeb, 0x74, 0x7b, 0x5e, 0x16, 0xdc, 0x86, 0xca, 0xb9, 0xeb, 0x47,
		0x43, 0xc9, 0xe5, 0x85, 0x41, 0x16, 0xa8, 0xf4, 0x95, 0xe3, 0x5c, 0xbd, 0x7f, 0xf7, 0xe1, 0x3a,
		0x1a, 0x7d, 0x27, 0xa7, 0xfc, 0x17, 0xa2, 0x81, 0x88, 0x58, 0x98, 0x66, 0xef, 0x1a, 0x88, 0x18,
		0xd4, 0x2c, 0x94, 0x55, 0xd6, 0xfa, 0xc7, 0x11, 0x66, 0x4a, 0xdb, 0x46, 0x8c, 0x4f, 0x4b, 0x79,
		0xdb, 0x8d, 0xf1, 0xe9, 0x28, 0x71, 0xdb, 0x0e, 0xfe, 0x4d, 0x35, 0x5e, 0xe3, 0x0b, 0x8d, 0x5d,
		0x80, 0xa2, 0x42, 0x51, 0x1d, 0x88, 0xa2, 0x4a, 0xbc, 0x28, 0xed, 0xc5, 0x49, 0xe6, 0xf6, 0x92,
		0xf8, 0x2e, 0x08, 0x95, 0x3b, 0x52, 0x12, 0x1a, 0xaa, 0x6a, 0x9d, 0xa5, 0x9d, 0x56, 0x56, 0xee,
		0xc7, 0xf7, 0x88, 0x2b, 0xc4, 0x15, 0xe2, 0x0a, 0x71, 0x85, 0xb8, 0x42, 0x5c, 0x21, 0xae, 0x10,
		0x57, 0xc5, 0xc5, 0x55, 0x37, 0x9b, 0x88, 0x20, 0xa3, 0x78, 0xd5, 0x6a, 0x33, 0x3b, 0x1e, 0xb0,
		0x7a, 0x7f, 0x74, 0xf5, 0xde, 0x41, 0x58, 0x21, 0xac, 0x10, 0x56, 0x08, 0x2b, 0x84, 0x55, 0x71,
		0x61, 0xb5, 0xf2, 0x6f, 0x6e, 0xd6, 0x1d, 0x20, 0x16, 0x3b, 0xc7, 0xb6, 0x74, 0x7e, 0xbd, 0x61,
		0x31, 0xc9, 0x1f, 0x51, 0xaf, 0x5e, 0x22, 0xcb, 0xc3, 0x35, 0xff, 0x27, 0x0b, 0xa0, 0xf2, 0xdc,
		0x80, 0x19, 0x0e, 0xd4, 0x8a, 0x01, 0x31, 0x18, 0x88, 0xf9, 0x6f, 0x3c, 0xfd, 0x5e, 0x33, 0xdf,
		0xa9, 0xd1, 0x0d, 0x6e, 0x97, 0xbe, 0xc8, 0x94, 0xa9, 0x82, 0xdb, 0x85, 0x37, 0x5a, 0x43, 0xac,
		0x6b, 0x09, 0x74, 0x13, 0x51, 0x4e, 0xef, 0x30, 0x89, 0xba, 0x3d, 0xd7, 0xbb, 0x57, 0x51, 0xb6,
		0x86, 0x13, 0x9f, 0x83, 0xb1, 0xc2, 0x1c, 0x57, 0x18, 0x86, 0xe6, 0x60, 0x66, 0xe1, 0xfd, 0x4a,
		0xae, 0x98, 0x75, 0x6a, 0x70, 0x44, 0x85, 0x77, 0x49, 0xe2, 0xae, 0x9a, 0x83, 0xd5, 0xaa, 0x61,
		0xf2, 0xdb, 0xeb, 0x92, 0x21, 0x36, 0xaa, 0x9e, 0x67, 0x55, 0x4e, 0x11, 0x55, 0x53, 0x52, 0xc5,
		0x14, 0x25, 0xa0, 0xd2, 0x2a, 0xa5, 0x34, 0xa1, 0x94, 0x57, 0x21, 0xe5, 0x12, 0x51, 0x9e, 0x13,
		0xfd, 0x8d, 0x8e, 0xd7, 0x79, 0x50, 0xc3, 0x6e, 0xa2, 0xcf, 0x7b, 0x07, 0xf9, 0x28, 0xcf, 0x3e,
		0xf4, 0xac, 0xe3, 0x7a, 0xe7, 0xf5, 0xc3, 0xac, 0x90, 0x36, 0x69, 0x9c, 0x36, 0x37, 0x33, 0xe6,
		0x4d, 0x31, 0x77, 0xb5, 0x89, 0xbb, 0xba, 0xfb, 0xee, 0x6a, 0xe1, 0x24, 0xfa, 0xf2, 0x65, 0x6c,
		0x25, 0xca, 0xd6, 0x4a, 0x96, 0xa9, 0x95, 0xd0, 0xec, 0x3a, 0x65, 0x68, 0xba, 0x5d, 0x35, 0x8d,
		0x2b, 0xa0, 0xf4, 0x2b, 0x9e, 0xca, 0x54, 0x08, 0xe9, 0x94, 0x8d, 0xcd, 0x76, 0xb7, 0xdc, 0x9d,
		0x41, 0xa9, 0x26, 0x5b, 0x54, 0x88, 0x43, 0x4a, 0x78, 0xa6, 0x45, 0x3d, 0xd1, 0x12, 0xbb, 0xba,
		0x94, 0xa7, 0x69, 0x02, 0xa7, 0xa5, 0x3c, 0x49, 0x19, 0x38, 0x2d, 0xe3, 0x29, 0xea, 0x7a, 0x5e,
		0x37, 0xe5, 0x52, 0x37, 0x05, 0x3c, 0xaf, 0x79, 0x61, 0xfa, 0xba, 0x1b, 0xdc, 0xbe, 0x2e, 0x20,
		0x13, 0x9f, 0xf1, 0x2a, 0x3e, 0x44, 0xdd, 0xde, 0xe5, 0xc0, 0xe6, 0xc0, 0xb3, 0xb8, 0x0a, 0x6e,
		0x3f, 0x5f, 0xf5, 0xc2, 0xf4, 0x97, 0x24, 0xb9, 0x0a, 0x6e, 0x0b, 0xbb, 0x50, 0x2f, 0xd7, 0xa8,
		0xdd, 0xde, 0x51, 0xb7, 0x57, 0x42, 0xee, 0xe6, 0xbf, 0x8e, 0xde, 0x45, 0xef, 0xa2, 0x77, 0xd1,
		0xbb, 0xe8, 0x5d, 0xf4, 0x2e, 0x7a, 0x17, 0xbd, 0x8b, 0xde, 0x45, 0xef, 0xce, 0xe8, 0xdd, 0x67,
		0x74, 0xa2, 0x8e, 0xe0, 0x7d, 0x7f, 0x74, 0xd5, 0x93, 0x50, 0xbc, 0x99, 0x72, 0xd5, 0x63, 0x56,
		0x42, 0xf3, 0xce, 0x3c, 0x80, 0xea, 0x45, 0xf5, 0xa2, 0x7a, 0x51, 0xbd, 0xa8, 0x5e, 0x54, 0x2f,
		0xaa, 0x17, 0xd5, 0x8b, 0xea, 0x45, 0xf5, 0xce, 0xa8, 0xde, 0x67, 0x95, 0xa2, 0x8e, 0xee, 0xfd,
		0xa8, 0x7e, 0x7e, 0xcc, 0x04, 0x85, 0x6f, 0x9a, 0xf9, 0xe5, 0xc5, 0xef, 0xe4, 0x21, 0x04, 0x30,
		0x02, 0x18, 0x01, 0x8c, 0x00, 0x46, 0x00, 0x23, 0x80, 0x11, 0xc0, 0x08, 0x60, 0x04, 0x30, 0x02,
		0x78, 0x59, 0x00, 0x6f, 0x56, 0x8b, 0xda, 0x22, 0xf8, 0x43, 0xe6, 0x0b, 0xe9, 0xe0, 0x52, 0xfa,
		0x17, 0xdd, 0xbb, 0xcb, 0xba, 0xf7, 0xde, 0x4b, 0x6e, 0xbd, 0x7b, 0xe5, 0x76, 0xe2, 0x30, 0x54,
		0x9d, 0x4c, 0x4f, 0x07, 0xaf, 0x36, 0x22, 0xa9, 0x8b, 0x5b, 0x6f, 0x9a, 0x28, 0x63, 0x94, 0x31,
		0xca, 0x18, 0x65, 0xac, 0x31, 0x24, 0xc7, 0x48, 0xe3, 0x12, 0xd2, 0xf8, 0x25, 0xb1, 0x12, 0x18,
		0x01, 0x46, 0x80, 0x11, 0x88, 0x95, 0x40, 0x08, 0xc4, 0x4a, 0x88, 0x95, 0x6c, 0x2b, 0x56, 0x22,
		0x1d, 0x23, 0x29, 0x13, 0x1d, 0xd9, 0x5c, 0x53, 0xbf, 0xb1, 0x8b, 0xf9, 0x33, 0x71, 0x93, 0xd7,
		0xde, 0xd1, 0xc5, 0x86, 0x98, 0x89, 0x68, 0x3b, 0xa7, 0xf9, 0xc1, 0xfd, 0x33, 0x71, 0x9a, 0x1d,
		0x8c, 0xd3, 0x14, 0x09, 0xca, 0x69, 0x04, 0xe7, 0x36, 0x2e, 0xb8, 0xed, 0xf7, 0x53, 0x72, 0x3e,
		0xfe, 0x7c, 0x1d, 0x5d, 0xbd, 0xfd, 0xd1, 0x29, 0xd5, 0x0b, 0x8d, 0xa6, 0x64, 0xfb, 0x23, 0xe9,
		0xb9, 0xfd, 0x86, 0xdb, 0x6f, 0xac, 0x89, 0xd7, 0x22, 0xc7, 0x21, 0xf0, 0x38, 0x3c, 0x2e, 0xcd,
		0xe3, 0xcf, 0xd6, 0x13, 0xaf, 0x1e, 0xe7, 0x02, 0xf5, 0x22, 0x4e, 0xed, 0x7b, 0x23, 0xc2, 0xe6,
		0xb0, 0x39, 0x6c, 0x0e, 0x9b, 0xc3, 0xe6, 0xb0, 0xf9, 0xde, 0x78, 0xe5, 0x45, 0x52, 0xc6, 0xd7,
		0x8e, 0x76, 0xb1, 0x64, 0xa0, 0xba, 0x7b, 0xe9, 0x3f, 0xff, 0xcf, 0x47, 0xe7, 0xc3, 0xc7, 0x9f,
		0xe0, 0x77, 0xf8, 0x1d, 0x7e, 0x87, 0xdf, 0xe1, 0x77, 0xf8, 0x7d, 0xbf, 0xf8, 0x5d, 0x9b, 0xdb,
		0x77, 0x9f, 0xd7, 0xe1, 0x74, 0x38, 0x1d, 0x4e, 0x87, 0xd3, 0xe1, 0x74, 0x38, 0x7d, 0x3f, 0x38,
		0xfd, 0xb9, 0xfe, 0xf5, 0xab, 0x87, 0xf9, 0xf9, 0x06, 0xa5, 0x35, 0x65, 0xf3, 0x5f, 0x7e, 0xfb,
		0x6d, 0x40, 0xe2, 0xd7, 0x11, 0x2c, 0x0e, 0x8b, 0xc3, 0xe2, 0xb0, 0xb8, 0x6d, 0x16, 0x9f, 0xfb,
		0x93, 0x1b, 0xc1, 0xcb, 0x68, 0x96, 0x13, 0x05, 0xcb, 0x5d, 0x3e, 0xb3, 0x98, 0x14, 0x58, 0xe8,
		0xb2, 0x99, 0xd1, 0x36, 0xdd, 0x70, 0xe1, 0xcc, 0xf8, 0x17, 0x2a, 0xb8, 0x74, 0x66, 0x33, 0x1e,
		0x6e, 0xf9, 0xc6, 0x99, 0x8d, 0x78, 0xa6, 0x79, 0xdd, 0x8c, 0x1f, 0xdc, 0xdd, 0xb9, 0xa9, 0x4a,
		0xbe, 0xb8, 0x59, 0xe2, 0xdd, 0xdd, 0x05, 0x1d, 0x57, 0x45, 0xf7, 0x41, 0xa4, 0x54, 0x12, 0x44,
		0xf7, 0xcf, 0xd7, 0xa7, 0x6e, 0x7e, 0x1c, 0xfd, 0xb6, 0x7b, 0xfa, 0xed, 0xd6, 0x8b, 0xfc, 0xaf,
		0x81, 0x9f, 0x3d, 0xb8, 0x9d, 0x38, 0x4a, 0xb3, 0xc4, 0x0b, 0xa2, 0xcc, 0x1d, 0xca, 0xab, 0xe2,
		0x6a, 0x6e, 0x83, 0x0d, 0xca, 0x85, 0x28, 0x17, 0x5a, 0x3b, 0xf2, 0x3f, 0xae, 0x58, 0x37, 0x25,
		0x8a, 0x87, 0x5a, 0xed, 0x02, 0xbf, 0xfb, 0x73, 0xd4, 0xef, 0x16, 0x9f, 0xac, 0x8f, 0xf1, 0x87,
		0x6c, 0x23, 0x12, 0xae, 0x7c, 0xaa, 0xb5, 0x7e, 0x13, 0x78, 0x8f, 0x41, 0xb7, 0xdf, 0x75, 0xbd,
		0x30, 0x8c, 0x3b, 0x43, 0x8e, 0x1e, 0xef, 0x0b, 0xd1, 0xbb, 0x2c, 0x3f, 0xc6, 0x6f, 0x87, 0xb3,
		0x5d, 0xe2, 0x95, 0xcb, 0xbd, 0xed, 0x85, 0xd3, 0xaa, 0xef, 0x4d, 0xd1, 0x8d, 0x4e, 0xe8, 0xa5,
		0x69, 0x81, 0x2b, 0x73, 0xa7, 0xc5, 0x93, 0xe3, 0x07, 0x70, 0xd8, 0xb8, 0x8d, 0x79, 0xe5, 0x62,
		0x2a, 0x7f, 0xfb, 0xf2, 0xe8, 0x31, 0xee, 0x25, 0xe6, 0x5e, 0x62, 0x43, 0x2c, 0x2f, 0xba, 0x50,
		0xe7, 0x17, 0xac, 0x1b, 0xf5, 0xbb, 0xb7, 0x2a, 0x29, 0x3f, 0xfe, 0x73, 0xeb, 0x77, 0x62, 0xa5,
		0xe4, 0x08, 0x16, 0x13, 0x71, 0xc6, 0xcb, 0xda, 0x64, 0x79, 0x0b, 0x2d, 0x73, 0xd3, 0xe5, 0x2e,
		0xb6, 0xec, 0xc5, 0x96, 0xbf, 0xdc, 0x36, 0x28, 0xb7, 0x1d, 0x4a, 0x6e, 0x8b, 0xf2, 0x22, 0x73,
		0xed, 0xcc, 0x17, 0xae, 0x51, 0x5f, 0xb7, 0xce, 0xcf, 0x34, 0x1e, 0x2d, 0x57, 0xc3, 0xae, 0x1f,
		0x0a, 0x5c, 0xfa, 0x60, 0x9d, 0x1a, 0xf7, 0x25, 0x23, 0x9a, 0x35, 0xef, 0x4b, 0x76, 0x4c, 0xcb,
		0xbd, 0x97, 0xe7, 0x54, 0xb7, 0xfc, 0xdb, 0x70, 0x19, 0xce, 0x0f, 0xb1, 0xf7, 0x28, 0x37, 0xc4,
		0x67, 0xfb, 0x3b, 0xc4, 0x2f, 0xaa, 0x79, 0xea, 0xc6, 0xd2, 0x95, 0xee, 0x65, 0xda, 0x28, 0x8c,
		0xd8, 0xb4, 0x97, 0x04, 0x71, 0x12, 0x64, 0x4f, 0xa6, 0xac, 0x9c, 0xdb, 0x81, 0x97, 0xe1, 0xe5,
		0x9a, 0xf2, 0xf2, 0x95, 0x17, 0xf9, 0x5e, 0x16, 0x27, 0x4f, 0xc5, 0xfd, 0x1a, 0x38, 0x1d, 0x4e,
		0x87, 0xd3, 0xe1, 0x74, 0x79, 0x4e, 0x2f, 0x89, 0x3f, 0x1a, 0x87, 0xf9, 0x4b, 0x36, 0xbe, 0x3e,
		0xa8, 0x68, 0x1b, 0x58, 0x30, 0x41, 0xc0, 0x57, 0xaf, 0x5e, 0xf7, 0xa3, 0x7e, 0xaa, 0x7c, 0xe7,
		0x2f, 0xce, 0x9f, 0x87, 0x93, 0xfa, 0xe7, 0x86, 0xc1, 0xfa, 0x37, 0xe4, 0xd1, 0x55, 0x7c, 0x3a,
		0x1c, 0x21, 0xc3, 0x85, 0x2b, 0xc5, 0xaa, 0x2b, 0xd9, 0x75, 0xd5, 0x10, 0x6e, 0x05, 0x7c, 0xe6,
		0x13, 0x9e, 0x0c, 0x67, 0x60, 0x66, 0x81, 0xfc, 0x6f, 0xb9, 0x05, 0x22, 0xb9, 0x48, 0x16, 0x17,
		0x8a, 0x3f, 0xf3, 0xf5, 0x5f, 0x9a, 0x5b, 0x96, 0x5e, 0x33, 0xab, 0xd6, 0xcd, 0xff, 0x16, 0x5b,
		0x37, 0xfa, 0xa8, 0x7a, 0x98, 0x3e, 0x56, 0xa6, 0xa3, 0x1d, 0x17, 0xfc, 0xab, 0xa1, 0x0d, 0x7c,
		0x2b, 0x7c, 0x2b, 0x7c, 0x2b, 0x7c, 0x2b, 0x7c, 0xab, 0x9d, 0xf2, 0xad, 0x5a, 0xf8, 0x56, 0xf8,
		0x56, 0xf8, 0x56, 0xf8, 0x56, 0xf8, 0x56, 0xf8, 0x56, 0xf8, 0x56, 0x42, 0xbe, 0xd5, 0x68, 0xaf,
		0xea, 0xfb, 0x55, 0xe3, 0xe7, 0xf1, 0xa9, 0xf0, 0xa9, 0xf6, 0x36, 0x8f, 0xe4, 0x36, 0x8e, 0x43,
		0xe5, 0x45, 0x06, 0x8e, 0x51, 0xab, 0x65, 0x6b, 0xab, 0x8b, 0x66, 0xa4, 0xfd, 0x97, 0x7a, 0xd2,
		0xcc, 0x10, 0x6b, 0xbc, 0x0b, 0xd2, 0xec, 0x32, 0xcb, 0x4a, 0x66, 0xb4, 0x5d, 0x05, 0xd1, 0xcf,
		0xa1, 0x1a, 0x2c, 0xa2, 0x92, 0x82, 0x7c, 0xe0, 0x5a, 0xcc, 0x3c, 0xd9, 0x7a, 0xd3, 0x6e, 0x9f,
		0x9e, 0xb5, 0xdb, 0xcd, 0xb3, 0xe3, 0xb3, 0xe6, 0xf9, 0xc9, 0x49, 0xeb, 0xb4, 0x75, 0x52, 0xc2,
		0xd8, 0xaf, 0x89, 0xaf, 0x12, 0xe5, 0xff, 0x38, 0xf8, 0xf6, 0x51, 0x3f, 0x0c, 0x45, 0x07, 0xb5,
		0x60, 0x97, 0xf7, 0xa5, 0xe7, 0x36, 0x15, 0x73, 0xcd, 0x6c, 0xb7, 0x49, 0xbb, 0xf7, 0xd7, 0x1b,
		0x0b, 0x76, 0x5e, 0x8f, 0x13, 0xa1, 0x5f, 0x97, 0xc9, 0x5e, 0x75, 0x36, 0x57, 0x84, 0x8d, 0xba,
		0xc2, 0x0f, 0xcb, 0xc1, 0x86, 0x3f, 0x7d, 0xfe, 0x29, 0xb8, 0xbb, 0xfb, 0xa0, 0x92, 0x2f, 0x1f,
		0x47, 0x9f, 0xff, 0xf3, 0xf4, 0xe3, 0x3f, 0xff, 0x75, 0xf4, 0xf1, 0xa3, 0x7f, 0x37, 0xaa, 0xc9,
		0x30, 0x7f, 0xae, 0x1c, 0xa7, 0xdc, 0xbc, 0xd8, 0x99, 0x8f, 0x22, 0x99, 0xde, 0xa2, 0x33, 0xd0,
		0xb0, 0x90, 0x95, 0xdf, 0x8d, 0x7d, 0xe5, 0x06, 0x2a, 0xbb, 0x2b, 0x51, 0x15, 0x9e, 0x3f, 0x42,
		0xd9, 0x10, 0x65, 0x43, 0x6b, 0x47, 0xfe, 0xad, 0xca, 0xee, 0x86, 0x85, 0x29, 0xbb, 0x58, 0x2b,
		0x74, 0x3c, 0xae, 0x97, 0x8e, 0x7c, 0x2f, 0xf1, 0xb7, 0x5e, 0x06, 0x94, 0xbf, 0xc8, 0x85, 0x73,
		0xbc, 0xed, 0x0a, 0x9f, 0xca, 0x6f, 0x49, 0x29, 0x8d, 0xcf, 0x7a, 0x17, 0xa7, 0x94, 0xc0, 0x63,
		0x93, 0x7b, 0x66, 0x55, 0xe4, 0xdd, 0x86, 0x4a, 0xaf, 0xac, 0x77, 0xc3, 0xb3, 0x9b, 0x6b, 0x7a,
		0x9b, 0xd4, 0xf4, 0x4a, 0x20, 0x69, 0xb9, 0xb5, 0xff, 0x2c, 0x62, 0x4e, 0xe7, 0xb5, 0xdb, 0xdb,
		0x98, 0x36, 0x9a, 0xa3, 0xe3, 0xb1, 0xc1, 0xc2, 0xbb, 0x0f, 0xe3, 0x5b, 0x2f, 0x74, 0xbd, 0x2c,
		0x4b, 0x82, 0xdb, 0x7e, 0xb6, 0xa1, 0x10, 0x2f, 0x7f, 0xaf, 0xe5, 0x47, 0x28, 0x1d, 0xdf, 0xbd,
		0xd2, 0x71, 0xcf, 0xff, 0xa2, 0x92, 0x2c, 0x48, 0x95, 0xab, 0x1e, 0x7b, 0x61, 0xd0, 0x09, 0x32,
		0x77, 0xe0, 0x27, 0x95, 0x28, 0xc4, 0x5c, 0x6b, 0x01, 0xfd, 0x87, 0xfe, 0xd3, 0x46, 0xb5, 0x82,
		0xe8, 0x66, 0xe6, 0xde, 0x0c, 0x98, 0x32, 0x0a, 0xb2, 0x27, 0xb7, 0xeb, 0xf5, 0x7a, 0x41, 0x74,
		0x5f, 0x66, 0xd5, 0x2f, 0x3d, 0x4a, 0x21, 0x32, 0x85, 0xc8, 0xcf, 0x2d, 0xb0, 0xf2, 0x35, 0xc9,
		0x4b, 0x16, 0x28, 0x4f, 0xa6, 0x3c, 0xd9, 0xd0, 0xc7, 0x2c, 0x5d, 0x9e, 0x9c, 0x2f, 0xc2, 0xb1,
		0x6b, 0xa4, 0x79, 0xa2, 0x34, 0x6f, 0x86, 0x83, 0x25, 0x0e, 0x96, 0xf6, 0xf6, 0x60, 0x69, 0x14,
		0xa3, 0x08, 0xe2, 0xd4, 0x7d, 0x4c, 0xdc, 0x34, 0x4b, 0x8a, 0x23, 0xf7, 0x4a, 0x14, 0x7f, 0xa3,
		0xf1, 0xec, 0x3b, 0x15, 0xdd, 0x0f, 0x23, 0x26, 0xbb, 0x9d, 0x7f, 0xd7, 0x22, 0xff, 0x6e, 0xd5,
		0x10, 0x4b, 0xe6, 0xdf, 0x1d, 0x1f, 0x91, 0x80, 0x67, 0xf8, 0xd4, 0x8d, 0xc6, 0x06, 0x7d, 0xef,
		0x65, 0x99, 0x4a, 0xf4, 0xb3, 0xe2, 0x1a, 0x9f, 0xae, 0xaf, 0xbf, 0x5e, 0x5f, 0xbb, 0xd7, 0xd7,
		0xaf, 0x2e, 0x5e, 0x7e, 0xfe, 0xcf, 0x7f, 0xf9, 0xd3, 0xbf, 0x5e, 0x5f, 0xff, 0xf0, 0x97, 0xeb,
		0xeb, 0x7f, 0xfe, 0xfb, 0xcd, 0x0f, 0x8d, 0x9d, 0x4c, 0x59, 0xf9, 0x32, 0x5e, 0x90, 0x9a, 0xfa,
		0x62, 0xf4, 0x38, 0xba, 0x02, 0x5d, 0xb1, 0xb7, 0xba, 0xe2, 0x6f, 0xea, 0xd1, 0x0d, 0xa2, 0x4c,
		0xdd, 0x97, 0xee, 0xf0, 0x63, 0xac, 0x27, 0xcc, 0xe1, 0xaa, 0xe9, 0x9e, 0x7b, 0xee, 0xdd, 0xa5,
		0xfb, 0xcb, 0xcd, 0x1f, 0xad, 0x97, 0x6f, 0xbe, 0xed, 0x30, 0x46, 0x19, 0x96, 0x2c, 0xcd, 0xd8,
		0x00, 0xad, 0x40, 0xab, 0xbd, 0x45, 0xab, 0xab, 0xf1, 0x97, 0xcb, 0x1d, 0x7f, 0x1d, 0x86, 0x76,
		0x4a, 0x66, 0x00, 0x2c, 0x3d, 0x5b, 0x2a, 0x23, 0x60, 0x79, 0x14, 0x74, 0x32, 0x04, 0x96, 0xac,
		0x0c, 0xbb, 0x8b, 0x3e, 0xa8, 0x47, 0xed, 0x11, 0xc8, 0x2d, 0x1d, 0x0d, 0xf3, 0x16, 0x83, 0xcc,
		0xed, 0xc5, 0x69, 0x30, 0x3c, 0x3b, 0x7f, 0x51, 0xa1, 0xf3, 0xa1, 0x91, 0x9f, 0xb0, 0x64, 0x62,
		0xee, 0xe5, 0x2f, 0x1c, 0x03, 0xe7, 0x63, 0x66, 0x44, 0x8b, 0x76, 0x37, 0x35, 0x97, 0xfa, 0xdf,
		0x76, 0x29, 0xe1, 0x53, 0x27, 0xe4, 0x46, 0xc6, 0xe7, 0x7a, 0xe4, 0xae, 0x28, 0xe3, 0x73, 0xe9,
		0x6c, 0xfd, 0xf5, 0xd2, 0x79, 0xd3, 0x6b, 0xcd, 0x93, 0x01, 0xa7, 0x64, 0xa2, 0xcb, 0xff, 0x1a,
		0xbe, 0xca, 0x65, 0xfe, 0x26, 0x9f, 0x2f, 0xc7, 0x9f, 0x7b, 0x35, 0x7e, 0x91, 0xc5, 0x3f, 0x38,
		0x8c, 0x1c, 0xd0, 0x02, 0x33, 0x24, 0x9c, 0x01, 0xfa, 0xec, 0x44, 0xd8, 0x48, 0x00, 0xcd, 0xbf,
		0x9f, 0x9b, 0xaa, 0xac, 0xc4, 0xe9, 0xe8, 0xdc, 0x63, 0x9c, 0x8c, 0x72, 0x32, 0xba, 0xb4, 0xb0,
		0xfa, 0x59, 0xec, 0xde, 0x7a, 0x9d, 0xdf, 0xfb, 0xbd, 0x22, 0x59, 0x47, 0xeb, 0x57, 0xda, 0x6a,
		0x3b, 0x9c, 0x92, 0x72, 0x4a, 0x6a, 0xc8, 0xf5, 0xe5, 0x4f, 0x49, 0x57, 0x2d, 0x45, 0x83, 0xd3,
		0xd2, 0x95, 0xe6, 0xf4, 0xe2, 0x05, 0x2d, 0xe2, 0x05, 0xc4, 0x0b, 0x6c, 0xc7, 0x0b, 0xca, 0x6e,
		0x98, 0xe9, 0xc6, 0x99, 0x2a, 0xa7, 0xf4, 0x77, 0xfd, 0x89, 0x5b, 0x91, 0x32, 0x93, 0xfe, 0xae,
		0x3b, 0x79, 0x7a, 0x1b, 0xc7, 0x78, 0x03, 0x49, 0x6c, 0x24, 0xe1, 0x0d, 0x25, 0xb5, 0xb1, 0xc4,
		0x37, 0x98, 0xf8, 0x46, 0x93, 0xdf, 0x70, 0xfa, 0x51, 0x06, 0x93, 0x18, 0x8d, 0xee, 0x46, 0x5c,
		0xda, 0x90, 0x72, 0xdd, 0x15, 0x72, 0x8b, 0x86, 0x33, 0xa3, 0x17, 0xff, 0x16, 0xdf, 0x9e, 0x92,
		0xdb, 0xd4, 0xd2, 0x76, 0x95, 0xde, 0xb6, 0xd6, 0xb6, 0xaf, 0xb5, 0x6d, 0x6c, 0x6f, 0x3b, 0x9b,
		0x6d, 0x6b, 0xc3, 0xed, 0x3d, 0x13, 0x36, 0xd3, 0x6e, 0x29, 0xb6, 0x1c, 0xd6, 0xd5, 0x8d, 0xf5,
		0xaf, 0x5d, 0xc5, 0x66, 0x27, 0x95, 0x6b, 0xf9, 0xf8, 0x8d, 0x80, 0x2d, 0xd3, 0x93, 0xcc, 0x25,
		0x83, 0xe6, 0x27, 0x9b, 0x8b, 0xff, 0xdc, 0x6c, 0xab, 0x41, 0x8a, 0x81, 0x3e, 0x30, 0x52, 0x6f,
		0xcb, 0x28, 0xa8, 0x2f, 0xde, 0x60, 0x0b, 0xd8, 0x02, 0xb6, 0x80, 0x2d, 0x60, 0x0b, 0xdb, 0x6c,
		0x51, 0xa9, 0x5b, 0x23, 0xd0, 0x86, 0x30, 0xb7, 0xd5, 0x4b, 0x54, 0xaa, 0xa2, 0x8e, 0x32, 0x9e,
		0x55, 0xc1, 0x3d, 0xf0, 0x36, 0xf2, 0x83, 0x8e, 0x97, 0xa9, 0xd4, 0xf1, 0x9c, 0xb9, 0x18, 0x86,
		0x13, 0xc5, 0xbe, 0x72, 0x82, 0xd4, 0xe9, 0x0c, 0x89, 0xa8, 0x9f, 0x28, 0xff, 0x55, 0xfd, 0xb1,
		0x7e, 0x34, 0xbe, 0xbb, 0x84, 0xf6, 0xe5, 0x26, 0x60, 0xdb, 0x7c, 0xf0, 0xa2, 0x5a, 0xb4, 0xd0,
		0xdd, 0xb5, 0x9a, 0x47, 0xe6, 0x4b, 0x76, 0x04, 0x0e, 0x68, 0x67, 0x0f, 0x25, 0x5f, 0xaf, 0x3e,
		0x38, 0x5a, 0xfd, 0xc7, 0xaf, 0x25, 0x42, 0x8a, 0x8e, 0xf1, 0x79, 0xef, 0xe4, 0xc7, 0x0f, 0x2a,
		0xfb, 0x7c, 0xd9, 0xcf, 0xe2, 0x1f, 0x87, 0xaf, 0x39, 0xfb, 0x1b, 0xcb, 0x7f, 0x38, 0x73, 0x4a,
		0x9c, 0xfe, 0xde, 0xa8, 0x2a, 0x45, 0x46, 0x23, 0x6c, 0x3f, 0x37, 0x3b, 0x7a, 0x85, 0x66, 0xcb,
		0x51, 0xa7, 0x65, 0x9b, 0x66, 0xe1, 0xe0, 0x26, 0xe1, 0x60, 0x69, 0xf6, 0x20, 0x1c, 0x6c, 0x1b,
		0x81, 0x8d, 0xd5, 0x7a, 0xbe, 0x72, 0x2e, 0x97, 0xf6, 0x93, 0x1b, 0x8e, 0xaa, 0xcc, 0x0c, 0xd6,
		0x91, 0x80, 0x56, 0x37, 0xad, 0x75, 0x13, 0x14, 0x73, 0x12, 0xb5, 0x6f, 0xb9, 0x31, 0xa1, 0x1a,
		0xb8, 0xdc, 0x9e, 0x74, 0x9d, 0xd6, 0x74, 0x81, 0x48, 0xd5, 0x6b, 0x09, 0x79, 0xbb, 0x8e, 0x54,
		0x8d, 0xdc, 0xd2, 0x54, 0x9c, 0xb6, 0x0f, 0x6f, 0x2e, 0x76, 0x4b, 0xa7, 0x56, 0xa3, 0x56, 0x66,
		0x64, 0x62, 0x18, 0xdf, 0xdf, 0x9b, 0x24, 0x88, 0xaf, 0xcc, 0xf8, 0x98, 0x18, 0xe5, 0xf8, 0x1a,
		0xbd, 0x72, 0x60, 0x7a, 0xc5, 0xf8, 0xf8, 0xfa, 0xd6, 0x8b, 0xfc, 0xaf, 0x81, 0x9f, 0x3d, 0xb8,
		0x9d, 0x07, 0x2f, 0xba, 0x57, 0x6e, 0x57, 0xa5, 0xa9, 0x77, 0xaf, 0xe4, 0x0e, 0x27, 0xd6, 0x7e,
		0x02, 0x07, 0x16, 0x15, 0x6d, 0xe7, 0x8a, 0x82, 0x58, 0x1c, 0x58, 0x6c, 0x4b, 0xc2, 0x59, 0x38,
		0x64, 0x28, 0xda, 0x73, 0xac, 0x30, 0xbb, 0x1e, 0xef, 0xe0, 0x29, 0x6d, 0xa2, 0xe2, 0x5e, 0x16,
		0x74, 0x83, 0x7f, 0x28, 0xd7, 0xcb, 0xb2, 0xc1, 0x90, 0xa4, 0xf2, 0xf8, 0xb8, 0xe9, 0x43, 0x80,
		0x48, 0x20, 0x12, 0x88, 0x04, 0x22, 0x77, 0x01, 0x22, 0x7d, 0x9b, 0xd0, 0xe8, 0x03, 0x89, 0x40,
		0x22, 0x90, 0x08, 0x24, 0xee, 0x00, 0x24, 0xa6, 0x99, 0x97, 0x59, 0xf0, 0xa3, 0xe7, 0xcd, 0x02,
		0x83, 0xc0, 0x20, 0x30, 0x08, 0x0c, 0x5a, 0x86, 0x41, 0xd2, 0x5f, 0x4a, 0xa7, 0xbf, 0x88, 0x1d,
		0x4c, 0x38, 0x5b, 0x4a, 0x82, 0xc9, 0xff, 0xec, 0xdd, 0xf8, 0xf5, 0x6b, 0x7c, 0xb6, 0x14, 0xa9,
		0xaf, 0x6e, 0x9a, 0x3d, 0x85, 0x33, 0x7d, 0x93, 0xf2, 0x1f, 0xb2, 0xa7, 0x5e, 0x89, 0x2a, 0xf9,
		0xb5, 0x9b, 0xf9, 0xf9, 0x8f, 0xe0, 0xdc, 0x89, 0x73, 0xa7, 0xad, 0x73, 0xe9, 0x8e, 0x9d, 0x3b,
		0x3d, 0xb7, 0xab, 0xe4, 0x74, 0xf3, 0xb3, 0x9f, 0x24, 0x23, 0xa5, 0x5b, 0x48, 0x69, 0xa4, 0xf4,
		0xa1, 0x4b, 0x69, 0x53, 0x58, 0xc8, 0x0d, 0xc9, 0x62, 0xc1, 0xd2, 0x7a, 0x96, 0x04, 0x00, 0x61,
		0x9f, 0x5a, 0x1c, 0x10, 0x6c, 0x00, 0x83, 0x65, 0x80, 0xb0, 0x05, 0x14, 0xd6, 0x01, 0xc3, 0x3a,
		0x70, 0xd8, 0x07, 0x10, 0x19, 0x20, 0x11, 0x02, 0x14, 0x79, 0x1f, 0x7d, 0x69, 0xe5, 0x4e, 0xfa,
		0xae, 0x66, 0xfd, 0x28, 0x52, 0xa1, 0x2b, 0xd4, 0x7c, 0x61, 0xa5, 0x42, 0x68, 0x0b, 0xda, 0x34,
		0x6a, 0xd4, 0xba, 0x7e, 0x98, 0x25, 0x1a, 0xb8, 0xae, 0xb5, 0x3e, 0x6c, 0xec, 0x1a, 0x44, 0x9d,
		0xb0, 0xef, 0x2b, 0xe1, 0x0d, 0xe7, 0xe4, 0xed, 0x5e, 0xc7, 0xf6, 0x87, 0x17, 0x89, 0x74, 0x32,
		0x1b, 0x1f, 0x33, 0xbc, 0xd1, 0x56, 0x3d, 0x5a, 0xfb, 0x1a, 0xed, 0x19, 0xfb, 0xae, 0x17, 0x86,
		0x36, 0x3e, 0xe3, 0x64, 0x38, 0x54, 0xf7, 0x51, 0x9c, 0xa8, 0x86, 0xa8, 0xf5, 0x6f, 0x2f, 0xa5,
		0x57, 0xa4, 0x69, 0x0f, 0xdd, 0xb5, 0xa6, 0x27, 0x53, 0x78, 0xe1, 0x1c, 0xbf, 0xb4, 0x66, 0x7d,
		0x38, 0x81, 0x17, 0x4e, 0xdb, 0xc2, 0x27, 0x8c, 0xa7, 0xef, 0xc2, 0x39, 0xb1, 0x61, 0x3c, 0x9a,
		0x0c, 0x4e, 0xcb, 0x9e, 0xf5, 0xc9, 0x26, 0xbd, 0x70, 0x8e, 0x64, 0x17, 0x61, 0xdd, 0x58, 0x70,
		0xc7, 0x65, 0xfd, 0x62, 0x83, 0x64, 0x09, 0xb7, 0x59, 0xab, 0x71, 0xf2, 0x5a, 0x6b, 0xda, 0x0d,
		0x95, 0xd7, 0x5b, 0x14, 0x6c, 0xb4, 0xbc, 0xf6, 0x43, 0xb4, 0x1a, 0x30, 0xdb, 0x9a, 0x65, 0xa1,
		0xf0, 0x7b, 0x6e, 0x6f, 0xab, 0x61, 0xf8, 0x67, 0xa3, 0xb6, 0xaf, 0x2d, 0xc7, 0x85, 0x9c, 0xed,
		0x44, 0xef, 0xff, 0xae, 0xbe, 0x7e, 0x18, 0x7c, 0xa9, 0x49, 0x29, 0xeb, 0xe4, 0xdf, 0x03, 0x01,
		0x9d, 0x6e, 0xfc, 0xdb, 0xc6, 0x0e, 0x1e, 0xb5, 0x3f, 0x37, 0x87, 0xf9, 0x7f, 0xb5, 0xaa, 0x8b,
		0x27, 0xce, 0x7c, 0x26, 0x91, 0x45, 0x22, 0x8b, 0x44, 0x16, 0x89, 0x2c, 0x12, 0x59, 0x24, 0xb2,
		0x48, 0x64, 0x91, 0xc8, 0x22, 0x91, 0x45, 0x22, 0x8b, 0x44, 0x16, 0x89, 0x2c, 0x12, 0x59, 0x24,
		0xb2, 0x58, 0x9b, 0xc8, 0xe2, 0x4b, 0x39, 0x4d, 0xdd, 0xb2, 0xa7, 0xa7, 0x5b, 0x68, 0x69, 0xb4,
		0x34, 0x5a, 0xfa, 0x50, 0xb5, 0xf4, 0x28, 0x78, 0x1c, 0xc4, 0xa9, 0xfb, 0x98, 0x0c, 0xb1, 0x3d,
		0xba, 0xb7, 0xa1, 0xa3, 0xdf, 0x08, 0xda, 0x94, 0xee, 0x85, 0x9b, 0x1b, 0x16, 0xbd, 0xca, 0x7e,
		0xdd, 0x3f, 0x37, 0x1c, 0x7c, 0xad, 0x39, 0xf8, 0x72, 0xc4, 0xe2, 0xbb, 0x1c, 0x81, 0x71, 0x04,
		0x56, 0xeb, 0x23, 0x30, 0x57, 0x52, 0x7d, 0xed, 0xd4, 0x61, 0xd8, 0x65, 0xfe, 0xc5, 0xf7, 0xfa,
		0x54, 0x2c, 0xff, 0xe9, 0x68, 0x1b, 0xe7, 0x63, 0x33, 0x9f, 0xce, 0x49, 0x59, 0xc5, 0xe2, 0x9d,
		0x93, 0x32, 0x4e, 0xca, 0x0a, 0x7a, 0xf5, 0x9c, 0x94, 0xe1, 0xdd, 0xe3, 0xdd, 0xe3, 0xdd, 0x73,
		0x52, 0xb6, 0x60, 0x93, 0x93, 0xb2, 0x65, 0xfb, 0x9c, 0x94, 0x15, 0xfe, 0x0c, 0x4e, 0xca, 0x38,
		0x29, 0xdb, 0x6c, 0x9c, 0x93, 0x32, 0x87, 0x93, 0xb2, 0xb2, 0x7a, 0x9a, 0x93, 0x32, 0xb4, 0x34,
		0x5a, 0xfa, 0x60, 0xb5, 0x34, 0x27, 0x65, 0x53, 0xc3, 0x87, 0x75, 0x52, 0x26, 0x48, 0x4f, 0x47,
		0xf6, 0xe8, 0xe9, 0x08, 0x7a, 0x82, 0x9e, 0xa0, 0x27, 0xe8, 0x09, 0x7a, 0x22, 0x91, 0xa3, 0xaa,
		0x85, 0xfd, 0x4c, 0x22, 0x87, 0x23, 0x76, 0x10, 0x49, 0x4a, 0x07, 0x29, 0x1d, 0x3b, 0x92, 0xd2,
		0xe1, 0x4a, 0x2a, 0xb2, 0xdd, 0x4c, 0xee, 0xb8, 0xcc, 0x47, 0xe0, 0x40, 0xb2, 0x3c, 0xf2, 0x9f,
		0x8e, 0xb7, 0x9b, 0xef, 0x31, 0xf3, 0x1e, 0x64, 0x7e, 0x54, 0xac, 0xf6, 0xc9, 0xfc, 0x20, 0xf3,
		0xa3, 0x60, 0x18, 0x80, 0xcc, 0x0f, 0xc2, 0x01, 0x84, 0x03, 0x08, 0x07, 0x90, 0xf9, 0xb1, 0x60,
		0x93, 0xcc, 0x8f, 0x65, 0xfb, 0x64, 0x7e, 0x14, 0xfe, 0x0c, 0x32, 0x3f, 0xc8, 0xfc, 0xd8, 0x6c,
		0x9c, 0xcc, 0x0f, 0x87, 0xcc, 0x8f, 0xb2, 0x7a, 0x9a, 0xcc, 0x0f, 0xb4, 0x34, 0x5a, 0xfa, 0x60,
		0xb5, 0x34, 0x47, 0x6b, 0x53, 0xc3, 0x64, 0x7e, 0x68, 0xd2, 0x13, 0x99, 0x1f, 0xd0, 0x13, 0xf4,
		0x04, 0x3d, 0x41, 0x4f, 0xd0, 0x53, 0x0d, 0xe9, 0xe9, 0xd8, 0x1e, 0x3d, 0x1d, 0x43, 0x4f, 0xd0,
		0x13, 0xf4, 0x04, 0x3d, 0x41, 0x4f, 0x24, 0x26, 0x56, 0xb5, 0xb0, 0x0b, 0x27, 0x26, 0x3a, 0x62,
		0x19, 0x33, 0xa4, 0x28, 0x92, 0xa2, 0xb8, 0x73, 0x29, 0x8a, 0xae, 0xa4, 0x4a, 0xdb, 0xf1, 0x64,
		0xc5, 0xcb, 0x7c, 0x28, 0x0e, 0x2e, 0x6b, 0x31, 0xff, 0xa9, 0x5d, 0x97, 0xfc, 0xc5, 0x99, 0x37,
		0x22, 0x93, 0xb1, 0x62, 0xf7, 0x80, 0x4c, 0x46, 0x32, 0x19, 0x0b, 0xc6, 0x0d, 0xc8, 0x64, 0x24,
		0x7e, 0x40, 0xfc, 0x80, 0xf8, 0x01, 0x99, 0x8c, 0x0b, 0x36, 0xc9, 0x64, 0x5c, 0xb6, 0x4f, 0x26,
		0x63, 0xe1, 0xcf, 0x20, 0x93, 0x91, 0x4c, 0xc6, 0xcd, 0xc6, 0xc9, 0x64, 0x74, 0xc8, 0x64, 0x2c,
		0xab, 0xa7, 0xc9, 0x64, 0x44, 0x4b, 0xa3, 0xa5, 0x0f, 0x56, 0x4b, 0x73, 0x16, 0x37, 0x35, 0x4c,
		0xaa, 0x88, 0x26, 0x3d, 0x91, 0xc9, 0x08, 0x3d, 0x41, 0x4f, 0xd0, 0x13, 0xf4, 0x04, 0x3d, 0xd5,
		0x90, 0x9e, 0xc8, 0x64, 0x84, 0x9e, 0xa0, 0x27, 0xe8, 0x09, 0x7a, 0x82, 0x9e, 0x6a, 0x48, 0x4f,
		0x6d, 0x7b, 0xf4, 0xd4, 0x86, 0x9e, 0xa0, 0x27, 0xe8, 0x09, 0x7a, 0x82, 0x9e, 0x48, 0xb4, 0xaf,
		0x6a, 0x61, 0x6b, 0x24, 0xda, 0x3b, 0x62, 0xa9, 0x9d, 0xa4, 0xdc, 0x93, 0x72, 0xbf, 0xc3, 0x29,
		0xf7, 0xae, 0xa4, 0x72, 0xdb, 0x97, 0xe4, 0xfb, 0xcb, 0x7c, 0x4c, 0x0e, 0x38, 0x0b, 0x3f, 0xff,
		0xe9, 0xa4, 0x7e, 0xf9, 0xf8, 0x33, 0xef, 0x46, 0x66, 0x7e, 0xc5, 0xfe, 0x04, 0x99, 0xf9, 0x64,
		0xe6, 0x17, 0x0c, 0x34, 0x90, 0x99, 0x4f, 0xc0, 0x81, 0x80, 0x03, 0x01, 0x07, 0x32, 0xf3, 0x17,
		0x6c, 0x92, 0x99, 0xbf, 0x6c, 0x9f, 0xcc, 0xfc, 0xc2, 0x9f, 0x41, 0x66, 0x3e, 0x99, 0xf9, 0x9b,
		0x8d, 0x93, 0x99, 0xef, 0x90, 0x99, 0x5f, 0x56, 0x4f, 0x93, 0x99, 0x8f, 0x96, 0x46, 0x4b, 0x1f,
		0xac, 0x96, 0xe6, 0xf0, 0x6e, 0x6a, 0x98, 0xdc, 0x12, 0x4d, 0x7a, 0x22, 0x33, 0x1f, 0x7a, 0x82,
		0x9e, 0xa0, 0x27, 0xe8, 0x09, 0x7a, 0xaa, 0x21, 0x3d, 0x91, 0x99, 0x0f, 0x3d, 0x41, 0x4f, 0xd0,
		0x13, 0xf4, 0x04, 0x3d, 0xd5, 0x90, 0x9e, 0xc8, 0xcc, 0x87, 0x9e, 0xa0, 0x27, 0xe8, 0x09, 0x7a,
		0x82, 0x9e, 0x6a, 0x48, 0x4f, 0x27, 0xf6, 0xe8, 0xe9, 0x04, 0x7a, 0x82, 0x9e, 0xa0, 0x27, 0xe8,
		0x09, 0x7a, 0xa2, 0x70, 0xac, 0xaa, 0x85, 0x6d, 0x54, 0x38, 0xe6, 0x88, 0xd5, 0x20, 0x50, 0x42,
		0x46, 0x09, 0xd9, 0x5e, 0x94, 0x90, 0xb9, 0x92, 0x6a, 0x6e, 0xef, 0x8a, 0xc9, 0x2e, 0xf3, 0xc1,
		0xa1, 0xaa, 0x2c, 0x7b, 0x3a, 0xc9, 0x7f, 0x3a, 0xad, 0x73, 0x7d, 0xd9, 0xcc, 0x5b, 0x52, 0x69,
		0x56, 0xb1, 0x03, 0x42, 0xa5, 0x19, 0x95, 0x66, 0x05, 0x23, 0x13, 0x54, 0x9a, 0x11, 0xa1, 0x20,
		0x42, 0x41, 0x84, 0x82, 0x4a, 0xb3, 0x05, 0x9b, 0x54, 0x9a, 0x2d, 0xdb, 0xa7, 0xd2, 0xac, 0xf0,
		0x67, 0x50, 0x69, 0x46, 0xa5, 0xd9, 0x66, 0xe3, 0x54, 0x9a, 0x39, 0x54, 0x9a, 0x95, 0xd5, 0xd3,
		0x54, 0x9a, 0xa1, 0xa5, 0xd1, 0xd2, 0x07, 0xab, 0xa5, 0x39, 0xed, 0x9b, 0x1a, 0x26, 0x19, 0x45,
		0x93, 0x9e, 0xa8, 0x34, 0x83, 0x9e, 0xa0, 0x27, 0xe8, 0x09, 0x7a, 0x82, 0x9e, 0x6a, 0x48, 0x4f,
		0x54, 0x9a, 0x41, 0x4f, 0xd0, 0x13, 0xf4, 0x04, 0x3d, 0x41, 0x4f, 0x35, 0xa4, 0x27, 0x2a, 0xcd,
		0xa0, 0x27, 0xe8, 0x09, 0x7a, 0x82, 0x9e, 0xa0, 0xa7, 0x1a, 0xd2, 0x13, 0x95, 0x66, 0xd0, 0x13,
		0xf4, 0x04, 0x3d, 0x41, 0x4f, 0xd0, 0x53, 0x0d, 0xe9, 0xe9, 0xd4, 0x1e, 0x3d, 0x9d, 0x42, 0x4f,
		0xd0, 0x13, 0xf4, 0x04, 0x3d, 0x41, 0x4f, 0x14, 0x42, 0x57, 0xb5, 0xb0, 0x85, 0x0a, 0xa1, 0x1d,
		0xb1, 0x62, 0x39, 0x4a, 0xa2, 0x29, 0x89, 0xde, 0xb3, 0x92, 0x68, 0x57, 0x52, 0xe1, 0xed, 0x6f,
		0x71, 0xf4, 0x65, 0x3e, 0x4a, 0x54, 0x49, 0xcf, 0xad, 0x9a, 0xfc, 0xa7, 0xb3, 0xdd, 0xa8, 0x97,
		0x9e, 0x79, 0x5f, 0x2a, 0xa7, 0x2b, 0xf6, 0x58, 0xa8, 0x9c, 0xa6, 0x72, 0xba, 0x60, 0x28, 0x83,
		0xca, 0x69, 0x42, 0x1a, 0x84, 0x34, 0x08, 0x69, 0x50, 0x39, 0xbd, 0x60, 0x93, 0xca, 0xe9, 0x65,
		0xfb, 0x54, 0x4e, 0x17, 0xfe, 0x0c, 0x2a, 0xa7, 0xa9, 0x9c, 0xde, 0x6c, 0x9c, 0xca, 0x69, 0x87,
		0xca, 0xe9, 0xb2, 0x7a, 0x9a, 0xca, 0x69, 0xb4, 0x34, 0x5a, 0xfa, 0x60, 0xb5, 0x34, 0xc7, 0x83,
		0x53, 0xc3, 0x64, 0xaf, 0x68, 0xd2, 0x13, 0x95, 0xd3, 0xd0, 0x13, 0xf4, 0x04, 0x3d, 0x41, 0x4f,
		0xd0, 0x53, 0x0d, 0xe9, 0x89, 0xca, 0x69, 0xe8, 0x09, 0x7a, 0x82, 0x9e, 0xa0, 0x27, 0xe8, 0xa9,
		0x86, 0xf4, 0x44, 0xe5, 0x34, 0xf4, 0x04, 0x3d, 0x41, 0x4f, 0xd0, 0x13, 0xf4, 0x54, 0x43, 0x7a,
		0xa2, 0x72, 0x1a, 0x7a, 0x82, 0x9e, 0xa0, 0x27, 0xe8, 0x09, 0x7a, 0xaa, 0x21, 0x3d, 0x51, 0x39,
		0x0d, 0x3d, 0x41, 0x4f, 0xd0, 0x13, 0xf4, 0x04, 0x3d, 0xd5, 0x90, 0x9e, 0xce, 0xec, 0xd1, 0xd3,
		0x19, 0xf4, 0x04, 0x3d, 0x41, 0x4f, 0xd0, 0x13, 0xf4, 0x44, 0x63, 0x8f, 0xaa, 0x16, 0xb6, 0x78,
		0x63, 0x0f, 0x47, 0xac, 0xaa, 0x9b, 0x16, 0x1f, 0xb4, 0xf8, 0xd8, 0xdb, 0x16, 0x1f, 0xae, 0xa4,
		0xea, 0x3b, 0x80, 0x66, 0x1f, 0x97, 0xf9, 0x70, 0xd1, 0xf5, 0x63, 0xcd, 0x42, 0xca, 0x7f, 0x7a,
		0xb3, 0x6b, 0xfd, 0x3f, 0x66, 0xde, 0x9c, 0x4e, 0x20, 0x15, 0xbb, 0x38, 0x74, 0x02, 0xa1, 0x13,
		0x48, 0xc1, 0xd8, 0x07, 0x9d, 0x40, 0x88, 0x81, 0x10, 0x03, 0x21, 0x06, 0x42, 0x27, 0x90, 0x05,
		0x9b, 0x74, 0x02, 0x59, 0xb6, 0x4f, 0x27, 0x90, 0xc2, 0x9f, 0x41, 0x27, 0x10, 0x3a, 0x81, 0x6c,
		0x36, 0x4e, 0x27, 0x10, 0x87, 0x4e, 0x20, 0x65, 0xf5, 0x34, 0x9d, 0x40, 0xd0, 0xd2, 0x68, 0xe9,
		0x83, 0xd5, 0xd2, 0x9c, 0x27, 0x4e, 0x0d, 0x93, 0xee, 0xa2, 0x49, 0x4f, 0x74, 0x02, 0x81, 0x9e,
		0xa0, 0x27, 0xe8, 0x09, 0x7a, 0x82, 0x9e, 0x6a, 0x48, 0x4f, 0x74, 0x02, 0x81, 0x9e, 0xa0, 0x27,
		0xe8, 0x09, 0x7a, 0x82, 0x9e, 0x6a, 0x48, 0x4f, 0x74, 0x02, 0x81, 0x9e, 0xa0, 0x27, 0xe8, 0x09,
		0x7a, 0x82, 0x9e, 0x6a, 0x48, 0x4f, 0x74, 0x02, 0x81, 0x9e, 0xa0, 0x27, 0xe8, 0x09, 0x7a, 0x82,
		0x9e, 0x6a, 0x48, 0x4f, 0x74, 0x02, 0x81, 0x9e, 0xa0, 0x27, 0xe8, 0x09, 0x7a, 0x82, 0x9e, 0x6a,
		0x48, 0x4f, 0x74, 0x02, 0x81, 0x9e, 0xa0, 0x27, 0xe8, 0x09, 0x7a, 0x82, 0x9e, 0x6a, 0x48, 0x4f,
		0x6f, 0xec, 0xd1, 0xd3, 0x1b, 0xe8, 0x09, 0x7a, 0x82, 0x9e, 0xa0, 0x27, 0xe8, 0x89, 0x46, 0x55,
		0x55, 0x2d, 0x6c, 0x8b, 0x8d, 0xaa, 0x1c, 0xb1, 0xf6, 0x23, 0xb4, 0xac, 0xa2, 0x65, 0xd5, 0x01,
		0xb4, 0xac, 0x72, 0x25, 0x95, 0xe0, 0x21, 0x35, 0xaf, 0xba, 0xcc, 0xc7, 0x8d, 0x2e, 0x56, 0xcf,
		0xae, 0xad, 0xfc, 0xa7, 0xf3, 0xdd, 0xed, 0x67, 0x35, 0xf3, 0x1d, 0xe8, 0x6c, 0x55, 0xb1, 0x4f,
		0x44, 0x67, 0x2b, 0x3a, 0x5b, 0x15, 0x0c, 0x96, 0xd0, 0xd9, 0x8a, 0xa0, 0x09, 0x41, 0x13, 0x82,
		0x26, 0x74, 0xb6, 0x5a, 0xb0, 0x49, 0x67, 0xab, 0x65, 0xfb, 0x74, 0xb6, 0x2a, 0xfc, 0x19, 0x74,
		0xb6, 0xa2, 0xb3, 0xd5, 0x66, 0xe3, 0x74, 0xb6, 0x72, 0xe8, 0x6c, 0x55, 0x56, 0x4f, 0xd3, 0xd9,
		0x0a, 0x2d, 0x8d, 0x96, 0x3e, 0x58, 0x2d, 0xcd, 0x01, 0xe4, 0xd4, 0x30, 0xf9, 0x31, 0x9a, 0xf4,
		0x44, 0x67, 0x2b, 0xe8, 0x09, 0x7a, 0x82, 0x9e, 0xa0, 0x27, 0xe8, 0xa9, 0x86, 0xf4, 0x44, 0x67,
		0x2b, 0xe8, 0x09, 0x7a, 0x82, 0x9e, 0xa0, 0x27, 0xe8, 0xa9, 0x86, 0xf4, 0x44, 0x67, 0x2b, 0xe8,
		0x09, 0x7a, 0x82, 0x9e, 0xa0, 0x27, 0xe8, 0xa9, 0x86, 0xf4, 0x44, 0x67, 0x2b, 0xe8, 0x09, 0x7a,
		0x82, 0x9e, 0xa0, 0x27, 0xe8, 0xa9, 0x86, 0xf4, 0x44, 0x67, 0x2b, 0xe8, 0x09, 0x7a, 0x82, 0x9e,
		0xa0, 0x27, 0xe8, 0xa9, 0x86, 0xf4, 0x44, 0x67, 0x2b, 0xe8, 0x09, 0x7a, 0x82, 0x9e, 0xa0, 0x27,
		0xe8, 0xa9, 0x86, 0xf4, 0x44, 0x67, 0x2b, 0xe8, 0x09, 0x7a, 0x82, 0x9e, 0xa0, 0x27, 0xe8, 0xa9,
		0x86, 0xf4, 0x74, 0x6e, 0x8f, 0x9e, 0xce, 0xa1, 0x27, 0xe8, 0x09, 0x7a, 0x82, 0x9e, 0xa0, 0x27,
		0x1a, 0x2f, 0x56, 0xb5, 0xb0, 0x2b, 0x69, 0xbc, 0xe8, 0x88, 0xf5, 0xc9, 0xa2, 0x05, 0x23, 0x2d,
		0x18, 0x0f, 0xaa, 0x05, 0xa3, 0x2b, 0xa9, 0x0e, 0x0f, 0xb2, 0x19, 0xe3, 0x65, 0x3e, 0x80, 0x74,
		0x65, 0x2c, 0xb1, 0xdc, 0xa6, 0x96, 0x9b, 0xfb, 0xd0, 0xa0, 0x71, 0xf6, 0xeb, 0xd0, 0xab, 0xb1,
		0x62, 0x37, 0x8a, 0x5e, 0x8d, 0xf4, 0x6a, 0x2c, 0x18, 0x5f, 0xa1, 0x57, 0x23, 0x71, 0x16, 0xe2,
		0x2c, 0xc4, 0x59, 0xe8, 0xd5, 0xb8, 0x60, 0x93, 0x5e, 0x8d, 0xcb, 0xf6, 0xe9, 0xd5, 0x58, 0xf8,
		0x33, 0xe8, 0xd5, 0x48, 0xaf, 0xc6, 0xcd, 0xc6, 0xe9, 0xd5, 0xe8, 0xd0, 0xab, 0xb1, 0xac, 0x9e,
		0xa6, 0x57, 0x23, 0x5a, 0x1a, 0x2d, 0x7d, 0xb0, 0x5a, 0x9a, 0x33, 0xcb, 0xa9, 0x61, 0x52, 0x6a,
		0x74, 0xe9, 0xa9, 0x69, 0x91, 0x9f, 0x9a, 0x10, 0x14, 0x04, 0x05, 0x41, 0x41, 0x50, 0x10, 0x14,
		0x04, 0xa5, 0x49, 0x50, 0x34, 0x13, 0x86, 0x9e, 0xa0, 0x27, 0xe8, 0x09, 0x7a, 0x82, 0x9e, 0x6a,
		0x48, 0x4f, 0x34, 0x13, 0x86, 0x9e, 0xa0, 0x27, 0xe8, 0x09, 0x7a, 0x82, 0x9e, 0x6a, 0x48, 0x4f,
		0x34, 0x13, 0x86, 0x9e, 0xa0, 0x27, 0xe8, 0x09, 0x7a, 0x82, 0x9e, 0x6a, 0x48, 0x4f, 0x34, 0x13,
		0x86, 0x9e, 0xa0, 0x27, 0xe8, 0x09, 0x7a, 0x82, 0x9e, 0x6a, 0x48, 0x4f, 0x34, 0x13, 0x86, 0x9e,
		0xa0, 0x27, 0xe8, 0x09, 0x7a, 0x82, 0x9e, 0x6a, 0x48, 0x4f, 0x34, 0x13, 0x86, 0x9e, 0xa0, 0x27,
		0xe8, 0x09, 0x7a, 0x82, 0x9e, 0x6a, 0x48, 0x4f, 0x34, 0x13, 0x86, 0x9e, 0xa0, 0x27, 0xe8, 0x09,
		0x7a, 0x82, 0x9e, 0x6a, 0x48, 0x4f, 0x34, 0x13, 0x86, 0x9e, 0xa0, 0x27, 0xe8, 0x09, 0x7a, 0x82,
		0x9e, 0xa4, 0xe8, 0xe9, 0x80, 0x9a, 0x09, 0x3b, 0x72, 0x3d, 0x1d, 0xe9, 0x2b, 0x4c, 0x5f, 0xe1,
		0x03, 0xed, 0x2b, 0xec, 0x8a, 0xd6, 0xca, 0x1f, 0x76, 0x8b, 0xe1, 0xcb, 0xe9, 0x50, 0x6e, 0xab,
		0xd9, 0xf0, 0x8b, 0x0a, 0x37, 0xab, 0xd4, 0x26, 0xad, 0xf9, 0xe6, 0x34, 0xd8, 0x16, 0x75, 0xdb,
		0x0e, 0x7a, 0xcb, 0xb2, 0xfc, 0xa2, 0xd2, 0x58, 0x50, 0x8d, 0xc1, 0xf4, 0xbb, 0xa9, 0x0a, 0x55,
		0xc7, 0x68, 0x41, 0xe5, 0x1a, 0x78, 0xc1, 0x9e, 0xe6, 0x12, 0x37, 0xeb, 0xf6, 0x6c, 0xec, 0xef,
		0x4a, 0xf8, 0xb7, 0xc2, 0xfe, 0xac, 0x94, 0xff, 0x2a, 0xee, 0xaf, 0x8a, 0xfb, 0xa7, 0xf2, 0xfe,
		0x68, 0xb5, 0xf0, 0x6c, 0xda, 0x9d, 0xb9, 0xa1, 0x22, 0xef, 0x36, 0x54, 0x72, 0xfd, 0xdf, 0xc7,
		0xf6, 0x64, 0x1a, 0xb0, 0x37, 0x69, 0xc0, 0xbe, 0xad, 0x90, 0x13, 0x0d, 0xd8, 0xeb, 0xe2, 0x71,
		0x8b, 0x85, 0x90, 0xa6, 0x7b, 0xb4, 0xdb, 0x13, 0xe9, 0x86, 0x9c, 0x33, 0xe7, 0x31, 0x52, 0x78,
		0x57, 0xa4, 0xb0, 0x88, 0x64, 0xda, 0x92, 0xee, 0x7d, 0xef, 0x65, 0x0f, 0x1f, 0xf2, 0x57, 0xaf,
		0xb3, 0xce, 0x8d, 0xc3, 0xa0, 0xf3, 0xe4, 0x76, 0x42, 0x2f, 0x4d, 0x55, 0x2a, 0xa0, 0x73, 0xe7,
		0xed, 0xa1, 0x73, 0xd1, 0xb9, 0xe8, 0x5c, 0xfd, 0x2d, 0x29, 0xa7, 0x76, 0xe7, 0xac, 0xa2, 0x79,
		0xd1, 0xbc, 0x68, 0xde, 0x9a, 0x6a, 0xde, 0xc9, 0x9d, 0x20, 0xb3, 0x3b, 0xd6, 0x4d, 0xbc, 0xe8,
		0x5e, 0x09, 0x0a, 0xe1, 0x33, 0x01, 0x53, 0xbf, 0x0d, 0xdf, 0x49, 0xea, 0x88, 0x54, 0xf0, 0xe0,
		0xf9, 0x2a, 0x88, 0xe4, 0x13, 0x1a, 0xfe, 0xdb, 0x0b, 0xfb, 0x16, 0x6e, 0x24, 0x68, 0xfc, 0x92,
		0x78, 0x43, 0x95, 0xf8, 0x53, 0x70, 0x1f, 0x48, 0x1d, 0xd1, 0xcd, 0xaf, 0x2b, 0x75, 0xef, 0x65,
		0xc1, 0x97, 0xc1, 0xbb, 0xdf, 0x79, 0x61, 0xaa, 0xe4, 0xf2, 0x17, 0x04, 0x0f, 0xdc, 0xaf, 0xbc,
		0x47, 0x7b, 0x53, 0xf6, 0x86, 0x29, 0x13, 0xc1, 0x4a, 0x39, 0x2b, 0x37, 0x5b, 0xc5, 0xec, 0xdd,
		0x3a, 0x60, 0x3f, 0xab, 0xdd, 0x69, 0x3a, 0x51, 0x90, 0x0a, 0xa3, 0x20, 0x12, 0x0e, 0xf5, 0xb6,
		0xa2, 0x20, 0xc3, 0x77, 0xff, 0xeb, 0xf8, 0xd5, 0xeb, 0x1c, 0x05, 0x49, 0x82, 0x38, 0x09, 0xb2,
		0x27, 0x81, 0xf8, 0xc7, 0xc4, 0x12, 0x91, 0x0f, 0x22, 0x1f, 0x44, 0x3e, 0xca, 0x19, 0x78, 0x88,
		0x43, 0xdf, 0x35, 0xde, 0x8b, 0x4b, 0xeb, 0x70, 0xde, 0x2c, 0xb1, 0x0f, 0x62, 0x1f, 0xc4, 0x3e,
		0x44, 0x74, 0xf4, 0x95, 0x17, 0xf9, 0x5e, 0x16, 0x27, 0x4f, 0x02, 0x37, 0x90, 0xcb, 0xc7, 0x51,
		0xfa, 0x41, 0x94, 0x1d, 0x1f, 0x11, 0x33, 0xa9, 0x41, 0xcc, 0xa4, 0x89, 0x03, 0xbe, 0x6b, 0x31,
		0x93, 0x33, 0xa6, 0x6c, 0xbf, 0x62, 0x26, 0x2f, 0xb6, 0xb0, 0x64, 0x1b, 0xa9, 0xca, 0xfa, 0x3d,
		0x0b, 0x92, 0x6e, 0xc1, 0x2e, 0x9a, 0x0e, 0x4d, 0x87, 0xa6, 0x43, 0xd3, 0xa1, 0xe9, 0xd0, 0x74,
		0x68, 0x3a, 0x34, 0x1d, 0x9a, 0xce, 0xca, 0x93, 0xba, 0x81, 0x41, 0xf5, 0x98, 0x25, 0x9e, 0xdb,
		0x8f, 0xd2, 0xcc, 0x38, 0x83, 0x7f, 0xa0, 0x0e, 0x52, 0x15, 0x75, 0xcc, 0xf1, 0x56, 0x90, 0x95,
		0xde, 0x46, 0x7e, 0xd0, 0xf1, 0x32, 0x95, 0x3a, 0x9e, 0x33, 0xd1, 0xa4, 0x4e, 0x14, 0xfb, 0xca,
		0x09, 0x52, 0xa7, 0x33, 0x54, 0x85, 0xfd, 0x44, 0xf9, 0xaf, 0xea, 0x2f, 0xbc, 0x46, 0x43, 0xbb,
		0x4b, 0xd2, 0xab, 0xf0, 0xd8, 0x6f, 0x5b, 0x97, 0xbd, 0xa8, 0x16, 0x23, 0x0e, 0xfb, 0xd0, 0xd4,
		0xdc, 0x31, 0xdc, 0xc6, 0x71, 0xe9, 0xe4, 0xad, 0x6b, 0x7c, 0x52, 0x9a, 0xa8, 0x4e, 0x9c, 0xf8,
		0x6e, 0x12, 0xf7, 0x33, 0x65, 0x7e, 0x5a, 0x3a, 0x67, 0xcd, 0xec, 0xc4, 0xb4, 0xc9, 0x89, 0xa9,
		0x34, 0x47, 0x70, 0x62, 0x6a, 0x1b, 0x6c, 0x8d, 0x1d, 0x64, 0xb1, 0x42, 0x29, 0xc3, 0x02, 0xa9,
		0x6a, 0xc0, 0x27, 0x0d, 0xee, 0x23, 0x2f, 0x0c, 0x95, 0xef, 0x8e, 0x61, 0xd9, 0x10, 0x7e, 0x16,
		0xec, 0x91, 0xb2, 0x01, 0x00, 0x1d, 0x18, 0x00, 0x19, 0xa7, 0x6c, 0x74, 0x7b, 0xae, 0xe7, 0xfb,
		0x89, 0x92, 0x2c, 0x55, 0x99, 0xb1, 0x49, 0x60, 0xbf, 0xa2, 0x2d, 0x5b, 0x91, 0x7f, 0x49, 0x60,
		0x7f, 0x5b, 0x51, 0x46, 0x0b, 0xc1, 0xf8, 0xdb, 0x38, 0x0e, 0x95, 0x17, 0x49, 0x96, 0x67, 0xb7,
		0x76, 0xf0, 0x8c, 0xd3, 0x48, 0x8b, 0x2c, 0x0d, 0xaa, 0x81, 0x12, 0x01, 0xf6, 0x80, 0x3d, 0x60,
		0xcf, 0x3a, 0xec, 0x89, 0x75, 0x30, 0x9d, 0x76, 0x2e, 0xdd, 0x41, 0xd4, 0xeb, 0x25, 0x71, 0xa6,
		0x3a, 0x99, 0xf2, 0xdd, 0x20, 0xca, 0x54, 0x72, 0xe7, 0x75, 0xd4, 0xb0, 0x41, 0x99, 0x60, 0xc5,
		0xf2, 0xba, 0x4f, 0x00, 0x1d, 0x41, 0x47, 0xd0, 0xb1, 0xa6, 0xe8, 0x38, 0xa9, 0x5e, 0x4e, 0x83,
		0xfb, 0x61, 0x54, 0xc5, 0x8d, 0x7b, 0x86, 0xed, 0x5b, 0x96, 0xe0, 0xb2, 0x2d, 0x60, 0xeb, 0xe7,
		0xa8, 0xdf, 0x95, 0x5b, 0xcf, 0x1f, 0xe3, 0x0f, 0x23, 0x52, 0x10, 0xed, 0x9f, 0xdd, 0x1c, 0xea,
		0xc1, 0x38, 0x52, 0x92, 0xdd, 0xb2, 0x5b, 0xc3, 0x9e, 0xc8, 0x22, 0xee, 0xf5, 0x9c, 0xdd, 0xa3,
		0x5c, 0xbc, 0xd6, 0xab, 0xab, 0x79, 0xfc, 0x76, 0xb8, 0x69, 0x05, 0xa7, 0x65, 0x1a, 0xef, 0x10,
		0x2c, 0x05, 0x9f, 0x78, 0x11, 0x47, 0x92, 0x26, 0x07, 0x4b, 0xe7, 0xc2, 0x69, 0xee, 0x47, 0x37,
		0xf0, 0xed, 0xe4, 0xaf, 0x0e, 0x89, 0x4f, 0x58, 0xd8, 0xcc, 0x1a, 0x45, 0xcb, 0xa0, 0x65, 0xd0,
		0x32, 0x68, 0x19, 0xb4, 0x0c, 0x5a, 0x06, 0x2d, 0x83, 0x96, 0xb1, 0xf2, 0xe4, 0x41, 0xe7, 0x82,
		0x89, 0x1c, 0xf2, 0x3b, 0xdb, 0xc9, 0x08, 0xfb, 0x30, 0x79, 0xf7, 0xbf, 0x6b, 0x83, 0x91, 0x46,
		0x66, 0xc6, 0x0b, 0x8b, 0x6b, 0x2b, 0xbf, 0x95, 0x67, 0x76, 0x42, 0x75, 0x66, 0xc6, 0xac, 0x89,
		0x8f, 0x79, 0xd3, 0x1e, 0x2b, 0xb7, 0xe0, 0x98, 0xf5, 0xe9, 0x29, 0x3b, 0x15, 0x86, 0xdb, 0x7b,
		0xab, 0xdb, 0xba, 0xa1, 0x93, 0x3e, 0x54, 0xf5, 0xfe, 0x2d, 0xb7, 0x63, 0x8b, 0xef, 0xbb, 0x62,
		0xbf, 0x59, 0x70, 0x39, 0xe8, 0x2e, 0x83, 0x8a, 0xa6, 0xbf, 0xc4, 0x44, 0xdb, 0x9d, 0xe0, 0x62,
		0x93, 0xf9, 0xfc, 0xd4, 0x14, 0x98, 0x96, 0xc6, 0x70, 0x28, 0xba, 0x2a, 0x7d, 0x98, 0x1d, 0x88,
		0xa2, 0x93, 0x33, 0xbd, 0x7e, 0x73, 0x95, 0x95, 0x82, 0x8b, 0xa2, 0x5c, 0x52, 0x5b, 0xe9, 0x00,
		0x82, 0x4e, 0xa0, 0xc0, 0x30, 0x20, 0xa0, 0xeb, 0xf8, 0x1b, 0x3b, 0xf8, 0xc6, 0x8e, 0xbc, 0xb9,
		0xc3, 0x2e, 0x0b, 0x18, 0x65, 0x93, 0xc6, 0x56, 0x2d, 0xc4, 0xf2, 0xd3, 0xb0, 0x61, 0x55, 0x97,
		0x9d, 0x10, 0xbd, 0x8c, 0x4d, 0xed, 0x28, 0x99, 0x49, 0x54, 0x4c, 0x28, 0x0a, 0x66, 0x1a, 0xf5,
		0x12, 0x8b, 0x72, 0x89, 0x45, 0xb5, 0xe4, 0xa2, 0x58, 0x76, 0xf5, 0xae, 0x6e, 0x86, 0xe5, 0xf4,
		0xde, 0xca, 0xae, 0x97, 0xfe, 0x6e, 0x9e, 0xeb, 0x3c, 0x6f, 0x8e, 0x54, 0x67, 0x52, 0x9d, 0xb7,
		0x1e, 0x36, 0xde, 0xb1, 0x54, 0xe7, 0xc9, 0x0e, 0x92, 0x3b, 0x08, 0xca, 0x2d, 0x72, 0x0a, 0x54,
		0xd1, 0x76, 0x95, 0xde, 0xb6, 0xd6, 0xb6, 0xaf, 0xb5, 0x6d, 0x6c, 0x6f, 0x3b, 0x0b, 0xc5, 0x46,
		0xf7, 0xba, 0x7f, 0xc9, 0xdf, 0xd4, 0xe3, 0x30, 0x9b, 0xed, 0x5e, 0x25, 0xa2, 0x09, 0x84, 0x02,
		0xb6, 0xa4, 0xaf, 0x3c, 0x6f, 0x7c, 0x6a, 0xba, 0xe7, 0x9e, 0x7b, 0x77, 0xe9, 0xfe, 0x72, 0xf3,
		0x47, 0xeb, 0xe5, 0x9b, 0x6f, 0x8d, 0x83, 0xec, 0x80, 0x65, 0xa4, 0xde, 0x96, 0x51, 0x50, 0x5f,
		0xbc, 0xc1, 0x16, 0xb0, 0x05, 0x6c, 0x01, 0x5b, 0xc0, 0x16, 0xb6, 0xd9, 0x82, 0xde, 0x3a, 0x96,
		0x7a, 0xeb, 0xcc, 0xc5, 0x30, 0x68, 0xb0, 0x53, 0x7d, 0x83, 0x9d, 0xe7, 0x27, 0x80, 0x2e, 0x3b,
		0xc5, 0x06, 0xb8, 0xce, 0x99, 0x15, 0x0b, 0x47, 0x46, 0xab, 0xfe, 0xf0, 0xb5, 0x44, 0x38, 0xd1,
		0x11, 0x3f, 0xb3, 0xbb, 0x52, 0xe9, 0xc3, 0xc2, 0x91, 0xec, 0xdc, 0x1f, 0x7d, 0xbe, 0x1c, 0xbf,
		0xf6, 0xd5, 0xe0, 0xad, 0x6b, 0xdc, 0xe9, 0x62, 0x45, 0x7a, 0x84, 0x79, 0x04, 0xd8, 0x34, 0xe5,
		0x42, 0xc8, 0x83, 0x20, 0x0c, 0x5c, 0xa1, 0x67, 0x40, 0x18, 0x58, 0x5a, 0xa5, 0xe7, 0x2b, 0xe7,
		0x72, 0x69, 0x3f, 0xb9, 0xa1, 0x8a, 0xee, 0xb3, 0x07, 0x89, 0x36, 0x3c, 0x06, 0x1a, 0xbd, 0xf1,
		0x6e, 0xf4, 0x16, 0x35, 0x10, 0x71, 0x92, 0x0d, 0x68, 0xa5, 0x2f, 0x60, 0xb4, 0xd6, 0xbd, 0x54,
		0xbe, 0x6b, 0xe9, 0x37, 0x99, 0x3b, 0xe5, 0xe4, 0xa7, 0xe2, 0xb4, 0x7d, 0x78, 0x73, 0xb1, 0x5b,
		0xfa, 0xb4, 0x1a, 0xb5, 0x92, 0x0b, 0xc4, 0x30, 0xbe, 0xbf, 0x37, 0xa9, 0x1d, 0x58, 0x91, 0xe5,
		0x31, 0x31, 0xc9, 0x91, 0x35, 0x5a, 0xe5, 0xc0, 0xb4, 0x8a, 0xf1, 0x91, 0xf5, 0xad, 0x17, 0xf9,
		0x5f, 0x03, 0x3f, 0x7b, 0x70, 0x3b, 0x0f, 0x5e, 0x74, 0xaf, 0x06, 0x3b, 0x2a, 0xf5, 0xee, 0x05,
		0x6b, 0x19, 0xd7, 0x7e, 0x02, 0x87, 0x14, 0x15, 0x6d, 0xe7, 0x8a, 0x02, 0x57, 0x1c, 0x52, 0x6c,
		0x4b, 0xbe, 0x59, 0x38, 0x58, 0x30, 0xed, 0x16, 0xba, 0xc4, 0xae, 0xc7, 0x3b, 0x78, 0x32, 0x1b,
		0x44, 0x69, 0xff, 0xee, 0x2e, 0xe8, 0x04, 0x2a, 0xca, 0xdc, 0xdb, 0xaf, 0xf2, 0xd8, 0xb8, 0xee,
		0x03, 0x80, 0x46, 0xa0, 0x11, 0x68, 0x04, 0x1a, 0xeb, 0x0b, 0x8d, 0x3d, 0x2f, 0x7b, 0x70, 0x55,
		0x92, 0xc4, 0x89, 0x3c, 0x2a, 0xae, 0xb0, 0x0d, 0x20, 0x02, 0x88, 0x00, 0x22, 0x80, 0x58, 0x63,
		0x40, 0xec, 0x78, 0x61, 0xc7, 0xbd, 0xf3, 0x82, 0xb0, 0x9f, 0x58, 0xf0, 0xa2, 0x57, 0x9b, 0x07,
		0x16, 0x81, 0x45, 0x60, 0x11, 0x58, 0xac, 0x2f, 0x2c, 0x26, 0x2a, 0xee, 0x65, 0x41, 0x37, 0xf8,
		0x87, 0x72, 0xbd, 0x2c, 0x1b, 0x0c, 0x49, 0x2a, 0x0f, 0x8e, 0x9b, 0x3e, 0x04, 0x88, 0x04, 0x22,
		0x81, 0x48, 0x20, 0x72, 0x17, 0x20, 0xd2, 0xb7, 0x09, 0x8d, 0x3e, 0x90, 0x08, 0x24, 0x02, 0x89,
		0x40, 0xe2, 0x4e, 0x40, 0xe2, 0xf0, 0xc2, 0xc7, 0x21, 0x62, 0x49, 0xe3, 0xe1, 0x82, 0x65, 0xc0,
		0x10, 0x30, 0x04, 0x0c, 0x01, 0xc3, 0xfa, 0x82, 0x61, 0x9a, 0x79, 0x99, 0x85, 0x88, 0xe2, 0xbc,
		0x59, 0x60, 0x10, 0x18, 0x04, 0x06, 0x81, 0x41, 0xcb, 0x30, 0x48, 0x09, 0x5d, 0xa9, 0x12, 0x3a,
		0xa1, 0x14, 0x67, 0x67, 0x0b, 0x65, 0x74, 0xe3, 0x3f, 0x79, 0x37, 0x7e, 0xf1, 0x9a, 0xe7, 0xa6,
		0x8f, 0x9c, 0x02, 0x2f, 0x8a, 0xe2, 0x7e, 0xd4, 0x51, 0x32, 0xc9, 0xe9, 0x0b, 0x36, 0xa9, 0xa4,
		0x23, 0x3b, 0x7d, 0xeb, 0x0c, 0xc9, 0xe5, 0xf5, 0x35, 0x06, 0xa2, 0x3c, 0x53, 0xde, 0x1c, 0x7f,
		0xa6, 0xa6, 0x28, 0x8a, 0x01, 0x76, 0x0e, 0x0c, 0x76, 0xe4, 0x8a, 0x62, 0x2c, 0x54, 0xc1, 0xe0,
		0x69, 0xe3, 0x69, 0xe3, 0x69, 0xcb, 0x78, 0xda, 0xf5, 0xee, 0xcd, 0xd5, 0x0f, 0xa2, 0xec, 0xf8,
		0x48, 0xd0, 0x6d, 0x3f, 0x13, 0x30, 0xf5, 0x9b, 0x17, 0xdd, 0x2b, 0xb1, 0x9e, 0x5c, 0x82, 0xf7,
		0x4c, 0x49, 0x36, 0x02, 0xc8, 0x8d, 0x4e, 0xaa, 0xd0, 0x9b, 0x2f, 0x65, 0xed, 0xda, 0x2a, 0x46,
		0x9f, 0xae, 0x21, 0xe9, 0xa2, 0x74, 0xa1, 0x2d, 0xb7, 0xb0, 0xfd, 0x1e, 0xed, 0x4d, 0x59, 0xfb,
		0xe8, 0xbc, 0x7d, 0x7e, 0x7a, 0x76, 0x74, 0x7e, 0xc2, 0xdc, 0x89, 0x80, 0xad, 0x9c, 0x95, 0x5d,
		0x6c, 0xb2, 0xda, 0x09, 0xbd, 0x34, 0x75, 0xe3, 0xc4, 0xed, 0xc5, 0x71, 0x28, 0x7c, 0x5b, 0xeb,
		0x0a, 0xdb, 0x88, 0x3c, 0x44, 0x1e, 0x22, 0x0f, 0x91, 0x87, 0xc8, 0x43, 0xe4, 0x21, 0xf2, 0xd6,
		0x4e, 0x59, 0x8b, 0x29, 0x43, 0xdb, 0x19, 0x6b, 0x3b, 0x3f, 0xcd, 0xa4, 0x2f, 0xe0, 0x9f, 0x9a,
		0x44, 0xc9, 0xa1, 0xe4, 0x50, 0x72, 0x07, 0xa0, 0xe4, 0x26, 0x57, 0xf9, 0x4f, 0xfb, 0x55, 0x0d,
		0x40, 0x80, 0x9b, 0xfc, 0xcb, 0x5b, 0x6d, 0x8e, 0xd3, 0x0b, 0x23, 0xdf, 0x4b, 0x7c, 0xa9, 0x51,
		0xcc, 0xad, 0xb7, 0xc6, 0x1b, 0xd9, 0x9d, 0xff, 0x84, 0x7d, 0xbf, 0x87, 0x7f, 0xf9, 0x1b, 0xcb,
		0xde, 0xc8, 0xbf, 0x68, 0x9b, 0x7b, 0xf4, 0x2b, 0x5c, 0x40, 0x07, 0x75, 0x47, 0x43, 0x0e, 0xb0,
		0xdc, 0xcf, 0x50, 0xfd, 0xfd, 0x0c, 0x9b, 0x07, 0x9f, 0xbb, 0x19, 0x8a, 0x0d, 0xee, 0xae, 0x27,
		0x96, 0x4a, 0x64, 0x23, 0x54, 0x9c, 0x50, 0xfa, 0x63, 0xfe, 0xca, 0x35, 0xce, 0xe0, 0xea, 0xc4,
		0x61, 0xa8, 0x86, 0x11, 0x08, 0x37, 0x8e, 0xc2, 0x27, 0xf3, 0x3c, 0xae, 0x45, 0x83, 0x24, 0x91,
		0x92, 0xcd, 0xb5, 0x75, 0x6f, 0x92, 0x24, 0xd2, 0x1a, 0x43, 0xd0, 0x9d, 0x97, 0x66, 0xee, 0xb8,
		0xca, 0xd5, 0x1c, 0x7f, 0xe6, 0xac, 0x91, 0x4a, 0x0a, 0xf8, 0x1c, 0x18, 0xf8, 0x08, 0xf6, 0x57,
		0xef, 0x25, 0x71, 0x36, 0xa2, 0x72, 0x1b, 0xbd, 0xd5, 0x67, 0xac, 0x13, 0xb1, 0xae, 0x68, 0x1b,
		0x57, 0xe4, 0x70, 0x12, 0xb1, 0xde, 0x56, 0x3c, 0x8f, 0xdc, 0x83, 0xf2, 0xa6, 0xc8, 0x3d, 0x90,
		0xb0, 0x4b, 0xee, 0x01, 0xb9, 0x07, 0xd5, 0x4d, 0x19, 0xb9, 0x07, 0xda, 0x93, 0x12, 0xc5, 0xbe,
		0xb2, 0x22, 0xed, 0x16, 0x0d, 0xa3, 0xea, 0x50, 0x75, 0xa8, 0x3a, 0x54, 0x1d, 0xaa, 0x0e, 0x55,
		0x87, 0xaa, 0x43, 0xd5, 0xa1, 0xea, 0xac, 0x3c, 0x49, 0x02, 0xc7, 0x6a, 0x56, 0x9a, 0xcd, 0x21,
		0x98, 0x3d, 0x14, 0x20, 0x87, 0xa3, 0xfa, 0x1c, 0x8e, 0x67, 0xc7, 0x9f, 0x34, 0x8e, 0x62, 0xe3,
		0xbb, 0xeb, 0x69, 0x1c, 0x02, 0xa7, 0x73, 0x4e, 0xf5, 0x99, 0x1c, 0xbf, 0x78, 0x69, 0xf6, 0xdb,
		0xf8, 0xa5, 0xeb, 0x7c, 0x90, 0x1a, 0x27, 0x5f, 0xbd, 0xc4, 0x77, 0x87, 0xd5, 0x9d, 0x02, 0x27,
		0xa9, 0x73, 0xe6, 0xc8, 0xe3, 0xe0, 0x28, 0x75, 0xeb, 0xde, 0xf8, 0xae, 0xe6, 0x71, 0x18, 0x7b,
		0xc8, 0x02, 0x9e, 0xb1, 0x90, 0x47, 0x2c, 0xa0, 0xd0, 0x24, 0x3d, 0x60, 0x69, 0xcf, 0xd7, 0x9a,
		0xfb, 0x24, 0xef, 0x36, 0x09, 0x78, 0xb8, 0xa2, 0x9e, 0x6d, 0x3e, 0x15, 0x67, 0x87, 0x37, 0x15,
		0xbb, 0xa5, 0x3e, 0x2b, 0x51, 0x23, 0x41, 0x94, 0xa9, 0xe4, 0xce, 0xeb, 0xcc, 0xd4, 0x27, 0x99,
		0x6b, 0x92, 0x55, 0x46, 0x51, 0x26, 0x28, 0x13, 0x94, 0x09, 0xca, 0x04, 0x65, 0x82, 0x32, 0x79,
		0x66, 0x2a, 0xa4, 0x5b, 0x74, 0x21, 0x51, 0x76, 0x5a, 0xa2, 0x84, 0xb1, 0xe7, 0xbb, 0xe9, 0x83,
		0x97, 0x08, 0xe4, 0x9d, 0xcf, 0xd8, 0x42, 0x90, 0x20, 0x48, 0x10, 0x24, 0x08, 0x92, 0xba, 0x0a,
		0x92, 0x16, 0x82, 0x04, 0x41, 0x82, 0x20, 0xa9, 0xa1, 0x20, 0x89, 0xd4, 0x57, 0x37, 0xcd, 0x9e,
		0x42, 0xe5, 0x7a, 0x77, 0x77, 0x41, 0x14, 0x64, 0x4f, 0xd3, 0x1f, 0xb2, 0xa7, 0x9e, 0x12, 0x38,
		0xd5, 0x79, 0xfe, 0x23, 0x28, 0x9a, 0x43, 0xbe, 0x1c, 0x98, 0x7c, 0x31, 0x2e, 0x9a, 0x7b, 0x6e,
		0x57, 0x09, 0x66, 0x59, 0x3f, 0xf7, 0x49, 0x32, 0x69, 0xd7, 0x2d, 0xd2, 0xae, 0xab, 0xde, 0xe6,
		0xd6, 0xb6, 0xbb, 0xb5, 0x6d, 0x6f, 0x6f, 0xfb, 0x0b, 0x89, 0x04, 0xc3, 0xb5, 0x67, 0x0a, 0x0b,
		0xb9, 0x21, 0x59, 0x2c, 0x58, 0x5a, 0xcf, 0x92, 0x00, 0x20, 0x14, 0x8e, 0xb0, 0x06, 0x08, 0x36,
		0x80, 0xc1, 0x32, 0x40, 0xd8, 0x02, 0x0a, 0xeb, 0x80, 0x61, 0x1d, 0x38, 0xec, 0x03, 0x88, 0x0c,
		0x90, 0x08, 0xfa, 0x91, 0x8e, 0x68, 0x0d, 0xc6, 0xd2, 0xca, 0x9d, 0xf4, 0x84, 0xcc, 0xfa, 0x51,
		0xa4, 0xc2, 0x5c, 0x1a, 0x48, 0xae, 0x62, 0xc1, 0xe6, 0x90, 0xb9, 0x4d, 0xd1, 0x26, 0x91, 0xd3,
		0x61, 0xb6, 0xd1, 0x2c, 0x32, 0xb7, 0xde, 0x1a, 0x1d, 0x48, 0x77, 0xc2, 0xbe, 0xaf, 0x84, 0x37,
		0xdc, 0xd0, 0xfe, 0xd1, 0x8c, 0x7d, 0x37, 0xcd, 0x92, 0xa0, 0x93, 0xd9, 0xf8, 0x98, 0xe3, 0x61,
		0xa3, 0x99, 0x47, 0x6b, 0x5f, 0xa3, 0x3d, 0x63, 0xdf, 0xf5, 0xc2, 0xd0, 0xc6, 0x67, 0x9c, 0x0c,
		0x87, 0xea, 0x3e, 0x8a, 0x13, 0xd5, 0x10, 0xb5, 0xfe, 0xed, 0xa5, 0xf4, 0x8a, 0x94, 0x6e, 0xb3,
		0x99, 0x9b, 0x9e, 0x4c, 0xe1, 0x85, 0x73, 0xfc, 0xd2, 0x9a, 0xf5, 0xe1, 0x04, 0x5e, 0x38, 0x6d,
		0x0b, 0x9f, 0x30, 0x9e, 0xbe, 0x0b, 0xe7, 0xc4, 0x86, 0xf1, 0x68, 0x32, 0x38, 0x2d, 0x7b, 0xd6,
		0x27, 0x9b, 0xf4, 0xc2, 0x39, 0x92, 0x5d, 0x84, 0x7b, 0x57, 0x61, 0xb3, 0x5d, 0x59, 0xff, 0x5f,
		0xea, 0x49, 0x5a, 0x35, 0x37, 0xde, 0x05, 0x69, 0x76, 0x99, 0x65, 0x42, 0xfe, 0xc2, 0x55, 0x10,
		0xfd, 0x1c, 0xaa, 0x81, 0x20, 0x12, 0x0a, 0xe1, 0x36, 0xae, 0xbc, 0xc7, 0x19, 0x8b, 0xad, 0x37,
		0xed, 0xf6, 0xe9, 0x59, 0xbb, 0xdd, 0x3c, 0x3b, 0x3e, 0x6b, 0x9e, 0x9f, 0x9c, 0xb4, 0x4e, 0x5b,
		0x02, 0xbb, 0xae, 0xf1, 0x6b, 0xe2, 0xab, 0x44, 0xf9, 0x3f, 0x0e, 0x86, 0x37, 0xea, 0x87, 0xe1,
		0x56, 0x67, 0x59, 0xa8, 0x56, 0x22, 0xb7, 0xb7, 0xb5, 0x9a, 0x89, 0x67, 0x23, 0xb6, 0xaf, 0x2d,
		0xc7, 0x84, 0x9c, 0xea, 0x2b, 0x2e, 0xfe, 0xae, 0xbe, 0x7e, 0x18, 0x7c, 0xa1, 0xcb, 0xf1, 0xd7,
		0x98, 0xfc, 0x7b, 0x20, 0x9c, 0xd3, 0x8d, 0x7f, 0xdb, 0xd8, 0xc5, 0x96, 0x0c, 0xcf, 0xcc, 0x5f,
		0xfe, 0x5f, 0xad, 0xea, 0xe2, 0x88, 0x33, 0x9f, 0x49, 0x44, 0x91, 0x88, 0x22, 0x11, 0x45, 0x22,
		0x8a, 0x44, 0x14, 0x89, 0x28, 0x12, 0x51, 0x24, 0xa2, 0x48, 0x44, 0x91, 0x88, 0x22, 0x11, 0x45,
		0x22, 0x8a, 0x44, 0x14, 0x89, 0x28, 0xd6, 0x26, 0xa2, 0xf8, 0x52, 0x4e, 0x53, 0xb7, 0xec, 0xe9,
		0xe9, 0x16, 0x5a, 0x1a, 0x2d, 0x8d, 0x96, 0x3e, 0x54, 0x2d, 0x3d, 0x0a, 0x1a, 0x07, 0x71, 0xea,
		0x3e, 0x26, 0x43, 0x6c, 0x8f, 0xee, 0x6d, 0xe8, 0xe8, 0x37, 0x82, 0x36, 0xdf, 0x7b, 0x59, 0xa6,
		0x92, 0x48, 0xac, 0x93, 0x62, 0x6e, 0xf8, 0xd3, 0xf5, 0xf5, 0xd7, 0xeb, 0x6b, 0xf7, 0xfa, 0xfa,
		0xd5, 0xc5, 0xcb, 0xcf, 0xff, 0xf9, 0x2f, 0x7f, 0xfa, 0xd7, 0xeb, 0xeb, 0x1f, 0xfe, 0x72, 0x7d,
		0xfd, 0xcf, 0x7f, 0xbf, 0xf9, 0x41, 0x6e, 0x61, 0xdd, 0x70, 0xe0, 0xb5, 0xe6, 0xc0, 0xcb, 0x11,
		0x8b, 0xef, 0x72, 0xf4, 0xc5, 0xd1, 0x57, 0x6d, 0x8f, 0xbe, 0x5c, 0x49, 0xe5, 0xb5, 0x33, 0x87,
		0x60, 0x97, 0xf9, 0x97, 0xde, 0xeb, 0xd3, 0xb0, 0xfc, 0xa7, 0xa3, 0x6d, 0x9c, 0x8b, 0xcd, 0x7c,
		0x3a, 0x27, 0x64, 0x15, 0x8b, 0x76, 0x4e, 0xc8, 0x38, 0x21, 0x2b, 0xe8, 0xcd, 0x73, 0x42, 0x86,
		0x57, 0x8f, 0x57, 0x8f, 0x57, 0xcf, 0x09, 0xd9, 0x82, 0x4d, 0x4e, 0xc8, 0x96, 0xed, 0x73, 0x42,
		0x56, 0xf8, 0x33, 0x38, 0x21, 0xe3, 0x84, 0x6c, 0xb3, 0x71, 0x4e, 0xc8, 0x1c, 0x4e, 0xc8, 0xca,
		0xea, 0x69, 0x4e, 0xc8, 0xd0, 0xd2, 0x68, 0xe9, 0x83, 0xd5, 0xd2, 0x9c, 0x90, 0x4d, 0x0d, 0x1f,
		0xd6, 0x09, 0x99, 0x20, 0x3d, 0x1d, 0xd9, 0xa3, 0xa7, 0x23, 0xe8, 0x09, 0x7a, 0x82, 0x9e, 0xa0,
		0x27, 0xe8, 0x89, 0x04, 0x8e, 0xaa, 0x16, 0xf6, 0x33, 0x09, 0x1c, 0x8e, 0xd8, 0x41, 0x24, 0xa9,
		0x1c, 0xa4, 0x72, 0xec, 0x40, 0x2a, 0x87, 0x2b, 0xa9, 0xc6, 0x76, 0x2f, 0xa9, 0xe3, 0x32, 0xff,
		0xf6, 0x07, 0x92, 0xdd, 0x91, 0xff, 0x74, 0xbc, 0xdd, 0x3c, 0x8f, 0x99, 0xf7, 0x20, 0xe3, 0xa3,
		0x62, 0x95, 0x4f, 0xc6, 0x07, 0x19, 0x1f, 0x05, 0xdd, 0x7f, 0x32, 0x3e, 0x08, 0x03, 0x10, 0x06,
		0x20, 0x0c, 0x40, 0xc6, 0xc7, 0x82, 0x4d, 0x32, 0x3e, 0x96, 0xed, 0x93, 0xf1, 0x51, 0xf8, 0x33,
		0xc8, 0xf8, 0x20, 0xe3, 0x63, 0xb3, 0x71, 0x32, 0x3e, 0x1c, 0x32, 0x3e, 0xca, 0xea, 0x69, 0x32,
		0x3e, 0xd0, 0xd2, 0x68, 0xe9, 0x83, 0xd5, 0xd2, 0x1c, 0xa9, 0x4d, 0x0d, 0x93, 0xf1, 0xa1, 0x49,
		0x4f, 0x64, 0x7c, 0x40, 0x4f, 0xd0, 0x13, 0xf4, 0x04, 0x3d, 0x41, 0x4f, 0x35, 0xa4, 0xa7, 0x63,
		0x7b, 0xf4, 0x74, 0x0c, 0x3d, 0x41, 0x4f, 0xd0, 0x13, 0xf4, 0x04, 0x3d, 0x91, 0x90, 0x58, 0xd5,
		0xc2, 0x2e, 0x9c, 0x90, 0xe8, 0x88, 0x65, 0xcc, 0x90, 0x9a, 0x48, 0x6a, 0xe2, 0x4e, 0xa5, 0x26,
		0xba, 0x92, 0x0a, 0x6d, 0x87, 0x93, 0x14, 0x2f, 0xf3, 0x61, 0x38, 0xb8, 0x6c, 0xc5, 0xfc, 0xa7,
		0x76, 0x5d, 0xf2, 0x16, 0x67, 0xde, 0x88, 0x0c, 0xc6, 0x8a, 0xdd, 0x02, 0x32, 0x18, 0xc9, 0x60,
		0x2c, 0x18, 0x2f, 0x20, 0x83, 0x91, 0xb8, 0x01, 0x71, 0x03, 0xe2, 0x06, 0x64, 0x30, 0x2e, 0xd8,
		0x24, 0x83, 0x71, 0xd9, 0x3e, 0x19, 0x8c, 0x85, 0x3f, 0x83, 0x0c, 0x46, 0x32, 0x18, 0x37, 0x1b,
		0x27, 0x83, 0xd1, 0x21, 0x83, 0xb1, 0xac, 0x9e, 0x26, 0x83, 0x11, 0x2d, 0x8d, 0x96, 0x3e, 0x58,
		0x2d, 0xcd, 0x19, 0xdc, 0xd4, 0x30, 0x29, 0x22, 0x9a, 0xf4, 0x44, 0x06, 0x23, 0xf4, 0x04, 0x3d,
		0x41, 0x4f, 0xd0, 0x13, 0xf4, 0x54, 0x43, 0x7a, 0x22, 0x83, 0x11, 0x7a, 0x82, 0x9e, 0xa0, 0x27,
		0xe8, 0x09, 0x7a, 0xaa, 0x21, 0x3d, 0xb5, 0xed, 0xd1, 0x53, 0x1b, 0x7a, 0x82, 0x9e, 0xa0, 0x27,
		0xe8, 0x09, 0x7a, 0x22, 0xc1, 0xbe, 0xaa, 0x85, 0xad, 0x91, 0x60, 0xef, 0x88, 0xa5, 0x76, 0x92,
		0x6a, 0x4f, 0xaa, 0xfd, 0x8e, 0xa6, 0xda, 0xbb, 0x92, 0xaa, 0x6d, 0x1f, 0x92, 0xee, 0x2f, 0xf3,
		0xf1, 0x38, 0xe0, 0xec, 0xfb, 0xfc, 0xa7, 0x93, 0xfa, 0xe5, 0xe1, 0xcf, 0xbc, 0x1b, 0x19, 0xf9,
		0x15, 0xfb, 0x11, 0x64, 0xe4, 0x93, 0x91, 0x5f, 0x30, 0xc0, 0x40, 0x46, 0x3e, 0x81, 0x06, 0x02,
		0x0d, 0x04, 0x1a, 0xc8, 0xc8, 0x5f, 0xb0, 0x49, 0x46, 0xfe, 0xb2, 0x7d, 0x32, 0xf2, 0x0b, 0x7f,
		0x06, 0x19, 0xf9, 0x64, 0xe4, 0x6f, 0x36, 0x4e, 0x46, 0xbe, 0x43, 0x46, 0x7e, 0x59, 0x3d, 0x4d,
		0x46, 0x3e, 0x5a, 0x1a, 0x2d, 0x7d, 0xb0, 0x5a, 0x9a, 0x43, 0xbb, 0xa9, 0x61, 0x72, 0x4a, 0x34,
		0xe9, 0x89, 0x8c, 0x7c, 0xe8, 0x09, 0x7a, 0x82, 0x9e, 0xa0, 0x27, 0xe8, 0xa9, 0x86, 0xf4, 0x44,
		0x46, 0x3e, 0xf4, 0x04, 0x3d, 0x41, 0x4f, 0xd0, 0x13, 0xf4, 0x54, 0x43, 0x7a, 0x22, 0x23, 0x1f,
		0x7a, 0x82, 0x9e, 0xa0, 0x27, 0xe8, 0x09, 0x7a, 0xaa, 0x21, 0x3d, 0x9d, 0xd8, 0xa3, 0xa7, 0x13,
		0xe8, 0x09, 0x7a, 0x82, 0x9e, 0xa0, 0x27, 0xe8, 0x89, 0x82, 0xb1, 0xaa, 0x16, 0xb6, 0x51, 0xc1,
		0x98, 0x23, 0x56, 0x83, 0x40, 0xe9, 0x18, 0xa5, 0x63, 0x3b, 0x5f, 0x3a, 0xe6, 0x4a, 0x2a, 0xb9,
		0xbd, 0x2a, 0x22, 0xbb, 0xcc, 0x07, 0x86, 0x6a, 0xb2, 0xec, 0xe9, 0x24, 0xff, 0xe9, 0xb4, 0xce,
		0x75, 0x65, 0x33, 0x6f, 0x49, 0x85, 0x59, 0xc5, 0x8e, 0x07, 0x15, 0x66, 0x54, 0x98, 0x15, 0x8c,
		0x48, 0x50, 0x61, 0x46, 0x64, 0x82, 0xc8, 0x04, 0x91, 0x09, 0x2a, 0xcc, 0x16, 0x6c, 0x52, 0x61,
		0xb6, 0x6c, 0x9f, 0x0a, 0xb3, 0xc2, 0x9f, 0x41, 0x85, 0x19, 0x15, 0x66, 0x9b, 0x8d, 0x53, 0x61,
		0xe6, 0x50, 0x61, 0x56, 0x56, 0x4f, 0x53, 0x61, 0x86, 0x96, 0x46, 0x4b, 0x1f, 0xac, 0x96, 0xe6,
		0x94, 0x6f, 0x6a, 0x98, 0x24, 0x14, 0x4d, 0x7a, 0xa2, 0xc2, 0x0c, 0x7a, 0x82, 0x9e, 0xa0, 0x27,
		0xe8, 0x09, 0x7a, 0xaa, 0x21, 0x3d, 0x51, 0x61, 0x06, 0x3d, 0x41, 0x4f, 0xd0, 0x13, 0xf4, 0x04,
		0x3d, 0xd5, 0x90, 0x9e, 0xa8, 0x30, 0x83, 0x9e, 0xa0, 0x27, 0xe8, 0x09, 0x7a, 0x82, 0x9e, 0x6a,
		0x48, 0x4f, 0x54, 0x98, 0x41, 0x4f, 0xd0, 0x13, 0xf4, 0x04, 0x3d, 0x41, 0x4f, 0x35, 0xa4, 0xa7,
		0x53, 0x7b, 0xf4, 0x74, 0x0a, 0x3d, 0x41, 0x4f, 0xd0, 0x13, 0xf4, 0x04, 0x3d, 0x51, 0x00, 0x5d,
		0xd5, 0xc2, 0x16, 0x2a, 0x80, 0x76, 0xc4, 0x8a, 0xe5, 0x28, 0x85, 0xa6, 0x14, 0x7a, 0x8f, 0x4a,
		0xa1, 0x5d, 0x49, 0x75, 0xb7, 0x9f, 0x45, 0xd1, 0x97, 0xf9, 0x08, 0x51, 0x1d, 0x3d, 0xb7, 0x62,
		0xf2, 0x9f, 0xce, 0x76, 0xa3, 0x4e, 0x7a, 0xe6, 0x7d, 0xa9, 0x98, 0xae, 0xd8, 0x53, 0xa1, 0x62,
		0x9a, 0x8a, 0xe9, 0x82, 0x21, 0x0c, 0x2a, 0xa6, 0x09, 0x65, 0x10, 0xca, 0x20, 0x94, 0x41, 0xc5,
		0xf4, 0x82, 0x4d, 0x2a, 0xa6, 0x97, 0xed, 0x53, 0x31, 0x5d, 0xf8, 0x33, 0xa8, 0x98, 0xa6, 0x62,
		0x7a, 0xb3, 0x71, 0x2a, 0xa6, 0x1d, 0x2a, 0xa6, 0xcb, 0xea, 0x69, 0x2a, 0xa6, 0xd1, 0xd2, 0x68,
		0xe9, 0x83, 0xd5, 0xd2, 0x1c, 0x0b, 0x4e, 0x0d, 0x93, 0xb5, 0xa2, 0x49, 0x4f, 0x54, 0x4c, 0x43,
		0x4f, 0xd0, 0x13, 0xf4, 0x04, 0x3d, 0x41, 0x4f, 0x35, 0xa4, 0x27, 0x2a, 0xa6, 0xa1, 0x27, 0xe8,
		0x09, 0x7a, 0x82, 0x9e, 0xa0, 0xa7, 0x1a, 0xd2, 0x13, 0x15, 0xd3, 0xd0, 0x13, 0xf4, 0x04, 0x3d,
		0x41, 0x4f, 0xd0, 0x53, 0x0d, 0xe9, 0x89, 0x8a, 0x69, 0xe8, 0x09, 0x7a, 0x82, 0x9e, 0xa0, 0x27,
		0xe8, 0xa9, 0x86, 0xf4, 0x44, 0xc5, 0x34, 0xf4, 0x04, 0x3d, 0x41, 0x4f, 0xd0, 0x13, 0xf4, 0x54,
		0x43, 0x7a, 0x3a, 0xb3, 0x47, 0x4f, 0x67, 0xd0, 0x13, 0xf4, 0x04, 0x3d, 0x41, 0x4f, 0xd0, 0x13,
		0x0d, 0x3d, 0xaa, 0x5a, 0xd8, 0xe2, 0x0d, 0x3d, 0x1c, 0xb1, 0xaa, 0x6e, 0x5a, 0x7b, 0xd0, 0xda,
		0x63, 0x2f, 0x5b, 0x7b, 0xb8, 0x92, 0x8a, 0x6f, 0xcf, 0x9b, 0x7c, 0x5c, 0xe6, 0x43, 0x45, 0xb7,
		0x8f, 0x35, 0x8b, 0x28, 0xff, 0xe9, 0xcd, 0xae, 0xf5, 0xfd, 0x98, 0x79, 0x73, 0x3a, 0x80, 0x54,
		0xec, 0xda, 0xd0, 0x01, 0x84, 0x0e, 0x20, 0x05, 0x63, 0x1e, 0x74, 0x00, 0x21, 0xf6, 0x41, 0xec,
		0x83, 0xd8, 0x07, 0x1d, 0x40, 0x16, 0x6c, 0xd2, 0x01, 0x64, 0xd9, 0x3e, 0x1d, 0x40, 0x0a, 0x7f,
		0x06, 0x1d, 0x40, 0xe8, 0x00, 0xb2, 0xd9, 0x38, 0x1d, 0x40, 0x1c, 0x3a, 0x80, 0x94, 0xd5, 0xd3,
		0x74, 0x00, 0x41, 0x4b, 0xa3, 0xa5, 0x0f, 0x56, 0x4b, 0x73, 0x8e, 0x38, 0x35, 0x4c, 0x9a, 0x8b,
		0x26, 0x3d, 0xd1, 0x01, 0x04, 0x7a, 0x82, 0x9e, 0xa0, 0x27, 0xe8, 0x09, 0x7a, 0xaa, 0x21, 0x3d,
		0xd1, 0x01, 0x04, 0x7a, 0x82, 0x9e, 0xa0, 0x27, 0xe8, 0x09, 0x7a, 0xaa, 0x21, 0x3d, 0xd1, 0x01,
		0x04, 0x7a, 0x82, 0x9e, 0xa0, 0x27, 0xe8, 0x09, 0x7a, 0xaa, 0x21, 0x3d, 0xd1, 0x01, 0x04, 0x7a,
		0x82, 0x9e, 0xa0, 0x27, 0xe8, 0x09, 0x7a, 0xaa, 0x21, 0x3d, 0xd1, 0x01, 0x04, 0x7a, 0x82, 0x9e,
		0xa0, 0x27, 0xe8, 0x09, 0x7a, 0xaa, 0x21, 0x3d, 0xd1, 0x01, 0x04, 0x7a, 0x82, 0x9e, 0xa0, 0x27,
		0xe8, 0x09, 0x7a, 0xaa, 0x21, 0x3d, 0xbd, 0xb1, 0x47, 0x4f, 0x6f, 0xa0, 0x27, 0xe8, 0x09, 0x7a,
		0x82, 0x9e, 0xa0, 0x27, 0x1a, 0x54, 0x55, 0xb5, 0xb0, 0x2d, 0x36, 0xa8, 0x72, 0xc4, 0xda, 0x8f,
		0xd0, 0xaa, 0x8a, 0x56, 0x55, 0x7b, 0xde, 0xaa, 0xca, 0x95, 0x54, 0x81, 0x87, 0xd2, 0xb4, 0xea,
		0x32, 0x1f, 0x33, 0xba, 0x57, 0x3d, 0xbb, 0xae, 0xf2, 0x9f, 0xce, 0x77, 0xb7, 0x8f, 0xd5, 0xcc,
		0x77, 0xa0, 0xa3, 0x55, 0xc5, 0xbe, 0x10, 0x1d, 0xad, 0xe8, 0x68, 0x55, 0x30, 0x48, 0x42, 0x47,
		0x2b, 0x82, 0x25, 0x04, 0x4b, 0x08, 0x96, 0xd0, 0xd1, 0x6a, 0xc1, 0x26, 0x1d, 0xad, 0x96, 0xed,
		0xd3, 0xd1, 0xaa, 0xf0, 0x67, 0xd0, 0xd1, 0x8a, 0x8e, 0x56, 0x9b, 0x8d, 0xd3, 0xd1, 0xca, 0xa1,
		0xa3, 0x55, 0x59, 0x3d, 0x4d, 0x47, 0x2b, 0xb4, 0x34, 0x5a, 0xfa, 0x60, 0xb5, 0x34, 0x07, 0x8f,
		0x53, 0xc3, 0xe4, 0xc5, 0x68, 0xd2, 0x13, 0x1d, 0xad, 0xa0, 0x27, 0xe8, 0x09, 0x7a, 0x82, 0x9e,
		0xa0, 0xa7, 0x1a, 0xd2, 0x13, 0x1d, 0xad, 0xa0, 0x27, 0xe8, 0x09, 0x7a, 0x82, 0x9e, 0xa0, 0xa7,
		0x1a, 0xd2, 0x13, 0x1d, 0xad, 0xa0, 0x27, 0xe8, 0x09, 0x7a, 0x82, 0x9e, 0xa0, 0xa7, 0x1a, 0xd2,
		0x13, 0x1d, 0xad, 0xa0, 0x27, 0xe8, 0x09, 0x7a, 0x82, 0x9e, 0xa0, 0xa7, 0x1a, 0xd2, 0x13, 0x1d,
		0xad, 0xa0, 0x27, 0xe8, 0x09, 0x7a, 0x82, 0x9e, 0xa0, 0xa7, 0x1a, 0xd2, 0x13, 0x1d, 0xad, 0xa0,
		0x27, 0xe8, 0x09, 0x7a, 0x82, 0x9e, 0xa0, 0xa7, 0x1a, 0xd2, 0x13, 0x1d, 0xad, 0xa0, 0x27, 0xe8,
		0x09, 0x7a, 0x82, 0x9e, 0xa0, 0xa7, 0x1a, 0xd2, 0xd3, 0xb9, 0x3d, 0x7a, 0x3a, 0x87, 0x9e, 0xa0,
		0x27, 0xe8, 0x09, 0x7a, 0x82, 0x9e, 0x68, 0xb8, 0x58, 0xd5, 0xc2, 0xae, 0xa4, 0xe1, 0xa2, 0x23,
		0xd6, 0x27, 0x8b, 0xd6, 0x8b, 0xb4, 0x5e, 0x3c, 0x98, 0xd6, 0x8b, 0xae, 0xa4, 0x32, 0x3c, 0xb8,
		0x26, 0x8c, 0x97, 0xf9, 0xe0, 0xd1, 0x8d, 0xb1, 0xc4, 0x52, 0x9b, 0x5a, 0x6e, 0xee, 0x43, 0x63,
		0xc6, 0xd9, 0xaf, 0x43, 0x8f, 0xc6, 0x8a, 0xdd, 0x27, 0x7a, 0x34, 0xd2, 0xa3, 0xb1, 0x60, 0x5c,
		0x85, 0x1e, 0x8d, 0xc4, 0x57, 0x88, 0xaf, 0x10, 0x5f, 0xa1, 0x47, 0xe3, 0x82, 0x4d, 0x7a, 0x34,
		0x2e, 0xdb, 0xa7, 0x47, 0x63, 0xe1, 0xcf, 0xa0, 0x47, 0x23, 0x3d, 0x1a, 0x37, 0x1b, 0xa7, 0x47,
		0xa3, 0x43, 0x8f, 0xc6, 0xb2, 0x7a, 0x9a, 0x1e, 0x8d, 0x68, 0x69, 0xb4, 0xf4, 0xc1, 0x6a, 0x69,
		0xce, 0x2a, 0xa7, 0x86, 0x49, 0xa5, 0xd1, 0xa5, 0xa7, 0xa6, 0x45, 0x7e, 0x6a, 0x42, 0x50, 0x10,
		0x14, 0x04, 0x05, 0x41, 0x41, 0x50, 0x10, 0x94, 0x26, 0x41, 0xd1, 0x44, 0x18, 0x7a, 0x82, 0x9e,
		0xa0, 0x27, 0xe8, 0x09, 0x7a, 0xaa, 0x21, 0x3d, 0xd1, 0x44, 0x18, 0x7a, 0x82, 0x9e, 0xa0, 0x27,
		0xe8, 0x09, 0x7a, 0xaa, 0x21, 0x3d, 0xd1, 0x44, 0x18, 0x7a, 0x82, 0x9e, 0xa0, 0x27, 0xe8, 0x09,
		0x7a, 0xaa, 0x21, 0x3d, 0xd1, 0x44, 0x18, 0x7a, 0x82, 0x9e, 0xa0, 0x27, 0xe8, 0x09, 0x7a, 0xaa,
		0x21, 0x3d, 0xd1, 0x44, 0x18, 0x7a, 0x82, 0x9e, 0xa0, 0x27, 0xe8, 0x09, 0x7a, 0xaa, 0x21, 0x3d,
		0xd1, 0x44, 0x18, 0x7a, 0x82, 0x9e, 0xa0, 0x27, 0xe8, 0x09, 0x7a, 0xaa, 0x21, 0x3d, 0xd1, 0x44,
		0x18, 0x7a, 0x82, 0x9e, 0xa0, 0x27, 0xe8, 0x09, 0x7a, 0xaa, 0x21, 0x3d, 0xd1, 0x44, 0x18, 0x7a,
		0x82, 0x9e, 0xa0, 0x27, 0xe8, 0x09, 0x7a, 0x92, 0xa2, 0xa7, 0x03, 0x6a, 0x22, 0xec, 0xc8, 0xf5,
		0x74, 0xa4, 0x9f, 0x30, 0xfd, 0x84, 0x0f, 0xb0, 0x9f, 0xb0, 0x2b, 0x5a, 0x27, 0x7f, 0xb8, 0xad,
		0x85, 0x2f, 0xa7, 0xc3, 0xb8, 0xad, 0x26, 0xc3, 0x2f, 0x2a, 0xdc, 0xa4, 0x52, 0x9b, 0xb3, 0xc6,
		0x9b, 0xd2, 0x60, 0x3b, 0xd4, 0x69, 0x1b, 0xe8, 0x2d, 0xc7, 0xf2, 0x8b, 0x49, 0x63, 0x21, 0x35,
		0x06, 0xd3, 0xee, 0xa6, 0x2a, 0x54, 0x1d, 0xa3, 0x85, 0x94, 0x6b, 0xde, 0x05, 0x7b, 0x9a, 0x4b,
		0xdb, 0xac, 0xbb, 0xb3, 0xb1, 0x7f, 0x2b, 0xe1, 0xcf, 0x0a, 0xfb, 0xaf, 0x52, 0xfe, 0xaa, 0xb8,
		0x7f, 0x2a, 0xee, 0x8f, 0xca, 0xfb, 0x9f, 0xd5, 0xc2, 0xb2, 0x69, 0x37, 0xe6, 0x86, 0x8a, 0xbc,
		0xdb, 0x50, 0xc9, 0xf5, 0x7b, 0x1f, 0xdb, 0x93, 0x69, 0xb8, 0xde, 0xa4, 0xe1, 0xfa, 0xb6, 0x42,
		0x4c, 0x34, 0x5c, 0xaf, 0x8b, 0x87, 0x2d, 0x16, 0x32, 0x9a, 0xee, 0xd1, 0x6e, 0x4f, 0xa4, 0xfb,
		0x71, 0xce, 0x9c, 0xc7, 0x48, 0xe0, 0x5d, 0x90, 0xc0, 0x22, 0x72, 0x69, 0x0b, 0x7a, 0xf7, 0xbd,
		0x97, 0x3d, 0x7c, 0xc8, 0x5f, 0xbb, 0xce, 0xfa, 0x36, 0x0e, 0x83, 0xce, 0x93, 0xdb, 0x09, 0xbd,
		0x34, 0x55, 0xa9, 0x80, 0xbe, 0x9d, 0xb7, 0x87, 0xbe, 0x45, 0xdf, 0xa2, 0x6f, 0xf5, 0xb7, 0xa4,
		0x9c, 0xca, 0x9d, 0xb3, 0x8a, 0xd6, 0x45, 0xeb, 0xa2, 0x75, 0x6b, 0xaa, 0x75, 0x27, 0x77, 0x7f,
		0xcc, 0xee, 0x58, 0x37, 0xf1, 0xa2, 0x7b, 0x25, 0x28, 0x80, 0xcf, 0x04, 0x4c, 0xfd, 0x36, 0x7c,
		0x27, 0xa9, 0xa3, 0x50, 0xc1, 0x03, 0xe6, 0xab, 0x20, 0x92, 0x4f, 0x5c, 0xf8, 0x6f, 0x2f, 0xec,
		0x5b, 0xb8, 0x79, 0xa0, 0xf1, 0x4b, 0xe2, 0x0d, 0x55, 0xe2, 0x4f, 0xc1, 0x7d, 0x20, 0x75, 0x14,
		0x37, 0xbf, 0xae, 0xd4, 0xbd, 0x97, 0x05, 0x5f, 0x06, 0xef, 0x7e, 0xe7, 0x85, 0xa9, 0x92, 0xcb,
		0x53, 0x10, 0x3c, 0x58, 0xbf, 0xf2, 0x1e, 0xed, 0x4d, 0xd9, 0x1b, 0xa6, 0x4c, 0x04, 0x2b, 0xe5,
		0xac, 0xdc, 0x6c, 0x15, 0xb3, 0x77, 0xeb, 0x20, 0xfd, 0xac, 0x76, 0xa7, 0xe6, 0x44, 0x3f, 0x2a,
		0x8a, 0x7e, 0x48, 0x38, 0xd3, 0xdb, 0x88, 0x7e, 0x0c, 0xdf, 0xfb, 0xaf, 0xe3, 0xd7, 0xae, 0x73,
		0xf4, 0x23, 0x09, 0xe2, 0x24, 0xc8, 0x9e, 0x04, 0xe2, 0x1e, 0x13, 0x4b, 0x44, 0x3c, 0x88, 0x78,
		0x10, 0xf1, 0x28, 0x67, 0xe0, 0x21, 0x0e, 0x7d, 0xd7, 0x78, 0x2f, 0x2e, 0xad, 0xc3, 0x79, 0xb3,
		0xc4, 0x3c, 0x88, 0x79, 0x10, 0xf3, 0x10, 0xd1, 0xcf, 0x57, 0x5e, 0xe4, 0x7b, 0x59, 0x9c, 0x3c,
		0x09, 0xdc, 0x30, 0x2e, 0x1f, 0x3f, 0xe9, 0x07, 0x51, 0x76, 0x7c, 0x44, 0xac, 0xa4, 0x06, 0xb1,
		0x92, 0x26, 0x8e, 0xf7, 0xae, 0xc5, 0x4a, 0xce, 0x98, 0xb2, 0xfd, 0x8a, 0x95, 0xbc, 0xd8, 0xc2,
		0x92, 0x6d, 0xa4, 0x2a, 0xeb, 0xf7, 0x2c, 0x48, 0xba, 0x05, 0xbb, 0x68, 0x3a, 0x34, 0x1d, 0x9a,
		0x0e, 0x4d, 0x87, 0xa6, 0x43, 0xd3, 0xa1, 0xe9, 0xd0, 0x74, 0x68, 0x3a, 0x2b, 0x4f, 0xea, 0x06,
		0x06, 0xd5, 0x63, 0x96, 0x78, 0x6e, 0x3f, 0x4a, 0x33, 0xe3, 0x8c, 0xfd, 0x81, 0x3a, 0x48, 0x55,
		0xd4, 0x31, 0xc7, 0x5b, 0x41, 0x56, 0x7a, 0x1b, 0xf9, 0x41, 0xc7, 0xcb, 0x54, 0xea, 0x78, 0xce,
		0x44, 0x93, 0x3a, 0x51, 0xec, 0x2b, 0x27, 0x48, 0x9d, 0xce, 0x50, 0x15, 0xf6, 0x13, 0xe5, 0xbf,
		0xaa, 0xbf, 0xf0, 0x1a, 0x0d, 0xed, 0x2e, 0x49, 0xaf, 0xc2, 0x63, 0xbf, 0x6d, 0x5d, 0xf6, 0xa2,
		0x5a, 0x8c, 0x38, 0xdc, 0xc3, 0x52, 0x73, 0xa7, 0xb0, 0xea, 0x63, 0xd2, 0xc9, 0x1b, 0xd7, 0xf8,
		0x84, 0x34, 0x51, 0x9d, 0x38, 0xf1, 0xdd, 0x24, 0xee, 0x67, 0xca, 0xfc, 0x94, 0x74, 0xce, 0x9a,
		0xd9, 0x49, 0x69, 0x93, 0x93, 0x52, 0x69, 0x6e, 0xe0, 0xa4, 0xd4, 0x36, 0xc8, 0x1a, 0x3b, 0xc6,
		0x62, 0x05, 0x51, 0x86, 0x85, 0x50, 0xd5, 0x80, 0x4f, 0x1a, 0xdf, 0x65, 0x6e, 0x2f, 0x51, 0x83,
		0x2f, 0x2b, 0x52, 0x7d, 0xbd, 0x68, 0x10, 0x08, 0x02, 0x82, 0x80, 0xa0, 0x83, 0x81, 0xa0, 0x17,
		0x16, 0x07, 0x38, 0x6f, 0x2b, 0x35, 0xab, 0x5e, 0xdd, 0xa1, 0x94, 0x2c, 0x69, 0xc8, 0x28, 0x3b,
		0xd5, 0x3c, 0x1b, 0xd5, 0x4a, 0x1b, 0x27, 0xb3, 0x04, 0xd4, 0xb2, 0x53, 0x61, 0xe8, 0xcb, 0x6c,
		0xcd, 0x87, 0x69, 0xe8, 0x70, 0x64, 0x95, 0x2e, 0x4b, 0x39, 0x90, 0x2b, 0xbe, 0xdf, 0x8a, 0xfd,
		0x66, 0xc1, 0x65, 0xa0, 0x3b, 0xfd, 0x95, 0x4c, 0x7b, 0x89, 0x29, 0xb6, 0x39, 0xb5, 0xc5, 0x26,
		0xf2, 0xf9, 0x69, 0x29, 0x30, 0x25, 0x8d, 0x38, 0x8b, 0xdc, 0x5e, 0x6f, 0x76, 0x0c, 0x8a, 0xce,
		0x4a, 0x4e, 0x35, 0xcb, 0x26, 0x0a, 0x2e, 0x85, 0x72, 0x69, 0xb5, 0xa5, 0x95, 0x99, 0x8e, 0x12,
		0x33, 0x54, 0x5e, 0xba, 0x4a, 0xcb, 0x58, 0x59, 0x19, 0x2b, 0x29, 0x73, 0xe5, 0x24, 0x0b, 0x13,
		0x65, 0xd3, 0x56, 0x97, 0x56, 0x61, 0xf9, 0x39, 0x58, 0xb7, 0x9e, 0xcb, 0x4e, 0x85, 0x5e, 0xb6,
		0xb8, 0xb6, 0xe3, 0x61, 0xe2, 0x70, 0x08, 0x39, 0x1a, 0xa6, 0x0e, 0x86, 0x98, 0x63, 0x21, 0xe6,
		0x50, 0xc8, 0x39, 0x12, 0x76, 0x75, 0xad, 0x6e, 0x76, 0x77, 0xc3, 0xeb, 0xa5, 0x6e, 0x2f, 0x89,
		0xb3, 0x51, 0x13, 0x0c, 0xb7, 0x1b, 0xfb, 0x02, 0x11, 0xc4, 0x55, 0x46, 0xf1, 0xe2, 0xf1, 0xe2,
		0xf1, 0xe2, 0x35, 0x57, 0xce, 0xa4, 0xda, 0x7c, 0x40, 0x49, 0x72, 0x9b, 0x6b, 0x8e, 0xa5, 0xda,
		0x06, 0x36, 0x7e, 0x8e, 0xfa, 0x5d, 0xf3, 0xf5, 0xf8, 0x31, 0xfe, 0x30, 0x6a, 0x2f, 0x2e, 0x92,
		0x94, 0xd4, 0x1a, 0x1d, 0x65, 0x7c, 0x51, 0xc9, 0x30, 0x47, 0x41, 0xe0, 0x70, 0xf7, 0x68, 0x60,
		0x31, 0x8a, 0x23, 0x77, 0x6a, 0x75, 0xbb, 0x4d, 0x0d, 0xe2, 0xb7, 0xc3, 0xad, 0x21, 0x30, 0x58,
		0xf3, 0xdf, 0xea, 0xc2, 0x39, 0x12, 0x18, 0xae, 0x59, 0x7b, 0xad, 0xdd, 0xca, 0xa4, 0xa8, 0x24,
		0x6e, 0xbe, 0xb0, 0x8f, 0x33, 0x13, 0xb0, 0x58, 0xc7, 0xbc, 0x43, 0xa3, 0x30, 0x2f, 0xcc, 0x0b,
		0xf3, 0x8a, 0x33, 0x2f, 0xa4, 0xbb, 0x82, 0x74, 0x4f, 0x07, 0x63, 0xd6, 0xea, 0x85, 0xfd, 0xb4,
		0xe5, 0xde, 0xfa, 0x41, 0x32, 0x18, 0x33, 0x09, 0xee, 0x6d, 0xcf, 0xd8, 0xed, 0x47, 0xc1, 0xc0,
		0x72, 0x14, 0x4b, 0x19, 0x7f, 0xb3, 0x6c, 0x7c, 0x60, 0x79, 0x5f, 0xc8, 0x7d, 0x71, 0x3a, 0x2e,
		0x9c, 0xd6, 0xe9, 0x4b, 0x31, 0xb3, 0x33, 0x03, 0x26, 0xd2, 0xc3, 0x65, 0xf5, 0x2c, 0x5f, 0x38,
		0x6d, 0x24, 0xc4, 0x4a, 0x09, 0x91, 0xa8, 0x34, 0x8b, 0x93, 0x61, 0x20, 0x7d, 0xd4, 0x87, 0x5e,
		0x46, 0x44, 0x2c, 0x9b, 0x45, 0x46, 0x20, 0x23, 0x90, 0x11, 0x42, 0x32, 0x42, 0x6a, 0x7b, 0xed,
		0xbf, 0x0b, 0xff, 0xbb, 0x52, 0x3d, 0xf7, 0xce, 0x0b, 0x42, 0xe5, 0xbb, 0x61, 0xda, 0x13, 0x73,
		0xe4, 0x7d, 0x15, 0xaa, 0x4c, 0xcd, 0x5a, 0xde, 0x17, 0xbe, 0x5f, 0xfe, 0x66, 0x32, 0x0e, 0xfd,
		0xe2, 0x4c, 0xe0, 0xd6, 0xaf, 0xe4, 0xe4, 0xe5, 0xd4, 0x12, 0x73, 0x42, 0x36, 0x4d, 0x57, 0x81,
		0x8d, 0x61, 0x63, 0xd8, 0x38, 0x5f, 0x39, 0x97, 0x4b, 0xfb, 0xc9, 0x0d, 0x55, 0x74, 0x9f, 0x3d,
		0x48, 0xb0, 0xb0, 0x81, 0x0f, 0xd4, 0x78, 0x37, 0x7a, 0x8b, 0x1a, 0x54, 0x4f, 0x49, 0x56, 0xa7,
		0x4a, 0x77, 0x65, 0xb5, 0x56, 0xda, 0x28, 0x5f, 0xd2, 0xf8, 0x4d, 0xa6, 0xd1, 0xa4, 0xfc, 0x54,
		0x9c, 0xb6, 0x0f, 0x6f, 0x2e, 0x76, 0xab, 0x44, 0x8c, 0x9b, 0xd3, 0xe8, 0xb3, 0x88, 0x4a, 0xe1,
		0xe6, 0x34, 0xd3, 0x05, 0xc8, 0xcd, 0x69, 0xd5, 0x6e, 0x55, 0xe9, 0x2d, 0x6b, 0x6d, 0xeb, 0x5a,
		0xdb, 0xc2, 0xf6, 0xb6, 0xb2, 0x10, 0x95, 0x73, 0x73, 0x5a, 0xcd, 0x22, 0x33, 0x7b, 0x56, 0x0e,
		0xbf, 0x94, 0x09, 0xbf, 0xf4, 0x27, 0x75, 0xbc, 0x33, 0xed, 0xd7, 0x2c, 0x7a, 0xdf, 0x9b, 0xf9,
		0xcb, 0xf9, 0xff, 0xde, 0x9d, 0xdb, 0xd2, 0x46, 0x89, 0x47, 0xee, 0x60, 0x52, 0xfd, 0x7e, 0xa8,
		0x86, 0xfe, 0x7d, 0x2a, 0x51, 0x16, 0xbf, 0xca, 0x2c, 0x0a, 0x17, 0x85, 0x8b, 0xc2, 0x35, 0xdf,
		0xa0, 0x72, 0x7a, 0x77, 0xa5, 0x75, 0x19, 0xf5, 0xdb, 0x42, 0xfd, 0xa2, 0x7e, 0x0f, 0x5d, 0xfd,
		0x9a, 0x6e, 0xff, 0xb5, 0x30, 0x70, 0x97, 0xa8, 0xff, 0xd7, 0x57, 0x51, 0xe7, 0x49, 0x6e, 0xd1,
		0xac, 0xc3, 0x84, 0xe9, 0x47, 0x09, 0xcd, 0xb5, 0x8c, 0x7b, 0x2c, 0x0e, 0x14, 0x36, 0x00, 0xc3,
		0x32, 0x70, 0xd8, 0x02, 0x10, 0xeb, 0x40, 0x62, 0x1d, 0x50, 0xec, 0x03, 0x8b, 0x0c, 0xc0, 0x08,
		0x01, 0x8d, 0xbc, 0xbb, 0xbd, 0xb4, 0x72, 0xc5, 0x1a, 0xd6, 0x2e, 0xe2, 0x80, 0x60, 0x2f, 0x4f,
		0xe1, 0x06, 0xb6, 0x93, 0x7f, 0x64, 0x37, 0x95, 0x63, 0xab, 0xa1, 0x6d, 0x6e, 0xdc, 0xd2, 0xc5,
		0x8e, 0xb9, 0x7d, 0xdb, 0xdd, 0x52, 0xa7, 0x6b, 0xcf, 0x56, 0xd7, 0x54, 0xe1, 0x6d, 0x37, 0x3f,
		0xb5, 0x16, 0x1a, 0xdf, 0x2e, 0x4d, 0xed, 0x31, 0x53, 0x5b, 0x09, 0x2e, 0xcb, 0x5b, 0xbb, 0xa9,
		0x49, 0xc3, 0xde, 0x6f, 0x2f, 0xe5, 0x55, 0x69, 0xd7, 0x7b, 0x74, 0xb3, 0x24, 0x50, 0xa9, 0x7d,
		0x55, 0x3a, 0xfd, 0x28, 0x54, 0x29, 0xaa, 0x14, 0x55, 0x8a, 0x2a, 0x45, 0x95, 0xa2, 0x4a, 0x51,
		0xa5, 0x5b, 0x55, 0xa5, 0x47, 0x4d, 0x89, 0x6a, 0x39, 0x84, 0x29, 0xc2, 0xd4, 0x70, 0x12, 0xd3,
		0xce, 0xc3, 0x28, 0x55, 0x59, 0x28, 0x41, 0x68, 0x89, 0x77, 0x16, 0x3f, 0x00, 0x11, 0x8a, 0x08,
		0x45, 0x84, 0x1e, 0xa8, 0x08, 0x95, 0xca, 0x48, 0x5a, 0x84, 0x01, 0xc3, 0xcc, 0xa4, 0xda, 0x41,
		0xf2, 0xc8, 0x73, 0xf7, 0xbd, 0xcc, 0x0e, 0x20, 0xcf, 0x98, 0x97, 0x85, 0xe3, 0x16, 0x70, 0x0c,
		0x1c, 0x03, 0xc7, 0xb2, 0x70, 0x2c, 0x75, 0x34, 0x9e, 0x1b, 0xf4, 0xbd, 0x27, 0xf9, 0x65, 0x35,
		0xd9, 0x0d, 0x03, 0xe3, 0xc2, 0xf3, 0x2d, 0xab, 0xf5, 0xac, 0x81, 0x8c, 0x4d, 0xb0, 0xa9, 0x08,
		0x74, 0x6c, 0x83, 0x4f, 0x65, 0x20, 0x54, 0x19, 0x18, 0x55, 0x07, 0x4a, 0x96, 0xbc, 0x62, 0xe1,
		0xb5, 0x2f, 0x78, 0x97, 0xac, 0x7d, 0x5d, 0xba, 0xb4, 0xab, 0xc4, 0x83, 0xa4, 0x8b, 0x18, 0x76,
		0x66, 0xc1, 0xb4, 0x9d, 0xa0, 0xe9, 0xe4, 0x1f, 0x3b, 0x00, 0xe0, 0xd8, 0x0e, 0xa2, 0x2e, 0x45,
		0xdc, 0x2c, 0x05, 0x53, 0x2b, 0x0f, 0xbb, 0x55, 0x17, 0x7e, 0xb3, 0x04, 0x11, 0x0b, 0x70, 0xf1,
		0x58, 0xdd, 0x12, 0x38, 0x66, 0x0d, 0xd4, 0x83, 0x74, 0xec, 0x59, 0xbd, 0xa9, 0x69, 0xc8, 0x58,
		0xf2, 0xbe, 0xe8, 0x87, 0xb8, 0x9f, 0xd8, 0xd3, 0xef, 0x43, 0xeb, 0x08, 0x78, 0x04, 0x3c, 0x02,
		0x1e, 0x01, 0x8f, 0x80, 0x47, 0xc0, 0xd7, 0x45, 0xc0, 0x37, 0x11, 0x6f, 0x87, 0x2e, 0xe0, 0x8f,
		0x8e, 0x59, 0x03, 0x08, 0xf8, 0x9d, 0x17, 0xf0, 0xdd, 0x20, 0x2a, 0x75, 0x17, 0x5e, 0x79, 0x6d,
		0x39, 0xfe, 0x00, 0x64, 0x3c, 0x32, 0x1e, 0x19, 0x8f, 0x8c, 0x47, 0xc6, 0x23, 0xe3, 0x91, 0xf1,
		0xc8, 0xf8, 0x9a, 0xc8, 0xf8, 0x93, 0x73, 0xd6, 0x00, 0x32, 0x7e, 0xf7, 0x65, 0x7c, 0x1c, 0x0d,
		0x5b, 0x7b, 0xd9, 0x12, 0xf1, 0x43, 0xf3, 0x48, 0x78, 0x24, 0x3c, 0x12, 0x1e, 0x09, 0x8f, 0x84,
		0x47, 0xc2, 0x23, 0xe1, 0x91, 0xf0, 0x35, 0x91, 0xf0, 0x2d, 0x52, 0x69, 0x90, 0xf0, 0xbb, 0x2f,
		0xe1, 0x9f, 0x94, 0x67, 0x31, 0x95, 0x66, 0x68, 0x1d, 0x01, 0x8f, 0x80, 0x47, 0xc0, 0x23, 0xe0,
		0x11, 0xf0, 0x08, 0xf8, 0xba, 0x08, 0xf8, 0xa3, 0x66, 0xeb, 0x04, 0xfd, 0x76, 0xe8, 0x1a, 0xfe,
		0xa8, 0x79, 0xcc, 0x2a, 0x40, 0xc5, 0x6f, 0x49, 0xc5, 0xd7, 0xaa, 0xc4, 0x56, 0x3d, 0x66, 0x89,
		0xe7, 0xf6, 0xa3, 0x34, 0x13, 0x6d, 0x82, 0x32, 0xb4, 0xdd, 0x4b, 0x54, 0xaa, 0xa2, 0xce, 0x4e,
		0xb4, 0xb5, 0x9a, 0x70, 0xff, 0xdb, 0xc8, 0x0f, 0x3a, 0x5e, 0xa6, 0x52, 0xc7, 0x73, 0xe6, 0xfa,
		0x05, 0x38, 0x51, 0xec, 0x2b, 0x27, 0x48, 0x9d, 0xce, 0xd0, 0x61, 0xe8, 0x27, 0xca, 0x7f, 0xb5,
		0xfb, 0x9a, 0x7b, 0x34, 0x3f, 0xfb, 0xa4, 0xba, 0xcb, 0x4d, 0x20, 0x9d, 0x9b, 0xb6, 0x82, 0x3a,
		0x42, 0x17, 0x0d, 0x2d, 0xd9, 0xdd, 0xc2, 0xc5, 0x43, 0x2b, 0xaf, 0xb1, 0x59, 0xf9, 0xa7, 0xaf,
		0x6d, 0xf4, 0x1f, 0x71, 0xaa, 0xbc, 0xb2, 0xe8, 0xb7, 0xe1, 0xb7, 0xfa, 0x30, 0xfe, 0x1a, 0x03,
		0xc8, 0x4c, 0x57, 0xfc, 0xd9, 0xe7, 0xc9, 0x7f, 0xfc, 0x34, 0xf8, 0x9a, 0x7b, 0xd9, 0x9e, 0xa6,
		0x9f, 0xc8, 0x2e, 0xde, 0x15, 0x2d, 0x6a, 0x26, 0x1f, 0x41, 0x9b, 0x9a, 0x9a, 0x46, 0xc9, 0x68,
		0x53, 0xb3, 0xbd, 0x28, 0xd8, 0x9e, 0xb7, 0xa9, 0xa1, 0xce, 0xd5, 0x12, 0xcc, 0xd8, 0x84, 0x9b,
		0x8a, 0x60, 0x67, 0x4b, 0x8e, 0x02, 0xc1, 0xf9, 0xed, 0x39, 0x01, 0x04, 0xe7, 0x09, 0xce, 0x57,
		0x1b, 0x0e, 0x99, 0xae, 0x15, 0xb2, 0x6b, 0x4c, 0xd6, 0x2c, 0x91, 0xf9, 0x92, 0x4b, 0xa0, 0x75,
		0x7a, 0xc6, 0x22, 0xa8, 0x05, 0xeb, 0xd8, 0xb3, 0x4a, 0xa1, 0xab, 0x84, 0xb8, 0xa4, 0xd0, 0x15,
		0x1d, 0x8f, 0x8e, 0x47, 0xc7, 0xa3, 0xe3, 0xd1, 0xf1, 0xe8, 0x78, 0x74, 0x7c, 0xbd, 0x74, 0x3c,
		0x85, 0xae, 0xc8, 0xf8, 0x6d, 0xc9, 0x78, 0xf2, 0x6b, 0xea, 0x47, 0x44, 0xcf, 0xe4, 0xd7, 0x8c,
		0x0f, 0x3b, 0xc9, 0xb1, 0xd9, 0x0d, 0xd1, 0x5d, 0x7e, 0x12, 0xc9, 0xb3, 0xd9, 0x0a, 0xfa, 0x1c,
		0x7a, 0x9e, 0x8d, 0x6c, 0x12, 0x85, 0x53, 0xe7, 0x5c, 0x9b, 0xc9, 0x57, 0xdd, 0xc7, 0x7c, 0x9b,
		0xf1, 0x68, 0xdb, 0xca, 0xb5, 0x19, 0x9a, 0xe7, 0x76, 0xbe, 0x9a, 0x06, 0xca, 0xc8, 0xb3, 0xd9,
		0x5e, 0x20, 0xec, 0x50, 0x6e, 0xe7, 0x1b, 0x11, 0x58, 0x10, 0xa7, 0xee, 0x63, 0xe2, 0xa6, 0x59,
		0x12, 0x44, 0xf7, 0x36, 0xee, 0xea, 0x7b, 0x23, 0x68, 0xf3, 0x9d, 0x8a, 0xee, 0x87, 0xf4, 0xcb,
		0x8d, 0xd1, 0xdc, 0x18, 0xbd, 0xa5, 0xd8, 0x52, 0x45, 0x37, 0x46, 0x9f, 0xb4, 0x99, 0xdc, 0x5d,
		0x75, 0x87, 0x04, 0x11, 0xef, 0xbd, 0x97, 0x65, 0x2a, 0x89, 0xc4, 0x21, 0xaf, 0xf1, 0xe9, 0xfa,
		0xfa, 0xeb, 0xf5, 0xb5, 0x7b, 0x7d, 0xfd, 0xea, 0xe2, 0xe5, 0xe7, 0xff, 0xfc, 0x97, 0x3f, 0xfd,
		0xeb, 0xf5, 0xf5, 0x0f, 0x7f, 0xb9, 0xbe, 0xfe, 0xe7, 0xbf, 0xdf, 0xfc, 0xd0, 0xd8, 0xbf, 0xab,
		0xb3, 0x5f, 0x6c, 0x11, 0x44, 0x06, 0x9a, 0x4b, 0x5a, 0x7a, 0x37, 0xde, 0x05, 0x69, 0x36, 0xf0,
		0x9b, 0x44, 0x90, 0x68, 0xc0, 0x56, 0x3f, 0x87, 0x6a, 0xa0, 0xaa, 0x84, 0x00, 0x61, 0x00, 0x92,
		0x33, 0x16, 0x5b, 0x6f, 0xda, 0xed, 0xd3, 0xb3, 0x76, 0xbb, 0x79, 0x76, 0x7c, 0xd6, 0x3c, 0x3f,
		0x39, 0x69, 0x9d, 0x4a, 0x54, 0x24, 0x37, 0x7e, 0x4d, 0x7c, 0x95, 0x28, 0xff, 0xc7, 0xc1, 0xf0,
		0x46, 0xfd, 0x30, 0xdc, 0xea, 0x2c, 0x0b, 0x87, 0x1d, 0xea, 0x1d, 0x6e, 0x68, 0x48, 0x78, 0xba,
		0xb5, 0x0a, 0x2a, 0x98, 0x81, 0x9e, 0x3e, 0xc0, 0xe8, 0x3d, 0xa9, 0xb9, 0x58, 0xa5, 0x16, 0x69,
		0x6d, 0x16, 0xa7, 0xc1, 0x3a, 0xdc, 0xe6, 0xfa, 0xd3, 0x5b, 0x6c, 0xe5, 0x97, 0x8a, 0xc6, 0x32,
		0x69, 0xa4, 0xfd, 0x5b, 0x37, 0x52, 0xd9, 0xd7, 0x38, 0xf9, 0xdd, 0xed, 0xc4, 0x51, 0xf4, 0xff,
		0xb3, 0xf7, 0xb6, 0xcd, 0x6d, 0x1b, 0x5b, 0xbe, 0xef, 0x7b, 0x7f, 0x0a, 0x1c, 0xce, 0xa4, 0x26,
		0xd9, 0x31, 0x2c, 0x92, 0x22, 0x25, 0x4b, 0x53, 0xbb, 0xf6, 0x56, 0x26, 0xc9, 0xec, 0xd4, 0xb6,
		0x13, 0xdf, 0xd8, 0x73, 0xea, 0x9e, 0x63, 0xea, 0xba, 0x20, 0xb2, 0x25, 0x63, 0x02, 0x01, 0x1c,
		0x00, 0xb4, 0xad, 0x24, 0xfa, 0xee, 0xb7, 0x08, 0x92, 0xe0, 0xa3, 0x24, 0xa0, 0x7b, 0x35, 0x08,
		0x92, 0xbf, 0xbc, 0x48, 0x98, 0xc4, 0x5c, 0x00, 0xbb, 0x7b, 0xad, 0xff, 0x7f, 0x3d, 0xb6, 0xca,
		0xd8, 0xa2, 0x7b, 0x1b, 0x0d, 0xf4, 0xfd, 0xd0, 0x79, 0xf8, 0xe9, 0x11, 0xe1, 0x9a, 0x47, 0xda,
		0xac, 0xc9, 0xcb, 0x38, 0xd8, 0x24, 0x11, 0x5c, 0x12, 0x0e, 0x26, 0x49, 0x05, 0x8f, 0xc4, 0x83,
		0x45, 0xe2, 0xc1, 0x21, 0xf9, 0x60, 0x50, 0xb5, 0xe6, 0xd8, 0xb4, 0x89, 0xaa, 0x21, 0xa5, 0xa0,
		0x6b, 0x27, 0x51, 0x46, 0x39, 0x85, 0x23, 0xc4, 0x62, 0x91, 0x61, 0xc9, 0x88, 0xb0, 0xa5, 0x48,
		0xb0, 0x74, 0x04, 0xd8, 0x5a, 0xe4, 0xd7, 0x5a, 0xc4, 0xd7, 0x5e, 0xa4, 0x77, 0xbb, 0xee, 0xa0,
		0x58, 0x44, 0x37, 0x3f, 0x79, 0xaf, 0xa7, 0x8b, 0x33, 0xe6, 0x4c, 0x49, 0xd8, 0x97, 0xd0, 0xd8,
		0x25, 0x68, 0x15, 0x08, 0x45, 0x35, 0x7e, 0x08, 0x47, 0xb7, 0x72, 0x87, 0xf9, 0x5d, 0xf4, 0x76,
		0x12, 0xb0, 0x16, 0x8d, 0x8c, 0xb7, 0x32, 0x8a, 0x12, 0xf6, 0x5d, 0xd1, 0xe4, 0x69, 0x7b, 0x26,
		0xd5, 0x97, 0x94, 0x7a, 0x3c, 0x93, 0x9a, 0x34, 0xea, 0x95, 0xaf, 0x88, 0x7e, 0xca, 0x34, 0x56,
		0x32, 0xf1, 0x9e, 0xad, 0xdd, 0xb9, 0xd3, 0x7e, 0x2e, 0x2b, 0x33, 0x94, 0x0d, 0xa1, 0x4f, 0x77,
		0xe3, 0xdc, 0x39, 0xde, 0x8f, 0xa8, 0xd7, 0xb3, 0x2d, 0x1c, 0xa5, 0x65, 0xde, 0x11, 0xfa, 0x69,
		0x34, 0xd6, 0x72, 0x9b, 0xdc, 0x66, 0xf9, 0x19, 0xd0, 0x1c, 0x68, 0x0e, 0x34, 0xa7, 0xa6, 0x34,
		0x47, 0xac, 0x7b, 0x42, 0xb0, 0x5b, 0x42, 0xb8, 0x3b, 0x42, 0x10, 0x35, 0x6d, 0x64, 0xa0, 0x6d,
		0x65, 0x9e, 0xad, 0x27, 0x25, 0xed, 0x25, 0x23, 0x25, 0x1b, 0x28, 0x6d, 0x64, 0x96, 0xf3, 0x2d,
		0x3b, 0x61, 0xcb, 0xc4, 0x98, 0x95, 0x8c, 0x94, 0x4b, 0x52, 0x0e, 0x65, 0xd8, 0x75, 0xf5, 0x29,
		0x07, 0xf9, 0x68, 0xb5, 0x53, 0x65, 0xe2, 0xe1, 0xed, 0xe8, 0xea, 0xe7, 0xc9, 0xdb, 0xff, 0x47,
		0xfe, 0xf2, 0xaf, 0xc7, 0xef, 0x5e, 0xe3, 0xec, 0x43, 0xea, 0xdf, 0xaa, 0x38, 0x31, 0x4f, 0x34,
		0x4c, 0xe5, 0x90, 0x53, 0x20, 0xa7, 0xb0, 0x75, 0x3e, 0xbe, 0x63, 0x39, 0x05, 0x6f, 0x98, 0xb8,
		0x1f, 0xa3, 0x60, 0xe0, 0x46, 0xd7, 0xd7, 0x72, 0x4e, 0xf7, 0x92, 0x54, 0xdc, 0x6c, 0xdc, 0x6c,
		0xdc, 0x6c, 0xdc, 0x6c, 0xdc, 0xec, 0x27, 0xdc, 0xec, 0x66, 0x13, 0xaf, 0x6d, 0xd7, 0x1c, 0xed,
		0x56, 0xb3, 0xc9, 0xb6, 0xe1, 0x6c, 0x9b, 0x1f, 0xdb, 0x8c, 0x33, 0x7d, 0xf6, 0xfc, 0xd4, 0x4d,
		0x23, 0x37, 0x56, 0x49, 0x1a, 0xc5, 0x4a, 0x96, 0x90, 0xad, 0x0a, 0x87, 0x97, 0xc1, 0xcb, 0xe0,
		0x65, 0xf0, 0x32, 0x78, 0xd9, 0xe3, 0x10, 0x0f, 0xbc, 0xef, 0x1c, 0x2b, 0x3b, 0x6d, 0xb3, 0x69,
		0x70, 0xb2, 0x6d, 0x04, 0xe4, 0x76, 0x38, 0x01, 0x62, 0x14, 0x45, 0x77, 0xaa, 0xcc, 0x75, 0xbc,
		0x9b, 0xbc, 0x69, 0x55, 0x99, 0x8d, 0x67, 0x16, 0x0f, 0xce, 0xac, 0x5f, 0x70, 0x69, 0xb7, 0x74,
		0xba, 0xae, 0xcc, 0x9a, 0x04, 0xcd, 0x9b, 0x02, 0xad, 0x34, 0x01, 0x9a, 0x35, 0xfd, 0x95, 0xdd,
		0x0a, 0x43, 0xdd, 0xdd, 0x82, 0xce, 0x36, 0x74, 0x5a, 0x7e, 0xaa, 0x51, 0xd2, 0x72, 0xda, 0x59,
		0x5c, 0xc7, 0x8a, 0xfd, 0xc9, 0x82, 0x5b, 0xaf, 0xbb, 0xe5, 0xf6, 0xb7, 0xba, 0xc4, 0xce, 0x5a,
		0xdb, 0xd1, 0x62, 0x5b, 0xf8, 0xf4, 0x86, 0x14, 0xd8, 0x8c, 0xc6, 0xb0, 0x7d, 0x3b, 0x4c, 0xd5,
		0xe2, 0x02, 0x14, 0xdd, 0x8f, 0xdc, 0x65, 0x5a, 0x17, 0x51, 0xf0, 0x10, 0x94, 0x4b, 0x00, 0x97,
		0x8e, 0x58, 0xe8, 0x44, 0x26, 0x0c, 0x23, 0x10, 0xba, 0x91, 0x06, 0xe3, 0x88, 0x82, 0x71, 0xe4,
		0xc0, 0x3c, 0x42, 0x20, 0x6b, 0x20, 0xca, 0x26, 0x58, 0xd7, 0x4e, 0x61, 0xf9, 0x3d, 0x78, 0xe8,
		0x3c, 0x97, 0xdd, 0x0a, 0xbd, 0xba, 0x06, 0xed, 0x80, 0x9c, 0x49, 0x00, 0x4e, 0x28, 0xe0, 0x66,
		0x1a, 0x60, 0x13, 0x0b, 0xa8, 0x89, 0x05, 0xd0, 0xe4, 0x02, 0x66, 0x76, 0x59, 0xac, 0x6e, 0x1d,
		0x42, 0xc3, 0xbb, 0xbe, 0xf6, 0x43, 0x3f, 0xbd, 0x73, 0x6f, 0xbd, 0xe4, 0x37, 0xf3, 0x4a, 0xa0,
		0x65, 0x71, 0x14, 0x04, 0x51, 0x10, 0xb4, 0xf5, 0x08, 0xf5, 0xae, 0x15, 0x04, 0x4d, 0x35, 0x48,
		0x30, 0xf7, 0x34, 0x93, 0x48, 0xc2, 0xa9, 0x22, 0x75, 0x95, 0x56, 0x5b, 0x6b, 0xea, 0x6b, 0x4d,
		0x8d, 0xed, 0xa9, 0xb3, 0x4c, 0x40, 0xd4, 0x34, 0xe1, 0x24, 0x78, 0x33, 0x8a, 0x85, 0xe4, 0xd5,
		0x3f, 0xd4, 0x17, 0xd7, 0x0f, 0x53, 0x75, 0xa3, 0x62, 0xc9, 0xce, 0x64, 0x81, 0xe1, 0x92, 0xe2,
		0x23, 0xd6, 0x1a, 0xef, 0x9b, 0xee, 0x99, 0xe7, 0x5e, 0x5f, 0xb8, 0x3f, 0x5e, 0xfe, 0xd1, 0x7a,
		0xfe, 0xf2, 0xbe, 0x71, 0x90, 0xc5, 0x0b, 0x46, 0xec, 0x6d, 0xdd, 0x0a, 0xea, 0x93, 0x37, 0xd0,
		0x02, 0xb4, 0x00, 0x2d, 0x40, 0x0b, 0xd0, 0xc2, 0x36, 0x5a, 0x54, 0xea, 0xd6, 0x08, 0x5e, 0x32,
		0x23, 0x77, 0xa9, 0x8c, 0xa0, 0x0e, 0x2c, 0xde, 0x37, 0xb2, 0x14, 0xc3, 0xb0, 0x74, 0x61, 0x8c,
		0x65, 0x5b, 0x2f, 0x79, 0x21, 0x4c, 0x35, 0xd6, 0xbe, 0xdc, 0x06, 0xec, 0xec, 0xb4, 0x8e, 0x4b,
		0x8a, 0x21, 0x54, 0x7a, 0xb4, 0x96, 0x29, 0x5a, 0xfb, 0x2f, 0x47, 0x12, 0x81, 0x44, 0x47, 0x34,
		0x39, 0xf7, 0xa6, 0xfd, 0x7a, 0x98, 0xaa, 0x85, 0xff, 0xbb, 0xf2, 0x1f, 0x3e, 0x5c, 0x4c, 0x5f,
		0xf9, 0xf5, 0xf8, 0x8d, 0x6b, 0xdc, 0xf5, 0xb9, 0xa1, 0xd4, 0xc1, 0x3c, 0xee, 0x6b, 0x5a, 0x3e,
		0x21, 0xe4, 0x37, 0x10, 0xfc, 0xad, 0xd0, 0x1f, 0x20, 0xf8, 0x2b, 0xcd, 0xcd, 0xf3, 0x93, 0x73,
		0xb1, 0xa6, 0x4f, 0x6e, 0x30, 0xb9, 0x8e, 0xc3, 0xe0, 0x1c, 0x09, 0x30, 0x73, 0xa9, 0x4b, 0x41,
		0x64, 0xc6, 0xa8, 0xcb, 0xd1, 0x27, 0xe1, 0x51, 0x2b, 0xd6, 0xca, 0x55, 0xe5, 0xcb, 0x54, 0xef,
		0x65, 0xe6, 0xcf, 0xcb, 0x6f, 0xc5, 0x49, 0xe7, 0xf0, 0xf6, 0x62, 0xb7, 0x58, 0x69, 0x25, 0x6c,
		0xe5, 0xca, 0x0b, 0x07, 0x9f, 0xfd, 0x41, 0x66, 0x73, 0x0c, 0x49, 0xca, 0x5c, 0x14, 0x89, 0x69,
		0xb8, 0xc9, 0x81, 0x71, 0x13, 0xe3, 0xc4, 0xb4, 0xb9, 0x22, 0x8a, 0x2b, 0xa4, 0x90, 0xd3, 0x20,
		0xa6, 0xa0, 0x92, 0x8a, 0x6a, 0x49, 0x61, 0x2b, 0x0a, 0x40, 0x91, 0x6c, 0xd8, 0x16, 0x21, 0xab,
		0x79, 0xb2, 0x81, 0xbe, 0xca, 0x6d, 0xf9, 0x38, 0x6b, 0x04, 0x9b, 0x16, 0x3d, 0x41, 0x1f, 0xc8,
		0x8a, 0x2f, 0xb4, 0xb6, 0x65, 0x9d, 0xf6, 0x59, 0xe7, 0xec, 0xe4, 0xb4, 0x7d, 0xd6, 0x65, 0xef,
		0x44, 0x8c, 0xad, 0x9c, 0x94, 0x5d, 0xac, 0x1a, 0xe9, 0x07, 0x5e, 0x92, 0xb8, 0x51, 0xec, 0x0e,
		0xa3, 0x28, 0x70, 0x53, 0x09, 0x63, 0x3f, 0x9f, 0xfb, 0xbd, 0x2e, 0x1b, 0x92, 0x07, 0xc9, 0x83,
		0xe4, 0x41, 0xf2, 0x20, 0x79, 0x90, 0x3c, 0x48, 0xde, 0x83, 0x5b, 0xc6, 0xb8, 0x77, 0xb8, 0x9d,
		0x39, 0xb7, 0x1b, 0x24, 0xa9, 0x12, 0xa6, 0x74, 0x73, 0x91, 0x30, 0x39, 0x98, 0x1c, 0x4c, 0xee,
		0x00, 0x98, 0xdc, 0xec, 0xb2, 0xbb, 0x3c, 0x52, 0xef, 0x8e, 0x8d, 0x00, 0xd7, 0xdd, 0x95, 0x97,
		0xda, 0xcc, 0xae, 0x90, 0x4b, 0xc7, 0xbb, 0x1d, 0x0f, 0xa4, 0x56, 0x31, 0x97, 0xde, 0x9a, 0x2a,
		0xb2, 0xbb, 0xfc, 0x84, 0x7d, 0xbf, 0xac, 0x6e, 0xfd, 0x17, 0x0b, 0x5f, 0x32, 0xb7, 0x22, 0xbb,
		0x79, 0xe8, 0x97, 0xcd, 0x51, 0x74, 0x6e, 0xa9, 0xe8, 0x3c, 0x37, 0xb0, 0x14, 0x9c, 0x57, 0x5f,
		0x70, 0xfe, 0xf8, 0xe2, 0x53, 0x6c, 0x5e, 0x6c, 0x71, 0x77, 0xb7, 0xd8, 0x5c, 0xa2, 0x0e, 0xa1,
		0xc2, 0x42, 0xf3, 0xef, 0xf2, 0xd7, 0xad, 0x71, 0xdd, 0xd6, 0xb5, 0x97, 0xa4, 0x6e, 0xac, 0xe2,
		0x48, 0x67, 0x06, 0xcf, 0x9a, 0xa9, 0x5c, 0x92, 0x46, 0xf5, 0x16, 0xd5, 0x5b, 0x5b, 0xf7, 0x1e,
		0x77, 0xb5, 0x7a, 0xcb, 0x1d, 0xc6, 0x51, 0x3a, 0xb9, 0x9e, 0xcc, 0x42, 0x21, 0xd7, 0xa2, 0x74,
		0x82, 0x44, 0x04, 0x89, 0x08, 0x12, 0x1d, 0x40, 0x90, 0x88, 0x74, 0x5f, 0xa9, 0xbd, 0x24, 0xdd,
		0xb7, 0x78, 0x86, 0x48, 0xf7, 0xb1, 0x65, 0x62, 0x71, 0x31, 0xe7, 0x60, 0xd3, 0x7d, 0x61, 0x34,
		0x50, 0x56, 0xa8, 0xdd, 0xaa, 0x60, 0x58, 0x1d, 0xac, 0x0e, 0x56, 0x07, 0xab, 0x83, 0xd5, 0xc1,
		0xea, 0x60, 0x75, 0xb0, 0x3a, 0x58, 0x9d, 0x95, 0x6f, 0x92, 0x33, 0xdd, 0x8c, 0x4a, 0x8b, 0x69,
		0xbb, 0xc5, 0xa4, 0x00, 0x69, 0xd3, 0xea, 0xd3, 0xa6, 0x4f, 0xae, 0x3f, 0x99, 0xd3, 0x62, 0xeb,
		0xbb, 0xbb, 0x99, 0x53, 0x81, 0xbc, 0x9c, 0x53, 0x6d, 0xf2, 0xf4, 0x47, 0x2f, 0x49, 0x7f, 0x9d,
		0xbe, 0x70, 0x8d, 0xd3, 0xa7, 0x7e, 0x98, 0xaa, 0xf8, 0xda, 0xeb, 0x2f, 0x94, 0xde, 0x99, 0x67,
		0x51, 0x37, 0x09, 0x65, 0x4c, 0x17, 0xc9, 0xd4, 0xad, 0xfb, 0xe3, 0xbb, 0x3a, 0xa6, 0xcb, 0xd8,
		0x47, 0x16, 0xf0, 0x8d, 0x85, 0x7c, 0xe2, 0xba, 0x4e, 0xe4, 0x6a, 0x32, 0x91, 0x6b, 0xcb, 0xbe,
		0xad, 0xb5, 0xee, 0x73, 0x26, 0x73, 0xd9, 0x22, 0xa2, 0x95, 0x50, 0x94, 0x20, 0xba, 0xb9, 0x31,
		0x29, 0x93, 0xcf, 0xad, 0xe8, 0x4c, 0x10, 0x75, 0x5d, 0x50, 0x91, 0x03, 0xa3, 0x22, 0xe6, 0xd7,
		0x45, 0x05, 0x81, 0xe0, 0x4d, 0x51, 0x41, 0x40, 0x7e, 0xaf, 0x2a, 0x25, 0xad, 0x28, 0xc4, 0x44,
		0x7e, 0x6f, 0x5b, 0x44, 0xcc, 0x42, 0x4e, 0x4e, 0xdd, 0x0e, 0x8d, 0xef, 0x71, 0x5b, 0xc2, 0xcc,
		0xe3, 0x1d, 0x2c, 0x75, 0x98, 0x17, 0x9b, 0xf6, 0x3f, 0x8e, 0x5d, 0x1f, 0xf7, 0x56, 0x25, 0x89,
		0x77, 0xa3, 0x6c, 0x94, 0xb3, 0xae, 0x3c, 0x01, 0xe3, 0x88, 0x71, 0xc4, 0x38, 0x62, 0x1c, 0xeb,
		0x6b, 0x1c, 0xfd, 0x30, 0x19, 0x5d, 0x5f, 0xfb, 0x7d, 0x5f, 0x85, 0xa9, 0x7b, 0xf5, 0x59, 0xde,
		0x36, 0x3e, 0xf4, 0x00, 0x4c, 0x23, 0xa6, 0x11, 0xd3, 0x88, 0x69, 0xac, 0xaf, 0x69, 0x1c, 0xf6,
		0xbd, 0xa0, 0xef, 0x5e, 0x7b, 0x7e, 0x30, 0x8a, 0x2d, 0x90, 0xc6, 0xcd, 0xe2, 0x31, 0x8b, 0x98,
		0x45, 0xcc, 0x22, 0x66, 0xb1, 0xbe, 0x66, 0x31, 0x56, 0xd1, 0x30, 0xf5, 0x6f, 0xfd, 0xdf, 0xb3,
		0xba, 0x8e, 0xf1, 0x92, 0x24, 0xf2, 0xc6, 0xf1, 0xb1, 0x87, 0x60, 0x22, 0x31, 0x91, 0x98, 0x48,
		0x4c, 0xe4, 0x2e, 0x98, 0xc8, 0x81, 0x4d, 0xd3, 0x38, 0xc0, 0x24, 0x62, 0x12, 0x31, 0x89, 0x98,
		0xc4, 0x9d, 0x30, 0x89, 0x59, 0x09, 0x6d, 0x66, 0xb1, 0xa4, 0xed, 0xe1, 0x8a, 0x64, 0x8c, 0x21,
		0xc6, 0x10, 0x63, 0x88, 0x31, 0xac, 0xaf, 0x31, 0x4c, 0x52, 0x2f, 0xb5, 0x10, 0x51, 0x5c, 0x16,
		0x8b, 0x19, 0xc4, 0x0c, 0x62, 0x06, 0x31, 0x83, 0x35, 0x36, 0x83, 0xa3, 0x2b, 0x37, 0x48, 0x86,
		0xae, 0x2d, 0x73, 0xb8, 0x51, 0x3c, 0x66, 0x11, 0xb3, 0x88, 0x59, 0xc4, 0x2c, 0x5a, 0x36, 0x8b,
		0x34, 0x04, 0x17, 0x6b, 0x08, 0x36, 0xeb, 0xe5, 0x70, 0xaa, 0xed, 0x05, 0x7e, 0x35, 0x7d, 0xd9,
		0x1a, 0x37, 0xd9, 0x84, 0xea, 0xb3, 0x9b, 0xa4, 0x77, 0x81, 0x72, 0xbd, 0xeb, 0x6b, 0x3f, 0xf4,
		0xd3, 0xbb, 0xf9, 0x87, 0xf4, 0x6e, 0xa8, 0x12, 0xf3, 0xf6, 0x9b, 0xa7, 0x1f, 0x41, 0x63, 0x0e,
		0x8d, 0x39, 0x5b, 0xc7, 0xc8, 0x1d, 0x6b, 0xcc, 0x79, 0x4a, 0xab, 0x04, 0x27, 0xf4, 0x3d, 0xf5,
		0x24, 0x19, 0x8a, 0xdc, 0x82, 0x22, 0x43, 0x91, 0x0f, 0x9d, 0x22, 0x9b, 0x9a, 0x85, 0x5c, 0x90,
		0xac, 0x2d, 0x58, 0x3b, 0xcf, 0x92, 0x06, 0x40, 0xd8, 0x57, 0x16, 0x37, 0x08, 0x36, 0x0c, 0x83,
		0x65, 0x03, 0x61, 0xcb, 0x50, 0x58, 0x37, 0x18, 0xd6, 0x0d, 0x87, 0x7d, 0x03, 0x22, 0x63, 0x48,
		0x84, 0x0c, 0x8a, 0xbc, 0xef, 0xbd, 0x76, 0x72, 0x67, 0x57, 0xf8, 0xa5, 0xa3, 0x30, 0x54, 0x41,
		0x4e, 0x0d, 0x24, 0x4f, 0xb1, 0xe0, 0x5d, 0x7e, 0xb9, 0x4c, 0xd1, 0x3b, 0xfd, 0xe6, 0xcb, 0x6c,
		0xe3, 0x6e, 0xbf, 0x5c, 0x7a, 0x6b, 0xd2, 0x20, 0xd3, 0x0f, 0x46, 0x03, 0x25, 0xac, 0x70, 0x99,
		0xfc, 0xf6, 0x82, 0x7c, 0x37, 0x49, 0x63, 0xbf, 0x9f, 0xda, 0x78, 0xcc, 0x71, 0x16, 0xba, 0xf9,
		0x62, 0xed, 0x67, 0x74, 0x16, 0xe4, 0xbb, 0xe6, 0x3d, 0xe7, 0x1b, 0x9f, 0xd1, 0xcd, 0x96, 0xea,
		0x26, 0x8c, 0x62, 0xd5, 0x10, 0x95, 0x7e, 0xff, 0x5c, 0xfa, 0x44, 0x4a, 0xdf, 0x8a, 0x98, 0x8b,
		0x9e, 0x6d, 0xe1, 0xb9, 0x73, 0xfc, 0xdc, 0x9a, 0x74, 0x77, 0x32, 0x81, 0xa0, 0x63, 0xe1, 0x09,
		0xd3, 0xed, 0x3b, 0x77, 0xba, 0x36, 0x84, 0x87, 0xb3, 0xc5, 0x69, 0xd9, 0x93, 0x3e, 0x53, 0xd2,
		0x73, 0xa7, 0x2d, 0x7b, 0x08, 0xf7, 0x6e, 0x3a, 0xeb, 0x76, 0x69, 0xfd, 0x3f, 0xd5, 0x9d, 0x34,
		0x6b, 0x6e, 0xbc, 0xf2, 0x93, 0xf4, 0x22, 0x4d, 0x85, 0xfc, 0x85, 0xd7, 0x7e, 0xf8, 0x43, 0xa0,
		0xc6, 0x84, 0x48, 0x68, 0x4e, 0x52, 0xe3, 0xb5, 0xf7, 0x65, 0x41, 0x62, 0xeb, 0x65, 0xa7, 0x73,
		0x72, 0xda, 0xe9, 0x34, 0x4f, 0x8f, 0x4f, 0x9b, 0x67, 0xdd, 0x6e, 0xeb, 0xa4, 0x25, 0xa0, 0x75,
		0x8d, 0x5f, 0xe2, 0x81, 0x8a, 0xd5, 0xe0, 0xbb, 0xf1, 0xf2, 0x86, 0xa3, 0x20, 0xd8, 0xea, 0x2e,
		0x0b, 0x85, 0xd5, 0x73, 0x79, 0x5b, 0x08, 0xaf, 0x3f, 0x19, 0xab, 0x3d, 0xb2, 0x1c, 0x0d, 0x72,
		0xaa, 0x8d, 0xd0, 0xff, 0xac, 0x3e, 0xbf, 0x1d, 0xff, 0x98, 0x8b, 0xe9, 0x4f, 0x98, 0xfd, 0x73,
		0x4c, 0x97, 0x93, 0x47, 0xff, 0x6f, 0x63, 0x17, 0x2f, 0xf1, 0x78, 0x62, 0xef, 0xf2, 0x7f, 0x6b,
		0x55, 0x17, 0x3d, 0x5c, 0x78, 0x26, 0x71, 0x44, 0xe2, 0x88, 0xc4, 0x11, 0x89, 0x23, 0x12, 0x47,
		0x24, 0x8e, 0x48, 0x1c, 0x91, 0x38, 0x22, 0x71, 0x44, 0xe2, 0x88, 0xc4, 0x11, 0x89, 0x23, 0x12,
		0x47, 0x24, 0x8e, 0x58, 0x9b, 0x38, 0xe2, 0x73, 0x39, 0x4e, 0xdd, 0xb2, 0xc7, 0xa7, 0x5b, 0x70,
		0x69, 0xb8, 0x34, 0x5c, 0xfa, 0x50, 0xb9, 0xf4, 0x24, 0x54, 0xec, 0x47, 0x89, 0xfb, 0x25, 0xce,
		0x6c, 0x7b, 0x78, 0x63, 0x83, 0x47, 0xbf, 0x14, 0x94, 0xf9, 0xc6, 0x4b, 0x53, 0x15, 0x87, 0x62,
		0x77, 0x6f, 0xe6, 0x82, 0xdf, 0xf7, 0x7a, 0x9f, 0x7b, 0x3d, 0xb7, 0xd7, 0x7b, 0x71, 0xfe, 0xfc,
		0xc3, 0xdf, 0xff, 0xe5, 0xab, 0x7f, 0xed, 0xf5, 0xbe, 0xfd, 0x6b, 0xaf, 0xf7, 0xe7, 0xbf, 0x5f,
		0x7e, 0x2b, 0x77, 0xb0, 0x2e, 0x49, 0x73, 0x3d, 0x90, 0xe6, 0x72, 0xc4, 0xe2, 0xbb, 0x24, 0xbc,
		0x48, 0x78, 0xd5, 0x30, 0xe1, 0xe5, 0x4a, 0x72, 0xae, 0x9d, 0x48, 0x7d, 0x5d, 0xe4, 0x3f, 0x78,
		0xaf, 0x73, 0x60, 0xf9, 0xa7, 0xf6, 0x36, 0xb2, 0x61, 0x0b, 0x4f, 0x27, 0x2f, 0x56, 0x31, 0x55,
		0x27, 0x2f, 0x46, 0x5e, 0xac, 0xa0, 0x0f, 0x4f, 0x5e, 0x0c, 0x5f, 0x1e, 0x5f, 0x1e, 0x5f, 0x9e,
		0xbc, 0xd8, 0x8a, 0x4c, 0xf2, 0x62, 0xeb, 0xf2, 0xc9, 0x8b, 0x15, 0x7e, 0x06, 0x79, 0x31, 0xf2,
		0x62, 0x8f, 0x0b, 0x27, 0x2f, 0xe6, 0x90, 0x17, 0x2b, 0xcb, 0xa7, 0xc9, 0x8b, 0xc1, 0xa5, 0xe1,
		0xd2, 0x07, 0xcb, 0xa5, 0xc9, 0x8b, 0xcd, 0x05, 0x1f, 0x56, 0x5e, 0x4c, 0x10, 0x9e, 0xda, 0xf6,
		0xe0, 0xa9, 0x0d, 0x3c, 0x01, 0x4f, 0xc0, 0x13, 0xf0, 0x04, 0x3c, 0x51, 0xb6, 0x51, 0xd5, 0xc1,
		0x7e, 0xa2, 0x6c, 0xc3, 0x11, 0x4b, 0x44, 0x52, 0xc0, 0x41, 0x01, 0x47, 0xad, 0x0b, 0x38, 0x5c,
		0x49, 0x1e, 0xb6, 0x5b, 0xa5, 0x1c, 0x17, 0xf9, 0x2f, 0x3f, 0x90, 0x9a, 0x8e, 0xfc, 0xd3, 0xf1,
		0x76, 0xab, 0x3b, 0x16, 0xde, 0x83, 0x3a, 0x8f, 0x8a, 0xb9, 0x3d, 0x75, 0x1e, 0xd4, 0x79, 0x14,
		0x74, 0xfa, 0xa9, 0xf3, 0xc0, 0xf9, 0xc7, 0xf9, 0xc7, 0xf9, 0xa7, 0xce, 0x63, 0x45, 0x26, 0x75,
		0x1e, 0xeb, 0xf2, 0xa9, 0xf3, 0x28, 0xfc, 0x0c, 0xea, 0x3c, 0xa8, 0xf3, 0x78, 0x5c, 0x38, 0x75,
		0x1e, 0x0e, 0x75, 0x1e, 0x65, 0xf9, 0x34, 0x75, 0x1e, 0x70, 0x69, 0xb8, 0xf4, 0xc1, 0x72, 0x69,
		0x12, 0x69, 0x73, 0xc1, 0xd4, 0x79, 0x68, 0xc2, 0x13, 0x75, 0x1e, 0xc0, 0x13, 0xf0, 0x04, 0x3c,
		0x01, 0x4f, 0xc0, 0x53, 0x0d, 0xe1, 0xe9, 0xd8, 0x1e, 0x3c, 0x1d, 0x03, 0x4f, 0xc0, 0x13, 0xf0,
		0x04, 0x3c, 0x01, 0x4f, 0x94, 0x21, 0x56, 0x75, 0xb0, 0x0b, 0x97, 0x21, 0x3a, 0x62, 0x15, 0x33,
		0x14, 0x24, 0x52, 0x90, 0xb8, 0x23, 0x05, 0x89, 0xae, 0x24, 0x37, 0xdb, 0xd1, 0xd2, 0xc4, 0x8b,
		0x7c, 0x09, 0x0e, 0xae, 0x46, 0x31, 0xff, 0xd4, 0xa9, 0x4b, 0xb5, 0xe2, 0xc2, 0x1b, 0x51, 0xb7,
		0x58, 0xb1, 0x33, 0x40, 0xdd, 0x22, 0x75, 0x8b, 0x05, 0xa3, 0x04, 0xd4, 0x2d, 0x12, 0x2d, 0x20,
		0x5a, 0x40, 0xb4, 0x80, 0xba, 0xc5, 0x15, 0x99, 0xd4, 0x2d, 0xae, 0xcb, 0xa7, 0x6e, 0xb1, 0xf0,
		0x33, 0xa8, 0x5b, 0xa4, 0x6e, 0xf1, 0x71, 0xe1, 0xd4, 0x2d, 0x3a, 0xd4, 0x2d, 0x96, 0xe5, 0xd3,
		0xd4, 0x2d, 0xc2, 0xa5, 0xe1, 0xd2, 0x07, 0xcb, 0xa5, 0xc9, 0xbc, 0xcd, 0x05, 0x53, 0x18, 0xa2,
		0x09, 0x4f, 0xd4, 0x2d, 0x02, 0x4f, 0xc0, 0x13, 0xf0, 0x04, 0x3c, 0x01, 0x4f, 0x35, 0x84, 0x27,
		0xea, 0x16, 0x81, 0x27, 0xe0, 0x09, 0x78, 0x02, 0x9e, 0x80, 0xa7, 0x1a, 0xc2, 0x53, 0xc7, 0x1e,
		0x3c, 0x75, 0x80, 0x27, 0xe0, 0x09, 0x78, 0x02, 0x9e, 0x80, 0x27, 0xca, 0xea, 0xab, 0x3a, 0xd8,
		0x1a, 0x65, 0xf5, 0x8e, 0x58, 0x69, 0x27, 0x05, 0xf6, 0x14, 0xd8, 0xef, 0x5c, 0x81, 0xbd, 0x2b,
		0xc9, 0xd7, 0x76, 0xbd, 0xd4, 0xfe, 0x22, 0x5f, 0x8b, 0x03, 0xae, 0xb9, 0xcf, 0x3f, 0x75, 0xeb,
		0x57, 0x7d, 0xbf, 0xf0, 0x6e, 0xd4, 0xe1, 0x57, 0xec, 0x3d, 0x50, 0x87, 0x4f, 0x1d, 0x7e, 0xc1,
		0xb0, 0x02, 0x75, 0xf8, 0x84, 0x17, 0x08, 0x2f, 0x10, 0x5e, 0xa0, 0x0e, 0x7f, 0x45, 0x26, 0x75,
		0xf8, 0xeb, 0xf2, 0xa9, 0xc3, 0x2f, 0xfc, 0x0c, 0xea, 0xf0, 0xa9, 0xc3, 0x7f, 0x5c, 0x38, 0x75,
		0xf8, 0x0e, 0x75, 0xf8, 0x65, 0xf9, 0x34, 0x75, 0xf8, 0x70, 0x69, 0xb8, 0xf4, 0xc1, 0x72, 0x69,
		0x52, 0x75, 0x73, 0xc1, 0x54, 0x92, 0x68, 0xc2, 0x13, 0x75, 0xf8, 0xc0, 0x13, 0xf0, 0x04, 0x3c,
		0x01, 0x4f, 0xc0, 0x53, 0x0d, 0xe1, 0x89, 0x3a, 0x7c, 0xe0, 0x09, 0x78, 0x02, 0x9e, 0x80, 0x27,
		0xe0, 0xa9, 0x86, 0xf0, 0x44, 0x1d, 0x3e, 0xf0, 0x04, 0x3c, 0x01, 0x4f, 0xc0, 0x13, 0xf0, 0x54,
		0x43, 0x78, 0xea, 0xda, 0x83, 0xa7, 0x2e, 0xf0, 0x04, 0x3c, 0x01, 0x4f, 0xc0, 0x13, 0xf0, 0x44,
		0x9b, 0x58, 0x55, 0x07, 0xdb, 0xa8, 0x4d, 0xcc, 0x11, 0xeb, 0x41, 0xa0, 0x61, 0x8c, 0x86, 0xb1,
		0x1d, 0x6e, 0x18, 0x73, 0x25, 0x39, 0xdc, 0xde, 0xb4, 0x8e, 0x5d, 0xe4, 0x8b, 0x42, 0x0f, 0x59,
		0x7a, 0xd7, 0xcd, 0x3f, 0x9d, 0xd4, 0xb9, 0x9b, 0x6c, 0xe1, 0x2d, 0xe9, 0x2b, 0xab, 0xd8, 0xdd,
		0xa0, 0xaf, 0x8c, 0xbe, 0xb2, 0x82, 0x71, 0x08, 0xfa, 0xca, 0x88, 0x47, 0x10, 0x8f, 0x20, 0x1e,
		0x41, 0x5f, 0xd9, 0x8a, 0x4c, 0xfa, 0xca, 0xd6, 0xe5, 0xd3, 0x57, 0x56, 0xf8, 0x19, 0xf4, 0x95,
		0xd1, 0x57, 0xf6, 0xb8, 0x70, 0xfa, 0xca, 0x1c, 0xfa, 0xca, 0xca, 0xf2, 0x69, 0xfa, 0xca, 0xe0,
		0xd2, 0x70, 0xe9, 0x83, 0xe5, 0xd2, 0xe4, 0xf6, 0xe6, 0x82, 0x29, 0x3d, 0xd1, 0x84, 0x27, 0xfa,
		0xca, 0x80, 0x27, 0xe0, 0x09, 0x78, 0x02, 0x9e, 0x80, 0xa7, 0x1a, 0xc2, 0x13, 0x7d, 0x65, 0xc0,
		0x13, 0xf0, 0x04, 0x3c, 0x01, 0x4f, 0xc0, 0x53, 0x0d, 0xe1, 0x89, 0xbe, 0x32, 0xe0, 0x09, 0x78,
		0x02, 0x9e, 0x80, 0x27, 0xe0, 0xa9, 0x86, 0xf0, 0x44, 0x5f, 0x19, 0xf0, 0x04, 0x3c, 0x01, 0x4f,
		0xc0, 0x13, 0xf0, 0x54, 0x43, 0x78, 0x3a, 0xb1, 0x07, 0x4f, 0x27, 0xc0, 0x13, 0xf0, 0x04, 0x3c,
		0x01, 0x4f, 0xc0, 0x13, 0x6d, 0xcf, 0x55, 0x1d, 0x6c, 0xa1, 0xb6, 0x67, 0x47, 0xac, 0x59, 0x8e,
		0x06, 0x68, 0x1a, 0xa0, 0xf7, 0xa2, 0x01, 0xda, 0x95, 0xe4, 0x75, 0xfb, 0xd7, 0x0a, 0x7d, 0x91,
		0xaf, 0x0e, 0x3d, 0xd1, 0x4b, 0xa7, 0x25, 0xff, 0x74, 0xba, 0x1b, 0xdd, 0xd1, 0x0b, 0xef, 0x4b,
		0x9f, 0x74, 0xc5, 0xfe, 0x09, 0x7d, 0xd2, 0xf4, 0x49, 0x17, 0x0c, 0x5c, 0xd0, 0x27, 0x4d, 0x00,
		0x83, 0x00, 0x06, 0x01, 0x0c, 0xfa, 0xa4, 0x57, 0x64, 0xd2, 0x27, 0xbd, 0x2e, 0x9f, 0x3e, 0xe9,
		0xc2, 0xcf, 0xa0, 0x4f, 0x9a, 0x3e, 0xe9, 0xc7, 0x85, 0xd3, 0x27, 0xed, 0xd0, 0x27, 0x5d, 0x96,
		0x4f, 0xd3, 0x27, 0x0d, 0x97, 0x86, 0x4b, 0x1f, 0x2c, 0x97, 0x26, 0x19, 0x38, 0x17, 0x4c, 0xad,
		0x8a, 0x26, 0x3c, 0xd1, 0x27, 0x0d, 0x3c, 0x01, 0x4f, 0xc0, 0x13, 0xf0, 0x04, 0x3c, 0xd5, 0x10,
		0x9e, 0xe8, 0x93, 0x06, 0x9e, 0x80, 0x27, 0xe0, 0x09, 0x78, 0x02, 0x9e, 0x6a, 0x08, 0x4f, 0xf4,
		0x49, 0x03, 0x4f, 0xc0, 0x13, 0xf0, 0x04, 0x3c, 0x01, 0x4f, 0x35, 0x84, 0x27, 0xfa, 0xa4, 0x81,
		0x27, 0xe0, 0x09, 0x78, 0x02, 0x9e, 0x80, 0xa7, 0x1a, 0xc2, 0x13, 0x7d, 0xd2, 0xc0, 0x13, 0xf0,
		0x04, 0x3c, 0x01, 0x4f, 0xc0, 0x53, 0x0d, 0xe1, 0xe9, 0xd4, 0x1e, 0x3c, 0x9d, 0x02, 0x4f, 0xc0,
		0x13, 0xf0, 0x04, 0x3c, 0x01, 0x4f, 0x8c, 0xf1, 0xa8, 0xea, 0x60, 0x8b, 0x8f, 0xf1, 0x70, 0xc4,
		0xba, 0xba, 0x19, 0xe8, 0xc1, 0x40, 0x8f, 0x3d, 0x1b, 0xe8, 0xe1, 0x4a, 0x72, 0xbd, 0x3d, 0x1e,
		0xed, 0x71, 0x91, 0x2f, 0x13, 0x33, 0x3e, 0x1e, 0x38, 0x40, 0xf9, 0xa7, 0x97, 0xbb, 0x36, 0xed,
		0x63, 0xe1, 0xcd, 0x99, 0xfb, 0x51, 0xb1, 0x43, 0xc3, 0xdc, 0x0f, 0xe6, 0x7e, 0x14, 0x8c, 0x74,
		0x30, 0xf7, 0x83, 0x88, 0x07, 0x11, 0x0f, 0x22, 0x1e, 0xcc, 0xfd, 0x58, 0x91, 0xc9, 0xdc, 0x8f,
		0x75, 0xf9, 0xcc, 0xfd, 0x28, 0xfc, 0x0c, 0xe6, 0x7e, 0x30, 0xf7, 0xe3, 0x71, 0xe1, 0xcc, 0xfd,
		0x70, 0x98, 0xfb, 0x51, 0x96, 0x4f, 0x33, 0xf7, 0x03, 0x2e, 0x0d, 0x97, 0x3e, 0x58, 0x2e, 0x4d,
		0xf6, 0x70, 0x2e, 0x98, 0xe2, 0x16, 0x4d, 0x78, 0x62, 0xee, 0x07, 0xf0, 0x04, 0x3c, 0x01, 0x4f,
		0xc0, 0x13, 0xf0, 0x54, 0x43, 0x78, 0x62, 0xee, 0x07, 0xf0, 0x04, 0x3c, 0x01, 0x4f, 0xc0, 0x13,
		0xf0, 0x54, 0x43, 0x78, 0x62, 0xee, 0x07, 0xf0, 0x04, 0x3c, 0x01, 0x4f, 0xc0, 0x13, 0xf0, 0x54,
		0x43, 0x78, 0x62, 0xee, 0x07, 0xf0, 0x04, 0x3c, 0x01, 0x4f, 0xc0, 0x13, 0xf0, 0x54, 0x43, 0x78,
		0x62, 0xee, 0x07, 0xf0, 0x04, 0x3c, 0x01, 0x4f, 0xc0, 0x13, 0xf0, 0x54, 0x43, 0x78, 0x62, 0xee,
		0x07, 0xf0, 0x04, 0x3c, 0x01, 0x4f, 0xc0, 0x13, 0xf0, 0x54, 0x43, 0x78, 0x7a, 0x69, 0x0f, 0x9e,
		0x5e, 0x02, 0x4f, 0xc0, 0x13, 0xf0, 0x04, 0x3c, 0x01, 0x4f, 0x8c, 0xa5, 0xaa, 0xea, 0x60, 0x5b,
		0x1c, 0x4b, 0xe5, 0x88, 0x8d, 0x1f, 0x61, 0x40, 0x15, 0x03, 0xaa, 0xf6, 0x76, 0x40, 0x95, 0x2b,
		0xc9, 0xff, 0x0e, 0x61, 0x54, 0xd5, 0x45, 0xbe, 0x5e, 0xcc, 0xac, 0x7a, 0xf2, 0x4c, 0xe5, 0x9f,
		0xce, 0x76, 0x77, 0x7a, 0xd5, 0xc2, 0x6f, 0x60, 0x8e, 0x55, 0xc5, 0x1e, 0x10, 0x73, 0xac, 0x98,
		0x63, 0x55, 0x30, 0x34, 0xc2, 0x1c, 0x2b, 0x42, 0x24, 0x84, 0x48, 0x08, 0x91, 0x30, 0xc7, 0x6a,
		0x45, 0x26, 0x73, 0xac, 0xd6, 0xe5, 0x33, 0xc7, 0xaa, 0xf0, 0x33, 0x98, 0x63, 0xc5, 0x1c, 0xab,
		0xc7, 0x85, 0x33, 0xc7, 0xca, 0x61, 0x8e, 0x55, 0x59, 0x3e, 0xcd, 0x1c, 0x2b, 0xb8, 0x34, 0x5c,
		0xfa, 0x60, 0xb9, 0x34, 0xe9, 0xc6, 0xb9, 0x60, 0xaa, 0x61, 0x34, 0xe1, 0x89, 0x39, 0x56, 0xc0,
		0x13, 0xf0, 0x04, 0x3c, 0x01, 0x4f, 0xc0, 0x53, 0x0d, 0xe1, 0x89, 0x39, 0x56, 0xc0, 0x13, 0xf0,
		0x04, 0x3c, 0x01, 0x4f, 0xc0, 0x53, 0x0d, 0xe1, 0x89, 0x39, 0x56, 0xc0, 0x13, 0xf0, 0x04, 0x3c,
		0x01, 0x4f, 0xc0, 0x53, 0x0d, 0xe1, 0x89, 0x39, 0x56, 0xc0, 0x13, 0xf0, 0x04, 0x3c, 0x01, 0x4f,
		0xc0, 0x53, 0x0d, 0xe1, 0x89, 0x39, 0x56, 0xc0, 0x13, 0xf0, 0x04, 0x3c, 0x01, 0x4f, 0xc0, 0x53,
		0x0d, 0xe1, 0x89, 0x39, 0x56, 0xc0, 0x13, 0xf0, 0x04, 0x3c, 0x01, 0x4f, 0xc0, 0x53, 0x0d, 0xe1,
		0x89, 0x39, 0x56, 0xc0, 0x13, 0xf0, 0x04, 0x3c, 0x01, 0x4f, 0xc0, 0x53, 0x0d, 0xe1, 0xe9, 0xcc,
		0x1e, 0x3c, 0x9d, 0x01, 0x4f, 0xc0, 0x13, 0xf0, 0x04, 0x3c, 0x01, 0x4f, 0x8c, 0x59, 0xac, 0xea,
		0x60, 0x57, 0x32, 0x66, 0xd1, 0x11, 0x9b, 0x93, 0xc5, 0xc0, 0x45, 0x06, 0x2e, 0x1e, 0xc0, 0xc0,
		0x45, 0x57, 0x92, 0x13, 0x1e, 0xd4, 0xe8, 0xc5, 0x8b, 0x7c, 0xe1, 0x98, 0xc1, 0x58, 0xe2, 0x98,
		0xcd, 0x25, 0x37, 0xf7, 0x61, 0x1c, 0xe3, 0xe2, 0xcf, 0x61, 0x32, 0x63, 0xc5, 0x4e, 0x13, 0x93,
		0x19, 0x99, 0xcc, 0x58, 0x30, 0x9a, 0xc2, 0x64, 0x46, 0xa2, 0x2a, 0x44, 0x55, 0x88, 0xaa, 0x30,
		0x99, 0x71, 0x45, 0x26, 0x93, 0x19, 0xd7, 0xe5, 0x33, 0x99, 0xb1, 0xf0, 0x33, 0x98, 0xcc, 0xc8,
		0x64, 0xc6, 0xc7, 0x85, 0x33, 0x99, 0xd1, 0x61, 0x32, 0x63, 0x59, 0x3e, 0xcd, 0x64, 0x46, 0xb8,
		0x34, 0x5c, 0xfa, 0x60, 0xb9, 0x34, 0x19, 0xca, 0xb9, 0x60, 0x0a, 0x68, 0x74, 0xe1, 0xa9, 0x69,
		0x11, 0x9f, 0x9a, 0x00, 0x14, 0x00, 0x05, 0x40, 0x01, 0x50, 0x00, 0x14, 0x00, 0xa5, 0x09, 0x50,
		0x8c, 0x0e, 0x06, 0x9e, 0x80, 0x27, 0xe0, 0x09, 0x78, 0x02, 0x9e, 0x6a, 0x08, 0x4f, 0x8c, 0x0e,
		0x06, 0x9e, 0x80, 0x27, 0xe0, 0x09, 0x78, 0x02, 0x9e, 0x6a, 0x08, 0x4f, 0x8c, 0x0e, 0x06, 0x9e,
		0x80, 0x27, 0xe0, 0x09, 0x78, 0x02, 0x9e, 0x6a, 0x08, 0x4f, 0x8c, 0x0e, 0x06, 0x9e, 0x80, 0x27,
		0xe0, 0x09, 0x78, 0x02, 0x9e, 0x6a, 0x08, 0x4f, 0x8c, 0x0e, 0x06, 0x9e, 0x80, 0x27, 0xe0, 0x09,
		0x78, 0x02, 0x9e, 0x6a, 0x08, 0x4f, 0x8c, 0x0e, 0x06, 0x9e, 0x80, 0x27, 0xe0, 0x09, 0x78, 0x02,
		0x9e, 0x6a, 0x08, 0x4f, 0x8c, 0x0e, 0x06, 0x9e, 0x80, 0x27, 0xe0, 0x09, 0x78, 0x02, 0x9e, 0x6a,
		0x08, 0x4f, 0x8c, 0x0e, 0x06, 0x9e, 0x80, 0x27, 0xe0, 0x09, 0x78, 0x02, 0x9e, 0xa4, 0xe0, 0xe9,
		0x80, 0x46, 0x07, 0x3b, 0x72, 0x33, 0x1d, 0x99, 0x22, 0xcc, 0x14, 0xe1, 0x83, 0x9a, 0x22, 0xec,
		0x8a, 0x76, 0xc8, 0x1f, 0xe6, 0x40, 0xe1, 0x8b, 0xf9, 0x12, 0x6e, 0x6b, 0xb4, 0xf0, 0xb3, 0x0a,
		0x55, 0x53, 0x4a, 0x25, 0x6b, 0xa9, 0x8a, 0x06, 0x4a, 0x50, 0x97, 0xc3, 0xaf, 0x77, 0x08, 0xcb,
		0x1f, 0x21, 0x8d, 0xe3, 0xd3, 0x18, 0x6f, 0xb6, 0x9b, 0xa8, 0x40, 0xf5, 0x8d, 0x8e, 0x4f, 0xce,
		0x6f, 0x57, 0xe4, 0x69, 0x1e, 0x68, 0xb3, 0x49, 0xce, 0xc6, 0xbe, 0xac, 0x84, 0xef, 0x2a, 0xec,
		0xab, 0x4a, 0xf9, 0xa6, 0xe2, 0xbe, 0xa8, 0xb8, 0xef, 0x29, 0xef, 0x6b, 0x56, 0x6b, 0x8c, 0x4d,
		0x27, 0x2f, 0x37, 0x54, 0xe8, 0x5d, 0x05, 0x4a, 0x6e, 0xb6, 0xfb, 0x54, 0x9e, 0xcc, 0x70, 0xf5,
		0x26, 0xc3, 0xd5, 0xb7, 0x15, 0x4e, 0x62, 0xb8, 0x7a, 0x5d, 0xbc, 0x69, 0xb1, 0xf0, 0xd0, 0x5c,
		0x47, 0x6f, 0x87, 0x22, 0x93, 0x8e, 0x73, 0xe4, 0x3c, 0x86, 0xf8, 0xd6, 0x9b, 0xf8, 0x8a, 0x10,
		0xa5, 0x8a, 0x59, 0xee, 0x1b, 0x2f, 0xfd, 0xf8, 0x36, 0x7f, 0xe5, 0x3a, 0xb3, 0xda, 0xd8, 0x8f,
		0x62, 0x3f, 0xbd, 0x13, 0xe0, 0xb3, 0x33, 0x49, 0x30, 0x59, 0x98, 0x2c, 0x4c, 0xb6, 0x9c, 0x80,
		0x8f, 0x51, 0x30, 0x70, 0x8d, 0x75, 0x71, 0xed, 0x1c, 0x2e, 0x8b, 0x85, 0xd7, 0xc2, 0x6b, 0xe1,
		0xb5, 0x22, 0xbc, 0xf6, 0xb5, 0x17, 0x0e, 0xbc, 0x34, 0x8a, 0xef, 0x04, 0x6e, 0xd1, 0x92, 0xe7,
		0xc8, 0x23, 0x3f, 0x4c, 0x8f, 0xdb, 0x82, 0x24, 0xf9, 0x54, 0x40, 0xd4, 0xaf, 0x5e, 0x78, 0xa3,
		0xc4, 0x52, 0xa3, 0x82, 0x09, 0xe7, 0xd7, 0x7e, 0x28, 0x5f, 0xc8, 0xf0, 0xbf, 0xbd, 0x60, 0xa4,
		0xe4, 0x6a, 0x44, 0x72, 0xb9, 0x3f, 0xc6, 0x5e, 0xc6, 0x29, 0xbf, 0xf7, 0x6f, 0x7c, 0xa9, 0xd4,
		0xdc, 0xf2, 0x19, 0x52, 0x37, 0x5e, 0xea, 0x7f, 0x1a, 0xbf, 0xfb, 0xb5, 0x17, 0x24, 0x4a, 0xae,
		0x6e, 0x41, 0x30, 0xd1, 0xfe, 0xda, 0xfb, 0x62, 0x6f, 0xcb, 0x4e, 0xd9, 0x32, 0x11, 0x1b, 0x2b,
		0x27, 0xe5, 0x72, 0x07, 0xaf, 0xbd, 0x4c, 0x54, 0x3a, 0x1a, 0x5a, 0xa0, 0x74, 0x2b, 0x72, 0xe1,
		0x74, 0x70, 0x3a, 0x38, 0x1d, 0x9c, 0x0e, 0x4e, 0x07, 0xa7, 0x83, 0xd3, 0xc1, 0xe9, 0xe0, 0x74,
		0x56, 0xbe, 0xa9, 0x1b, 0x18, 0x54, 0x5f, 0xd2, 0xd8, 0x73, 0x47, 0x61, 0x92, 0x1a, 0x67, 0xaa,
		0xc7, 0xec, 0x20, 0x51, 0x61, 0xdf, 0xdc, 0xde, 0x0a, 0xa2, 0xd2, 0x4f, 0xe1, 0xc0, 0xef, 0x7b,
		0xa9, 0x4a, 0x1c, 0xcf, 0x99, 0x71, 0x52, 0x27, 0x8c, 0x06, 0xca, 0xf1, 0x13, 0xa7, 0x9f, 0xb1,
		0xc2, 0x51, 0xac, 0x06, 0x2f, 0xea, 0x4f, 0xbc, 0x26, 0x4b, 0xbb, 0x4b, 0xd4, 0xab, 0xf0, 0xda,
		0x6f, 0x9b, 0x97, 0x3d, 0xab, 0xd6, 0x46, 0x1c, 0x62, 0x8a, 0xd4, 0xdc, 0x1d, 0xac, 0x32, 0x39,
		0x3a, 0x7b, 0xdb, 0x1a, 0xe7, 0x45, 0x63, 0xd5, 0x8f, 0xe2, 0x81, 0x1b, 0x47, 0xa3, 0x54, 0x99,
		0xe7, 0x46, 0x97, 0xa4, 0x99, 0xe5, 0x47, 0x9b, 0xe4, 0x47, 0xa5, 0x11, 0x81, 0xfc, 0xa8, 0x6d,
		0xd3, 0x6a, 0xec, 0x0e, 0x8b, 0x95, 0xff, 0x18, 0x96, 0xfd, 0x68, 0x18, 0x9f, 0x67, 0x16, 0x17,
		0x38, 0xef, 0x56, 0x5a, 0x04, 0x0c, 0x37, 0xb3, 0xe1, 0x25, 0x05, 0x19, 0x75, 0x0f, 0x99, 0x77,
		0x0b, 0x59, 0xe9, 0x0e, 0x32, 0xeb, 0x06, 0x2a, 0xbb, 0x15, 0x86, 0xf4, 0x61, 0x0b, 0xb4, 0x41,
		0x43, 0x8d, 0xaa, 0x63, 0x09, 0xe5, 0x4c, 0x5b, 0x71, 0x2d, 0x2b, 0xf6, 0x27, 0x0b, 0x6e, 0xbe,
		0xee, 0xa6, 0xdb, 0xdf, 0xec, 0x12, 0x7b, 0x6b, 0x6f, 0x4f, 0x8b, 0xed, 0xe1, 0xd3, 0x3b, 0x52,
		0x60, 0x37, 0x1a, 0xc3, 0xf6, 0xd0, 0x5d, 0x5e, 0x81, 0xa2, 0x1b, 0x32, 0xaf, 0x60, 0x5b, 0x13,
		0x51, 0xf0, 0x14, 0x94, 0x2b, 0x5d, 0x2b, 0x4d, 0xc5, 0x74, 0xa8, 0x97, 0x21, 0xd5, 0xd2, 0xa5,
		0x56, 0xc6, 0x54, 0xca, 0x98, 0x3a, 0x99, 0x53, 0x25, 0x59, 0x0b, 0x51, 0xb6, 0x34, 0x6c, 0xed,
		0x14, 0x96, 0xdf, 0x83, 0x87, 0xce, 0x73, 0xd9, 0xad, 0xd0, 0xab, 0xc8, 0xd4, 0xf6, 0x34, 0x4c,
		0x3c, 0x0c, 0x21, 0xcf, 0xc2, 0xd4, 0xa3, 0x10, 0xf3, 0x24, 0xc4, 0x3c, 0x08, 0x39, 0xcf, 0xc1,
		0x2e, 0x91, 0xd5, 0xad, 0xa0, 0x9c, 0x37, 0xea, 0xdf, 0x7a, 0xc9, 0x6f, 0xe6, 0x9e, 0xfa, 0xb2,
		0x38, 0x4a, 0x99, 0x71, 0xd5, 0x0f, 0xcc, 0x55, 0x37, 0x2e, 0x65, 0x9e, 0x69, 0x90, 0x5c, 0xc9,
		0x4b, 0x2e, 0x91, 0x62, 0x97, 0x8a, 0xd4, 0x55, 0x5a, 0x6d, 0xad, 0xa9, 0xaf, 0x35, 0x35, 0xb6,
		0xa7, 0xce, 0x66, 0x6a, 0x6d, 0xa8, 0xde, 0x0b, 0xf1, 0x96, 0x3a, 0x17, 0xbb, 0xfc, 0x43, 0x7d,
		0x71, 0xfd, 0x30, 0x55, 0x37, 0x2a, 0x96, 0x6c, 0xf5, 0x13, 0x98, 0xf5, 0x24, 0x3e, 0xe3, 0xa9,
		0xf1, 0xbe, 0xe9, 0x9e, 0x79, 0xee, 0xf5, 0x85, 0xfb, 0xe3, 0xe5, 0x1f, 0xad, 0xe7, 0x2f, 0xef,
		0x1b, 0x07, 0x59, 0x2e, 0x69, 0xc4, 0xde, 0xd6, 0xad, 0xa0, 0x3e, 0x79, 0x03, 0x2d, 0x40, 0x0b,
		0xd0, 0x02, 0xb4, 0x00, 0x2d, 0x6c, 0xa3, 0x05, 0x85, 0x58, 0x96, 0x0a, 0xb1, 0x96, 0x62, 0x18,
		0x54, 0x63, 0x55, 0x5f, 0x8d, 0xf5, 0xf4, 0x06, 0x50, 0x92, 0x55, 0x6c, 0x81, 0x6b, 0x5b, 0x92,
		0xb5, 0x92, 0x29, 0x5a, 0xfb, 0x2f, 0x47, 0x12, 0x81, 0x44, 0x47, 0x38, 0x3b, 0xf7, 0xe6, 0xdd,
		0x72, 0xc2, 0x75, 0xf1, 0xdf, 0x3f, 0xcc, 0x06, 0xb1, 0xbd, 0x1e, 0xbf, 0x6f, 0x8d, 0x2b, 0xb3,
		0x36, 0xd4, 0x3a, 0x98, 0x47, 0x7d, 0x4d, 0xeb, 0x27, 0x84, 0xbc, 0x06, 0x42, 0xbf, 0x15, 0x7a,
		0x03, 0x84, 0x7e, 0xa5, 0x99, 0x79, 0x7e, 0x72, 0x2e, 0xd6, 0xf4, 0xc9, 0x0d, 0x54, 0x78, 0x93,
		0x7e, 0x94, 0xa8, 0xdc, 0x32, 0xe0, 0xe5, 0x8d, 0x57, 0x93, 0xb7, 0xa8, 0x01, 0x71, 0x93, 0xec,
		0x50, 0xca, 0xdb, 0x5c, 0x5a, 0x42, 0xc4, 0xc6, 0x56, 0x7b, 0x8b, 0x7c, 0x5b, 0xcb, 0xbd, 0xcc,
		0x64, 0x6a, 0xf9, 0xad, 0x38, 0xe9, 0x1c, 0xde, 0x5e, 0xec, 0x16, 0x27, 0xad, 0x84, 0xad, 0x04,
		0xd1, 0xcd, 0x8d, 0x1f, 0xde, 0x98, 0x53, 0x94, 0x99, 0x20, 0x52, 0xd2, 0xf0, 0x92, 0x03, 0xe3,
		0x25, 0xe6, 0x29, 0xe9, 0x20, 0x10, 0xcc, 0x46, 0x07, 0x01, 0xa9, 0x85, 0xaa, 0x94, 0xb4, 0xa2,
		0x70, 0x13, 0xa9, 0x85, 0x6d, 0x11, 0x30, 0x26, 0xc4, 0x5a, 0x59, 0xda, 0xc6, 0x95, 0x17, 0x0e,
		0x3e, 0xfb, 0x83, 0xf4, 0xa3, 0xdb, 0xff, 0xe8, 0x85, 0x37, 0xca, 0xbd, 0x55, 0x49, 0xe2, 0xdd,
		0x08, 0x0e, 0xcb, 0x7e, 0xf0, 0x09, 0x18, 0x47, 0x8c, 0x23, 0xc6, 0x11, 0xe3, 0x58, 0x63, 0xe3,
		0x78, 0x3d, 0x70, 0x93, 0xd4, 0x4b, 0x6d, 0x58, 0xc5, 0x35, 0xd1, 0x98, 0x43, 0xcc, 0x21, 0xe6,
		0x10, 0x73, 0x58, 0x5f, 0x73, 0xe8, 0x87, 0xc9, 0xe8, 0xfa, 0xda, 0xef, 0xfb, 0x2a, 0x4c, 0xdd,
		0xab, 0xcf, 0xf2, 0x46, 0xf1, 0xa1, 0x07, 0x60, 0x1a, 0x31, 0x8d, 0x98, 0x46, 0x4c, 0x63, 0x7d,
		0x4d, 0x63, 0x90, 0x0c, 0xdd, 0xe4, 0xb3, 0x9f, 0xf6, 0x3f, 0xba, 0xd1, 0x27, 0x15, 0x5b, 0x73,
		0xa6, 0x9f, 0x78, 0x0e, 0x86, 0x12, 0x43, 0x89, 0xa1, 0xc4, 0x50, 0xd6, 0xd7, 0x50, 0x66, 0x97,
		0x34, 0xa9, 0x38, 0x8e, 0x62, 0x79, 0xe3, 0xb8, 0x41, 0x36, 0x06, 0x11, 0x83, 0x88, 0x41, 0xc4,
		0x20, 0xd6, 0xd8, 0x20, 0xf6, 0xbd, 0xa0, 0xef, 0x5e, 0x7b, 0x7e, 0x30, 0x8a, 0x2d, 0x10, 0xc6,
		0xcd, 0xe2, 0x31, 0x8b, 0x98, 0x45, 0xcc, 0x22, 0x66, 0xb1, 0xbe, 0x66, 0x71, 0x71, 0x12, 0x6a,
		0x66, 0xb6, 0x64, 0xcd, 0xe2, 0x66, 0xf1, 0x98, 0x45, 0xcc, 0x22, 0x66, 0x11, 0xb3, 0x58, 0x67,
		0xb3, 0x18, 0x0d, 0x53, 0xff, 0xd6, 0xff, 0x3d, 0x6b, 0x21, 0x1b, 0x2f, 0x49, 0x22, 0xcf, 0x19,
		0x1f, 0x7b, 0x08, 0x26, 0x12, 0x13, 0x89, 0x89, 0xc4, 0x44, 0xee, 0x82, 0x89, 0x1c, 0xd8, 0x34,
		0x8d, 0x03, 0x4c, 0x22, 0x26, 0x11, 0x93, 0x88, 0x49, 0xdc, 0x09, 0x93, 0x68, 0xcf, 0x8f, 0xc6,
		0x85, 0xc6, 0x18, 0x62, 0x0c, 0x31, 0x86, 0x3b, 0x63, 0x0c, 0x2d, 0x15, 0x74, 0x53, 0xcc, 0x8d,
		0x19, 0xc4, 0x0c, 0x62, 0x06, 0x2b, 0x35, 0x83, 0x0c, 0xd9, 0x2a, 0x36, 0x64, 0xcb, 0x6c, 0x28,
		0x82, 0x53, 0xe5, 0x78, 0xad, 0x57, 0xd3, 0x57, 0xad, 0xf1, 0xac, 0x8a, 0x50, 0x7d, 0x76, 0x93,
		0xf4, 0x2e, 0x50, 0x6e, 0x3e, 0xbc, 0x2c, 0xff, 0x90, 0xde, 0x0d, 0x4b, 0x5c, 0xa9, 0xf3, 0xa0,
		0x8a, 0x3e, 0xfd, 0x08, 0xe6, 0x5b, 0x30, 0xdf, 0x62, 0xeb, 0x08, 0xb9, 0x63, 0xf3, 0x2d, 0x9e,
		0xd2, 0x2a, 0x39, 0x36, 0xfc, 0xe4, 0x93, 0x64, 0x08, 0x72, 0x0b, 0x82, 0x0c, 0x41, 0x3e, 0x74,
		0x82, 0x6c, 0x6a, 0x16, 0x72, 0x41, 0xb2, 0xb6, 0x60, 0xed, 0x3c, 0x4b, 0x1a, 0x00, 0x61, 0x4f,
		0x59, 0xdc, 0x20, 0xd8, 0x30, 0x0c, 0x96, 0x0d, 0x84, 0x2d, 0x43, 0x61, 0xdd, 0x60, 0x58, 0x37,
		0x1c, 0xf6, 0x0d, 0x88, 0x8c, 0x21, 0x11, 0x32, 0x28, 0xf2, 0x9e, 0xf7, 0xda, 0xc9, 0x7d, 0x3d,
		0x5d, 0xbc, 0x74, 0x14, 0x86, 0x2a, 0x70, 0x85, 0x2e, 0x6e, 0xda, 0xc8, 0x10, 0x3a, 0x82, 0x32,
		0x7f, 0x08, 0x47, 0xb7, 0xf2, 0x7a, 0xf1, 0x2e, 0x7a, 0x9b, 0xc6, 0x26, 0xb3, 0xff, 0x1e, 0x95,
		0xde, 0x9a, 0x34, 0x56, 0xf7, 0x83, 0xd1, 0x40, 0x09, 0x2b, 0x5c, 0x26, 0xbf, 0xbd, 0x20, 0xdf,
		0x4d, 0xd2, 0xd8, 0xef, 0xa7, 0x36, 0x1e, 0x73, 0x9c, 0x05, 0x6e, 0xbe, 0x58, 0xfb, 0x19, 0x9d,
		0x05, 0xf9, 0xae, 0xf9, 0xe8, 0xb6, 0x8d, 0xcf, 0xe8, 0x66, 0x4b, 0x75, 0x13, 0x46, 0xb1, 0x6a,
		0x88, 0x4a, 0xbf, 0x7f, 0x2e, 0x7d, 0x22, 0x7f, 0xca, 0x8c, 0x9c, 0x85, 0xe3, 0x38, 0xdb, 0xc2,
		0x73, 0xe7, 0xf8, 0xb9, 0x35, 0xe9, 0xee, 0x64, 0x90, 0x5f, 0xc7, 0xc2, 0x13, 0xa6, 0xdb, 0x77,
		0xee, 0x74, 0x6d, 0x08, 0x0f, 0x67, 0x8b, 0xd3, 0xb2, 0x27, 0x7d, 0xa6, 0xa4, 0xe7, 0x4e, 0x5b,
		0xf6, 0x10, 0xd6, 0x0d, 0x05, 0x77, 0x9c, 0xd6, 0xcf, 0xae, 0xec, 0x97, 0x74, 0x9b, 0x8d, 0x6e,
		0xef, 0x5f, 0x93, 0xf6, 0xda, 0x0f, 0x7f, 0x08, 0xd4, 0x98, 0x10, 0x09, 0x8d, 0x1b, 0x6e, 0xbc,
		0xf6, 0xbe, 0x2c, 0x48, 0x6c, 0xbd, 0xec, 0x74, 0x4e, 0x4e, 0x3b, 0x9d, 0xe6, 0xe9, 0xf1, 0x69,
		0xf3, 0xac, 0xdb, 0x6d, 0x9d, 0xb4, 0x04, 0xb4, 0xae, 0xf1, 0x4b, 0x3c, 0x50, 0xb1, 0x1a, 0x7c,
		0x37, 0x5e, 0xde, 0x70, 0x14, 0x04, 0x5b, 0xdd, 0x65, 0xa1, 0xa0, 0x7a, 0x2e, 0x6f, 0x0b, 0xc1,
		0xf5, 0x27, 0x63, 0xb5, 0x47, 0x96, 0xa3, 0x41, 0x4e, 0x95, 0xf1, 0xf9, 0x9f, 0xd5, 0xe7, 0xb7,
		0xe3, 0x9f, 0x32, 0xbb, 0x06, 0x63, 0xf6, 0xcf, 0x31, 0x59, 0x4e, 0x1e, 0xfd, 0xbf, 0x8d, 0x1d,
		0x4c, 0x96, 0x3f, 0xb5, 0x73, 0xf9, 0xbf, 0xb5, 0xaa, 0x8b, 0x1d, 0x2e, 0x3c, 0x93, 0x28, 0x22,
		0x51, 0x44, 0xa2, 0x88, 0x44, 0x11, 0x89, 0x22, 0x12, 0x45, 0x24, 0x8a, 0x48, 0x14, 0x91, 0x28,
		0x22, 0x51, 0x44, 0xa2, 0x88, 0x44, 0x11, 0x89, 0x22, 0x12, 0x45, 0xac, 0x4d, 0x14, 0xf1, 0xb9,
		0x1c, 0xa7, 0x6e, 0xd9, 0xe3, 0xd3, 0x2d, 0xb8, 0x34, 0x5c, 0x1a, 0x2e, 0x7d, 0xa8, 0x5c, 0x7a,
		0x12, 0x28, 0xf6, 0xa3, 0xc4, 0xfd, 0x12, 0x67, 0xb6, 0x3d, 0xbc, 0xb1, 0xc1, 0xa3, 0x5f, 0x0a,
		0xca, 0x94, 0xbe, 0x33, 0x3f, 0x17, 0xfc, 0xbe, 0xd7, 0xfb, 0xdc, 0xeb, 0xb9, 0xbd, 0xde, 0x8b,
		0xf3, 0xe7, 0x1f, 0xfe, 0xfe, 0x2f, 0x5f, 0xfd, 0x6b, 0xaf, 0xf7, 0xed, 0x5f, 0x7b, 0xbd, 0x3f,
		0xff, 0xfd, 0xf2, 0x5b, 0xb9, 0x83, 0x75, 0x49, 0x92, 0xeb, 0x81, 0x24, 0x97, 0x23, 0x16, 0xdf,
		0x25, 0xdd, 0x45, 0xba, 0xab, 0x86, 0xe9, 0x2e, 0x57, 0x92, 0x73, 0xed, 0x40, 0xe2, 0xeb, 0x22,
		0xff, 0xb9, 0x7b, 0x9d, 0x01, 0xcb, 0x3f, 0xb5, 0xb7, 0x91, 0x0b, 0x5b, 0x78, 0x3a, 0x59, 0xb1,
		0x8a, 0x89, 0x3a, 0x59, 0x31, 0xb2, 0x62, 0x05, 0x3d, 0x78, 0xb2, 0x62, 0x78, 0xf2, 0x78, 0xf2,
		0x78, 0xf2, 0x64, 0xc5, 0x56, 0x64, 0x92, 0x15, 0x5b, 0x97, 0x4f, 0x56, 0xac, 0xf0, 0x33, 0xc8,
		0x8a, 0x91, 0x15, 0x7b, 0x5c, 0x38, 0x59, 0x31, 0x87, 0xac, 0x58, 0x59, 0x3e, 0x4d, 0x56, 0x0c,
		0x2e, 0x0d, 0x97, 0x3e, 0x58, 0x2e, 0x4d, 0x56, 0x6c, 0x2e, 0xf8, 0xb0, 0xb2, 0x62, 0x82, 0xf0,
		0xd4, 0xb6, 0x07, 0x4f, 0x6d, 0xe0, 0x09, 0x78, 0x02, 0x9e, 0x80, 0x27, 0xe0, 0x89, 0xa2, 0x8d,
		0xaa, 0x0e, 0xf6, 0x13, 0x45, 0x1b, 0x8e, 0x58, 0x22, 0x92, 0xf2, 0x0d, 0xca, 0x37, 0x6a, 0x5d,
		0xbe, 0xe1, 0x4a, 0xf2, 0xb0, 0x5d, 0x2a, 0xe4, 0xb8, 0xc8, 0x7f, 0xf7, 0x81, 0x54, 0x74, 0xe4,
		0x9f, 0x8e, 0xb7, 0x5b, 0xdb, 0xb1, 0xf0, 0x1e, 0x54, 0x79, 0x54, 0xcc, 0xec, 0xa9, 0xf2, 0xa0,
		0xca, 0xa3, 0xa0, 0xcb, 0x4f, 0x95, 0x07, 0xae, 0x3f, 0xae, 0x3f, 0xae, 0x3f, 0x55, 0x1e, 0x2b,
		0x32, 0xa9, 0xf2, 0x58, 0x97, 0x4f, 0x95, 0x47, 0xe1, 0x67, 0x50, 0xe5, 0x41, 0x95, 0xc7, 0xe3,
		0xc2, 0xa9, 0xf2, 0x70, 0xa8, 0xf2, 0x28, 0xcb, 0xa7, 0xa9, 0xf2, 0x80, 0x4b, 0xc3, 0xa5, 0x0f,
		0x96, 0x4b, 0x93, 0x46, 0x9b, 0x0b, 0xa6, 0xca, 0x43, 0x13, 0x9e, 0xa8, 0xf2, 0x00, 0x9e, 0x80,
		0x27, 0xe0, 0x09, 0x78, 0x02, 0x9e, 0x6a, 0x08, 0x4f, 0xc7, 0xf6, 0xe0, 0xe9, 0x18, 0x78, 0x02,
		0x9e, 0x80, 0x27, 0xe0, 0x09, 0x78, 0xa2, 0x08, 0xb1, 0xaa, 0x83, 0x5d, 0xb8, 0x08, 0xd1, 0x11,
		0xab, 0x98, 0xa1, 0x1c, 0x91, 0x72, 0xc4, 0x1d, 0x29, 0x47, 0x74, 0x25, 0xb9, 0xd9, 0x4e, 0x16,
		0x26, 0x5e, 0xe4, 0x0b, 0x70, 0x70, 0x15, 0x8a, 0xf9, 0xa7, 0x4e, 0x5d, 0x6a, 0x15, 0x17, 0xde,
		0x88, 0xaa, 0xc5, 0x8a, 0x5d, 0x01, 0xaa, 0x16, 0xa9, 0x5a, 0x2c, 0x18, 0x23, 0xa0, 0x6a, 0x91,
		0x58, 0x01, 0xb1, 0x02, 0x62, 0x05, 0x54, 0x2d, 0xae, 0xc8, 0xa4, 0x6a, 0x71, 0x5d, 0x3e, 0x55,
		0x8b, 0x85, 0x9f, 0x41, 0xd5, 0x22, 0x55, 0x8b, 0x8f, 0x0b, 0xa7, 0x6a, 0xd1, 0xa1, 0x6a, 0xb1,
		0x2c, 0x9f, 0xa6, 0x6a, 0x11, 0x2e, 0x0d, 0x97, 0x3e, 0x58, 0x2e, 0x4d, 0xde, 0x6d, 0x2e, 0x98,
		0xb2, 0x10, 0x4d, 0x78, 0xa2, 0x6a, 0x11, 0x78, 0x02, 0x9e, 0x80, 0x27, 0xe0, 0x09, 0x78, 0xaa,
		0x21, 0x3c, 0x51, 0xb5, 0x08, 0x3c, 0x01, 0x4f, 0xc0, 0x13, 0xf0, 0x04, 0x3c, 0xd5, 0x10, 0x9e,
		0x3a, 0xf6, 0xe0, 0xa9, 0x03, 0x3c, 0x01, 0x4f, 0xc0, 0x13, 0xf0, 0x04, 0x3c, 0x51, 0x54, 0x5f,
		0xd5, 0xc1, 0xd6, 0x28, 0xaa, 0x77, 0xc4, 0x4a, 0x3b, 0x29, 0xaf, 0xa7, 0xbc, 0x7e, 0xe7, 0xca,
		0xeb, 0x5d, 0x49, 0xbe, 0xb6, 0xdb, 0x85, 0xf6, 0x17, 0xf9, 0x4a, 0x1c, 0x70, 0xc5, 0x7d, 0xfe,
		0xa9, 0x5b, 0xbf, 0xda, 0xfb, 0x85, 0x77, 0xa3, 0x0a, 0xbf, 0x62, 0xdf, 0x81, 0x2a, 0x7c, 0xaa,
		0xf0, 0x0b, 0x06, 0x15, 0xa8, 0xc2, 0x27, 0xb8, 0x40, 0x70, 0x81, 0xe0, 0x02, 0x55, 0xf8, 0x2b,
		0x32, 0xa9, 0xc2, 0x5f, 0x97, 0x4f, 0x15, 0x7e, 0xe1, 0x67, 0x50, 0x85, 0x4f, 0x15, 0xfe, 0xe3,
		0xc2, 0xa9, 0xc2, 0x77, 0xa8, 0xc2, 0x2f, 0xcb, 0xa7, 0xa9, 0xc2, 0x87, 0x4b, 0xc3, 0xa5, 0x0f,
		0x96, 0x4b, 0x93, 0xa8, 0x9b, 0x0b, 0xa6, 0x8e, 0x44, 0x13, 0x9e, 0xa8, 0xc2, 0x07, 0x9e, 0x80,
		0x27, 0xe0, 0x09, 0x78, 0x02, 0x9e, 0x6a, 0x08, 0x4f, 0x54, 0xe1, 0x03, 0x4f, 0xc0, 0x13, 0xf0,
		0x04, 0x3c, 0x01, 0x4f, 0x35, 0x84, 0x27, 0xaa, 0xf0, 0x81, 0x27, 0xe0, 0x09, 0x78, 0x02, 0x9e,
		0x80, 0xa7, 0x1a, 0xc2, 0x53, 0xd7, 0x1e, 0x3c, 0x75, 0x81, 0x27, 0xe0, 0x09, 0x78, 0x02, 0x9e,
		0x80, 0x27, 0x9a, 0xc4, 0xaa, 0x3a, 0xd8, 0x46, 0x4d, 0x62, 0x8e, 0x58, 0x0f, 0x02, 0xed, 0x62,
		0xb4, 0x8b, 0xed, 0x70, 0xbb, 0x98, 0x2b, 0xc9, 0xe1, 0xf6, 0xa4, 0x71, 0xec, 0x22, 0x5f, 0x12,
		0x3a, 0xc8, 0xd2, 0xbb, 0x6e, 0xfe, 0xe9, 0xa4, 0xce, 0xbd, 0x64, 0x0b, 0x6f, 0x49, 0x57, 0x59,
		0xc5, 0xce, 0x06, 0x5d, 0x65, 0x74, 0x95, 0x15, 0x8c, 0x42, 0xd0, 0x55, 0x46, 0x34, 0x82, 0x68,
		0x04, 0xd1, 0x08, 0xba, 0xca, 0x56, 0x64, 0xd2, 0x55, 0xb6, 0x2e, 0x9f, 0xae, 0xb2, 0xc2, 0xcf,
		0xa0, 0xab, 0x8c, 0xae, 0xb2, 0xc7, 0x85, 0xd3, 0x55, 0xe6, 0xd0, 0x55, 0x56, 0x96, 0x4f, 0xd3,
		0x55, 0x06, 0x97, 0x86, 0x4b, 0x1f, 0x2c, 0x97, 0x26, 0xb3, 0x37, 0x17, 0x4c, 0xe1, 0x89, 0x26,
		0x3c, 0xd1, 0x55, 0x06, 0x3c, 0x01, 0x4f, 0xc0, 0x13, 0xf0, 0x04, 0x3c, 0xd5, 0x10, 0x9e, 0xe8,
		0x2a, 0x03, 0x9e, 0x80, 0x27, 0xe0, 0x09, 0x78, 0x02, 0x9e, 0x6a, 0x08, 0x4f, 0x74, 0x95, 0x01,
		0x4f, 0xc0, 0x13, 0xf0, 0x04, 0x3c, 0x01, 0x4f, 0x35, 0x84, 0x27, 0xba, 0xca, 0x80, 0x27, 0xe0,
		0x09, 0x78, 0x02, 0x9e, 0x80, 0xa7, 0x1a, 0xc2, 0xd3, 0x89, 0x3d, 0x78, 0x3a, 0x01, 0x9e, 0x80,
		0x27, 0xe0, 0x09, 0x78, 0x02, 0x9e, 0x68, 0x7a, 0xae, 0xea, 0x60, 0x0b, 0x35, 0x3d, 0x3b, 0x62,
		0xcd, 0x72, 0xb4, 0x3f, 0xd3, 0xfe, 0xbc, 0x17, 0xed, 0xcf, 0xae, 0x24, 0xaf, 0xdb, 0xb7, 0x46,
		0xe8, 0x8b, 0x7c, 0x6d, 0xe8, 0x88, 0x5e, 0x3a, 0x2b, 0xf9, 0xa7, 0xd3, 0xdd, 0xe8, 0x8d, 0x5e,
		0x78, 0x5f, 0xba, 0xa4, 0x2b, 0xf6, 0x4e, 0xe8, 0x92, 0xa6, 0x4b, 0xba, 0x60, 0xd8, 0x82, 0x2e,
		0x69, 0xc2, 0x17, 0x84, 0x2f, 0x08, 0x5f, 0xd0, 0x25, 0xbd, 0x22, 0x93, 0x2e, 0xe9, 0x75, 0xf9,
		0x74, 0x49, 0x17, 0x7e, 0x06, 0x5d, 0xd2, 0x74, 0x49, 0x3f, 0x2e, 0x9c, 0x2e, 0x69, 0x87, 0x2e,
		0xe9, 0xb2, 0x7c, 0x9a, 0x2e, 0x69, 0xb8, 0x34, 0x5c, 0xfa, 0x60, 0xb9, 0x34, 0xa9, 0xc0, 0xb9,
		0x60, 0x2a, 0x55, 0x34, 0xe1, 0x89, 0x2e, 0x69, 0xe0, 0x09, 0x78, 0x02, 0x9e, 0x80, 0x27, 0xe0,
		0xa9, 0x86, 0xf0, 0x44, 0x97, 0x34, 0xf0, 0x04, 0x3c, 0x01, 0x4f, 0xc0, 0x13, 0xf0, 0x54, 0x43,
		0x78, 0xa2, 0x4b, 0x1a, 0x78, 0x02, 0x9e, 0x80, 0x27, 0xe0, 0x09, 0x78, 0xaa, 0x21, 0x3c, 0xd1,
		0x25, 0x0d, 0x3c, 0x01, 0x4f, 0xc0, 0x13, 0xf0, 0x04, 0x3c, 0xd5, 0x10, 0x9e, 0xe8, 0x92, 0x06,
		0x9e, 0x80, 0x27, 0xe0, 0x09, 0x78, 0x02, 0x9e, 0x6a, 0x08, 0x4f, 0xa7, 0xf6, 0xe0, 0xe9, 0x14,
		0x78, 0x02, 0x9e, 0x80, 0x27, 0xe0, 0x09, 0x78, 0x62, 0x88, 0x47, 0x55, 0x07, 0x5b, 0x7c, 0x88,
		0x87, 0x23, 0xd6, 0xd5, 0xcd, 0x38, 0x0f, 0xc6, 0x79, 0xec, 0xd9, 0x38, 0x0f, 0x57, 0x92, 0xeb,
		0xed, 0xed, 0x60, 0x8f, 0x8b, 0x7c, 0x91, 0x98, 0xf0, 0xf1, 0xc0, 0xf1, 0xc9, 0x3f, 0xbd, 0xdc,
		0xb5, 0x59, 0x1f, 0x0b, 0x6f, 0xce, 0xd4, 0x8f, 0x8a, 0xdd, 0x19, 0xa6, 0x7e, 0x30, 0xf5, 0xa3,
		0x60, 0x9c, 0x83, 0xa9, 0x1f, 0xc4, 0x3b, 0x88, 0x77, 0x10, 0xef, 0x60, 0xea, 0xc7, 0x8a, 0x4c,
		0xa6, 0x7e, 0xac, 0xcb, 0x67, 0xea, 0x47, 0xe1, 0x67, 0x30, 0xf5, 0x83, 0xa9, 0x1f, 0x8f, 0x0b,
		0x67, 0xea, 0x87, 0xc3, 0xd4, 0x8f, 0xb2, 0x7c, 0x9a, 0xa9, 0x1f, 0x70, 0x69, 0xb8, 0xf4, 0xc1,
		0x72, 0x69, 0x72, 0x87, 0x73, 0xc1, 0x94, 0xb6, 0x68, 0xc2, 0x13, 0x53, 0x3f, 0x80, 0x27, 0xe0,
		0x09, 0x78, 0x02, 0x9e, 0x80, 0xa7, 0x1a, 0xc2, 0x13, 0x53, 0x3f, 0x80, 0x27, 0xe0, 0x09, 0x78,
		0x02, 0x9e, 0x80, 0xa7, 0x1a, 0xc2, 0x13, 0x53, 0x3f, 0x80, 0x27, 0xe0, 0x09, 0x78, 0x02, 0x9e,
		0x80, 0xa7, 0x1a, 0xc2, 0x13, 0x53, 0x3f, 0x80, 0x27, 0xe0, 0x09, 0x78, 0x02, 0x9e, 0x80, 0xa7,
		0x1a, 0xc2, 0x13, 0x53, 0x3f, 0x80, 0x27, 0xe0, 0x09, 0x78, 0x02, 0x9e, 0x80, 0xa7, 0x1a, 0xc2,
		0x13, 0x53, 0x3f, 0x80, 0x27, 0xe0, 0x09, 0x78, 0x02, 0x9e, 0x80, 0xa7, 0x1a, 0xc2, 0xd3, 0x4b,
		0x7b, 0xf0, 0xf4, 0x12, 0x78, 0x02, 0x9e, 0x80, 0x27, 0xe0, 0x09, 0x78, 0x62, 0x28, 0x55, 0x55,
		0x07, 0xdb, 0xe2, 0x50, 0x2a, 0x47, 0x6c, 0xfc, 0x08, 0xe3, 0xa9, 0x18, 0x4f, 0xb5, 0xb7, 0xe3,
		0xa9, 0x5c, 0x49, 0xfe, 0xb7, 0xff, 0x83, 0xaa, 0x2e, 0xf2, 0xd5, 0x62, 0x62, 0xd5, 0x93, 0x27,
		0x2a, 0xff, 0x74, 0xb6, 0xbb, 0xb3, 0xab, 0x16, 0x7e, 0x03, 0x53, 0xac, 0x2a, 0xf6, 0x7f, 0x98,
		0x62, 0xc5, 0x14, 0xab, 0x82, 0x81, 0x11, 0xa6, 0x58, 0x11, 0x20, 0x21, 0x40, 0x42, 0x80, 0x84,
		0x29, 0x56, 0x2b, 0x32, 0x99, 0x62, 0xb5, 0x2e, 0x9f, 0x29, 0x56, 0x85, 0x9f, 0xc1, 0x14, 0x2b,
		0xa6, 0x58, 0x3d, 0x2e, 0x9c, 0x29, 0x56, 0x0e, 0x53, 0xac, 0xca, 0xf2, 0x69, 0xa6, 0x58, 0xc1,
		0xa5, 0xe1, 0xd2, 0x07, 0xcb, 0xa5, 0x49, 0x36, 0xce, 0x05, 0x53, 0x0b, 0xa3, 0x09, 0x4f, 0x4c,
		0xb1, 0x02, 0x9e, 0x80, 0x27, 0xe0, 0x09, 0x78, 0x02, 0x9e, 0x6a, 0x08, 0x4f, 0x4c, 0xb1, 0x02,
		0x9e, 0x80, 0x27, 0xe0, 0x09, 0x78, 0x02, 0x9e, 0x6a, 0x08, 0x4f, 0x4c, 0xb1, 0x02, 0x9e, 0x80,
		0x27, 0xe0, 0x09, 0x78, 0x02, 0x9e, 0x6a, 0x08, 0x4f, 0x4c, 0xb1, 0x02, 0x9e, 0x80, 0x27, 0xe0,
		0x09, 0x78, 0x02, 0x9e, 0x6a, 0x08, 0x4f, 0x4c, 0xb1, 0x02, 0x9e, 0x80, 0x27, 0xe0, 0x09, 0x78,
		0x02, 0x9e, 0x6a, 0x08, 0x4f, 0x4c, 0xb1, 0x02, 0x9e, 0x80, 0x27, 0xe0, 0x09, 0x78, 0x02, 0x9e,
		0x6a, 0x08, 0x4f, 0x4c, 0xb1, 0x02, 0x9e, 0x80, 0x27, 0xe0, 0x09, 0x78, 0x02, 0x9e, 0x6a, 0x08,
		0x4f, 0x67, 0xf6, 0xe0, 0xe9, 0x0c, 0x78, 0x02, 0x9e, 0x80, 0x27, 0xe0, 0x09, 0x78, 0x62, 0xc8,
		0x62, 0x55, 0x07, 0xbb, 0x92, 0x21, 0x8b, 0x8e, 0xd8, 0x9c, 0x2c, 0xc6, 0x2d, 0x32, 0x6e, 0xf1,
		0x00, 0xc6, 0x2d, 0xba, 0x92, 0x9c, 0xf0, 0x80, 0x06, 0x2f, 0x5e, 0xe4, 0xcb, 0xc6, 0x04, 0xc6,
		0x12, 0x87, 0x6c, 0x2e, 0xb9, 0xb9, 0x0f, 0xc3, 0x18, 0x17, 0x7f, 0x0e, 0x73, 0x19, 0x2b, 0x76,
		0x99, 0x98, 0xcb, 0xc8, 0x5c, 0xc6, 0x82, 0xb1, 0x14, 0xe6, 0x32, 0x12, 0x53, 0x21, 0xa6, 0x42,
		0x4c, 0x85, 0xb9, 0x8c, 0x2b, 0x32, 0x99, 0xcb, 0xb8, 0x2e, 0x9f, 0xb9, 0x8c, 0x85, 0x9f, 0xc1,
		0x5c, 0x46, 0xe6, 0x32, 0x3e, 0x2e, 0x9c, 0xb9, 0x8c, 0x0e, 0x73, 0x19, 0xcb, 0xf2, 0x69, 0xe6,
		0x32, 0xc2, 0xa5, 0xe1, 0xd2, 0x07, 0xcb, 0xa5, 0xc9, 0x4f, 0xce, 0x05, 0x53, 0x3e, 0xa3, 0x0b,
		0x4f, 0x4d, 0x8b, 0xf8, 0xd4, 0x04, 0xa0, 0x00, 0x28, 0x00, 0x0a, 0x80, 0x02, 0xa0, 0x00, 0x28,
		0x4d, 0x80, 0x62, 0x70, 0x30, 0xf0, 0x04, 0x3c, 0x01, 0x4f, 0xc0, 0x13, 0xf0, 0x54, 0x43, 0x78,
		0x62, 0x70, 0x30, 0xf0, 0x04, 0x3c, 0x01, 0x4f, 0xc0, 0x13, 0xf0, 0x54, 0x43, 0x78, 0x62, 0x70,
		0x30, 0xf0, 0x04, 0x3c, 0x01, 0x4f, 0xc0, 0x13, 0xf0, 0x54, 0x43, 0x78, 0x62, 0x70, 0x30, 0xf0,
		0x04, 0x3c, 0x01, 0x4f, 0xc0, 0x13, 0xf0, 0x54, 0x43, 0x78, 0x62, 0x70, 0x30, 0xf0, 0x04, 0x3c,
		0x01, 0x4f, 0xc0, 0x13, 0xf0, 0x54, 0x43, 0x78, 0x62, 0x70, 0x30, 0xf0, 0x04, 0x3c, 0x01, 0x4f,
		0xc0, 0x13, 0xf0, 0x54, 0x43, 0x78, 0x62, 0x70, 0x30, 0xf0, 0x04, 0x3c, 0x01, 0x4f, 0xc0, 0x13,
		0xf0, 0x54, 0x43, 0x78, 0x62, 0x70, 0x30, 0xf0, 0x04, 0x3c, 0x01, 0x4f, 0xc0, 0x13, 0xf0, 0x24,
		0x05, 0x4f, 0x07, 0x34, 0x38, 0xd8, 0x91, 0x9b, 0xe9, 0xc8, 0x0c, 0x61, 0x66, 0x08, 0x1f, 0xd4,
		0x0c, 0x61, 0x57, 0xb4, 0x43, 0xfe, 0x10, 0xc7, 0x09, 0x5f, 0xcc, 0x17, 0x70, 0x5b, 0x83, 0x85,
		0x9f, 0x55, 0xa8, 0x98, 0x52, 0x0a, 0x59, 0x4b, 0x45, 0x34, 0x50, 0x81, 0x7a, 0x1c, 0x7d, 0xbd,
		0x23, 0x58, 0xfe, 0x00, 0x69, 0x1c, 0x9e, 0xc6, 0x78, 0xab, 0xdd, 0x44, 0x05, 0xaa, 0x6f, 0x74,
		0x78, 0x72, 0x6e, 0xbb, 0x22, 0x4f, 0xf3, 0x38, 0x9b, 0x4d, 0x71, 0x36, 0xf6, 0x63, 0x25, 0xfc,
		0x56, 0x61, 0x3f, 0x55, 0xca, 0x2f, 0x15, 0xf7, 0x43, 0xc5, 0xfd, 0x4e, 0x79, 0x3f, 0xb3, 0x5a,
		0x53, 0x6c, 0x3a, 0x75, 0xb9, 0xa1, 0x42, 0xef, 0x2a, 0x50, 0x72, 0x73, 0xdd, 0xa7, 0xf2, 0x64,
		0x06, 0xab, 0x37, 0x19, 0xac, 0xbe, 0xad, 0x50, 0x12, 0x83, 0xd5, 0xeb, 0xe2, 0x49, 0x8b, 0x85,
		0x86, 0xe6, 0x3a, 0x7a, 0x3b, 0x14, 0x99, 0x72, 0x9c, 0x23, 0xe7, 0xf1, 0x0e, 0xde, 0xa7, 0xe1,
		0x87, 0x9f, 0xbc, 0xc0, 0x1f, 0xc8, 0xf8, 0x95, 0xf9, 0xd2, 0x2e, 0x49, 0xe5, 0x76, 0x09, 0x8c,
		0x20, 0x46, 0x50, 0xc4, 0x08, 0x8a, 0xdd, 0x2e, 0xb1, 0xa8, 0xa0, 0x6e, 0xea, 0xdf, 0xaa, 0x58,
		0x3e, 0xf3, 0xb6, 0xe1, 0x19, 0xa4, 0xe0, 0x6a, 0x66, 0x2a, 0x6c, 0x99, 0x0c, 0xeb, 0xa6, 0xc3,
		0xba, 0x09, 0xb1, 0x6f, 0x4a, 0x64, 0x4c, 0x8a, 0x90, 0x69, 0x91, 0xe7, 0x59, 0x6b, 0x27, 0x77,
		0xe4, 0x87, 0xe9, 0x71, 0xdb, 0x42, 0xd6, 0xed, 0x54, 0x50, 0xe4, 0xaf, 0x5e, 0x78, 0xa3, 0xc4,
		0x53, 0x6e, 0x16, 0x66, 0xf7, 0xbf, 0xf6, 0x43, 0x2b, 0x97, 0x02, 0x64, 0xc2, 0xff, 0xb7, 0x17,
		0x8c, 0x94, 0x9c, 0x41, 0x5c, 0x93, 0xff, 0x63, 0xec, 0x65, 0xb1, 0xaa, 0xef, 0xfd, 0x1b, 0x5f,
		0x2a, 0x25, 0xb4, 0xf9, 0xec, 0xa9, 0x1b, 0x2f, 0xf5, 0x3f, 0x8d, 0x7f, 0xcb, 0xb5, 0x17, 0x24,
		0x4a, 0xfc, 0x29, 0xf7, 0x16, 0xee, 0x06, 0x78, 0xed, 0x7d, 0xb1, 0xbf, 0xb5, 0x27, 0xcd, 0x66,
		0x93, 0xed, 0xad, 0xc6, 0x36, 0xcb, 0x4b, 0xdb, 0xa7, 0xe2, 0xaf, 0x75, 0x9e, 0xe8, 0xaa, 0x2f,
		0x43, 0x3f, 0x56, 0x96, 0xae, 0x3e, 0x7b, 0xe2, 0x79, 0x42, 0x38, 0xfa, 0xbd, 0xba, 0xf6, 0x46,
		0x41, 0x2a, 0x0a, 0x25, 0x8d, 0xd9, 0x15, 0x4d, 0xfd, 0xc9, 0xbb, 0x2b, 0x2f, 0x96, 0xa1, 0x21,
		0x97, 0x10, 0x73, 0x88, 0x39, 0xc4, 0xfc, 0x40, 0x89, 0xf9, 0xec, 0x02, 0xb8, 0xe5, 0x3c, 0xa2,
		0xfb, 0xa0, 0x9d, 0xe4, 0x66, 0x38, 0x4b, 0x37, 0xc3, 0x6d, 0x30, 0xef, 0xb6, 0x2e, 0x89, 0x5b,
		0x7e, 0xd4, 0x20, 0x8e, 0x86, 0x07, 0x7b, 0x0b, 0xda, 0x86, 0xa5, 0x38, 0x77, 0xda, 0xcf, 0x6d,
		0x3f, 0x28, 0xdb, 0xde, 0x73, 0xa7, 0xc5, 0xbd, 0x5f, 0x16, 0x25, 0x50, 0x74, 0x77, 0xb4, 0x6c,
		0xd5, 0x8f, 0x04, 0x53, 0x33, 0x4e, 0x95, 0xd5, 0x3e, 0x6f, 0xbc, 0xf4, 0xe3, 0xdb, 0xd9, 0xaf,
		0xf8, 0xf0, 0xd3, 0xe2, 0xaf, 0xd8, 0xc1, 0xb4, 0xdb, 0x0a, 0xd4, 0xde, 0xaa, 0x34, 0xf6, 0xfb,
		0x72, 0xf9, 0xb7, 0xcd, 0xe2, 0xa9, 0x46, 0xa8, 0x98, 0xc4, 0x93, 0x88, 0xa3, 0x1a, 0xc1, 0x90,
		0x84, 0x8b, 0xa8, 0xae, 0x34, 0xd3, 0x96, 0x65, 0xd8, 0x76, 0x98, 0xf5, 0xf4, 0xae, 0xe5, 0x9b,
		0xa1, 0xa4, 0xb7, 0x32, 0xa1, 0xce, 0xa2, 0x0e, 0x50, 0x76, 0xd7, 0xf1, 0x40, 0x05, 0xde, 0x5d,
		0xa3, 0x5e, 0xee, 0xa6, 0x38, 0xe1, 0x9e, 0xfe, 0x4a, 0xd1, 0xab, 0x80, 0xb3, 0x0d, 0x16, 0xbd,
		0xa1, 0x77, 0xbc, 0xbd, 0x52, 0xb7, 0xf1, 0x6e, 0x9d, 0xfd, 0xd6, 0x81, 0xdb, 0x24, 0xea, 0x66,
		0x0c, 0x00, 0x6e, 0x1c, 0x8d, 0x52, 0x3f, 0xbc, 0x71, 0xbd, 0xc1, 0x7f, 0x7b, 0x7d, 0x15, 0xf6,
		0xef, 0xdc, 0x61, 0x1c, 0xa5, 0x86, 0x35, 0xd0, 0x4f, 0x31, 0x9f, 0x42, 0x0f, 0x87, 0x17, 0xc1,
		0x8b, 0xe0, 0x45, 0xbb, 0xc5, 0x8b, 0x2a, 0x50, 0xec, 0x83, 0x64, 0x4d, 0xcd, 0xf1, 0x9a, 0x87,
		0x51, 0xea, 0x26, 0x2a, 0x95, 0xa4, 0x39, 0x19, 0x1b, 0xf3, 0x06, 0xff, 0xed, 0x8e, 0xc2, 0xe9,
		0x06, 0xa9, 0x81, 0x38, 0x33, 0x1b, 0xcb, 0x9f, 0x4b, 0xdf, 0x77, 0x3a, 0xb5, 0xfc, 0x6b, 0x45,
		0x43, 0x96, 0x6b, 0x3b, 0x25, 0x4b, 0xb1, 0x66, 0xe7, 0xeb, 0xdc, 0x69, 0xc2, 0xb3, 0xf4, 0x23,
		0x6f, 0x2b, 0x26, 0x70, 0x18, 0xab, 0xa1, 0xca, 0xac, 0x95, 0x10, 0x97, 0x7a, 0xe8, 0x01, 0x14,
		0x74, 0xc3, 0x97, 0xe0, 0x4b, 0x22, 0x7c, 0x49, 0xac, 0xa0, 0x5b, 0xa8, 0x81, 0x6d, 0xed, 0x20,
		0x8b, 0x34, 0xb2, 0x09, 0xbb, 0x4a, 0xe2, 0x26, 0xc0, 0x86, 0x29, 0xb0, 0x6c, 0x12, 0x6c, 0x99,
		0x06, 0xeb, 0x26, 0xc2, 0xba, 0xa9, 0xb0, 0x6f, 0x32, 0xe4, 0x68, 0x87, 0xb3, 0x13, 0xf5, 0x21,
		0x52, 0x8d, 0x72, 0x6b, 0x0c, 0xe0, 0x78, 0xaf, 0xaa, 0x18, 0x07, 0xea, 0x8b, 0x4a, 0x6c, 0x94,
		0x2b, 0x4e, 0x04, 0xcb, 0x9a, 0xe0, 0x16, 0x26, 0x18, 0x13, 0x8c, 0x09, 0x96, 0x35, 0xc1, 0x52,
		0x6c, 0x6e, 0xd9, 0xa8, 0xc8, 0x1f, 0xac, 0x25, 0xd3, 0x22, 0x7d, 0xa8, 0x64, 0x0d, 0x8c, 0x35,
		0x43, 0x63, 0xd3, 0xe0, 0x54, 0x64, 0x78, 0x6c, 0x1b, 0xa0, 0xca, 0x0c, 0x51, 0x65, 0x06, 0xa9,
		0x3a, 0xc3, 0x24, 0x6b, 0xa0, 0x84, 0x0d, 0x95, 0x35, 0x83, 0xb5, 0x6c, 0xb8, 0xdc, 0x70, 0x74,
		0x7b, 0xa5, 0x62, 0x7b, 0xe7, 0x72, 0xc9, 0x8e, 0xcd, 0x9e, 0x66, 0xe9, 0xc4, 0xc8, 0xba, 0xae,
		0x95, 0x99, 0xb7, 0x2a, 0xcc, 0x5c, 0xc5, 0xe6, 0xae, 0x2a, 0xb3, 0x57, 0xb9, 0xf9, 0xab, 0xdc,
		0x0c, 0x56, 0x6f, 0x0e, 0xed, 0x98, 0x45, 0x4b, 0xe6, 0xd1, 0x9e, 0x6b, 0xfd, 0xa0, 0xe6, 0x88,
		0xf7, 0x48, 0x3f, 0x64, 0xc7, 0x4e, 0x2d, 0x3e, 0xc2, 0x4e, 0x0f, 0xf5, 0xea, 0x5f, 0x76, 0x95,
		0xde, 0xb1, 0xdd, 0x63, 0xbd, 0xf6, 0xb0, 0x59, 0x63, 0x6e, 0xeb, 0x79, 0x35, 0xcf, 0xab, 0xaa,
		0x49, 0x77, 0xfd, 0xac, 0xdb, 0x6e, 0xda, 0xad, 0xc8, 0x2c, 0x2c, 0x1f, 0x15, 0xef, 0xcb, 0x16,
		0x8e, 0x4a, 0x93, 0xb3, 0xb2, 0x13, 0xc0, 0x64, 0x5f, 0xfa, 0xe5, 0xb3, 0xdd, 0x78, 0x5f, 0x1b,
		0xf3, 0x12, 0x32, 0xc6, 0x12, 0x78, 0x57, 0x2a, 0xb0, 0xef, 0x6a, 0x2c, 0x3c, 0xcb, 0x12, 0xd9,
		0xb0, 0xd1, 0x38, 0xbe, 0xf6, 0x90, 0x56, 0xb3, 0xf3, 0xb2, 0x7b, 0x7a, 0x6a, 0x87, 0xe0, 0x5d,
		0xe2, 0x82, 0xe1, 0x82, 0xe1, 0x82, 0xe1, 0x82, 0xe1, 0x82, 0xe1, 0x82, 0xed, 0xa2, 0x0b, 0x06,
		0xad, 0xc6, 0x05, 0x2b, 0x78, 0x54, 0x3a, 0xed, 0xb3, 0xce, 0xd9, 0xc9, 0x69, 0xfb, 0xac, 0xcb,
		0x99, 0xc1, 0x15, 0x3b, 0x78, 0x57, 0x6c, 0x5a, 0x22, 0x2c, 0x3b, 0xb9, 0xeb, 0x41, 0xa8, 0x5e,
		0x7a, 0xda, 0x2e, 0xbb, 0x63, 0x61, 0x14, 0x4e, 0xa7, 0x8f, 0xe1, 0x90, 0xe1, 0x90, 0xe1, 0x90,
		0xe1, 0x90, 0xe1, 0x90, 0xe5, 0x9a, 0xf3, 0x36, 0x16, 0xea, 0x3c, 0x29, 0x62, 0xcb, 0x24, 0x07,
		0x91, 0xad, 0x3d, 0xc3, 0xca, 0x60, 0xb2, 0xf5, 0x9d, 0xb1, 0x39, 0xa8, 0x6c, 0xed, 0x69, 0xd3,
		0x86, 0xc1, 0x50, 0xd9, 0x44, 0xe1, 0xa5, 0x27, 0x66, 0xad, 0x84, 0xa1, 0xfa, 0x92, 0x5a, 0x8d,
		0xc3, 0x2e, 0x3d, 0x32, 0xeb, 0x2e, 0xbc, 0xba, 0x19, 0xba, 0xa1, 0xfb, 0x51, 0x7a, 0x52, 0x5a,
		0xc5, 0xae, 0x92, 0xc5, 0x49, 0x6a, 0x6b, 0x8f, 0x9a, 0xaf, 0x98, 0x95, 0x81, 0x6a, 0xeb, 0x34,
		0x6a, 0x7e, 0x28, 0x2a, 0xc9, 0xa3, 0x2e, 0x9c, 0x7b, 0xa9, 0x56, 0xc6, 0xea, 0xdd, 0x95, 0xfb,
		0x5d, 0x71, 0x57, 0x6a, 0x5d, 0x49, 0x37, 0xbd, 0xe8, 0xd7, 0x62, 0x25, 0x9a, 0xec, 0x95, 0xbc,
		0xeb, 0xd1, 0x13, 0xe9, 0x2b, 0x7a, 0x37, 0xc5, 0x67, 0xac, 0x5f, 0xd9, 0xbb, 0xf6, 0x50, 0xd1,
		0x2b, 0x7c, 0x6d, 0x1f, 0x22, 0xe1, 0x69, 0x83, 0x6b, 0xf2, 0xb7, 0x3f, 0x7d, 0xf0, 0x81, 0x96,
		0xe2, 0xa3, 0x69, 0x93, 0xcb, 0x91, 0x8d, 0x8a, 0x74, 0x67, 0x7b, 0x63, 0x0a, 0xdf, 0x4e, 0x7e,
		0xee, 0xaf, 0x93, 0x5f, 0xfb, 0x66, 0xf2, 0x63, 0x3f, 0xfc, 0x34, 0xf9, 0xb1, 0x93, 0x7f, 0x36,
		0xf6, 0x7b, 0xfe, 0xa7, 0x54, 0xfb, 0xaf, 0x1d, 0xcd, 0xa8, 0xbf, 0x46, 0x48, 0xf6, 0x29, 0xd5,
		0x50, 0x07, 0x1a, 0x4c, 0x99, 0xdd, 0xcb, 0x29, 0xb3, 0x76, 0x46, 0x47, 0xd4, 0xed, 0x14, 0x73,
		0xcf, 0xf9, 0x4e, 0x9d, 0xca, 0x5d, 0xb8, 0xd4, 0x7c, 0xe9, 0xd4, 0xd5, 0xfa, 0x12, 0x73, 0x83,
		0x28, 0xf3, 0x3c, 0x81, 0xd3, 0x57, 0x5c, 0x57, 0xce, 0x75, 0xe5, 0xe5, 0x4d, 0xd2, 0x81, 0x5f,
		0x57, 0x7e, 0xe5, 0x0f, 0xfc, 0x78, 0x62, 0x23, 0xbc, 0x40, 0x6e, 0xe0, 0xd3, 0xb2, 0x58, 0xc6,
		0x3c, 0x55, 0xa4, 0xb8, 0xd2, 0x0a, 0x6c, 0x4d, 0x91, 0xad, 0x29, 0xb4, 0x3d, 0xc5, 0xae, 0x07,
		0xc1, 0x17, 0x1b, 0xf3, 0x74, 0x35, 0x70, 0x6f, 0xe2, 0x68, 0x34, 0x74, 0xfd, 0x81, 0xfc, 0xa4,
		0x91, 0x45, 0xe1, 0x0c, 0x7c, 0xaa, 0x99, 0x71, 0xb0, 0x65, 0x24, 0xac, 0x1b, 0x0b, 0xeb, 0x46,
		0xc3, 0xbe, 0xf1, 0xa8, 0x67, 0x4c, 0xec, 0xb5, 0x17, 0x0e, 0xbc, 0x34, 0x8a, 0xef, 0x04, 0xc7,
		0xf9, 0x70, 0xfb, 0x2f, 0xb7, 0xff, 0xda, 0xee, 0x44, 0xe5, 0xf6, 0xdf, 0x27, 0xd4, 0xba, 0x82,
		0xdb, 0x7f, 0x6d, 0x97, 0x2d, 0x73, 0x05, 0xb0, 0x75, 0x69, 0xfb, 0x74, 0x05, 0xf0, 0xd5, 0xc0,
		0x4d, 0x32, 0x5a, 0xe3, 0x7a, 0x83, 0x41, 0xac, 0x92, 0xc4, 0x0a, 0xb9, 0x5d, 0x79, 0x04, 0x14,
		0x17, 0x8a, 0x0b, 0xc5, 0x85, 0xe2, 0x8a, 0x69, 0x83, 0x3f, 0xfc, 0xd4, 0x99, 0x59, 0x17, 0x37,
		0x8c, 0xdc, 0xdf, 0xa3, 0xd0, 0xca, 0x5d, 0xb9, 0x2f, 0x05, 0x65, 0xbe, 0xf1, 0xd2, 0x54, 0xc5,
		0xa1, 0x38, 0xe7, 0x6d, 0x7c, 0xfd, 0xf5, 0xfb, 0xa6, 0x7b, 0x76, 0xf9, 0xe7, 0xfb, 0x96, 0x7b,
		0x76, 0x39, 0xf9, 0xd8, 0xca, 0xfe, 0x31, 0xf9, 0xdc, 0x7e, 0xdf, 0x74, 0x3b, 0xb3, 0xcf, 0xdd,
		0xf7, 0x4d, 0xb7, 0x7b, 0xf9, 0x4d, 0xaf, 0xf7, 0xe2, 0x9b, 0x3f, 0x8e, 0xef, 0xcb, 0x7f, 0xf1,
		0xeb, 0xaf, 0xde, 0xf7, 0x7a, 0xc3, 0x3f, 0x7e, 0xbe, 0x1f, 0xff, 0xfd, 0xd5, 0xfd, 0xe5, 0xb7,
		0xdf, 0xfc, 0x4d, 0x5a, 0xb3, 0xc7, 0x0f, 0xec, 0xf5, 0x5e, 0x5c, 0xfe, 0xa5, 0xb1, 0x7f, 0x00,
		0xbe, 0xd5, 0xd0, 0x98, 0xfa, 0x92, 0xc6, 0x9e, 0x3b, 0x0a, 0x93, 0x54, 0x6c, 0x80, 0xf9, 0xd8,
		0xb8, 0x27, 0x2a, 0xec, 0xcb, 0x79, 0x72, 0x16, 0x8c, 0xc5, 0x4f, 0xe1, 0xc0, 0xef, 0x7b, 0xa9,
		0x4a, 0x1c, 0xcf, 0x59, 0x8a, 0xbb, 0x3b, 0x61, 0x34, 0x50, 0x8e, 0x9f, 0x38, 0xfd, 0x8c, 0x09,
		0x8c, 0x62, 0x35, 0x78, 0xb1, 0x7b, 0xe0, 0x3a, 0x59, 0xff, 0x5d, 0x86, 0xd7, 0x72, 0x1b, 0xb4,
		0x77, 0xf7, 0x2e, 0x5f, 0x52, 0x11, 0x63, 0x58, 0x7b, 0xd0, 0x57, 0x47, 0x92, 0x09, 0x35, 0xa7,
		0xd2, 0x32, 0x84, 0xbe, 0xfa, 0xf0, 0xdd, 0xd2, 0xcb, 0xef, 0xe0, 0x05, 0x39, 0x03, 0x3f, 0xf9,
		0xef, 0xc8, 0x0f, 0x53, 0x77, 0xba, 0xef, 0x42, 0x59, 0xd2, 0x65, 0xb1, 0x64, 0x49, 0x2b, 0xf6,
		0x12, 0xc9, 0x92, 0x92, 0x25, 0x7d, 0x4a, 0xf1, 0x87, 0x16, 0xb3, 0xa4, 0x8b, 0xc2, 0x09, 0x21,
		0x11, 0x42, 0x22, 0x84, 0x44, 0x08, 0x49, 0x4c, 0x1b, 0xc8, 0x92, 0x4a, 0x1e, 0x75, 0xb2, 0xa4,
		0x85, 0xce, 0x1e, 0x59, 0xd2, 0x07, 0xb6, 0x96, 0x2c, 0x69, 0xc5, 0x46, 0x5f, 0x5e, 0xda, 0x3e,
		0x65, 0x49, 0x07, 0x43, 0xeb, 0x59, 0xd2, 0xf5, 0x47, 0x40, 0x71, 0xa1, 0xb8, 0x50, 0x5c, 0x28,
		0xae, 0x98, 0x36, 0x90, 0x25, 0x5d, 0x10, 0x4c, 0x96, 0xf4, 0xc0, 0x00, 0x5c, 0x74, 0x30, 0xe2,
		0x22, 0x6c, 0x0b, 0x4e, 0x5f, 0x02, 0xac, 0x01, 0x6b, 0xc0, 0x1a, 0xb0, 0x26, 0x1e, 0x45, 0x3c,
		0x8a, 0x78, 0x54, 0x8d, 0xe2, 0x51, 0xc7, 0x6c, 0x2d, 0x61, 0xa8, 0x2d, 0x4a, 0xa0, 0xd6, 0x4f,
		0x0f, 0x45, 0x17, 0x4b, 0xc9, 0x96, 0xaa, 0x47, 0xa8, 0xf5, 0xab, 0x07, 0xef, 0x2c, 0xb7, 0x41,
		0xd4, 0xfa, 0x89, 0x5a, 0x85, 0x3d, 0xa9, 0xf5, 0x93, 0x2c, 0x0b, 0x73, 0xaa, 0xae, 0xf5, 0xfb,
		0x7e, 0xfa, 0xf2, 0x6f, 0xc6, 0xef, 0xbe, 0x83, 0xa5, 0x7e, 0x2a, 0x14, 0x41, 0x94, 0xdc, 0x62,
		0x4f, 0xe5, 0xc9, 0x14, 0xf7, 0x35, 0x29, 0xee, 0xdb, 0x16, 0x62, 0x51, 0xdc, 0x57, 0x17, 0xee,
		0x27, 0x16, 0xa3, 0x98, 0xeb, 0xe8, 0xed, 0x30, 0xbd, 0x93, 0x38, 0x73, 0xb3, 0x8c, 0xc1, 0x31,
		0xe3, 0xfc, 0x6a, 0x0f, 0xb3, 0x3b, 0x31, 0xc3, 0xaf, 0xaf, 0x2a, 0x9b, 0xdc, 0xf7, 0xcc, 0xe2,
		0x91, 0x99, 0x0d, 0x35, 0x5f, 0xda, 0x27, 0x37, 0x5b, 0xbf, 0x92, 0x82, 0x8c, 0x46, 0x97, 0x9b,
		0x8f, 0x26, 0xb7, 0x32, 0x7a, 0xdc, 0x6c, 0xb4, 0x78, 0xd9, 0xad, 0x30, 0xd4, 0xda, 0x2d, 0x68,
		0xab, 0x86, 0xa6, 0x56, 0xa5, 0xa1, 0xe5, 0xb4, 0xb3, 0xb8, 0x8e, 0x15, 0xfb, 0x93, 0x05, 0xb7,
		0x5e, 0x77, 0xcb, 0xed, 0x6f, 0x75, 0x89, 0x9d, 0xb5, 0xb6, 0xa3, 0xc5, 0xb6, 0xf0, 0xe9, 0x0d,
		0x29, 0xb0, 0x19, 0x8d, 0x6c, 0x8a, 0x6c, 0x34, 0x1c, 0xef, 0xc4, 0xe2, 0x2a, 0x14, 0xdd, 0x94,
		0xf9, 0xb4, 0xd3, 0xcd, 0x72, 0x0a, 0x1e, 0x87, 0x72, 0x9d, 0x42, 0xa5, 0x9d, 0x06, 0x1d, 0xe7,
		0xc0, 0xd0, 0x09, 0xd0, 0x25, 0xfb, 0xc6, 0xa4, 0xde, 0x98, 0xbc, 0x9b, 0x93, 0x74, 0x59, 0x53,
		0x51, 0xb6, 0x73, 0x66, 0xf3, 0x51, 0x2c, 0xbf, 0x11, 0x8f, 0x9e, 0xec, 0xb2, 0x9b, 0xa2, 0xd7,
		0x0a, 0xa7, 0xed, 0x1d, 0x9b, 0x78, 0xc3, 0x42, 0xde, 0xaf, 0xa9, 0xb7, 0x2b, 0xe6, 0xdd, 0x8a,
		0x79, 0xb3, 0x72, 0xde, 0xab, 0x5d, 0x66, 0xab, 0xdb, 0x6a, 0xd6, 0xf0, 0xae, 0xaf, 0xfd, 0xd0,
		0x4f, 0xef, 0xdc, 0x5b, 0x2f, 0xf9, 0xcd, 0x7c, 0x00, 0xf6, 0xb2, 0x38, 0x46, 0x61, 0x33, 0x0a,
		0x7b, 0xeb, 0xe1, 0xa2, 0x1d, 0x1b, 0x85, 0x3d, 0xd3, 0x20, 0xb9, 0xd8, 0x6f, 0x2e, 0x91, 0xe8,
		0x2f, 0xd1, 0x5f, 0xa2, 0xbf, 0x22, 0xd1, 0x5f, 0xc1, 0xaa, 0x37, 0x0b, 0x91, 0xe4, 0x7f, 0xa8,
		0x2f, 0xae, 0x1f, 0xa6, 0xea, 0x46, 0xe4, 0xd2, 0x3e, 0xc9, 0x0a, 0x74, 0xf1, 0xca, 0xf3, 0xac,
		0x44, 0xdb, 0x73, 0xaf, 0x2f, 0xdc, 0x1f, 0x2f, 0xff, 0x68, 0x3d, 0x7f, 0x79, 0xdf, 0xd8, 0x76,
		0xf6, 0x78, 0x2b, 0xf9, 0x42, 0x23, 0xf6, 0xb6, 0x6e, 0x05, 0xf5, 0xc9, 0x1b, 0x68, 0x01, 0x5a,
		0x80, 0x16, 0xa0, 0x05, 0x68, 0x61, 0x1b, 0x2d, 0x2a, 0x75, 0x6b, 0x04, 0x2b, 0x1d, 0xe5, 0x2a,
		0x1c, 0x05, 0x75, 0x60, 0xb1, 0x60, 0x6e, 0x29, 0x86, 0x61, 0xa9, 0xa2, 0xd1, 0xb2, 0xad, 0x97,
		0xac, 0x60, 0xac, 0xc6, 0xda, 0x97, 0xdb, 0x80, 0x6d, 0xe3, 0xc1, 0xb3, 0x6a, 0xad, 0xc5, 0xde,
		0x95, 0x46, 0x6c, 0x4c, 0x1c, 0x6d, 0xfe, 0xcf, 0x47, 0x12, 0x21, 0x45, 0x47, 0x36, 0x75, 0xe7,
		0xa5, 0x1f, 0x7f, 0xc9, 0x5e, 0x73, 0x31, 0x23, 0xbb, 0xfe, 0x1f, 0x3f, 0x5c, 0x4c, 0x5f, 0xfd,
		0xf5, 0xf8, 0xcd, 0x6b, 0x7c, 0xf7, 0xa1, 0x97, 0x4e, 0xaa, 0x3c, 0x67, 0x8b, 0xbf, 0x72, 0xcd,
		0xa4, 0x79, 0x54, 0xf8, 0x71, 0xf9, 0x84, 0x89, 0x09, 0x13, 0x6f, 0xdd, 0x53, 0xd8, 0xb1, 0x30,
		0x31, 0x05, 0xc2, 0x38, 0xfd, 0x38, 0xfd, 0x75, 0x76, 0xfa, 0x29, 0x10, 0xb6, 0x12, 0xe9, 0xf4,
		0xc3, 0x4f, 0x5e, 0xe0, 0x0f, 0x64, 0xfa, 0x6b, 0xe6, 0x43, 0x5c, 0x16, 0xa5, 0x32, 0x02, 0x19,
		0x23, 0x88, 0x11, 0x14, 0x31, 0x82, 0x62, 0x23, 0x90, 0x33, 0x97, 0x61, 0x51, 0x4b, 0x5d, 0xaf,
		0x2f, 0xd6, 0x62, 0xe7, 0xac, 0xd5, 0x7e, 0x6d, 0x7a, 0x12, 0xc3, 0x68, 0x6a, 0x66, 0x36, 0x6c,
		0x99, 0x0f, 0xeb, 0x66, 0xc4, 0xba, 0x39, 0xb1, 0x6f, 0x56, 0x64, 0xcc, 0x8b, 0x90, 0x99, 0x91,
		0xe7, 0x5c, 0x6b, 0x27, 0xf7, 0x8d, 0x5d, 0xab, 0xb0, 0x44, 0x1c, 0x3a, 0x82, 0x32, 0x7f, 0x08,
		0x47, 0xb7, 0xf2, 0x8a, 0xf1, 0x2e, 0x7a, 0x9b, 0xc6, 0x7e, 0x78, 0x63, 0x65, 0x44, 0x48, 0xa3,
		0x35, 0x5e, 0xf0, 0x54, 0x79, 0x71, 0xc3, 0xc2, 0x60, 0x93, 0x76, 0x36, 0x5f, 0x2c, 0x8e, 0x86,
		0x0d, 0xd9, 0xd1, 0x1a, 0xcf, 0xa5, 0x57, 0xf8, 0xa7, 0x4c, 0x6b, 0x2d, 0x2c, 0x6f, 0xf6, 0xe3,
		0xcf, 0x9d, 0xb6, 0x85, 0xc5, 0xcd, 0x36, 0xed, 0xdc, 0x69, 0xd5, 0x74, 0x6a, 0xc9, 0xfd, 0x1e,
		0xcd, 0xde, 0x5b, 0xa7, 0x29, 0xa9, 0x7f, 0xab, 0xa2, 0x51, 0x5a, 0x05, 0x23, 0x9a, 0x3d, 0x0a,
		0x4a, 0x04, 0x25, 0x82, 0x12, 0x1d, 0x28, 0x25, 0x62, 0x96, 0x9e, 0xe4, 0xb1, 0xac, 0x64, 0x96,
		0x5e, 0x93, 0x81, 0x6b, 0xd5, 0xf2, 0x38, 0xa7, 0xb2, 0x59, 0x7a, 0x27, 0xcd, 0x66, 0x93, 0xed,
		0xad, 0x8e, 0x4b, 0x3a, 0xcc, 0xd3, 0x93, 0x56, 0x9e, 0x83, 0x9d, 0xa7, 0x37, 0x49, 0xbe, 0x3a,
		0x82, 0x49, 0x88, 0x2d, 0x70, 0xc1, 0xdd, 0x9f, 0x9a, 0xb7, 0x69, 0x1b, 0x98, 0x8d, 0x27, 0xaa,
		0xe1, 0xb5, 0x9f, 0x8d, 0x57, 0xaa, 0x32, 0xed, 0xd1, 0xb2, 0xa6, 0x23, 0x61, 0x75, 0xde, 0x46,
		0xfd, 0x5a, 0x9a, 0xce, 0xff, 0xf3, 0xf8, 0xd3, 0xdb, 0xd9, 0x8f, 0xfb, 0xf0, 0x93, 0x98, 0x92,
		0x6c, 0x27, 0x8d, 0xbc, 0xbc, 0x57, 0x6e, 0x3f, 0x4a, 0x52, 0x37, 0xf0, 0x6f, 0xfd, 0x54, 0x2e,
		0xa7, 0xfc, 0xf0, 0x23, 0xa8, 0xb2, 0xa9, 0x38, 0x2c, 0x42, 0x82, 0x99, 0x2a, 0x9b, 0xca, 0xc3,
		0x1a, 0x82, 0xe1, 0x0c, 0xe1, 0x30, 0x86, 0x20, 0x85, 0xb5, 0x11, 0xb6, 0xb0, 0x35, 0xfa, 0xdf,
		0xba, 0x1f, 0x6b, 0xcf, 0x7f, 0x15, 0x0c, 0x4b, 0x58, 0x09, 0x47, 0x58, 0xbf, 0x62, 0x72, 0x97,
		0xf7, 0x6e, 0x3f, 0x98, 0x7f, 0x1d, 0x68, 0xda, 0x40, 0x05, 0xde, 0x9d, 0x65, 0x9e, 0xb6, 0xf8,
		0x0c, 0x88, 0x1a, 0x44, 0x0d, 0xa2, 0x06, 0x51, 0x83, 0xa8, 0x41, 0xd4, 0x20, 0x6a, 0x10, 0x35,
		0x88, 0x5a, 0x41, 0xa2, 0xa6, 0xbe, 0xf4, 0x83, 0xd1, 0x40, 0xb9, 0x81, 0x9f, 0xd8, 0x63, 0x6a,
		0x4b, 0x0f, 0x81, 0xaa, 0x41, 0xd5, 0xa0, 0x6a, 0x35, 0xa5, 0x6a, 0xc9, 0xa4, 0x5a, 0xb8, 0x66,
		0xd3, 0x65, 0x5e, 0xa9, 0xf0, 0x26, 0x4b, 0x1c, 0x41, 0xd6, 0x20, 0x6b, 0xb5, 0x26, 0x6b, 0x27,
		0x1d, 0xf6, 0x0c, 0x92, 0x66, 0xf0, 0xcd, 0xc3, 0x9e, 0x20, 0x63, 0x63, 0xfc, 0x88, 0x53, 0xb7,
		0x94, 0x7c, 0xcd, 0x07, 0xcc, 0xac, 0xde, 0xb8, 0x23, 0x31, 0x54, 0xc6, 0xec, 0x16, 0x1f, 0x21,
		0xee, 0xcf, 0x20, 0x99, 0x0a, 0x39, 0x3d, 0x83, 0x64, 0xa4, 0xb9, 0x7a, 0x7e, 0x72, 0x2e, 0xd6,
		0xf4, 0xc9, 0x0d, 0x26, 0x04, 0xd9, 0xe0, 0x1c, 0x09, 0xd0, 0x75, 0x29, 0x9a, 0x2e, 0xe0, 0xce,
		0x48, 0xd2, 0x72, 0x69, 0x3a, 0x6e, 0x8d, 0xd2, 0xc9, 0x53, 0x39, 0x89, 0xf6, 0x37, 0x49, 0xba,
		0x2d, 0x4e, 0xb3, 0x77, 0x69, 0x2f, 0x76, 0x6b, 0x10, 0x62, 0x25, 0x6c, 0xe5, 0xca, 0x0b, 0x07,
		0x9f, 0xfd, 0x41, 0x66, 0x73, 0x0c, 0x49, 0xca, 0x5c, 0x14, 0x43, 0xee, 0xe0, 0x26, 0x07, 0xc6,
		0x4d, 0x8c, 0x87, 0xdc, 0x99, 0x2b, 0xa2, 0xb8, 0x42, 0x0a, 0x39, 0x0d, 0x62, 0x0a, 0x2a, 0xa9,
		0xa8, 0x96, 0x14, 0x56, 0x5a, 0x71, 0xad, 0x29, 0xb0, 0x35, 0x45, 0xb6, 0xa7, 0xd0, 0x42, 0x30,
		0xbe, 0xd7, 0xf3, 0xed, 0xa9, 0x13, 0xd9, 0x96, 0x8f, 0xb3, 0x46, 0xb0, 0x9b, 0x84, 0xb1, 0xe5,
		0x7c, 0x20, 0x2b, 0xbe, 0xd0, 0xda, 0x96, 0x51, 0x27, 0x22, 0x6c, 0x6c, 0xe5, 0xa4, 0xec, 0x62,
		0x9d, 0x48, 0x3f, 0xf0, 0x92, 0xc4, 0x8d, 0x62, 0x77, 0x18, 0x45, 0x81, 0x9b, 0x4a, 0x18, 0xfb,
		0xdc, 0xd0, 0x6f, 0x90, 0x0d, 0xc9, 0x83, 0xe4, 0x41, 0xf2, 0x20, 0x79, 0x90, 0x3c, 0x48, 0x1e,
		0x24, 0xef, 0xc1, 0x2d, 0xa3, 0x24, 0x08, 0x6e, 0x67, 0xce, 0xed, 0x06, 0x49, 0xaa, 0x84, 0x29,
		0xdd, 0x5c, 0x24, 0x4c, 0x0e, 0x26, 0x07, 0x93, 0x3b, 0x00, 0x26, 0xf7, 0x7a, 0xba, 0xd0, 0x79,
		0xa4, 0xde, 0x1d, 0x1b, 0x01, 0xc9, 0xda, 0x61, 0x81, 0x2c, 0xaf, 0xec, 0x5c, 0x65, 0x3b, 0xf3,
		0x94, 0x1b, 0xcd, 0x49, 0xe9, 0xf5, 0x78, 0xb7, 0xe3, 0x81, 0xd4, 0x2a, 0xe6, 0xd2, 0x5b, 0x53,
		0x45, 0x76, 0x97, 0x9f, 0x50, 0xaf, 0xe1, 0x97, 0xe2, 0x53, 0x94, 0x37, 0xfc, 0x62, 0x51, 0xfa,
		0xd4, 0x58, 0x95, 0xdd, 0xdc, 0x8f, 0xc9, 0x70, 0xdc, 0x73, 0xba, 0x4d, 0xc7, 0x6f, 0xe3, 0x3d,
		0xa7, 0xb9, 0x81, 0xe5, 0x8e, 0xd3, 0xea, 0xef, 0x38, 0x7d, 0x7c, 0xf1, 0xb9, 0xdf, 0xb4, 0xd8,
		0xe2, 0xee, 0x43, 0x75, 0xba, 0x44, 0x45, 0xc2, 0x16, 0x0a, 0xd1, 0xbf, 0xcb, 0x5f, 0xbb, 0xce,
		0x95, 0x5c, 0xd7, 0x03, 0x37, 0x56, 0x9f, 0x54, 0x9c, 0x28, 0x77, 0xba, 0xbd, 0xa6, 0x05, 0x5d,
		0xab, 0x12, 0xa9, 0xeb, 0xa2, 0xae, 0x6b, 0xeb, 0x7e, 0xe5, 0xae, 0xd5, 0x75, 0xad, 0x28, 0x91,
		0x70, 0xd0, 0x68, 0xb3, 0x78, 0x02, 0x48, 0x04, 0x90, 0x08, 0x20, 0x89, 0x04, 0x90, 0xe4, 0x83,
		0x3e, 0xdf, 0xc9, 0xc0, 0xea, 0x41, 0x87, 0x7b, 0x5a, 0x1b, 0x6d, 0xdf, 0x95, 0x1f, 0x0e, 0xfc,
		0xf0, 0xc6, 0x0d, 0xbc, 0x2b, 0x15, 0xec, 0x7d, 0x74, 0xe6, 0x89, 0x9f, 0x2f, 0x75, 0x35, 0xd5,
		0x0e, 0x87, 0x53, 0x0c, 0x08, 0xda, 0xea, 0x5a, 0x4a, 0xc1, 0xf5, 0x92, 0x58, 0x60, 0x1a, 0x98,
		0x06, 0xa6, 0x45, 0x60, 0x9a, 0x8a, 0x9d, 0xd2, 0xa2, 0xa8, 0xd8, 0x91, 0x90, 0x4b, 0xc5, 0x8e,
		0xfd, 0x8a, 0x9d, 0x66, 0xe7, 0x65, 0xf7, 0x94, 0x9a, 0x6c, 0x39, 0x46, 0xe6, 0x30, 0x16, 0xa6,
		0xf0, 0x36, 0x1e, 0x54, 0x9a, 0x6c, 0xc5, 0xa5, 0x20, 0x5b, 0xb6, 0x85, 0x6c, 0x59, 0x91, 0x3d,
		0x20, 0x69, 0x56, 0x6c, 0x8d, 0xf7, 0x22, 0x69, 0x26, 0x17, 0x2f, 0xda, 0x46, 0xee, 0xec, 0x7a,
		0xf0, 0xeb, 0xe4, 0xe5, 0xc7, 0xff, 0xb7, 0xce, 0x09, 0xb4, 0x50, 0x7d, 0x76, 0x93, 0xf4, 0x2e,
		0x50, 0xae, 0x77, 0x7d, 0xed, 0x87, 0x7e, 0x7a, 0x37, 0xff, 0x90, 0xde, 0x0d, 0x55, 0x62, 0x9e,
		0x51, 0x7b, 0xfa, 0x11, 0xa4, 0xd8, 0x48, 0xb1, 0x6d, 0xdd, 0xa5, 0xdf, 0xb1, 0x14, 0xdb, 0x53,
		0x5a, 0x25, 0x17, 0xbe, 0x7b, 0xf2, 0x49, 0x32, 0x11, 0xbd, 0x16, 0x11, 0x3d, 0x22, 0x7a, 0x87,
		0x1e, 0xd1, 0x33, 0x35, 0x0b, 0xb9, 0x20, 0x59, 0x5b, 0xb0, 0x76, 0x9e, 0x25, 0x0d, 0xc0, 0xaa,
		0x21, 0x90, 0x1a, 0xa5, 0x25, 0x65, 0x10, 0x6c, 0x18, 0x06, 0xcb, 0x06, 0xc2, 0x96, 0xa1, 0xb0,
		0x6e, 0x30, 0xac, 0x1b, 0x0e, 0xfb, 0x06, 0x44, 0x38, 0x60, 0x25, 0x95, 0x8a, 0x95, 0x34, 0x03,
		0xce, 0xa6, 0x76, 0x8e, 0x74, 0x14, 0x86, 0x2a, 0xc8, 0xa9, 0x81, 0xe4, 0x29, 0x16, 0x4c, 0xf4,
		0xe7, 0x32, 0x45, 0x13, 0xfe, 0xf3, 0x65, 0xb6, 0x91, 0xf8, 0xcf, 0xa5, 0x67, 0x05, 0x00, 0x7e,
		0x98, 0x5d, 0x8a, 0xd1, 0x90, 0xbf, 0xa1, 0xbf, 0xd1, 0x5e, 0x90, 0xef, 0x26, 0x69, 0xec, 0xf7,
		0x53, 0x1b, 0x8f, 0x39, 0xce, 0xee, 0xe2, 0xfe, 0x62, 0xed, 0x67, 0x74, 0x16, 0xe4, 0xbb, 0x5e,
		0x10, 0xd8, 0x78, 0x46, 0x37, 0x5b, 0xaa, 0x9b, 0x30, 0x8a, 0x55, 0x43, 0x54, 0xfa, 0xfd, 0x73,
		0xe9, 0x13, 0x29, 0x5d, 0x83, 0x91, 0x8b, 0x9e, 0x6d, 0xe1, 0xb9, 0x73, 0xfc, 0xdc, 0x9a, 0xf4,
		0x6c, 0x03, 0xcf, 0x9d, 0x8e, 0x85, 0x27, 0x4c, 0xb7, 0xef, 0xdc, 0xe9, 0xda, 0x10, 0x1e, 0xce,
		0x16, 0xa7, 0x65, 0x4f, 0xfa, 0x4c, 0x49, 0xcf, 0x9d, 0xb6, 0xec, 0x21, 0xdc, 0xbb, 0xb4, 0xcd,
		0x76, 0x69, 0xfd, 0x3f, 0xd5, 0x9d, 0x34, 0x6b, 0x6e, 0xbc, 0xf2, 0x93, 0xf4, 0x22, 0x4d, 0x85,
		0xfc, 0x85, 0xd7, 0x7e, 0xf8, 0x43, 0xa0, 0xc6, 0x84, 0x48, 0x28, 0x2b, 0xd8, 0x78, 0xed, 0x7d,
		0x59, 0x90, 0xd8, 0x7a, 0xd9, 0xe9, 0x9c, 0x9c, 0x76, 0x3a, 0xcd, 0xd3, 0xe3, 0xd3, 0xe6, 0x59,
		0xb7, 0xdb, 0x3a, 0x69, 0x09, 0x68, 0x5d, 0xe3, 0x97, 0x78, 0xa0, 0x62, 0x35, 0xf8, 0x6e, 0xbc,
		0xbc, 0xe1, 0x28, 0x08, 0xb6, 0xba, 0xcb, 0x42, 0x81, 0xf7, 0x5c, 0xde, 0x56, 0x03, 0xf0, 0x4f,
		0x46, 0x6d, 0x8f, 0x2c, 0xc7, 0x85, 0x9c, 0xed, 0x84, 0xee, 0x7f, 0x56, 0x9f, 0xdf, 0x8e, 0x7f,
		0xd4, 0xc5, 0xf4, 0xa7, 0xcc, 0xfe, 0x39, 0x26, 0xd0, 0xc9, 0xa3, 0xff, 0xb7, 0xb1, 0x83, 0x15,
		0x7f, 0x4f, 0xed, 0x61, 0xfe, 0x6f, 0xad, 0xea, 0xe2, 0x89, 0x0b, 0xcf, 0x24, 0xb2, 0x48, 0x64,
		0x91, 0xc8, 0x22, 0x91, 0x45, 0x22, 0x8b, 0x44, 0x16, 0x89, 0x2c, 0x12, 0x59, 0x24, 0xb2, 0x48,
		0x64, 0x91, 0xc8, 0x22, 0x91, 0x45, 0x22, 0x8b, 0x44, 0x16, 0x6b, 0x13, 0x59, 0x7c, 0x2e, 0xc7,
		0xa9, 0x5b, 0xf6, 0xf8, 0x74, 0x0b, 0x2e, 0x0d, 0x97, 0x86, 0x4b, 0x1f, 0x2a, 0x97, 0x9e, 0x04,
		0x8f, 0xfd, 0x28, 0x71, 0xbf, 0xc4, 0xae, 0xd8, 0x6d, 0xed, 0x6b, 0x3c, 0xfa, 0xa5, 0xa0, 0xcc,
		0x37, 0x5e, 0x9a, 0xaa, 0x38, 0x14, 0x6b, 0xd6, 0xcb, 0x05, 0xbf, 0xef, 0xf5, 0x3e, 0xf7, 0x7a,
		0x6e, 0xaf, 0xf7, 0xe2, 0xfc, 0xf9, 0x87, 0xbf, 0xff, 0xcb, 0x57, 0xff, 0xda, 0xeb, 0x7d, 0xfb,
		0xd7, 0x5e, 0xef, 0xcf, 0x7f, 0xbf, 0xfc, 0x56, 0xee, 0x60, 0x5d, 0x92, 0xf8, 0x7a, 0x20, 0xf1,
		0xe5, 0x88, 0xc5, 0x77, 0x49, 0x81, 0x91, 0x02, 0xab, 0x75, 0x0a, 0xcc, 0x95, 0x64, 0x5f, 0x3b,
		0x95, 0x0c, 0xbb, 0xc8, 0x7f, 0xf8, 0x5e, 0x67, 0xc5, 0xf2, 0x4f, 0xed, 0x6d, 0xe4, 0xc7, 0x16,
		0x9e, 0x4e, 0xa6, 0xac, 0x62, 0xf2, 0x4e, 0xa6, 0x8c, 0x4c, 0x59, 0x41, 0xaf, 0x9e, 0x4c, 0x19,
		0xde, 0x3d, 0xde, 0x3d, 0xde, 0x3d, 0x99, 0xb2, 0x15, 0x99, 0x64, 0xca, 0xd6, 0xe5, 0x93, 0x29,
		0x2b, 0xfc, 0x0c, 0x32, 0x65, 0x64, 0xca, 0x1e, 0x17, 0x4e, 0xa6, 0xcc, 0x21, 0x53, 0x56, 0x96,
		0x4f, 0x93, 0x29, 0x83, 0x4b, 0xc3, 0xa5, 0x0f, 0x96, 0x4b, 0x93, 0x29, 0x9b, 0x0b, 0x3e, 0xac,
		0x4c, 0x99, 0x20, 0x3c, 0xb5, 0xed, 0xc1, 0x53, 0x1b, 0x78, 0x02, 0x9e, 0x80, 0x27, 0xe0, 0x09,
		0x78, 0xa2, 0x90, 0xa3, 0xaa, 0x83, 0xfd, 0x44, 0x21, 0x87, 0x23, 0x96, 0x88, 0xa4, 0xa4, 0x83,
		0x92, 0x8e, 0x1d, 0x29, 0xe9, 0x70, 0x25, 0x19, 0xd9, 0x6e, 0x16, 0x77, 0x5c, 0xe4, 0x2b, 0x70,
		0x20, 0x55, 0x1e, 0xf9, 0xa7, 0xe3, 0xed, 0xd6, 0x7b, 0x2c, 0xbc, 0x07, 0x95, 0x1f, 0x15, 0xb3,
		0x7d, 0x2a, 0x3f, 0xa8, 0xfc, 0x28, 0x18, 0x06, 0xa0, 0xf2, 0x83, 0x70, 0x00, 0xe1, 0x00, 0xc2,
		0x01, 0x54, 0x7e, 0xac, 0xc8, 0xa4, 0xf2, 0x63, 0x5d, 0x3e, 0x95, 0x1f, 0x85, 0x9f, 0x41, 0xe5,
		0x07, 0x95, 0x1f, 0x8f, 0x0b, 0xa7, 0xf2, 0xc3, 0xa1, 0xf2, 0xa3, 0x2c, 0x9f, 0xa6, 0xf2, 0x03,
		0x2e, 0x0d, 0x97, 0x3e, 0x58, 0x2e, 0x4d, 0x6a, 0x6d, 0x2e, 0x98, 0xca, 0x0f, 0x4d, 0x78, 0xa2,
		0xf2, 0x03, 0x78, 0x02, 0x9e, 0x80, 0x27, 0xe0, 0x09, 0x78, 0xaa, 0x21, 0x3c, 0x1d, 0xdb, 0x83,
		0xa7, 0x63, 0xe0, 0x09, 0x78, 0x02, 0x9e, 0x80, 0x27, 0xe0, 0x89, 0xc2, 0xc4, 0xaa, 0x0e, 0x76,
		0xe1, 0xc2, 0x44, 0x47, 0xac, 0x62, 0x86, 0x12, 0x45, 0x4a, 0x14, 0x77, 0xae, 0x44, 0xd1, 0x95,
		0x64, 0x69, 0x3b, 0x5e, 0xac, 0x78, 0x91, 0x2f, 0xc5, 0xc1, 0x55, 0x2d, 0xe6, 0x9f, 0x3a, 0x75,
		0xa9, 0x5f, 0x5c, 0x78, 0x23, 0x2a, 0x19, 0x2b, 0x76, 0x0f, 0xa8, 0x64, 0xa4, 0x92, 0xb1, 0x60,
		0xdc, 0x80, 0x4a, 0x46, 0xe2, 0x07, 0xc4, 0x0f, 0x88, 0x1f, 0x50, 0xc9, 0xb8, 0x22, 0x93, 0x4a,
		0xc6, 0x75, 0xf9, 0x54, 0x32, 0x16, 0x7e, 0x06, 0x95, 0x8c, 0x54, 0x32, 0x3e, 0x2e, 0x9c, 0x4a,
		0x46, 0x87, 0x4a, 0xc6, 0xb2, 0x7c, 0x9a, 0x4a, 0x46, 0xb8, 0x34, 0x5c, 0xfa, 0x60, 0xb9, 0x34,
		0xb9, 0xb8, 0xb9, 0x60, 0x4a, 0x45, 0x34, 0xe1, 0x89, 0x4a, 0x46, 0xe0, 0x09, 0x78, 0x02, 0x9e,
		0x80, 0x27, 0xe0, 0xa9, 0x86, 0xf0, 0x44, 0x25, 0x23, 0xf0, 0x04, 0x3c, 0x01, 0x4f, 0xc0, 0x13,
		0xf0, 0x54, 0x43, 0x78, 0xea, 0xd8, 0x83, 0xa7, 0x0e, 0xf0, 0x04, 0x3c, 0x01, 0x4f, 0xc0, 0x13,
		0xf0, 0x44, 0xa1, 0x7d, 0x55, 0x07, 0x5b, 0xa3, 0xd0, 0xde, 0x11, 0x2b, 0xed, 0xa4, 0xe4, 0x9e,
		0x92, 0xfb, 0x1d, 0x2e, 0xb9, 0x77, 0x25, 0x99, 0xdb, 0xbe, 0x14, 0xdf, 0x5f, 0xe4, 0x6b, 0x72,
		0xc0, 0x55, 0xf8, 0xf9, 0xa7, 0x6e, 0xfd, 0xea, 0xf1, 0x17, 0xde, 0x8d, 0xca, 0xfc, 0x8a, 0xfd,
		0x09, 0x2a, 0xf3, 0xa9, 0xcc, 0x2f, 0x18, 0x68, 0xa0, 0x32, 0x9f, 0x80, 0x03, 0x01, 0x07, 0x02,
		0x0e, 0x54, 0xe6, 0xaf, 0xc8, 0xa4, 0x32, 0x7f, 0x5d, 0x3e, 0x95, 0xf9, 0x85, 0x9f, 0x41, 0x65,
		0x3e, 0x95, 0xf9, 0x8f, 0x0b, 0xa7, 0x32, 0xdf, 0xa1, 0x32, 0xbf, 0x2c, 0x9f, 0xa6, 0x32, 0x1f,
		0x2e, 0x0d, 0x97, 0x3e, 0x58, 0x2e, 0x4d, 0xf2, 0x6e, 0x2e, 0x98, 0xda, 0x12, 0x4d, 0x78, 0xa2,
		0x32, 0x1f, 0x78, 0x02, 0x9e, 0x80, 0x27, 0xe0, 0x09, 0x78, 0xaa, 0x21, 0x3c, 0x51, 0x99, 0x0f,
		0x3c, 0x01, 0x4f, 0xc0, 0x13, 0xf0, 0x04, 0x3c, 0xd5, 0x10, 0x9e, 0xa8, 0xcc, 0x07, 0x9e, 0x80,
		0x27, 0xe0, 0x09, 0x78, 0x02, 0x9e, 0x6a, 0x08, 0x4f, 0x5d, 0x7b, 0xf0, 0xd4, 0x05, 0x9e, 0x80,
		0x27, 0xe0, 0x09, 0x78, 0x02, 0x9e, 0x68, 0x1c, 0xab, 0xea, 0x60, 0x1b, 0x35, 0x8e, 0x39, 0x62,
		0x3d, 0x08, 0xb4, 0x90, 0xd1, 0x42, 0xb6, 0x17, 0x2d, 0x64, 0xae, 0x24, 0x9b, 0xdb, 0xbb, 0x66,
		0xb2, 0x8b, 0x7c, 0x71, 0xe8, 0x2a, 0x4b, 0xef, 0xba, 0xf9, 0xa7, 0x93, 0x3a, 0xf7, 0x97, 0x2d,
		0xbc, 0x25, 0x9d, 0x66, 0x15, 0x3b, 0x20, 0x74, 0x9a, 0xd1, 0x69, 0x56, 0x30, 0x32, 0x41, 0xa7,
		0x19, 0x11, 0x0a, 0x22, 0x14, 0x44, 0x28, 0xe8, 0x34, 0x5b, 0x91, 0x49, 0xa7, 0xd9, 0xba, 0x7c,
		0x3a, 0xcd, 0x0a, 0x3f, 0x83, 0x4e, 0x33, 0x3a, 0xcd, 0x1e, 0x17, 0x4e, 0xa7, 0x99, 0x43, 0xa7,
		0x59, 0x59, 0x3e, 0x4d, 0xa7, 0x19, 0x5c, 0x1a, 0x2e, 0x7d, 0xb0, 0x5c, 0x9a, 0x6c, 0xdf, 0x5c,
		0x30, 0xc5, 0x28, 0x9a, 0xf0, 0x44, 0xa7, 0x19, 0xf0, 0x04, 0x3c, 0x01, 0x4f, 0xc0, 0x13, 0xf0,
		0x54, 0x43, 0x78, 0xa2, 0xd3, 0x0c, 0x78, 0x02, 0x9e, 0x80, 0x27, 0xe0, 0x09, 0x78, 0xaa, 0x21,
		0x3c, 0xd1, 0x69, 0x06, 0x3c, 0x01, 0x4f, 0xc0, 0x13, 0xf0, 0x04, 0x3c, 0xd5, 0x10, 0x9e, 0xe8,
		0x34, 0x03, 0x9e, 0x80, 0x27, 0xe0, 0x09, 0x78, 0x02, 0x9e, 0x6a, 0x08, 0x4f, 0x27, 0xf6, 0xe0,
		0xe9, 0x04, 0x78, 0x02, 0x9e, 0x80, 0x27, 0xe0, 0x09, 0x78, 0xa2, 0x11, 0xba, 0xaa, 0x83, 0x2d,
		0xd4, 0x08, 0xed, 0x88, 0x35, 0xcb, 0xd1, 0x12, 0x4d, 0x4b, 0xf4, 0x9e, 0xb5, 0x44, 0xbb, 0x92,
		0x0c, 0x6f, 0x7f, 0x9b, 0xa3, 0x2f, 0xf2, 0x55, 0xa2, 0x4b, 0x7a, 0xe9, 0xd4, 0xe4, 0x9f, 0x4e,
		0x77, 0xa3, 0x5f, 0x7a, 0xe1, 0x7d, 0xe9, 0x9c, 0xae, 0xd8, 0x63, 0xa1, 0x73, 0x9a, 0xce, 0xe9,
		0x82, 0xa1, 0x0c, 0x3a, 0xa7, 0x09, 0x69, 0x10, 0xd2, 0x20, 0xa4, 0x41, 0xe7, 0xf4, 0x8a, 0x4c,
		0x3a, 0xa7, 0xd7, 0xe5, 0xd3, 0x39, 0x5d, 0xf8, 0x19, 0x74, 0x4e, 0xd3, 0x39, 0xfd, 0xb8, 0x70,
		0x3a, 0xa7, 0x1d, 0x3a, 0xa7, 0xcb, 0xf2, 0x69, 0x3a, 0xa7, 0xe1, 0xd2, 0x70, 0xe9, 0x83, 0xe5,
		0xd2, 0xa4, 0x07, 0xe7, 0x82, 0xa9, 0x5e, 0xd1, 0x84, 0x27, 0x3a, 0xa7, 0x81, 0x27, 0xe0, 0x09,
		0x78, 0x02, 0x9e, 0x80, 0xa7, 0x1a, 0xc2, 0x13, 0x9d, 0xd3, 0xc0, 0x13, 0xf0, 0x04, 0x3c, 0x01,
		0x4f, 0xc0, 0x53, 0x0d, 0xe1, 0x89, 0xce, 0x69, 0xe0, 0x09, 0x78, 0x02, 0x9e, 0x80, 0x27, 0xe0,
		0xa9, 0x86, 0xf0, 0x44, 0xe7, 0x34, 0xf0, 0x04, 0x3c, 0x01, 0x4f, 0xc0, 0x13, 0xf0, 0x54, 0x43,
		0x78, 0xa2, 0x73, 0x1a, 0x78, 0x02, 0x9e, 0x80, 0x27, 0xe0, 0x09, 0x78, 0xaa, 0x21, 0x3c, 0x9d,
		0xda, 0x83, 0xa7, 0x53, 0xe0, 0x09, 0x78, 0x02, 0x9e, 0x80, 0x27, 0xe0, 0x89, 0xc1, 0x1e, 0x55,
		0x1d, 0x6c, 0xf1, 0xc1, 0x1e, 0x8e, 0x58, 0x57, 0x37, 0x23, 0x3e, 0x18, 0xf1, 0xb1, 0xb7, 0x23,
		0x3e, 0x5c, 0x49, 0xd6, 0x77, 0x00, 0xc3, 0x3e, 0x2e, 0xf2, 0xe5, 0x62, 0xea, 0xc7, 0x03, 0x07,
		0x29, 0xff, 0xf4, 0x72, 0xd7, 0xe6, 0x7f, 0x2c, 0xbc, 0x39, 0x93, 0x40, 0x2a, 0x76, 0x71, 0x98,
		0x04, 0xc2, 0x24, 0x90, 0x82, 0xb1, 0x0f, 0x26, 0x81, 0x10, 0x03, 0x21, 0x06, 0x42, 0x0c, 0x84,
		0x49, 0x20, 0x2b, 0x32, 0x99, 0x04, 0xb2, 0x2e, 0x9f, 0x49, 0x20, 0x85, 0x9f, 0xc1, 0x24, 0x10,
		0x26, 0x81, 0x3c, 0x2e, 0x9c, 0x49, 0x20, 0x0e, 0x93, 0x40, 0xca, 0xf2, 0x69, 0x26, 0x81, 0xc0,
		0xa5, 0xe1, 0xd2, 0x07, 0xcb, 0xa5, 0xc9, 0x27, 0xce, 0x05, 0x53, 0xee, 0xa2, 0x09, 0x4f, 0x4c,
		0x02, 0x01, 0x9e, 0x80, 0x27, 0xe0, 0x09, 0x78, 0x02, 0x9e, 0x6a, 0x08, 0x4f, 0x4c, 0x02, 0x01,
		0x9e, 0x80, 0x27, 0xe0, 0x09, 0x78, 0x02, 0x9e, 0x6a, 0x08, 0x4f, 0x4c, 0x02, 0x01, 0x9e, 0x80,
		0x27, 0xe0, 0x09, 0x78, 0x02, 0x9e, 0x6a, 0x08, 0x4f, 0x4c, 0x02, 0x01, 0x9e, 0x80, 0x27, 0xe0,
		0x09, 0x78, 0x02, 0x9e, 0x6a, 0x08, 0x4f, 0x4c, 0x02, 0x01, 0x9e, 0x80, 0x27, 0xe0, 0x09, 0x78,
		0x02, 0x9e, 0x6a, 0x08, 0x4f, 0x4c, 0x02, 0x01, 0x9e, 0x80, 0x27, 0xe0, 0x09, 0x78, 0x02, 0x9e,
		0x6a, 0x08, 0x4f, 0x2f, 0xed, 0xc1, 0xd3, 0x4b, 0xe0, 0x09, 0x78, 0x02, 0x9e, 0x80, 0x27, 0xe0,
		0x89, 0x41, 0x55, 0x55, 0x1d, 0x6c, 0x8b, 0x83, 0xaa, 0x1c, 0xb1, 0xf1, 0x23, 0x8c, 0xac, 0x62,
		0x64, 0xd5, 0x01, 0x8c, 0xac, 0x72, 0x25, 0x99, 0xe0, 0x21, 0x0d, 0xaf, 0xba, 0xc8, 0xd7, 0x8d,
		0x29, 0x56, 0x4f, 0x9e, 0xad, 0xfc, 0xd3, 0xd9, 0xee, 0xce, 0xb3, 0x5a, 0xf8, 0x0d, 0x4c, 0xb6,
		0xaa, 0xd8, 0x27, 0x62, 0xb2, 0x15, 0x93, 0xad, 0x0a, 0x06, 0x4b, 0x98, 0x6c, 0x45, 0xd0, 0x84,
		0xa0, 0x09, 0x41, 0x13, 0x26, 0x5b, 0xad, 0xc8, 0x64, 0xb2, 0xd5, 0xba, 0x7c, 0x26, 0x5b, 0x15,
		0x7e, 0x06, 0x93, 0xad, 0x98, 0x6c, 0xf5, 0xb8, 0x70, 0x26, 0x5b, 0x39, 0x4c, 0xb6, 0x2a, 0xcb,
		0xa7, 0x99, 0x6c, 0x05, 0x97, 0x86, 0x4b, 0x1f, 0x2c, 0x97, 0x26, 0x01, 0x39, 0x17, 0x4c, 0x7d,
		0x8c, 0x26, 0x3c, 0x31, 0xd9, 0x0a, 0x78, 0x02, 0x9e, 0x80, 0x27, 0xe0, 0x09, 0x78, 0xaa, 0x21,
		0x3c, 0x31, 0xd9, 0x0a, 0x78, 0x02, 0x9e, 0x80, 0x27, 0xe0, 0x09, 0x78, 0xaa, 0x21, 0x3c, 0x31,
		0xd9, 0x0a, 0x78, 0x02, 0x9e, 0x80, 0x27, 0xe0, 0x09, 0x78, 0xaa, 0x21, 0x3c, 0x31, 0xd9, 0x0a,
		0x78, 0x02, 0x9e, 0x80, 0x27, 0xe0, 0x09, 0x78, 0xaa, 0x21, 0x3c, 0x31, 0xd9, 0x0a, 0x78, 0x02,
		0x9e, 0x80, 0x27, 0xe0, 0x09, 0x78, 0xaa, 0x21, 0x3c, 0x31, 0xd9, 0x0a, 0x78, 0x02, 0x9e, 0x80,
		0x27, 0xe0, 0x09, 0x78, 0xaa, 0x21, 0x3c, 0x31, 0xd9, 0x0a, 0x78, 0x02, 0x9e, 0x80, 0x27, 0xe0,
		0x09, 0x78, 0xaa, 0x21, 0x3c, 0x9d, 0xd9, 0x83, 0xa7, 0x33, 0xe0, 0x09, 0x78, 0x02, 0x9e, 0x80,
		0x27, 0xe0, 0x89, 0xc1, 0x8b, 0x55, 0x1d, 0xec, 0x4a, 0x06, 0x2f, 0x3a, 0x62, 0x73, 0xb2, 0x18,
		0xc1, 0xc8, 0x08, 0xc6, 0x83, 0x1a, 0xc1, 0xe8, 0x4a, 0xb2, 0xc3, 0x83, 0x1c, 0xc6, 0x78, 0x91,
		0x2f, 0x20, 0x53, 0x19, 0x4b, 0x1c, 0xb7, 0xb9, 0xe4, 0xe6, 0x3e, 0x0c, 0x68, 0x5c, 0xfc, 0x39,
		0xcc, 0x6a, 0xac, 0xd8, 0x8d, 0x62, 0x56, 0x23, 0xb3, 0x1a, 0x0b, 0xc6, 0x57, 0x98, 0xd5, 0x48,
		0x9c, 0x85, 0x38, 0x0b, 0x71, 0x16, 0x66, 0x35, 0xae, 0xc8, 0x64, 0x56, 0xe3, 0xba, 0x7c, 0x66,
		0x35, 0x16, 0x7e, 0x06, 0xb3, 0x1a, 0x99, 0xd5, 0xf8, 0xb8, 0x70, 0x66, 0x35, 0x3a, 0xcc, 0x6a,
		0x2c, 0xcb, 0xa7, 0x99, 0xd5, 0x08, 0x97, 0x86, 0x4b, 0x1f, 0x2c, 0x97, 0x26, 0x67, 0x39, 0x17,
		0x4c, 0x49, 0x8d, 0x2e, 0x3c, 0x35, 0x2d, 0xe2, 0x53, 0x13, 0x80, 0x02, 0xa0, 0x00, 0x28, 0x00,
		0x0a, 0x80, 0x02, 0xa0, 0x34, 0x01, 0x8a, 0x61, 0xc2, 0xc0, 0x13, 0xf0, 0x04, 0x3c, 0x01, 0x4f,
		0xc0, 0x53, 0x0d, 0xe1, 0x89, 0x61, 0xc2, 0xc0, 0x13, 0xf0, 0x04, 0x3c, 0x01, 0x4f, 0xc0, 0x53,
		0x0d, 0xe1, 0x89, 0x61, 0xc2, 0xc0, 0x13, 0xf0, 0x04, 0x3c, 0x01, 0x4f, 0xc0, 0x53, 0x0d, 0xe1,
		0x89, 0x61, 0xc2, 0xc0, 0x13, 0xf0, 0x04, 0x3c, 0x01, 0x4f, 0xc0, 0x53, 0x0d, 0xe1, 0x89, 0x61,
		0xc2, 0xc0, 0x13, 0xf0, 0x04, 0x3c, 0x01, 0x4f, 0xc0, 0x53, 0x0d, 0xe1, 0x89, 0x61, 0xc2, 0xc0,
		0x13, 0xf0, 0x04, 0x3c, 0x01, 0x4f, 0xc0, 0x53, 0x0d, 0xe1, 0x89, 0x61, 0xc2, 0xc0, 0x13, 0xf0,
		0x04, 0x3c, 0x01, 0x4f, 0xc0, 0x53, 0x0d, 0xe1, 0x89, 0x61, 0xc2, 0xc0, 0x13, 0xf0, 0x04, 0x3c,
		0x01, 0x4f, 0xc0, 0x93, 0x14, 0x3c, 0x1d, 0xd0, 0x30, 0x61, 0x47, 0x6e, 0xa6, 0x23, 0x73, 0x85,
		0x99, 0x2b, 0x7c, 0xa0, 0x73, 0x85, 0x5d, 0xd1, 0x5e, 0xf9, 0xc3, 0x1e, 0x31, 0x7c, 0x31, 0x5f,
		0xca, 0x6d, 0x0d, 0x1b, 0x7e, 0x56, 0xa1, 0xb2, 0x4a, 0x29, 0x69, 0xcd, 0x95, 0xd3, 0x40, 0x2d,
		0xea, 0xa6, 0x0e, 0x7a, 0xc7, 0xb2, 0xfc, 0xa1, 0xd2, 0x38, 0x50, 0x8d, 0xa1, 0x81, 0x4f, 0x94,
		0x13, 0xdf, 0xb1, 0x10, 0xcd, 0xc3, 0x6c, 0x36, 0xd7, 0xd9, 0xd8, 0xb3, 0x95, 0xf0, 0x64, 0x85,
		0x3d, 0x57, 0x29, 0x4f, 0x55, 0xdc, 0x33, 0x15, 0xf7, 0x44, 0xe5, 0x3d, 0xcf, 0x6a, 0x0d, 0xb1,
		0xe9, 0x1c, 0xe6, 0xc6, 0x95, 0x3f, 0xf0, 0x63, 0xd5, 0x1f, 0x9b, 0x12, 0x2f, 0x90, 0x1b, 0xf8,
		0xbe, 0x2c, 0x96, 0xc1, 0xeb, 0x15, 0x87, 0x9c, 0x18, 0xbc, 0xce, 0xe0, 0xf5, 0xa7, 0x14, 0x7f,
		0xe0, 0xde, 0xc4, 0xd1, 0x68, 0xe8, 0xfa, 0x03, 0xf9, 0x68, 0xf4, 0xa2, 0x70, 0xe2, 0xd1, 0xc4,
		0xa3, 0x89, 0x47, 0xd7, 0x3a, 0x1e, 0xfd, 0xda, 0x0b, 0x07, 0x5e, 0x1a, 0xc5, 0x77, 0x72, 0x53,
		0x80, 0x2d, 0xc6, 0xb8, 0x47, 0x7e, 0x98, 0x1e, 0xb7, 0x2d, 0x84, 0xb5, 0x4f, 0x05, 0x45, 0xfe,
		0xea, 0x85, 0x37, 0x4a, 0x3c, 0xa6, 0x6d, 0x61, 0x38, 0xf6, 0x6b, 0x3f, 0xb4, 0x32, 0x75, 0x3b,
		0x13, 0xfe, 0xbf, 0xbd, 0x60, 0x64, 0x69, 0xb4, 0x74, 0x26, 0xff, 0xc7, 0xd8, 0xcb, 0x38, 0xe6,
		0xf7, 0xfe, 0x8d, 0x2f, 0x15, 0x73, 0xdd, 0x7c, 0xf6, 0xd4, 0x8d, 0x97, 0xfa, 0x9f, 0xc6, 0xbf,
		0xe5, 0xda, 0x0b, 0x12, 0x25, 0xfe, 0x94, 0x7b, 0x0b, 0xc3, 0xb7, 0x5f, 0x7b, 0x5f, 0xec, 0x6f,
		0x6d, 0xa7, 0x7d, 0xd6, 0x39, 0x3b, 0x39, 0x6d, 0x9f, 0x75, 0xd9, 0xe3, 0x4a, 0x8c, 0xbe, 0xbc,
		0xb4, 0x7d, 0x2a, 0xb1, 0xb8, 0x1a, 0xb8, 0x49, 0x46, 0x6b, 0x5c, 0x6f, 0x30, 0x88, 0x55, 0x92,
		0x58, 0x21, 0xb7, 0x2b, 0x8f, 0x80, 0xe2, 0x42, 0x71, 0xa1, 0xb8, 0x50, 0x5c, 0x31, 0x6d, 0xf0,
		0x87, 0x9f, 0x3a, 0x33, 0xeb, 0xe2, 0x86, 0x91, 0xfb, 0x7b, 0x14, 0xaa, 0x83, 0xad, 0xe3, 0xf8,
		0xfa, 0xeb, 0xf7, 0x4d, 0xf7, 0xec, 0xf2, 0xcf, 0xf7, 0x2d, 0xf7, 0xec, 0x72, 0xf2, 0xb1, 0x95,
		0xfd, 0x63, 0xf2, 0xb9, 0xfd, 0xbe, 0xe9, 0x76, 0x66, 0x9f, 0xbb, 0xef, 0x9b, 0x6e, 0xf7, 0xf2,
		0x9b, 0x5e, 0xef, 0xc5, 0x37, 0x7f, 0x1c, 0xdf, 0x97, 0xff, 0xe2, 0xd7, 0x5f, 0xbd, 0xef, 0xf5,
		0x86, 0x7f, 0xfc, 0x7c, 0x3f, 0xfe, 0xfb, 0xab, 0xfb, 0xcb, 0x6f, 0xbf, 0xf9, 0x9b, 0xb4, 0x66,
		0x8f, 0x1f, 0xd8, 0xeb, 0xbd, 0xb8, 0xfc, 0x0b, 0x45, 0x28, 0xb2, 0xa1, 0x31, 0xf5, 0x25, 0x8d,
		0x3d, 0x77, 0x14, 0x26, 0xa9, 0x77, 0x15, 0xc8, 0x28, 0xe6, 0xd8, 0xb8, 0x27, 0x2a, 0xec, 0xcb,
		0x79, 0x72, 0x16, 0x8c, 0xc5, 0x4f, 0xe1, 0xc0, 0xef, 0x7b, 0xa9, 0x4a, 0x1c, 0xcf, 0x59, 0x8a,
		0xbb, 0x3b, 0x61, 0x34, 0x50, 0x8e, 0x9f, 0x38, 0xfd, 0x8c, 0x09, 0x8c, 0x62, 0x35, 0x78, 0xb1,
		0x7b, 0xe0, 0x3a, 0x59, 0xff, 0x5d, 0x86, 0xd7, 0x72, 0x1b, 0xb4, 0x77, 0x57, 0x1a, 0x5d, 0x52,
		0x4f, 0x24, 0x55, 0xb2, 0x30, 0xec, 0xab, 0x23, 0xc9, 0xd4, 0x9a, 0xb3, 0x9d, 0x52, 0x85, 0x37,
		0x7d, 0xf5, 0xe1, 0xbb, 0xa5, 0x9f, 0xb1, 0x83, 0x57, 0x74, 0x0f, 0xfc, 0xe4, 0xbf, 0x23, 0x3f,
		0x4c, 0xdd, 0xe9, 0x59, 0x10, 0xca, 0x9c, 0x2e, 0x8b, 0x25, 0x73, 0x5a, 0xb1, 0xe7, 0x48, 0xe6,
		0x94, 0xcc, 0xe9, 0x53, 0x8a, 0x3f, 0xb4, 0x98, 0x39, 0x5d, 0x14, 0x4e, 0x58, 0x89, 0xb0, 0x12,
		0x61, 0x25, 0xc2, 0x4a, 0x62, 0xda, 0x40, 0xe6, 0x54, 0xf2, 0xa8, 0x93, 0x39, 0x2d, 0x74, 0xf6,
		0xc8, 0x9c, 0x3e, 0xb0, 0xb5, 0x64, 0x4e, 0x2b, 0x36, 0xfa, 0xf2, 0xd2, 0xf6, 0x29, 0x73, 0x3a,
		0x18, 0x5a, 0xcf, 0x9c, 0xae, 0x3f, 0x02, 0x8a, 0x0b, 0xc5, 0x85, 0xe2, 0x42, 0x71, 0xc5, 0xb4,
		0x81, 0xcc, 0xe9, 0x82, 0x60, 0x32, 0xa7, 0x07, 0x06, 0xe0, 0xa9, 0xa4, 0x5e, 0x2d, 0xc2, 0x76,
		0x26, 0x18, 0xb0, 0x06, 0xac, 0x01, 0x6b, 0xc0, 0x9a, 0x78, 0x14, 0xf1, 0x28, 0x62, 0x15, 0x7b,
		0x17, 0x8f, 0x3a, 0x66, 0x6b, 0x09, 0x43, 0x6d, 0x51, 0x02, 0xf5, 0x7f, 0x7a, 0x28, 0xba, 0x58,
		0x5e, 0xb6, 0x54, 0x3d, 0x42, 0xfd, 0x5f, 0x3d, 0x78, 0x67, 0xb9, 0x0d, 0xa2, 0xfe, 0x4f, 0xd4,
		0x2a, 0xec, 0x5d, 0xfd, 0x9f, 0x64, 0x81, 0x98, 0xb3, 0xbd, 0xfa, 0xbf, 0xef, 0xa7, 0x3f, 0x63,
		0xfc, 0xff, 0x77, 0xb1, 0xfc, 0x4f, 0x85, 0x22, 0x28, 0x93, 0x5b, 0xf1, 0xa9, 0x3c, 0x99, 0x82,
		0xbf, 0x26, 0x05, 0x7f, 0xdb, 0x42, 0x31, 0x0a, 0xfe, 0xea, 0xc2, 0x07, 0xc5, 0xe2, 0x16, 0x73,
		0x1d, 0xbd, 0x1d, 0xa6, 0x77, 0x12, 0x67, 0x6e, 0x96, 0x45, 0x38, 0x66, 0x5a, 0xe0, 0x0e, 0x41,
		0xef, 0x6e, 0xcd, 0x03, 0x7c, 0xd3, 0x57, 0x95, 0x4d, 0xfd, 0x7b, 0x66, 0xf1, 0x18, 0xe5, 0xc3,
		0x85, 0x17, 0xf7, 0xce, 0xcd, 0x56, 0xb2, 0xa4, 0x20, 0xa3, 0x61, 0xbf, 0xe6, 0xc3, 0x7d, 0xad,
		0x0c, 0xf3, 0x35, 0x1b, 0xde, 0x5b, 0x76, 0x2b, 0x0c, 0x35, 0x79, 0xab, 0x1a, 0xac, 0xa1, 0xbd,
		0xd5, 0x6b, 0x6d, 0x39, 0x8d, 0x2d, 0xae, 0x77, 0xc5, 0xfe, 0x64, 0xc1, 0xe3, 0xa0, 0x7b, 0x0c,
		0x2a, 0xda, 0xfe, 0x12, 0x1b, 0x6d, 0x77, 0x83, 0x8b, 0x6d, 0xe6, 0xd3, 0x5b, 0x53, 0x60, 0x5b,
		0x1a, 0xa3, 0xd0, 0x77, 0x87, 0x8b, 0x8b, 0x50, 0x74, 0x63, 0xe6, 0xc9, 0x98, 0x55, 0x09, 0x05,
		0x0f, 0x43, 0xb9, 0x1e, 0xa3, 0xd2, 0xae, 0x85, 0x8e, 0x0b, 0x61, 0xe8, 0x2a, 0xe8, 0xba, 0x04,
		0xc6, 0xd4, 0xdf, 0x98, 0xe2, 0x9b, 0x53, 0x79, 0x59, 0x43, 0x51, 0xb6, 0xe7, 0x66, 0xf5, 0x10,
		0x96, 0xdf, 0x82, 0x07, 0x4e, 0x73, 0xd9, 0x8d, 0xd0, 0x6b, 0x9c, 0xd3, 0xf6, 0x9b, 0x4d, 0xfc,
		0x64, 0x21, 0xbf, 0xd8, 0xd4, 0x0f, 0x16, 0xf3, 0x7b, 0xc5, 0xfc, 0x5c, 0x39, 0xbf, 0xd6, 0x2e,
		0xbf, 0xd5, 0x6d, 0x4c, 0xdb, 0xc4, 0x88, 0x8d, 0xe7, 0x68, 0x1b, 0xb3, 0x6c, 0xa1, 0x50, 0x14,
		0x63, 0xb5, 0x2b, 0x0c, 0x31, 0x31, 0x56, 0x5b, 0x3a, 0x74, 0x94, 0x9f, 0x9c, 0x8b, 0x35, 0x7d,
		0x72, 0x03, 0x15, 0xde, 0x18, 0x45, 0xee, 0x25, 0x8a, 0x50, 0x1b, 0xaf, 0x26, 0x6f, 0x61, 0x9a,
		0xd7, 0x94, 0xb9, 0x35, 0x47, 0x2e, 0xfa, 0x2a, 0x5c, 0xa7, 0x62, 0xad, 0x78, 0x41, 0xbe, 0x58,
		0xe1, 0x5e, 0xe6, 0xba, 0x21, 0xf9, 0xad, 0x38, 0xe9, 0x1c, 0xde, 0x5e, 0x6c, 0x29, 0xae, 0x7b,
		0x59, 0xe3, 0x6b, 0x3e, 0xfc, 0xd0, 0x1d, 0x06, 0x5e, 0x5f, 0xb9, 0x57, 0x7e, 0x6a, 0xce, 0x53,
		0x96, 0xa4, 0xc1, 0x50, 0x60, 0x28, 0x30, 0x14, 0xcd, 0x93, 0xf3, 0x7a, 0xfa, 0xe3, 0xc7, 0x1e,
		0xb3, 0x80, 0x56, 0x2d, 0x11, 0x14, 0x03, 0xcb, 0xdf, 0xf8, 0x21, 0x1c, 0xdd, 0x9a, 0x1f, 0xc4,
		0x77, 0xd1, 0xdb, 0xc9, 0x2d, 0x98, 0x22, 0x89, 0xc0, 0xe6, 0x78, 0xc1, 0xc2, 0x28, 0x1d, 0x93,
		0x39, 0x89, 0x3c, 0xe0, 0xcb, 0xb1, 0xbc, 0xb1, 0xac, 0xed, 0x26, 0x4a, 0xa3, 0x9f, 0xc2, 0x54,
		0x66, 0x81, 0x66, 0x6b, 0x23, 0x73, 0xfb, 0xe1, 0x44, 0xd2, 0xcb, 0xdd, 0x4a, 0x92, 0x56, 0x02,
		0xa6, 0x41, 0x32, 0x74, 0xaf, 0x03, 0xef, 0xc6, 0x1c, 0x48, 0x73, 0x49, 0x80, 0x28, 0x20, 0x0a,
		0x88, 0x0a, 0x80, 0xe8, 0x58, 0xa3, 0x12, 0x75, 0x63, 0xa2, 0x55, 0xfb, 0x0f, 0xa2, 0xa3, 0x70,
		0x18, 0x47, 0xa9, 0xea, 0xa7, 0x4a, 0x62, 0xce, 0x55, 0xa3, 0x35, 0x96, 0x19, 0xab, 0x38, 0x1a,
		0xa5, 0x32, 0x57, 0x5e, 0x37, 0x5a, 0x27, 0x4b, 0x22, 0xdd, 0x28, 0x54, 0xee, 0x30, 0x18, 0x25,
		0xd9, 0x87, 0x2b, 0x5f, 0xe2, 0x11, 0xed, 0xe5, 0x27, 0x84, 0x91, 0x2b, 0xc3, 0x2a, 0x3a, 0xeb,
		0x6f, 0x9e, 0x46, 0x6e, 0xe8, 0x0a, 0x72, 0x96, 0x07, 0xd6, 0x65, 0x14, 0xfa, 0x7b, 0x43, 0x65,
		0xe6, 0xa7, 0x49, 0x24, 0x9a, 0xb4, 0xb6, 0xd1, 0xe7, 0x4e, 0x5b, 0x54, 0xea, 0xea, 0x01, 0x3d,
		0x77, 0x5a, 0x27, 0xf6, 0x1e, 0x30, 0xde, 0xe9, 0x73, 0xe7, 0xa5, 0xf8, 0x03, 0x66, 0x07, 0xf5,
		0xdc, 0x11, 0x88, 0x1a, 0x2d, 0x59, 0x99, 0x73, 0xa7, 0x09, 0x91, 0x5c, 0x5b, 0xa1, 0xac, 0x84,
		0x22, 0x51, 0xc1, 0x64, 0x12, 0xab, 0xc0, 0x3d, 0xac, 0xcb, 0xf2, 0xb8, 0x92, 0x15, 0x52, 0x79,
		0x60, 0xa4, 0xd2, 0xf8, 0x4a, 0x56, 0x3a, 0x0b, 0x2a, 0x52, 0x51, 0x4b, 0xaa, 0x2a, 0xad, 0xb2,
		0xd6, 0x54, 0xd7, 0x9a, 0x0a, 0xdb, 0x53, 0x65, 0x73, 0x30, 0x76, 0xe8, 0x2c, 0xa8, 0x21, 0xd7,
		0xd9, 0xb3, 0xce, 0x82, 0xd5, 0x5a, 0xca, 0xd5, 0xff, 0x70, 0x24, 0x42, 0x93, 0x1c, 0xd1, 0x0a,
		0xd6, 0xff, 0x0a, 0xfd, 0x37, 0x0b, 0xff, 0x6f, 0xe9, 0x5f, 0xb3, 0xf2, 0xd6, 0xb7, 0xf9, 0xeb,
		0xd6, 0x98, 0xcf, 0xc6, 0xea, 0x7f, 0x46, 0x7e, 0xac, 0x06, 0x32, 0x59, 0xc6, 0x25, 0x69, 0x04,
		0x48, 0xe1, 0xb2, 0x04, 0x48, 0x05, 0x02, 0xa4, 0x02, 0x5a, 0xe5, 0x90, 0x65, 0x2c, 0x19, 0x0f,
		0x24, 0xcb, 0xf8, 0x20, 0x82, 0x4e, 0xc2, 0x4d, 0x04, 0x87, 0x36, 0xac, 0xcc, 0x8d, 0x50, 0x96,
		0xd1, 0x30, 0x1f, 0x02, 0x88, 0x02, 0xa2, 0x80, 0x28, 0x59, 0xc6, 0xb2, 0x20, 0x4a, 0x96, 0x91,
		0x2c, 0x63, 0xbd, 0xa9, 0x0c, 0x59, 0x46, 0x87, 0x2c, 0xe3, 0x6e, 0x11, 0x49, 0x86, 0x3d, 0x14,
		0x92, 0xc0, 0xb0, 0x87, 0x8a, 0x83, 0xaa, 0x5b, 0x1d, 0xf0, 0xf0, 0x58, 0xf4, 0x94, 0xa1, 0x0e,
		0x26, 0xdb, 0xbc, 0x95, 0x71, 0x0e, 0xcb, 0xdb, 0x59, 0xe5, 0x20, 0x87, 0x2f, 0x71, 0x64, 0x34,
		0xc6, 0x61, 0xe5, 0xfb, 0x0c, 0x71, 0x60, 0x88, 0x83, 0xa1, 0x61, 0x28, 0x3d, 0xc4, 0x61, 0xe9,
		0x08, 0xea, 0x8f, 0x70, 0x58, 0x16, 0xc3, 0x00, 0x07, 0xcb, 0x01, 0x21, 0x06, 0x38, 0xe8, 0x12,
		0x25, 0x06, 0x38, 0x10, 0x73, 0x25, 0xe6, 0xba, 0xa7, 0x31, 0x57, 0x06, 0x38, 0x14, 0x71, 0x96,
		0x19, 0xe0, 0xc0, 0x00, 0x87, 0xbd, 0xda, 0x0b, 0x06, 0x38, 0xac, 0x2d, 0x72, 0x56, 0xb3, 0x36,
		0xf0, 0x3f, 0xa9, 0x38, 0xf1, 0xd3, 0x3b, 0xa1, 0x56, 0x81, 0xb9, 0x3c, 0x5a, 0x05, 0x60, 0x29,
		0x07, 0xc6, 0x52, 0x8c, 0x5b, 0x05, 0x82, 0x64, 0x28, 0xd7, 0x27, 0x30, 0x16, 0x26, 0xd3, 0x24,
		0xd0, 0xa2, 0x49, 0xa0, 0x6a, 0x65, 0xb5, 0xa6, 0xb4, 0xd6, 0x94, 0xd7, 0x9e, 0x12, 0x0b, 0x81,
		0xb8, 0xe1, 0xd9, 0x33, 0x55, 0xee, 0x5c, 0xd0, 0xb5, 0xea, 0x5b, 0xb8, 0x8b, 0x3d, 0x93, 0x2a,
		0x7b, 0xa3, 0x6b, 0x8b, 0x1b, 0x5d, 0xc5, 0xc4, 0x73, 0xa3, 0x6b, 0xe5, 0xe6, 0x42, 0xc6, 0x6c,
		0x08, 0x7a, 0x73, 0xa2, 0x66, 0x64, 0xd1, 0x9c, 0xc8, 0x1f, 0xab, 0x05, 0xab, 0x22, 0x7d, 0xa0,
		0x64, 0x8d, 0x8b, 0x35, 0x23, 0x63, 0xd3, 0xd8, 0x54, 0x64, 0x74, 0x6c, 0x1b, 0x9f, 0xca, 0x8c,
		0x50, 0x65, 0xc6, 0xa8, 0x3a, 0xa3, 0x24, 0x6b, 0x9c, 0x84, 0x8d, 0x94, 0x35, 0x63, 0x95, 0x0b,
		0xee, 0x47, 0xe1, 0x75, 0x14, 0xdf, 0x7a, 0xa1, 0xcd, 0x63, 0x39, 0xd3, 0xae, 0xc5, 0x87, 0x59,
		0x3a, 0x2f, 0xb2, 0x77, 0xe0, 0x57, 0x66, 0xdc, 0xaa, 0x30, 0x72, 0x15, 0x1b, 0xbb, 0xaa, 0x8c,
		0x5e, 0xe5, 0xc6, 0xaf, 0x72, 0x23, 0x58, 0xbd, 0x31, 0xb4, 0x63, 0x14, 0x2d, 0x19, 0xc7, 0x7c,
		0x79, 0x2c, 0xdc, 0xd1, 0xbf, 0xf6, 0x0c, 0xf1, 0x3b, 0xfb, 0x1f, 0xd4, 0xce, 0x59, 0x4f, 0xc2,
		0x72, 0x34, 0xd7, 0xb5, 0x6f, 0x43, 0x1d, 0xa1, 0xee, 0x85, 0x27, 0x9f, 0x21, 0xd2, 0xdd, 0xf0,
		0xf4, 0x8e, 0x49, 0x76, 0x3f, 0x3c, 0xf9, 0xb4, 0xac, 0x3b, 0x22, 0x49, 0x63, 0xbf, 0x9f, 0x5a,
		0x36, 0x3f, 0x4e, 0xde, 0x38, 0x71, 0xa5, 0x92, 0xd4, 0x55, 0xd7, 0xd7, 0x51, 0x9c, 0x36, 0xac,
		0x3e, 0xf2, 0xfe, 0xb9, 0xed, 0xad, 0x92, 0x2a, 0xff, 0x7f, 0xf2, 0x51, 0x8b, 0x6b, 0x66, 0xcd,
		0x5a, 0x2c, 0x3d, 0x71, 0x7a, 0x28, 0x4c, 0xeb, 0xd8, 0xb7, 0x63, 0xb2, 0x2d, 0x82, 0xc1, 0xb3,
		0x1d, 0x38, 0xa5, 0x8d, 0x81, 0x4a, 0x52, 0x3f, 0x94, 0xbb, 0xed, 0xfa, 0x51, 0xcb, 0xbf, 0xf8,
		0x30, 0x68, 0x32, 0x34, 0x19, 0x9a, 0x0c, 0x4d, 0xde, 0x49, 0x0a, 0xeb, 0x0f, 0x3f, 0x75, 0x5c,
		0x6f, 0x30, 0x88, 0x55, 0x92, 0xb8, 0x61, 0xe4, 0xfe, 0x1e, 0x85, 0x95, 0x90, 0xd6, 0x97, 0x16,
		0x9f, 0xf1, 0xc6, 0x4b, 0x53, 0x15, 0x87, 0xc6, 0xe5, 0x61, 0x4f, 0x3e, 0xe8, 0xeb, 0xaf, 0xdf,
		0x37, 0xdd, 0xb3, 0xcb, 0x3f, 0xdf, 0xb7, 0xdc, 0xb3, 0xcb, 0xc9, 0xc7, 0x56, 0xf6, 0x8f, 0xc9,
		0xe7, 0xf6, 0xfb, 0xa6, 0xdb, 0x99, 0x7d, 0xee, 0xbe, 0x6f, 0xba, 0xdd, 0xcb, 0x6f, 0x7a, 0xbd,
		0x17, 0xdf, 0xfc, 0x71, 0x7c, 0x5f, 0xfe, 0x8b, 0x5f, 0x7f, 0xf5, 0xbe, 0xd7, 0x1b, 0xfe, 0xf1,
		0xf3, 0xfd, 0xf8, 0xef, 0xaf, 0xee, 0x2f, 0xbf, 0xfd, 0xe6, 0x6f, 0xb6, 0xad, 0xc2, 0xf8, 0x05,
		0x7a, 0xbd, 0x17, 0x97, 0x7f, 0xb1, 0xa7, 0x96, 0x97, 0x07, 0x4c, 0x58, 0xd4, 0x97, 0x54, 0x85,
		0x03, 0x35, 0x70, 0xd3, 0x51, 0x18, 0xaa, 0xc0, 0xf5, 0x07, 0xf6, 0x79, 0xcb, 0x86, 0x67, 0x42,
		0x5f, 0xa0, 0x2f, 0xd0, 0x17, 0xe8, 0x0b, 0xf4, 0x05, 0xfa, 0x02, 0x7d, 0x81, 0xbe, 0x14, 0x5d,
		0xde, 0x20, 0x19, 0x56, 0x42, 0x59, 0xa6, 0xcf, 0x81, 0xa6, 0x40, 0x53, 0xa0, 0x29, 0xd0, 0x94,
		0x9d, 0xa4, 0x29, 0x23, 0x3f, 0x4c, 0x8f, 0xdb, 0x15, 0x10, 0x93, 0x53, 0x8b, 0x8f, 0xf8, 0xd5,
		0x0b, 0x6f, 0x94, 0x75, 0x56, 0x52, 0x41, 0x62, 0x49, 0xb2, 0x67, 0xef, 0xc9, 0x87, 0xcd, 0x1a,
		0xc9, 0x9a, 0xcf, 0xab, 0x79, 0x9e, 0xad, 0x3e, 0xb3, 0xa7, 0xcf, 0xba, 0x74, 0x1f, 0xda, 0x96,
		0xcc, 0xc2, 0xf2, 0x51, 0xf1, 0xbe, 0x54, 0x7f, 0x54, 0x4e, 0xba, 0xdd, 0xe3, 0x2e, 0xc7, 0x65,
		0x27, 0xb0, 0xc9, 0xbe, 0xf4, 0x43, 0xf6, 0x31, 0x12, 0xcb, 0xc5, 0xb8, 0xf9, 0x88, 0xde, 0xc9,
		0x73, 0xf0, 0x31, 0xf0, 0x31, 0xf0, 0x31, 0xf0, 0x31, 0x76, 0xd2, 0xc7, 0x20, 0x14, 0x6a, 0xf0,
		0x20, 0x42, 0xa1, 0xd0, 0x14, 0xfd, 0xe5, 0xad, 0x30, 0x81, 0x4b, 0xde, 0x16, 0xb2, 0x02, 0x59,
		0x81, 0xac, 0xec, 0x38, 0x59, 0x21, 0x20, 0x5a, 0xf8, 0x2f, 0x02, 0xa2, 0x44, 0xb8, 0xb6, 0x6a,
		0x16, 0x96, 0x8f, 0x0a, 0x01, 0xd1, 0xbd, 0x39, 0x2e, 0x04, 0x44, 0xed, 0x7a, 0x1a, 0xb5, 0x6e,
		0x57, 0x9f, 0x5e, 0x36, 0x31, 0x89, 0x7c, 0x3a, 0x0b, 0xfd, 0x2c, 0x4e, 0xee, 0x62, 0x38, 0xeb,
		0xd5, 0xa2, 0x8e, 0x95, 0x6a, 0x0c, 0xb3, 0x0b, 0x2b, 0x8a, 0xc0, 0x9b, 0xd9, 0x85, 0x16, 0x45,
		0xac, 0xa2, 0xf8, 0x85, 0x17, 0x4f, 0x3e, 0xd4, 0xe8, 0x42, 0x8c, 0xaa, 0x8f, 0x9b, 0xd0, 0x6d,
		0xc5, 0x0f, 0xca, 0x97, 0xbe, 0x89, 0x61, 0xf9, 0x2a, 0x81, 0xe5, 0x7f, 0x3d, 0x5a, 0xee, 0xf7,
		0x3d, 0x0a, 0x92, 0xe1, 0xd1, 0xb5, 0xea, 0x27, 0x47, 0xf2, 0x13, 0x60, 0x1c, 0xd1, 0x9b, 0x1d,
		0xfe, 0xdf, 0x38, 0x5a, 0xf8, 0x5f, 0x8b, 0xff, 0x96, 0x5d, 0x72, 0xfc, 0xfd, 0xec, 0x17, 0x7d,
		0x78, 0x95, 0x0c, 0x3f, 0xfc, 0xa8, 0xfa, 0xc9, 0xf8, 0x6f, 0xb2, 0xce, 0xd1, 0xfd, 0x9e, 0x8e,
		0x2a, 0xb2, 0x74, 0xbe, 0x6b, 0x71, 0xae, 0x25, 0x67, 0x7b, 0x6d, 0xef, 0x2c, 0xcb, 0x9c, 0xe3,
		0xfb, 0x1d, 0x9f, 0xcc, 0x27, 0x7c, 0x4e, 0xb7, 0x7d, 0x3e, 0x25, 0xa6, 0x50, 0x6e, 0xe5, 0x48,
		0x36, 0xb6, 0x75, 0x53, 0x9a, 0xc9, 0x75, 0xfb, 0x71, 0x70, 0x93, 0xc8, 0xcd, 0x5c, 0x9d, 0x88,
		0x63, 0xea, 0xea, 0x93, 0x0b, 0xc5, 0xd4, 0x55, 0xa6, 0xae, 0x16, 0xf9, 0x59, 0x62, 0x53, 0x57,
		0xc7, 0x9a, 0x29, 0x3f, 0x75, 0x35, 0x93, 0xca, 0xd4, 0xd5, 0x9a, 0x99, 0x03, 0x5b, 0x66, 0xc1,
		0xba, 0x79, 0xb0, 0x6e, 0x26, 0xec, 0x9b, 0x8b, 0x7a, 0xba, 0x32, 0xe2, 0x53, 0x57, 0x6d, 0x0e,
		0x30, 0xac, 0x60, 0x70, 0xa1, 0xa5, 0x94, 0x38, 0x53, 0x58, 0xab, 0x37, 0x46, 0x95, 0x19, 0xa5,
		0xca, 0x8c, 0x53, 0x75, 0x46, 0x4a, 0x3e, 0x82, 0x63, 0x23, 0xce, 0x68, 0x71, 0xc0, 0xa0, 0xbd,
		0xf4, 0xf8, 0x76, 0x07, 0x0a, 0xda, 0x1c, 0x24, 0x68, 0x77, 0x80, 0x60, 0x35, 0x83, 0x03, 0x2b,
		0x1a, 0x18, 0x58, 0xd1, 0xa0, 0x40, 0x6b, 0xb5, 0x23, 0xd6, 0x07, 0x03, 0x56, 0x37, 0x10, 0xd0,
		0xf6, 0x20, 0xc0, 0xda, 0xe7, 0x1a, 0x9f, 0xd5, 0xf0, 0xb4, 0xc9, 0x7a, 0xa5, 0x36, 0xbd, 0x53,
		0x88, 0x23, 0xc4, 0x11, 0xe2, 0xb8, 0x63, 0xc4, 0xd1, 0x3e, 0xb9, 0xb3, 0x56, 0xf3, 0x68, 0xb1,
		0xd6, 0xd1, 0x72, 0x8d, 0xa3, 0x45, 0xb2, 0x50, 0x45, 0x4d, 0x63, 0x55, 0xb5, 0x8c, 0x95, 0x17,
		0xa5, 0x55, 0x57, 0x8c, 0x66, 0xb1, 0x66, 0xb1, 0x92, 0x5a, 0xc5, 0xfc, 0x08, 0x74, 0xda, 0x67,
		0x9d, 0xb3, 0x93, 0xd3, 0xf6, 0x59, 0x97, 0xb3, 0x50, 0x1b, 0x5a, 0x6c, 0x47, 0xea, 0x25, 0x15,
		0x31, 0xc5, 0x98, 0x92, 0x74, 0xd6, 0xc7, 0x4a, 0x99, 0xa0, 0xbd, 0xf2, 0xc0, 0x4a, 0xcb, 0x02,
		0xed, 0x94, 0x03, 0x52, 0x1e, 0xf5, 0x70, 0xf9, 0x49, 0x56, 0xbf, 0x70, 0x24, 0xec, 0x37, 0x6e,
		0xa1, 0x1a, 0xe5, 0xed, 0xf8, 0x77, 0x64, 0x7f, 0xa7, 0x44, 0x6a, 0xdf, 0x4a, 0xa4, 0x24, 0x6a,
		0x6c, 0xb6, 0x79, 0x2c, 0xb7, 0x56, 0x26, 0x55, 0xe9, 0x5d, 0xd8, 0x42, 0x27, 0x6e, 0x9b, 0x27,
		0xcd, 0xe4, 0xce, 0xf6, 0xca, 0xcf, 0x96, 0xde, 0xa9, 0x2a, 0x7f, 0x26, 0x34, 0xce, 0x43, 0x23,
		0x5b, 0xd6, 0x44, 0x05, 0xaa, 0x6f, 0x74, 0x1e, 0xf2, 0xa8, 0xc3, 0x8a, 0x3c, 0xcd, 0x13, 0x6a,
		0x56, 0x6f, 0x63, 0x1c, 0xb1, 0x94, 0x88, 0x4c, 0x0a, 0x47, 0x20, 0xa5, 0x22, 0x8d, 0xe2, 0x11,
		0x45, 0xf1, 0xc8, 0xa1, 0x7c, 0x84, 0xb0, 0x5a, 0xeb, 0x6a, 0x5a, 0xcf, 0xd2, 0x50, 0xa1, 0x77,
		0x15, 0x28, 0xb9, 0xc2, 0xd7, 0xa9, 0x3c, 0x99, 0xca, 0xd7, 0x26, 0x95, 0xaf, 0x55, 0xab, 0xac,
		0x35, 0xd5, 0xb5, 0xa6, 0xc2, 0xf6, 0x54, 0xb9, 0x1e, 0x94, 0x5d, 0x2c, 0x78, 0x3f, 0xd7, 0xd1,
		0xdb, 0xa1, 0x11, 0xa9, 0x59, 0x43, 0xce, 0x63, 0x98, 0x6c, 0xad, 0x99, 0xac, 0x29, 0x45, 0xaa,
		0x94, 0xc9, 0xbe, 0xcd, 0x5f, 0xb6, 0x2a, 0x26, 0xfb, 0xcc, 0xe2, 0xe9, 0x99, 0x85, 0x0a, 0x97,
		0xb6, 0xcc, 0xcd, 0x56, 0xb1, 0xa4, 0x20, 0xa3, 0x00, 0xa1, 0x79, 0x20, 0xd0, 0x4a, 0xc0, 0xcf,
		0x2c, 0xb0, 0x57, 0x76, 0x2b, 0x0c, 0x15, 0xb8, 0x52, 0xc5, 0xd5, 0xd0, 0xd4, 0x2a, 0x34, 0xb4,
		0x9c, 0x4e, 0x16, 0xd7, 0xac, 0x62, 0x7f, 0xb2, 0xe0, 0x86, 0xeb, 0x6e, 0xb4, 0xe5, 0x0d, 0x2e,
		0xb1, 0xa5, 0x96, 0xb6, 0xb2, 0xd8, 0xee, 0x3d, 0xbd, 0x17, 0x8f, 0xff, 0x89, 0x27, 0x76, 0xa9,
		0xec, 0xee, 0x48, 0xef, 0x4a, 0x81, 0x6d, 0x10, 0x5b, 0xfe, 0xc7, 0x17, 0xfc, 0xe1, 0x65, 0x7c,
		0x64, 0x09, 0x1b, 0xde, 0x28, 0x8d, 0xdc, 0x2b, 0x2f, 0x1c, 0x7c, 0xf6, 0x07, 0xe9, 0x47, 0xb7,
		0x1f, 0x05, 0x63, 0xbc, 0x74, 0xaf, 0x63, 0xf5, 0x3f, 0x23, 0x15, 0xf6, 0xef, 0x9e, 0x5c, 0xd4,
		0x9c, 0x07, 0x3e, 0x29, 0xe9, 0x89, 0x8d, 0xfc, 0x5e, 0x5d, 0x7b, 0xa3, 0x20, 0x2d, 0x54, 0x41,
		0xd1, 0xe8, 0x3e, 0xbe, 0x16, 0x97, 0x4f, 0x3c, 0xab, 0x98, 0x47, 0x58, 0xd8, 0xe3, 0x2b, 0xe3,
		0xd1, 0x69, 0x7a, 0x6c, 0x65, 0x3d, 0x32, 0x6d, 0x8f, 0x4b, 0xdb, 0xa3, 0xd2, 0xf7, 0x98, 0xcc,
		0x0c, 0x40, 0x61, 0x8f, 0xa6, 0x7c, 0x79, 0x51, 0x89, 0x72, 0xa1, 0x92, 0xe5, 0x3f, 0x25, 0x60,
		0x44, 0xa7, 0x3c, 0x27, 0xaf, 0xb5, 0x28, 0x19, 0x86, 0x34, 0x2e, 0x99, 0xd0, 0x2f, 0x81, 0x28,
		0x41, 0xbf, 0xb4, 0xca, 0x55, 0xe6, 0x4b, 0xd2, 0x6c, 0xbe, 0x6c, 0xee, 0xce, 0xb2, 0x08, 0x81,
		0xec, 0xa5, 0x2d, 0xec, 0x98, 0x0c, 0x3c, 0x2a, 0x09, 0x13, 0xd3, 0x2f, 0x15, 0xb3, 0xd2, 0x2d,
		0xac, 0xf4, 0xee, 0x5b, 0xe9, 0xa2, 0xa1, 0xe5, 0xc6, 0x95, 0xd7, 0xff, 0x6d, 0x34, 0x2c, 0xbe,
		0x82, 0xb3, 0x8d, 0x9a, 0x7e, 0xaf, 0xe0, 0x2a, 0x94, 0xcb, 0xd2, 0x94, 0x0e, 0xfd, 0xea, 0x84,
		0x78, 0x0d, 0x43, 0xb9, 0xba, 0x21, 0x5b, 0xe3, 0xd0, 0xac, 0x71, 0x08, 0xd6, 0x3c, 0xd4, 0x2a,
		0xeb, 0xef, 0x95, 0xcd, 0x82, 0x34, 0xbc, 0xeb, 0x6b, 0x3f, 0xf4, 0xd3, 0x3b, 0xd7, 0xbf, 0x09,
		0xa3, 0x58, 0x63, 0x0b, 0x72, 0xdb, 0xb8, 0x22, 0xa8, 0x6c, 0x70, 0x48, 0x2b, 0xcf, 0xa1, 0x9d,
		0xd7, 0x30, 0xc9, 0x63, 0x08, 0xe5, 0x2d, 0x4c, 0xf3, 0x14, 0x62, 0x79, 0x09, 0xb1, 0x3c, 0x84,
		0x5c, 0xde, 0xc1, 0x6e, 0x20, 0x52, 0x3b, 0x8f, 0x60, 0x9c, 0x37, 0xd0, 0xcc, 0x13, 0xdc, 0x5b,
		0x61, 0xa2, 0xa9, 0x7f, 0xab, 0xe2, 0x44, 0x5f, 0xe3, 0xa7, 0xdf, 0xd7, 0x53, 0xf4, 0x16, 0x8a,
		0x8e, 0xa2, 0xdb, 0x56, 0x74, 0xdd, 0x9a, 0x80, 0x46, 0xac, 0x6e, 0xa3, 0x4f, 0x5e, 0x60, 0x5e,
		0x97, 0x33, 0x13, 0x44, 0x41, 0x0e, 0x05, 0x39, 0x5b, 0x53, 0x32, 0x3d, 0x65, 0xd3, 0x54, 0x3a,
		0x63, 0xe5, 0xcb, 0x05, 0x8c, 0xc2, 0x51, 0xa2, 0x06, 0x72, 0x05, 0x39, 0x53, 0x79, 0xa6, 0xe3,
		0xb7, 0x4a, 0x84, 0x7a, 0x9f, 0x14, 0x76, 0x7c, 0xd2, 0x6c, 0x9a, 0x55, 0x65, 0x5c, 0x52, 0x5f,
		0x54, 0x91, 0xe5, 0x91, 0xb6, 0x40, 0xd6, 0x2c, 0x91, 0x35, 0x8b, 0x64, 0xcf, 0x32, 0x99, 0x59,
		0x28, 0x43, 0x4b, 0x65, 0xee, 0x17, 0x3c, 0x6c, 0x72, 0xa4, 0x9a, 0x81, 0x05, 0x9b, 0x7f, 0x85,
		0x9b, 0x7d, 0x65, 0x5b, 0xb4, 0xe4, 0x27, 0x3f, 0x58, 0x6a, 0xde, 0xb5, 0xde, 0xa0, 0x69, 0xaf,
		0x21, 0xf3, 0x5e, 0xb6, 0xf7, 0xcd, 0xde, 0x96, 0x69, 0x64, 0x3b, 0xf6, 0x79, 0xdb, 0x6a, 0xd2,
		0xb6, 0x75, 0x49, 0x89, 0x63, 0x09, 0x39, 0x02, 0x25, 0x1b, 0xf3, 0xa4, 0xd3, 0xd1, 0x24, 0x51,
		0x70, 0x34, 0x89, 0xbc, 0x1c, 0x99, 0x39, 0x97, 0x8e, 0x71, 0x79, 0xc7, 0x28, 0x8d, 0xde, 0x65,
		0xef, 0xf5, 0xe1, 0xbb, 0xec, 0xbd, 0x3e, 0xbc, 0xcb, 0xde, 0xeb, 0xc3, 0xaf, 0xd3, 0xf7, 0xda,
		0x8b, 0xaa, 0xc5, 0x1a, 0x94, 0xca, 0x3d, 0x74, 0x00, 0x2a, 0xaf, 0x8c, 0x7b, 0x60, 0xc3, 0x1b,
		0x75, 0x08, 0x66, 0x4e, 0xee, 0xae, 0x89, 0xa7, 0xdc, 0x46, 0x37, 0xa4, 0xb9, 0x28, 0x85, 0xc0,
		0x26, 0x81, 0xcd, 0x7d, 0x0b, 0x6c, 0xde, 0x7a, 0x5f, 0x5c, 0xf3, 0x7b, 0x6c, 0xe7, 0xe7, 0x67,
		0x49, 0x9c, 0x59, 0x90, 0xb3, 0x49, 0x90, 0x93, 0x20, 0xe7, 0xae, 0x05, 0x39, 0x05, 0x06, 0xd1,
		0x9a, 0x87, 0x1d, 0xe4, 0xc2, 0x0d, 0x02, 0x61, 0x06, 0xa1, 0xf0, 0x82, 0x40, 0x10, 0x46, 0x32,
		0x9c, 0x20, 0x1d, 0x46, 0xb0, 0xe6, 0x87, 0xca, 0xfb, 0x9f, 0x02, 0xe1, 0x02, 0xd1, 0x30, 0x81,
		0x8d, 0xfb, 0x42, 0x77, 0x69, 0x3b, 0xb6, 0xe4, 0x7e, 0x5f, 0xd6, 0x78, 0x9a, 0xc2, 0xad, 0x1f,
		0x8a, 0xb2, 0x9a, 0x25, 0x71, 0xb0, 0x1a, 0x58, 0x0d, 0xac, 0x06, 0x56, 0x03, 0xab, 0x81, 0xd5,
		0xc0, 0x6a, 0x60, 0x35, 0x35, 0x8c, 0x51, 0xab, 0x2f, 0x69, 0xec, 0xb9, 0xa3, 0x30, 0x49, 0xb5,
		0x47, 0xd8, 0x8c, 0x91, 0x34, 0x51, 0x93, 0xbb, 0x9b, 0xf4, 0x6c, 0x9c, 0x80, 0xa5, 0xff, 0x29,
		0x1c, 0xf8, 0x7d, 0x2f, 0x55, 0x89, 0xe3, 0x39, 0x8b, 0xa1, 0x58, 0x27, 0x8c, 0x06, 0xca, 0xf1,
		0x13, 0xa7, 0x9f, 0xb1, 0xa2, 0x51, 0xac, 0x06, 0x2f, 0xea, 0x47, 0x44, 0x26, 0xcb, 0x57, 0x67,
		0x2a, 0x52, 0x6a, 0x7d, 0xab, 0xe6, 0x2a, 0xcf, 0xec, 0xea, 0xee, 0x7e, 0xe4, 0x7d, 0xf4, 0xf3,
		0x13, 0x8e, 0x85, 0xec, 0x4f, 0xf6, 0x6f, 0x13, 0x66, 0xc4, 0x34, 0x84, 0x92, 0x7b, 0x59, 0xd9,
		0x0c, 0x84, 0xd5, 0x6d, 0x13, 0x1b, 0x7d, 0x50, 0xa0, 0xa5, 0xf0, 0x56, 0x25, 0x1f, 0xcb, 0xb7,
		0xc3, 0x65, 0xdf, 0xa2, 0x19, 0x8e, 0x66, 0x38, 0x43, 0x75, 0x2f, 0xdd, 0x0c, 0x37, 0x3e, 0x78,
		0xee, 0x4d, 0x1c, 0x8d, 0x86, 0x06, 0x6d, 0x31, 0x8b, 0x42, 0x48, 0x21, 0x5b, 0xa6, 0x62, 0xa4,
		0x90, 0x75, 0xf9, 0x8d, 0x7e, 0x0a, 0x39, 0x3f, 0xdf, 0x02, 0x91, 0xd6, 0xb9, 0x2c, 0x3a, 0x64,
		0x08, 0xb3, 0x1e, 0x58, 0x98, 0xd5, 0xb8, 0x43, 0x66, 0x79, 0x9a, 0x93, 0x58, 0xa3, 0x4c, 0xd9,
		0x21, 0x51, 0x45, 0x14, 0x94, 0x06, 0x93, 0xca, 0x15, 0xd8, 0x9a, 0x22, 0x5b, 0x53, 0x68, 0x7b,
		0x8a, 0x2d, 0x14, 0x67, 0xac, 0x5d, 0x83, 0xc9, 0xc5, 0xda, 0x30, 0x4d, 0x37, 0x50, 0xe1, 0x4d,
		0xfa, 0x51, 0x72, 0xa8, 0xed, 0x4b, 0x01, 0x59, 0xaf, 0x26, 0x6f, 0x75, 0x68, 0x5d, 0x27, 0x2d,
		0xda, 0x17, 0x64, 0x74, 0x67, 0x79, 0xcb, 0x6c, 0x76, 0x9d, 0x9c, 0x74, 0xd8, 0x33, 0x11, 0x6b,
		0x29, 0x27, 0x65, 0x6b, 0x2d, 0x27, 0x06, 0x2c, 0x7c, 0xa0, 0x92, 0xd4, 0x0f, 0xb3, 0x60, 0xa3,
		0x1b, 0xf8, 0x89, 0x20, 0x3d, 0x5b, 0x93, 0x0c, 0x43, 0x83, 0xa1, 0xc1, 0xd0, 0x6a, 0xca, 0xd0,
		0xbe, 0x5f, 0xd1, 0x56, 0x48, 0x1a, 0x24, 0x0d, 0x92, 0x66, 0xba, 0x65, 0xc7, 0x6d, 0xf6, 0x0c,
		0x92, 0x66, 0x4e, 0xd2, 0xfc, 0x44, 0xf6, 0xd2, 0xa7, 0x99, 0x40, 0x28, 0x19, 0x94, 0x0c, 0x4a,
		0x56, 0x53, 0x4a, 0xb6, 0x3f, 0xb7, 0x3e, 0x19, 0x98, 0xbe, 0x79, 0xea, 0xcd, 0xa4, 0x67, 0x62,
		0x5d, 0xab, 0x97, 0xc4, 0x62, 0x06, 0x31, 0x83, 0x98, 0xc1, 0x9a, 0x9a, 0xc1, 0xd7, 0x82, 0xaa,
		0xea, 0x30, 0xa3, 0x4a, 0xc0, 0xab, 0x61, 0xd8, 0xd1, 0xce, 0x39, 0xa2, 0x9d, 0xf6, 0x59, 0xe7,
		0xec, 0xe4, 0xb4, 0x7d, 0xd6, 0x65, 0xef, 0x70, 0x48, 0x8d, 0x59, 0x59, 0x14, 0x2a, 0xf7, 0x63,
		0x34, 0x94, 0xe3, 0x63, 0x33, 0x81, 0x30, 0x31, 0x98, 0x18, 0x4c, 0x0c, 0x87, 0xd4, 0xb2, 0xe9,
		0xab, 0xb4, 0x7e, 0x6e, 0x7a, 0xa1, 0xac, 0x84, 0xcb, 0x69, 0x76, 0xa7, 0xec, 0x22, 0x3b, 0x34,
		0xbb, 0x5b, 0x76, 0x91, 0xb4, 0x88, 0xdf, 0x31, 0x9b, 0x0b, 0x37, 0xba, 0x6b, 0xd6, 0x74, 0xd7,
		0xea, 0x39, 0x59, 0x71, 0x7c, 0x88, 0x8e, 0x16, 0x4a, 0xf7, 0x8f, 0x8c, 0x4b, 0x93, 0x1d, 0xc1,
		0xce, 0x9d, 0xb1, 0xab, 0x96, 0xfd, 0xed, 0x3f, 0xb3, 0x97, 0x9b, 0x7f, 0x64, 0xc6, 0xa2, 0xfd,
		0xa3, 0xb0, 0xc5, 0x46, 0xbb, 0x95, 0x7d, 0x6f, 0x70, 0x6b, 0x0c, 0x9d, 0x31, 0x55, 0xf3, 0x45,
		0x3a, 0x63, 0x8a, 0x7e, 0x91, 0x5b, 0x63, 0xc4, 0x9c, 0x33, 0x7a, 0x62, 0x6a, 0xe3, 0x74, 0x71,
		0x6b, 0x0c, 0xb7, 0xc6, 0x10, 0x0e, 0x22, 0x1c, 0x44, 0x38, 0xa8, 0xaa, 0x70, 0x10, 0xb7, 0xc6,
		0x94, 0x8c, 0xb9, 0x90, 0x91, 0x9b, 0x9f, 0x21, 0x6e, 0x8d, 0xe1, 0xd6, 0x18, 0x31, 0xdb, 0x28,
		0x27, 0x85, 0x5b, 0x63, 0xb6, 0x1c, 0xd0, 0xaa, 0xdd, 0x9d, 0x31, 0x59, 0x6c, 0x8b, 0x1b, 0x63,
		0x2a, 0xdc, 0xfc, 0x6d, 0x07, 0x32, 0xb9, 0x2d, 0x86, 0x80, 0x26, 0x01, 0xcd, 0x1d, 0x0a, 0x68,
		0x72, 0x5b, 0x0c, 0xc1, 0x4d, 0x82, 0x9b, 0x72, 0xf4, 0x90, 0xb9, 0xea, 0x96, 0xc2, 0x0a, 0xcc,
		0x55, 0xaf, 0x8b, 0xdf, 0xc9, 0x5c, 0xf5, 0x7a, 0x6d, 0x07, 0xb7, 0xc5, 0xac, 0xb3, 0x1a, 0x6e,
		0x8b, 0x81, 0xd5, 0xc0, 0x6a, 0x60, 0x35, 0xb0, 0x1a, 0x58, 0x0d, 0xac, 0x06, 0x56, 0x53, 0x3f,
		0x56, 0xc3, 0x6d, 0x31, 0x05, 0x2c, 0x3d, 0xb7, 0xc5, 0x70, 0x5b, 0x8c, 0x2d, 0xdd, 0xdd, 0x87,
		0x9c, 0x4f, 0x3d, 0xee, 0x8a, 0x99, 0x64, 0x7e, 0xb8, 0x29, 0x46, 0x77, 0x1f, 0xb7, 0x70, 0x4f,
		0xcc, 0x78, 0xcb, 0xaa, 0xbc, 0x25, 0x66, 0xd8, 0xbe, 0x1d, 0xba, 0x0b, 0xbf, 0xbb, 0xfc, 0x8d,
		0x31, 0x6b, 0x12, 0xb8, 0x3d, 0x86, 0xdb, 0x63, 0x0c, 0x4d, 0x40, 0xe9, 0xdb, 0x63, 0x48, 0x2a,
		0x57, 0x1f, 0x2d, 0x22, 0xa9, 0xbc, 0x2d, 0x2f, 0x82, 0xa4, 0x32, 0xe1, 0x57, 0xc2, 0xaf, 0x84,
		0x5f, 0x09, 0xbf, 0x12, 0x7e, 0x25, 0xfc, 0x4a, 0xf8, 0x75, 0x9f, 0xc2, 0xaf, 0x24, 0x95, 0x61,
		0x35, 0xb0, 0x1a, 0x58, 0x0d, 0xac, 0x06, 0x56, 0x03, 0xab, 0x81, 0xd5, 0xec, 0x07, 0xab, 0x21,
		0xa9, 0x5c, 0xc0, 0xd2, 0x93, 0x54, 0x26, 0xa9, 0x6c, 0x4b, 0x77, 0x77, 0x3b, 0xa9, 0xbc, 0x9a,
		0x63, 0xab, 0x4b, 0x82, 0xf9, 0x4d, 0xfb, 0xf5, 0x70, 0xe1, 0x5f, 0x49, 0x35, 0x8b, 0xec, 0xee,
		0x16, 0xd2, 0xce, 0xcb, 0x1b, 0x59, 0x6d, 0x02, 0xda, 0x38, 0xff, 0x4c, 0xfa, 0xd9, 0x08, 0xd7,
		0x48, 0x3f, 0xaf, 0xbe, 0x0e, 0xe9, 0x67, 0x9b, 0xf1, 0x25, 0xd2, 0xcf, 0xd6, 0xe3, 0x46, 0xa4,
		0x9f, 0x09, 0xd4, 0x12, 0xa8, 0x25, 0x50, 0x4b, 0xa0, 0x96, 0x40, 0x2d, 0x81, 0x5a, 0x02, 0xb5,
		0x04, 0x6a, 0xed, 0x1d, 0x37, 0xd2, 0xcf, 0xb0, 0x1a, 0x58, 0x0d, 0xac, 0x06, 0x56, 0x03, 0xab,
		0x81, 0xd5, 0xc0, 0x6a, 0xea, 0xc8, 0x6a, 0x48, 0x3f, 0x17, 0xb0, 0xf4, 0xa4, 0x9f, 0x49, 0x3f,
		0xdb, 0xd2, 0xdd, 0x5d, 0x4f, 0x3f, 0xd7, 0x34, 0xfb, 0xfc, 0x86, 0xe4, 0xb3, 0xf0, 0xde, 0x6e,
		0x25, 0xf7, 0xfc, 0x66, 0x4b, 0xa9, 0xe7, 0x7e, 0x5f, 0x23, 0xdd, 0xdc, 0xef, 0x93, 0x62, 0x26,
		0xc5, 0x6c, 0xaa, 0xfc, 0xa4, 0x98, 0x6d, 0xc6, 0x90, 0x48, 0x31, 0x5b, 0x8f, 0x0d, 0x91, 0x62,
		0x26, 0x18, 0x4b, 0x30, 0x96, 0x60, 0x2c, 0xc1, 0x58, 0x82, 0xb1, 0x04, 0x63, 0x09, 0xc6, 0x12,
		0x8c, 0xb5, 0x77, 0xdc, 0x48, 0x31, 0xc3, 0x6a, 0x60, 0x35, 0xb0, 0x1a, 0x58, 0x0d, 0xac, 0x06,
		0x56, 0x03, 0xab, 0xa9, 0x23, 0xab, 0x21, 0xc5, 0x5c, 0xc0, 0xd2, 0x93, 0x62, 0x26, 0xc5, 0x6c,
		0x4b, 0x77, 0x77, 0x3c, 0xc5, 0xdc, 0xef, 0xd7, 0x26, 0xad, 0xdc, 0xef, 0x93, 0x4c, 0xd6, 0xde,
		0xc5, 0x6d, 0x24, 0x90, 0xfb, 0x7d, 0xb1, 0xb4, 0xf1, 0x33, 0x83, 0xcd, 0x28, 0xbb, 0x09, 0xb2,
		0x8b, 0x5f, 0x60, 0xe1, 0x85, 0x16, 0xfc, 0xf1, 0xc5, 0x7e, 0x78, 0x09, 0x1f, 0x59, 0xbe, 0xc6,
		0x95, 0xd7, 0xff, 0x2d, 0xba, 0xbe, 0x76, 0xb3, 0xdb, 0x92, 0x9f, 0x5c, 0xbd, 0x1c, 0x50, 0x97,
		0xbf, 0xf6, 0xc4, 0xf6, 0x14, 0x4b, 0x60, 0x16, 0x8e, 0x4c, 0x94, 0x89, 0x40, 0x68, 0x46, 0x1a,
		0xca, 0x02, 0xb9, 0x76, 0xe4, 0x40, 0x1b, 0x96, 0xf5, 0x23, 0x01, 0x66, 0xaa, 0x56, 0x34, 0x41,
		0xd8, 0xb8, 0xf6, 0x43, 0x2f, 0x70, 0xfd, 0x30, 0x55, 0xf1, 0x27, 0x4f, 0x63, 0xbc, 0xc0, 0xca,
		0xf7, 0x8b, 0xa6, 0xf7, 0xd5, 0xb5, 0x37, 0x0a, 0xd2, 0x52, 0x5c, 0xb3, 0x71, 0xdc, 0x6c, 0x16,
		0xb3, 0x63, 0x97, 0xe5, 0x0a, 0x50, 0x9a, 0x14, 0xa0, 0x50, 0x80, 0x62, 0x1c, 0xbe, 0xd2, 0x0f,
		0x57, 0x69, 0x84, 0xa7, 0x34, 0xc3, 0x51, 0x1a, 0x34, 0xd6, 0x24, 0xdc, 0x64, 0x1a, 0x5e, 0x12,
		0x8b, 0x5f, 0x98, 0xc7, 0x2b, 0x74, 0xb2, 0x12, 0x26, 0xe1, 0xa1, 0x79, 0x38, 0xa8, 0xb9, 0x07,
		0x8b, 0x67, 0xc9, 0x45, 0xb8, 0xac, 0xb0, 0x18, 0xd2, 0x0f, 0xfd, 0xd4, 0x37, 0x42, 0xca, 0x35,
		0x09, 0x56, 0xb1, 0x12, 0xa4, 0x04, 0x29, 0x41, 0x4a, 0x90, 0x12, 0xa4, 0x04, 0x29, 0x05, 0x91,
		0x72, 0xc7, 0xe2, 0x3f, 0x65, 0xe2, 0x1f, 0xc6, 0x11, 0xa0, 0xef, 0x26, 0x0f, 0x7b, 0x97, 0x3d,
		0xcb, 0x4a, 0x0c, 0x28, 0x1c, 0x7c, 0xf6, 0x07, 0xe9, 0x47, 0xd7, 0xeb, 0xf7, 0xa3, 0x51, 0x98,
		0xfa, 0xe1, 0x4d, 0x99, 0x50, 0xd0, 0x86, 0x6f, 0x13, 0x11, 0x22, 0x22, 0xb4, 0xfa, 0x07, 0xa7,
		0xc7, 0xc3, 0xbd, 0x0e, 0xa2, 0x68, 0xe0, 0x87, 0x37, 0x6e, 0xfa, 0x31, 0x56, 0xc9, 0xc7, 0x28,
		0x18, 0x94, 0xe7, 0xbc, 0x8f, 0xc8, 0xa2, 0x49, 0x08, 0xe6, 0x69, 0xc8, 0x3c, 0x4b, 0x37, 0x09,
		0x0d, 0xa2, 0xcf, 0xa1, 0xc6, 0x71, 0x5e, 0xdb, 0xf8, 0x15, 0x39, 0x65, 0x9b, 0x37, 0x34, 0x1c,
		0xba, 0xfc, 0xcb, 0xad, 0x66, 0xb9, 0x84, 0xdb, 0xa5, 0x5e, 0x17, 0x53, 0x93, 0x2e, 0xa6, 0xca,
		0xf4, 0x52, 0x4c, 0x3f, 0xe5, 0xf4, 0x54, 0x93, 0x8f, 0x96, 0xdc, 0x7b, 0xed, 0x12, 0xc1, 0x7c,
		0xe7, 0xc7, 0x54, 0xcc, 0x1d, 0xaa, 0xb8, 0xaf, 0xc2, 0x54, 0x3f, 0x31, 0xae, 0x5f, 0x1e, 0x68,
		0x58, 0x16, 0x68, 0x50, 0x32, 0x23, 0x51, 0x06, 0x28, 0x55, 0xfe, 0x27, 0x5e, 0x67, 0x26, 0x57,
		0x5f, 0x66, 0x50, 0xe6, 0x27, 0x52, 0xde, 0x97, 0x2f, 0x71, 0xab, 0xb9, 0xc7, 0x8b, 0x5c, 0xcf,
		0x82, 0x9f, 0x67, 0x16, 0x0e, 0x49, 0x63, 0x34, 0x94, 0x20, 0x10, 0x4b, 0x52, 0xa0, 0x0f, 0xd0,
		0x07, 0xe8, 0x03, 0xf4, 0x01, 0xfa, 0x00, 0x7d, 0x80, 0x3e, 0xec, 0x20, 0x7d, 0xd8, 0x93, 0x4a,
		0xd5, 0x4d, 0x11, 0xe2, 0x23, 0xe3, 0x08, 0x9e, 0x63, 0x1e, 0x56, 0x9f, 0xbe, 0xd6, 0x45, 0xfe,
		0x56, 0x1f, 0xa6, 0x1f, 0x7f, 0x9c, 0xbe, 0xd4, 0xbb, 0xfc, 0x9d, 0x2a, 0xac, 0x08, 0xf0, 0x06,
		0xff, 0x3d, 0x4a, 0xd2, 0x31, 0x4e, 0xba, 0xd7, 0x5e, 0x3f, 0x8d, 0x62, 0x8d, 0xf0, 0xe8, 0x9a,
		0x08, 0x9b, 0x35, 0x01, 0x2d, 0xea, 0xe7, 0x88, 0xcd, 0x56, 0x65, 0xc6, 0xa8, 0x0a, 0x30, 0x27,
		0x5a, 0x54, 0x05, 0x98, 0x2f, 0x5d, 0x9b, 0xaa, 0x00, 0x43, 0x42, 0x24, 0x84, 0x96, 0xc3, 0x61,
		0xe0, 0xf7, 0xcb, 0xf1, 0x9a, 0x39, 0x4e, 0x2e, 0x7c, 0x99, 0xbc, 0x21, 0xd8, 0x64, 0x88, 0x4d,
		0xa5, 0xf3, 0x86, 0x0b, 0xe7, 0xcf, 0x55, 0xe1, 0x75, 0x14, 0xf7, 0x95, 0x41, 0xf0, 0x6f, 0xa3,
		0xb4, 0x2a, 0x83, 0x80, 0x99, 0x15, 0x22, 0x0e, 0x48, 0x1c, 0x90, 0x38, 0xe0, 0xb4, 0x36, 0x2a,
		0x8a, 0x02, 0xe5, 0x85, 0x06, 0xc1, 0xbf, 0x56, 0xab, 0x06, 0xb9, 0x89, 0x45, 0xc3, 0x52, 0xba,
		0x4e, 0xfd, 0x51, 0x33, 0x55, 0xb2, 0x66, 0x5d, 0xc6, 0x4c, 0xb5, 0x5e, 0x92, 0xac, 0xc0, 0x48,
		0x61, 0xa4, 0x4c, 0xc7, 0x20, 0x91, 0xa0, 0x38, 0x26, 0x43, 0x21, 0xed, 0x60, 0xaf, 0xad, 0x71,
		0xeb, 0x25, 0x29, 0x0a, 0xe3, 0x6f, 0x91, 0xa2, 0xd0, 0x49, 0x51, 0x94, 0x8e, 0x0e, 0x38, 0x56,
		0x72, 0x12, 0x0b, 0xaf, 0x51, 0x61, 0x60, 0xa5, 0x1f, 0x05, 0x81, 0xca, 0xd4, 0xc6, 0x4d, 0xef,
		0x86, 0xca, 0x8d, 0x93, 0x4f, 0x43, 0x37, 0x55, 0xe5, 0x83, 0x2c, 0x0f, 0x09, 0xb2, 0x99, 0x92,
		0x28, 0xe1, 0x89, 0x92, 0x94, 0x20, 0xf0, 0x63, 0x6a, 0xb8, 0xf4, 0x93, 0x12, 0xe5, 0x3d, 0xc4,
		0x92, 0x9e, 0xa1, 0x8c, 0x31, 0x50, 0x61, 0xa9, 0x01, 0x70, 0xf9, 0xcf, 0x9b, 0x7e, 0x0f, 0x15,
		0x43, 0xc5, 0xb6, 0xa6, 0x62, 0xea, 0x76, 0x98, 0xde, 0xe9, 0x28, 0xd8, 0x71, 0x85, 0x0a, 0x96,
		0x78, 0xb7, 0xc3, 0xc0, 0x0f, 0x6f, 0x0c, 0xe6, 0x00, 0xac, 0x8b, 0xb0, 0x89, 0xb0, 0x27, 0xe4,
		0xfc, 0xd1, 0xfd, 0xda, 0xeb, 0x3e, 0x39, 0xff, 0x75, 0x7f, 0x9a, 0xa4, 0xbf, 0xf6, 0xda, 0x31,
		0x0a, 0xc0, 0x34, 0xc4, 0xb0, 0x8f, 0xa3, 0x00, 0x4a, 0xf7, 0xbf, 0xdb, 0x08, 0x13, 0x58, 0x19,
		0x0c, 0x70, 0x3d, 0x70, 0xa3, 0x4f, 0x2a, 0x76, 0x83, 0x64, 0x58, 0x62, 0x20, 0xc0, 0xe2, 0xb7,
		0x18, 0x04, 0xc0, 0x20, 0x80, 0xd5, 0x3f, 0xf8, 0x51, 0x79, 0x1a, 0x2d, 0xff, 0xd9, 0xb7, 0x28,
		0xd2, 0x81, 0x4c, 0x1a, 0x92, 0x49, 0xbd, 0xe6, 0xfe, 0x09, 0x7a, 0x1b, 0x76, 0xf6, 0x4f, 0x85,
		0x90, 0x4d, 0xb6, 0x74, 0xd8, 0xc5, 0x0e, 0xbd, 0xd8, 0xe1, 0x97, 0x53, 0x02, 0x4d, 0xfa, 0xb6,
		0x9d, 0xd6, 0xb7, 0x54, 0xb9, 0x63, 0x16, 0x90, 0xa8, 0x24, 0xf1, 0xa3, 0xd0, 0xd5, 0x3f, 0xfc,
		0x4b, 0xd6, 0xbc, 0xa3, 0xf1, 0xdd, 0x1f, 0xc2, 0xd1, 0xad, 0xfe, 0x39, 0x7a, 0x17, 0xbd, 0x4d,
		0xe3, 0x22, 0xd3, 0x90, 0x1e, 0x95, 0xd2, 0x1a, 0xaf, 0x4b, 0xac, 0xdc, 0x44, 0xa5, 0xa3, 0x61,
		0xa3, 0xd2, 0x0b, 0x97, 0xde, 0x45, 0x3f, 0x65, 0x67, 0xce, 0xe0, 0xed, 0xf3, 0x17, 0x3f, 0x77,
		0x5a, 0xf5, 0xbc, 0xd4, 0xc4, 0x4a, 0xcd, 0x53, 0xac, 0xa2, 0x61, 0x9a, 0xcd, 0xf7, 0x8a, 0x46,
		0xa9, 0xbe, 0xdd, 0x5f, 0x16, 0x83, 0xe5, 0xc7, 0xf2, 0x53, 0x47, 0x24, 0x10, 0x73, 0x33, 0x8c,
		0xbd, 0xe9, 0xc7, 0xe0, 0x44, 0x62, 0x71, 0xeb, 0x31, 0xb9, 0x36, 0x85, 0x44, 0xd2, 0x41, 0xbb,
		0xb5, 0x45, 0xee, 0xb4, 0xcf, 0x3a, 0x67, 0x27, 0xa7, 0xed, 0xb3, 0x2e, 0xe5, 0x44, 0x86, 0xdf,
		0xa2, 0x9c, 0xe8, 0x89, 0x98, 0xe0, 0x42, 0x08, 0xec, 0xa8, 0x44, 0xe0, 0xc2, 0x3c, 0x30, 0x78,
		0x3d, 0xf8, 0xe5, 0x93, 0x8a, 0x5f, 0x25, 0xc3, 0x0f, 0xff, 0x18, 0x3f, 0xb6, 0xc2, 0x0c, 0x66,
		0xea, 0xf9, 0x1a, 0x49, 0xcb, 0xec, 0x5b, 0x44, 0x75, 0x88, 0xea, 0x54, 0x1d, 0xd5, 0xb9, 0xf5,
		0x43, 0xff, 0x76, 0x74, 0x2b, 0xd0, 0xcf, 0xb0, 0x26, 0x09, 0x96, 0x0f, 0xcb, 0x87, 0xe5, 0xc3,
		0xf2, 0x57, 0x09, 0x68, 0x17, 0x92, 0x6f, 0x9d, 0xe4, 0x1f, 0x37, 0x9b, 0xb4, 0x0b, 0xd4, 0x97,
		0xdf, 0x97, 0xa0, 0x46, 0xb7, 0xa3, 0x20, 0xf5, 0x87, 0x81, 0xaf, 0x62, 0x03, 0x68, 0x9e, 0xcb,
		0x00, 0x94, 0x01, 0x65, 0x40, 0x19, 0x50, 0x5e, 0x03, 0x0c, 0x30, 0xd9, 0x36, 0x26, 0xb7, 0x00,
		0x64, 0x02, 0x6e, 0x15, 0x06, 0xdc, 0x4a, 0xc4, 0x94, 0x24, 0x03, 0x6e, 0xef, 0xc6, 0x8f, 0x3d,
		0xd4, 0x22, 0xc8, 0xe2, 0x35, 0x7f, 0x82, 0x4b, 0x6e, 0xa3, 0xe6, 0x71, 0xe0, 0x27, 0xde, 0x55,
		0xa0, 0xdc, 0x2c, 0x71, 0xeb, 0xdf, 0xfa, 0xbf, 0x2b, 0xd7, 0xbb, 0xbe, 0xf6, 0x43, 0x3f, 0xbd,
		0x73, 0xaf, 0x3d, 0x3f, 0x18, 0xc5, 0xaa, 0x78, 0x29, 0x64, 0x11, 0x61, 0xc5, 0x2a, 0x24, 0x9b,
		0x54, 0x48, 0xca, 0x11, 0xc5, 0x6d, 0x55, 0x48, 0x16, 0x26, 0x7a, 0xa5, 0x7b, 0x97, 0x0a, 0xf6,
		0x2c, 0xe9, 0xa9, 0xc4, 0xa4, 0x89, 0xcf, 0x1d, 0x85, 0xea, 0x7f, 0x46, 0x5e, 0xe0, 0x06, 0x91,
		0x37, 0x70, 0xaf, 0xbc, 0xc0, 0x0b, 0xfb, 0xa5, 0x2e, 0x0a, 0x7b, 0x5c, 0x0c, 0x6a, 0x80, 0x1a,
		0xd4, 0x5b, 0x0d, 0xae, 0xbd, 0x24, 0x75, 0x63, 0x15, 0x47, 0xa3, 0xb4, 0x04, 0x04, 0x2c, 0x7d,
		0x8b, 0x6a, 0x78, 0xaa, 0xe1, 0x57, 0xff, 0x60, 0x76, 0x85, 0x64, 0xa2, 0x91, 0x39, 0x9d, 0x7c,
		0x8f, 0xdc, 0x29, 0xb9, 0x53, 0x43, 0xb7, 0xad, 0x74, 0xee, 0xf4, 0x63, 0x14, 0x8c, 0xa1, 0xbb,
		0xff, 0xdb, 0x68, 0xa8, 0x1f, 0x9b, 0x5d, 0x14, 0x42, 0x70, 0x96, 0xe0, 0x2c, 0xc1, 0x59, 0x82,
		0xb3, 0xab, 0x91, 0x43, 0x12, 0xa6, 0xd6, 0x83, 0xb3, 0x27, 0xcd, 0x0e, 0x03, 0xd6, 0x6a, 0x1c,
		0xa0, 0x2d, 0x41, 0x88, 0x86, 0x71, 0x74, 0x1b, 0x99, 0xb5, 0xa9, 0xcd, 0x45, 0x00, 0xc9, 0x40,
		0x32, 0x90, 0x0c, 0x24, 0x03, 0xc9, 0x40, 0x32, 0x90, 0x6c, 0xcf, 0xf9, 0xde, 0x5e, 0xce, 0x74,
		0x31, 0x32, 0x79, 0x54, 0x2a, 0x9a, 0xe4, 0x98, 0xa6, 0xf0, 0x7e, 0xf4, 0x92, 0xf4, 0xd7, 0xc9,
		0x93, 0x3f, 0xbc, 0x9b, 0x3c, 0xf9, 0x40, 0x13, 0xa7, 0x25, 0xc2, 0xc3, 0x92, 0xab, 0xde, 0xb0,
		0x12, 0x1f, 0x1f, 0x05, 0xa9, 0x1b, 0x79, 0xb7, 0x65, 0x82, 0xe3, 0xb3, 0xaf, 0x90, 0xfe, 0x21,
		0xfd, 0xf3, 0xe0, 0xca, 0xd7, 0x22, 0xfd, 0x73, 0x13, 0x7b, 0x7d, 0x75, 0x3d, 0x0a, 0xdc, 0x61,
		0xac, 0xc6, 0x2f, 0xe4, 0x47, 0xa1, 0x1b, 0x85, 0xee, 0x7c, 0xfc, 0x53, 0xac, 0x06, 0xa3, 0x62,
		0x53, 0x42, 0xf2, 0x1f, 0x56, 0x42, 0x26, 0x0a, 0x82, 0x82, 0xd4, 0x5b, 0x41, 0x3e, 0x7a, 0xf1,
		0xe0, 0xb3, 0x17, 0x2b, 0x37, 0x1a, 0xa5, 0x6e, 0x74, 0xed, 0xc6, 0x2a, 0x29, 0xb6, 0xc3, 0xf3,
		0x94, 0xc0, 0x43, 0x12, 0xc8, 0x9b, 0x92, 0x37, 0x5d, 0xfd, 0x83, 0x51, 0x14, 0xbb, 0x37, 0xb1,
		0x52, 0xa1, 0x9b, 0xa4, 0x9e, 0xce, 0x5c, 0xfa, 0x55, 0x01, 0x64, 0x52, 0xc9, 0xa4, 0x1a, 0x3a,
		0x73, 0xa5, 0x33, 0xa9, 0xe3, 0x33, 0xe8, 0xf5, 0xfb, 0x6a, 0x98, 0xba, 0x41, 0x32, 0x74, 0x6f,
		0xfd, 0x05, 0xf0, 0xd7, 0x8f, 0xe2, 0x3e, 0x2a, 0xb5, 0xca, 0x9b, 0xb6, 0xb8, 0x67, 0x8b, 0xa0,
		0x33, 0x41, 0x67, 0x82, 0xce, 0x04, 0x9d, 0x6b, 0x1f, 0x74, 0x66, 0x3a, 0x4e, 0xfd, 0x03, 0xcf,
		0xcf, 0xb5, 0x88, 0xc5, 0x64, 0x04, 0x5d, 0x91, 0x11, 0xce, 0x45, 0x08, 0xc5, 0x5c, 0x1a, 0x60,
		0x0d, 0x58, 0xef, 0x2d, 0x58, 0x97, 0xbd, 0x34, 0xa6, 0x64, 0x84, 0xa5, 0x42, 0x23, 0xf0, 0xc9,
		0xf3, 0x83, 0xac, 0xf1, 0x62, 0x1e, 0x55, 0x1c, 0xaa, 0xb8, 0xaf, 0xc2, 0xd4, 0xbb, 0x51, 0x86,
		0x26, 0xe1, 0x71, 0xd9, 0x95, 0xde, 0xe9, 0xdb, 0xc4, 0xd7, 0xc0, 0x7c, 0x61, 0xbe, 0xf0, 0x35,
		0xf0, 0x35, 0x6a, 0xef, 0x6b, 0xb4, 0xa8, 0x6e, 0xd9, 0x1b, 0x27, 0xe3, 0x56, 0xa5, 0xb1, 0xdf,
		0x1f, 0x1b, 0xd2, 0xa1, 0x0a, 0xbd, 0x20, 0xbd, 0x33, 0xa3, 0x14, 0xeb, 0xe2, 0x88, 0x57, 0xc2,
		0x21, 0xe0, 0x10, 0x70, 0x08, 0x38, 0x04, 0x1c, 0x82, 0x78, 0xe5, 0x3e, 0x53, 0x89, 0x30, 0x1a,
		0x28, 0x77, 0x18, 0x47, 0xe9, 0xf4, 0xb6, 0xf8, 0xe9, 0xf4, 0x14, 0x33, 0x42, 0xf1, 0x90, 0x50,
		0xa0, 0x1b, 0xe8, 0x26, 0x7a, 0x59, 0xf7, 0xe8, 0x65, 0xac, 0xfa, 0xd1, 0x27, 0x15, 0xdf, 0xb9,
		0x83, 0x51, 0xec, 0x99, 0xb5, 0xb6, 0x6d, 0x16, 0x87, 0x77, 0x81, 0x89, 0xc2, 0x44, 0xe1, 0x5d,
		0xe0, 0x5d, 0xe0, 0x5d, 0x2c, 0x47, 0x28, 0x5f, 0x12, 0xa3, 0xac, 0xad, 0x63, 0xb1, 0x27, 0x1d,
		0x78, 0x0f, 0xd5, 0xbb, 0x1f, 0xe9, 0x95, 0x26, 0x3b, 0xa6, 0x0d, 0x62, 0xff, 0x98, 0xbe, 0xcf,
		0x2f, 0xa3, 0xf4, 0x97, 0xeb, 0x5f, 0xa7, 0x2f, 0xf3, 0xe1, 0x97, 0x28, 0xfe, 0xcf, 0xf1, 0xbb,
		0xbc, 0xcd, 0x5e, 0xa5, 0xc2, 0x1b, 0x85, 0x26, 0x8c, 0x6d, 0x60, 0x52, 0xdf, 0x3d, 0xff, 0x3a,
		0xd5, 0xdd, 0x54, 0x77, 0x1b, 0x1a, 0x0a, 0xaa, 0xbb, 0xf1, 0x67, 0xf0, 0x67, 0xf0, 0x67, 0xf0,
		0x67, 0xf0, 0x67, 0x76, 0xcc, 0x9f, 0x21, 0x5b, 0x52, 0x7f, 0xa7, 0x86, 0xea, 0x6e, 0xc0, 0x1a,
		0xb0, 0xae, 0x04, 0xac, 0xa9, 0xee, 0x2e, 0x62, 0x12, 0xa8, 0xee, 0xc6, 0x7c, 0x61, 0xbe, 0xf0,
		0x35, 0xf0, 0x35, 0xf0, 0x35, 0x4a, 0x2c, 0x31, 0xd5, 0xdd, 0xfb, 0xe3, 0x64, 0x50, 0xdd, 0x0d,
		0x87, 0x80, 0x43, 0xc0, 0x21, 0xe0, 0x10, 0x70, 0x08, 0xe2, 0x95, 0x50, 0x09, 0x03, 0x2a, 0x41,
		0x75, 0x37, 0xd0, 0x0d, 0x74, 0xef, 0x77, 0xf4, 0xf2, 0x10, 0xea, 0xb2, 0xca, 0x96, 0x14, 0x39,
		0xd6, 0xaa, 0xb2, 0x7e, 0x55, 0x83, 0xad, 0xd4, 0x64, 0xdd, 0xa9, 0x20, 0x88, 0x3e, 0x9b, 0x94,
		0x65, 0x2d, 0x49, 0xa0, 0x32, 0x8b, 0xca, 0x2c, 0x43, 0x53, 0x41, 0x65, 0x16, 0x91, 0x0e, 0xe8,
		0x12, 0x74, 0x89, 0x48, 0x07, 0x91, 0x0e, 0x22, 0x1d, 0x44, 0x3a, 0xb6, 0x1b, 0xe9, 0xa0, 0x32,
		0x0b, 0xb0, 0x06, 0xac, 0xf7, 0x2d, 0xb6, 0x41, 0x65, 0xd6, 0xa6, 0x2f, 0x53, 0x99, 0x85, 0xf9,
		0xc2, 0x7c, 0xe1, 0x6b, 0xe0, 0x6b, 0xec, 0x80, 0xaf, 0x41, 0x65, 0xd6, 0xfe, 0x38, 0x19, 0x54,
		0x66, 0xc1, 0x21, 0xe0, 0x10, 0x70, 0x08, 0x38, 0x04, 0x1c, 0x82, 0x78, 0x25, 0x54, 0xc2, 0x80,
		0x4a, 0x50, 0x99, 0x05, 0x74, 0x03, 0xdd, 0x54, 0x66, 0xed, 0x7a, 0x65, 0x96, 0x46, 0x55, 0x91,
		0x63, 0xad, 0x38, 0xeb, 0xff, 0x64, 0x2f, 0x23, 0x5b, 0x9f, 0x65, 0x74, 0xb1, 0x72, 0xc9, 0x4d,
		0xb3, 0xb8, 0x59, 0x45, 0xee, 0xc7, 0x16, 0xdf, 0x93, 0x86, 0x85, 0x1b, 0xcf, 0x03, 0x3f, 0xfc,
		0xcd, 0xfd, 0x18, 0x05, 0x83, 0x41, 0xf4, 0x39, 0x74, 0x53, 0xff, 0x56, 0xc5, 0xc5, 0x2f, 0x3b,
		0xdf, 0xf4, 0xe5, 0xa7, 0xee, 0xc6, 0x2e, 0xe1, 0x63, 0x37, 0x5a, 0x4f, 0x38, 0xd5, 0x97, 0xc5,
		0x2e, 0x55, 0x6f, 0x72, 0xa9, 0xba, 0x1c, 0x32, 0x6e, 0xeb, 0x52, 0xf5, 0xc2, 0xc8, 0x56, 0xde,
		0x09, 0x2d, 0xe1, 0x74, 0x96, 0x74, 0x32, 0x4b, 0x00, 0x8b, 0x8e, 0x13, 0xa9, 0xeb, 0x34, 0x1a,
		0x3b, 0x2e, 0xfa, 0x8e, 0x4a, 0x19, 0x62, 0xaf, 0xe3, 0xf4, 0xe5, 0x4b, 0x72, 0xdc, 0xdc, 0xa1,
		0x45, 0x11, 0x42, 0xd7, 0x4b, 0x1b, 0x00, 0x11, 0xdd, 0xb8, 0x5e, 0x10, 0x94, 0x00, 0x85, 0xe9,
		0x17, 0xb0, 0xcd, 0xd8, 0x66, 0x63, 0x2f, 0xa3, 0xa0, 0x57, 0xa1, 0x7f, 0xb4, 0xaf, 0xe3, 0x78,
		0xc1, 0xc5, 0x2f, 0x77, 0xca, 0x57, 0xbe, 0xcb, 0x81, 0xe7, 0xc0, 0x3f, 0xb8, 0xf2, 0xaf, 0xa7,
		0x2f, 0x57, 0xfa, 0xdc, 0x2c, 0x69, 0x41, 0xa7, 0xc0, 0x9f, 0xfd, 0x21, 0x1c, 0xdd, 0x16, 0xdf,
		0xb2, 0x77, 0xd1, 0xdb, 0x34, 0xf6, 0xc3, 0x9b, 0x72, 0x5e, 0x70, 0x6b, 0xfc, 0x93, 0xc6, 0x3f,
		0x63, 0x8c, 0x98, 0x9f, 0x94, 0x3b, 0x8c, 0xfd, 0x5b, 0x2f, 0x2e, 0x13, 0x36, 0x68, 0xb4, 0xbb,
		0x27, 0x63, 0x21, 0x57, 0x5e, 0xff, 0xb7, 0x51, 0x99, 0x82, 0xc0, 0x46, 0xb7, 0xd5, 0x9e, 0x3d,
		0x3d, 0x56, 0xde, 0xe0, 0x4e, 0xe7, 0xe1, 0xdd, 0xd6, 0xf1, 0xe4, 0x90, 0x96, 0xfe, 0xe6, 0xe9,
		0xc9, 0xd9, 0xf8, 0x9b, 0x63, 0x80, 0x13, 0x8d, 0x47, 0xbc, 0x8b, 0x7e, 0xca, 0x4e, 0x71, 0x89,
		0x4d, 0x98, 0xa0, 0xf2, 0xe9, 0xc9, 0x59, 0x89, 0xd7, 0x9f, 0x2e, 0xf7, 0xb9, 0xd3, 0xee, 0x9e,
		0x94, 0xf8, 0xda, 0x86, 0xad, 0x2e, 0xdc, 0xc6, 0x94, 0x0b, 0x58, 0xde, 0xad, 0x73, 0xa7, 0xdb,
		0x6a, 0x97, 0x90, 0xb0, 0xf8, 0xbd, 0xe3, 0x6a, 0xa2, 0x11, 0xda, 0xa0, 0xf2, 0x51, 0x79, 0x83,
		0x72, 0x50, 0x92, 0x7d, 0x03, 0x00, 0x01, 0x40, 0xea, 0xcf, 0x98, 0xfc, 0x24, 0x19, 0x65, 0x01,
		0xca, 0x51, 0x52, 0xee, 0x8c, 0x2f, 0x7e, 0x91, 0xa3, 0xce, 0x51, 0xaf, 0xff, 0x51, 0xbf, 0xf5,
		0x4b, 0x9a, 0xf1, 0xf1, 0x17, 0x38, 0xda, 0x1c, 0xed, 0xfa, 0x1f, 0xed, 0x30, 0x89, 0xb5, 0x8c,
		0xf8, 0xc2, 0xf7, 0x38, 0xe8, 0x1c, 0xf4, 0xfa, 0x1f, 0xf4, 0x61, 0xac, 0xc6, 0xef, 0x52, 0x3a,
		0xb8, 0xb3, 0xf0, 0x3d, 0x0e, 0x3a, 0x07, 0xbd, 0xfe, 0x07, 0x3d, 0xf5, 0xfc, 0x92, 0x51, 0xfa,
		0xec, 0x1b, 0x1c, 0x6e, 0x0e, 0x77, 0xdd, 0x0f, 0x77, 0x94, 0x28, 0x77, 0xe8, 0xa5, 0x1f, 0xdd,
		0x58, 0xa5, 0xf1, 0x9d, 0x3b, 0x54, 0xb1, 0x1f, 0x95, 0x62, 0xe6, 0x9b, 0x05, 0x88, 0x96, 0x2a,
		0xb4, 0xa9, 0x55, 0x40, 0xd1, 0xb4, 0x15, 0xed, 0x80, 0x6a, 0x15, 0x8e, 0x29, 0x56, 0x58, 0x5b,
		0x93, 0x13, 0x8a, 0x15, 0x64, 0xa0, 0x22, 0x19, 0xae, 0x55, 0xea, 0x15, 0x87, 0x89, 0x0d, 0x5f,
		0x2e, 0x66, 0xb4, 0x5b, 0x18, 0xed, 0xdd, 0x37, 0xda, 0x45, 0x07, 0xb0, 0x4d, 0xce, 0xc9, 0xca,
		0xed, 0xb6, 0xa5, 0x47, 0x08, 0x6e, 0x12, 0xc2, 0x14, 0x41, 0xa6, 0x08, 0x9a, 0x21, 0x11, 0x53,
		0x04, 0x57, 0xbe, 0x4c, 0x57, 0xae, 0x90, 0x8a, 0x9a, 0xaa, 0xaa, 0x98, 0xca, 0x8a, 0xa9, 0xae,
		0x9c, 0x0a, 0x97, 0x53, 0x65, 0x0d, 0x72, 0xe9, 0xd0, 0x95, 0x5b, 0x7e, 0x5b, 0xe9, 0xca, 0xb5,
		0x71, 0x0c, 0x8d, 0x7d, 0x9e, 0x07, 0x97, 0x98, 0xae, 0x5c, 0xb1, 0x6f, 0x31, 0x45, 0x10, 0xb0,
		0x06, 0xac, 0x77, 0x1b, 0xac, 0x99, 0x22, 0x58, 0xc4, 0x24, 0x30, 0x45, 0x10, 0xf3, 0x85, 0xf9,
		0xc2, 0xd7, 0xc0, 0xd7, 0xc0, 0xd7, 0x28, 0xb1, 0xc4, 0x4c, 0x11, 0xdc, 0x1f, 0x27, 0x83, 0x29,
		0x82, 0x70, 0x08, 0x38, 0x04, 0x1c, 0x02, 0x0e, 0x01, 0x87, 0x20, 0x5e, 0x09, 0x95, 0x30, 0xa0,
		0x12, 0xb1, 0xea, 0x47, 0x9f, 0x54, 0x7c, 0xe7, 0x0e, 0x46, 0x71, 0xf9, 0xd9, 0x60, 0x6b, 0x54,
		0x62, 0x5d, 0x1c, 0x54, 0x02, 0x2a, 0x01, 0x95, 0x80, 0x4a, 0x40, 0x25, 0xa0, 0x12, 0xcb, 0xe1,
		0x88, 0x97, 0x04, 0x24, 0x6a, 0xcb, 0x22, 0xf6, 0x64, 0xf0, 0xe8, 0x86, 0xfa, 0xd6, 0x23, 0xfd,
		0x32, 0x44, 0xc7, 0x74, 0xc4, 0xe5, 0xab, 0x64, 0xb8, 0x3c, 0x71, 0x74, 0xfc, 0x1f, 0xa2, 0xf8,
		0x3f, 0xc7, 0x6f, 0x52, 0xf9, 0x9d, 0xd0, 0xb3, 0x75, 0x98, 0xdf, 0x8c, 0xad, 0x5d, 0xd1, 0x59,
		0xf6, 0x72, 0x6d, 0xea, 0x39, 0xe5, 0x18, 0x12, 0xf5, 0x9c, 0x5e, 0x10, 0xb8, 0x69, 0xec, 0x85,
		0x89, 0x3f, 0x29, 0xbd, 0x4c, 0x3f, 0xc6, 0x2a, 0xf9, 0x18, 0x05, 0x03, 0x7d, 0x57, 0xe6, 0x61,
		0x91, 0xb8, 0x0c, 0xb8, 0x0c, 0xb8, 0x0c, 0xb8, 0x0c, 0xb8, 0x0c, 0x44, 0x1f, 0xf1, 0x1b, 0x4c,
		0xa3, 0x8f, 0xb4, 0x61, 0x10, 0x8b, 0x84, 0x58, 0x40, 0x2c, 0x20, 0x16, 0x10, 0x0b, 0x88, 0x05,
		0xc4, 0x42, 0x9a, 0x58, 0xd0, 0x86, 0x01, 0x58, 0x03, 0xd6, 0x25, 0x77, 0x9e, 0x36, 0x8c, 0x22,
		0x26, 0x81, 0x36, 0x0c, 0xcc, 0x17, 0xe6, 0x0b, 0x5f, 0x03, 0x5f, 0x03, 0x5f, 0xa3, 0xc4, 0x12,
		0xd3, 0x86, 0xb1, 0x3f, 0x4e, 0x06, 0x6d, 0x18, 0x70, 0x08, 0x38, 0x04, 0x1c, 0x02, 0x0e, 0x01,
		0x87, 0x20, 0x5e, 0x09, 0x95, 0xd0, 0xa4, 0x12, 0xa3, 0x70, 0x7a, 0x33, 0x9e, 0x1a, 0x48, 0xd7,
		0x31, 0x3d, 0x2d, 0x1a, 0x18, 0x07, 0xc6, 0x81, 0x71, 0x60, 0x1c, 0x18, 0x07, 0xc6, 0x81, 0x71,
		0xbd, 0x3f, 0xb9, 0xdb, 0x7d, 0x10, 0x65, 0x8b, 0xf7, 0x1d, 0x4b, 0x5d, 0x10, 0xbf, 0xaa, 0xc1,
		0xd6, 0x7a, 0x20, 0xee, 0x54, 0x10, 0x44, 0x9f, 0x4d, 0xdb, 0x20, 0x96, 0xa4, 0xd0, 0x09, 0x41,
		0x27, 0x84, 0xa1, 0xbd, 0xa0, 0x13, 0x02, 0xcf, 0x01, 0xcf, 0x01, 0xcf, 0x01, 0xcf, 0x01, 0xcf,
		0x01, 0xcf, 0x61, 0x7f, 0x03, 0x80, 0x74, 0x42, 0x2c, 0xed, 0x08, 0xc4, 0x02, 0x62, 0x01, 0xb1,
		0x80, 0x58, 0x40, 0x2c, 0x20, 0x16, 0x10, 0x0b, 0x21, 0x62, 0x41, 0x27, 0x04, 0x60, 0x0d, 0x58,
		0x97, 0xdc, 0x79, 0x3a, 0x21, 0x8a, 0x98, 0x04, 0x3a, 0x21, 0x30, 0x5f, 0x98, 0x2f, 0x7c, 0x0d,
		0x7c, 0x0d, 0x7c, 0x8d, 0x12, 0x4b, 0x4c, 0x27, 0xc4, 0xfe, 0x38, 0x19, 0x74, 0x42, 0xc0, 0x21,
		0xe0, 0x10, 0x70, 0x08, 0x38, 0x04, 0x1c, 0x82, 0x78, 0x25, 0x54, 0x42, 0x93, 0x4a, 0xd0, 0x09,
		0x01, 0x8c, 0x03, 0xe3, 0xc0, 0x38, 0x30, 0x0e, 0x8c, 0x03, 0xe3, 0x74, 0x42, 0xac, 0x7d, 0xcf,
		0x6e, 0x27, 0x84, 0x46, 0xfd, 0xbe, 0x63, 0xa9, 0x19, 0xe2, 0xff, 0x64, 0xaf, 0x22, 0xdb, 0x0f,
		0xf1, 0xcc, 0x60, 0xe7, 0xca, 0xee, 0x98, 0x9d, 0x9d, 0x2a, 0xb0, 0x29, 0xa2, 0x9b, 0xf1, 0xf8,
		0xd2, 0x3f, 0xbc, 0xa0, 0x8f, 0x2c, 0x66, 0xe3, 0xd6, 0xfb, 0xe2, 0xdf, 0x8e, 0x6e, 0xdd, 0x74,
		0x14, 0x86, 0x2a, 0x48, 0x9e, 0x5c, 0xcd, 0x39, 0x79, 0x5b, 0xf9, 0xe2, 0x13, 0x1b, 0x56, 0x26,
		0x04, 0xd6, 0xe8, 0x34, 0xcf, 0x4e, 0x1e, 0xff, 0xb1, 0x4f, 0x44, 0xb9, 0x0a, 0xd2, 0xe1, 0xc2,
		0xf4, 0xb7, 0x0c, 0xdd, 0xd5, 0xa4, 0xb7, 0x65, 0xe9, 0xac, 0x36, 0x7d, 0xd5, 0xa6, 0xab, 0xfa,
		0xf4, 0xd4, 0x4c, 0xd7, 0x0b, 0xd3, 0xcd, 0xf2, 0xf4, 0xb2, 0x04, 0x9d, 0x2c, 0x49, 0x1f, 0x4b,
		0xa0, 0x88, 0x0e, 0x3d, 0x9c, 0xa7, 0x2d, 0x4a, 0x72, 0x77, 0x53, 0x4a, 0xa2, 0x4f, 0x41, 0xca,
		0x78, 0xde, 0x3a, 0x74, 0x2e, 0x5f, 0x92, 0x93, 0x6e, 0xf7, 0xf8, 0x64, 0x77, 0x96, 0x45, 0x08,
		0x4f, 0x2f, 0x6d, 0x80, 0x83, 0x7f, 0x55, 0x02, 0x10, 0xfc, 0xab, 0x46, 0x31, 0xab, 0xdc, 0xc2,
		0x2a, 0xef, 0xbe, 0x55, 0x2e, 0xda, 0x0d, 0xd8, 0xb8, 0xf5, 0x07, 0xc3, 0xc8, 0x0f, 0x27, 0xf1,
		0xad, 0x31, 0x99, 0x4d, 0xdc, 0x7e, 0x14, 0x04, 0x2a, 0xd3, 0x37, 0x77, 0xe0, 0x27, 0xde, 0x55,
		0xa0, 0xd1, 0xe5, 0x5a, 0x4c, 0x6c, 0xb9, 0xb6, 0xd7, 0x26, 0x6d, 0xaf, 0xb4, 0xbd, 0x1a, 0x47,
		0xbb, 0xb4, 0xeb, 0xf5, 0x4a, 0xd6, 0xe9, 0xed, 0x9f, 0x8f, 0xf5, 0x34, 0x84, 0x18, 0xfb, 0x54,
		0xaf, 0xfd, 0x2b, 0x1b, 0x6e, 0xd4, 0xf8, 0x57, 0xbb, 0xb1, 0x4a, 0xe3, 0x3b, 0x37, 0xf5, 0x6f,
		0x55, 0x34, 0x4a, 0x8b, 0x03, 0xe7, 0x86, 0xef, 0xe2, 0xdd, 0xe0, 0xdd, 0xe0, 0xdd, 0x9c, 0x3b,
		0xc7, 0x4d, 0xdc, 0x9b, 0x35, 0xf7, 0xa6, 0xd9, 0xc4, 0xb9, 0x91, 0x32, 0xd9, 0x89, 0x9a, 0x32,
		0xc6, 0x92, 0xe6, 0x7a, 0xfe, 0x3d, 0x5c, 0x1e, 0x5c, 0x9e, 0xd5, 0x3f, 0xd8, 0x8f, 0x92, 0xd4,
		0x0d, 0xfc, 0x5b, 0x3f, 0x2d, 0xef, 0xd7, 0x2c, 0x7c, 0x17, 0xe7, 0x05, 0xe7, 0x65, 0x6b, 0xce,
		0x4b, 0xe9, 0x14, 0xbd, 0x46, 0x6a, 0x5e, 0x33, 0x25, 0xaf, 0x51, 0x78, 0x60, 0x92, 0x82, 0xd7,
		0x8d, 0xb5, 0x8a, 0xe1, 0xaf, 0x39, 0x0e, 0x6b, 0x90, 0x14, 0x23, 0xb2, 0xb2, 0xb6, 0x74, 0xa6,
		0x29, 0xf5, 0x3a, 0xad, 0xa1, 0xa5, 0x94, 0xf6, 0x65, 0x85, 0x83, 0xe6, 0x06, 0x2a, 0xf0, 0xee,
		0x74, 0x11, 0x6a, 0xf1, 0xcb, 0x40, 0x14, 0x10, 0x05, 0x44, 0x01, 0x51, 0x40, 0x14, 0x10, 0x25,
		0x0b, 0x51, 0xfe, 0x4d, 0x18, 0xc5, 0xca, 0x8d, 0x3e, 0xa9, 0x38, 0x88, 0xbc, 0x81, 0x1b, 0x47,
		0x3a, 0x59, 0xa2, 0x8d, 0x52, 0x98, 0x85, 0x0a, 0x68, 0x19, 0x82, 0x56, 0xe9, 0x59, 0xa8, 0x1f,
		0x95, 0x67, 0xd0, 0x2e, 0x90, 0x7d, 0x9b, 0x8e, 0x00, 0x4b, 0xc7, 0x5b, 0xec, 0x98, 0x8b, 0x1d,
		0x77, 0xb9, 0x63, 0xaf, 0x09, 0x09, 0x95, 0x77, 0x04, 0x5c, 0x45, 0x51, 0xa0, 0xbc, 0xd0, 0x64,
		0xba, 0x49, 0xab, 0x06, 0x2d, 0x43, 0xb7, 0xbe, 0x81, 0x96, 0x8f, 0xbf, 0x8c, 0x92, 0xa3, 0xe4,
		0x28, 0x79, 0xbd, 0x95, 0x3c, 0xf5, 0xfc, 0x40, 0x5f, 0xcb, 0xb3, 0x6f, 0xa3, 0xe6, 0xa8, 0x39,
		0x6a, 0xbe, 0x05, 0x35, 0xdf, 0x93, 0xbe, 0xa1, 0xe5, 0x24, 0xf4, 0x91, 0x81, 0x9b, 0xeb, 0x98,
		0x56, 0x54, 0xbd, 0xf1, 0xd2, 0x8f, 0x6f, 0x67, 0x6f, 0xf2, 0xe1, 0xa7, 0xec, 0x4d, 0x7e, 0x99,
		0xbe, 0xc8, 0xaf, 0xe3, 0xf7, 0xa8, 0x32, 0x68, 0x10, 0x7e, 0xf2, 0x02, 0x7f, 0x50, 0x6e, 0x4b,
		0xe6, 0xc1, 0x82, 0xc5, 0x6f, 0x13, 0x24, 0x20, 0x48, 0x50, 0x75, 0x90, 0x20, 0xd3, 0xea, 0xc5,
		0x53, 0xe8, 0x7a, 0xfd, 0xd2, 0xd6, 0xc5, 0x59, 0x2b, 0x56, 0xd9, 0x24, 0x11, 0x02, 0x02, 0x01,
		0xd9, 0x5b, 0x02, 0xf2, 0x46, 0xe6, 0xd4, 0x2f, 0x19, 0xf8, 0x8e, 0xc6, 0x77, 0x7f, 0x08, 0x47,
		0xb7, 0xfa, 0x07, 0xe8, 0x5d, 0xf4, 0x36, 0x8d, 0xfd, 0xf0, 0xc6, 0xa8, 0xb1, 0xbd, 0xd1, 0xca,
		0x7c, 0x0e, 0xe5, 0xc5, 0x0d, 0x83, 0xf6, 0xfa, 0x76, 0x96, 0xf7, 0x8d, 0xa3, 0x61, 0x43, 0xaf,
		0x6f, 0xfc, 0xb9, 0xee, 0x0a, 0xfc, 0x14, 0xa6, 0x66, 0x3f, 0x3f, 0x7b, 0xe9, 0x73, 0xa7, 0x6d,
		0xf0, 0xe3, 0xb3, 0xc5, 0x3b, 0x77, 0x5a, 0x15, 0xb5, 0xcc, 0xdf, 0xd7, 0xc0, 0xc3, 0x5d, 0x87,
		0x8d, 0xa2, 0x55, 0xed, 0x25, 0x90, 0xa8, 0x58, 0xb1, 0x3b, 0x50, 0x04, 0x14, 0xed, 0x30, 0x14,
		0x31, 0xe9, 0xa6, 0xb4, 0x10, 0x26, 0xdd, 0x3c, 0xba, 0xc4, 0x92, 0x93, 0x6e, 0x4e, 0x9a, 0x4d,
		0xc6, 0xde, 0x1a, 0x7f, 0x8b, 0x21, 0x37, 0xe5, 0x82, 0x55, 0xe5, 0xc3, 0x2c, 0xd2, 0x41, 0xaa,
		0xc5, 0x37, 0xa8, 0xf2, 0x7e, 0xdf, 0x28, 0x4a, 0x94, 0xeb, 0x5d, 0x5f, 0xfb, 0xa1, 0x9f, 0xfa,
		0x2a, 0xd1, 0xb8, 0xdb, 0x77, 0x55, 0x02, 0x61, 0x2a, 0xc2, 0x54, 0x55, 0x87, 0xa9, 0x96, 0x0e,
		0xa1, 0xc1, 0x6c, 0xed, 0x15, 0x39, 0x7a, 0x7e, 0x40, 0x0b, 0x3f, 0x00, 0x3f, 0xc0, 0xb6, 0x1f,
		0x50, 0x56, 0x45, 0xf2, 0x2f, 0x6a, 0x2b, 0xc9, 0xda, 0xd1, 0xd1, 0x54, 0x13, 0x43, 0xb7, 0xd9,
		0x58, 0x6d, 0x24, 0xd4, 0x47, 0x58, 0x8d, 0xa4, 0xd4, 0x49, 0x5c, 0xad, 0xc4, 0xd5, 0x4b, 0x5e,
		0xcd, 0x0c, 0xa9, 0xb5, 0x6e, 0x1c, 0x50, 0xd7, 0x0d, 0x5f, 0x3b, 0x39, 0xff, 0x50, 0x5f, 0x5c,
		0x3f, 0x4c, 0xd5, 0x8d, 0x32, 0x8a, 0x87, 0xce, 0xb0, 0xe7, 0xa5, 0x81, 0x8c, 0x37, 0x5e, 0x9a,
		0xaa, 0x38, 0xd4, 0x76, 0xd3, 0x73, 0x41, 0xef, 0x9b, 0xee, 0x99, 0xe7, 0x5e, 0x5f, 0xb8, 0x3f,
		0x5e, 0xfe, 0xd1, 0x7a, 0xfe, 0xf2, 0x5e, 0x7f, 0x57, 0x2f, 0xab, 0x0a, 0x71, 0x6a, 0x60, 0x5f,
		0x3f, 0xf0, 0x92, 0xc4, 0x4d, 0x4d, 0x4e, 0xc2, 0xbc, 0xc7, 0x76, 0x2e, 0x0b, 0x6b, 0x8a, 0x35,
		0xc5, 0x9a, 0x56, 0x1d, 0xdc, 0x14, 0x08, 0x72, 0x0a, 0x05, 0x3b, 0xcd, 0x83, 0x9e, 0xa2, 0xc1,
		0x4f, 0xe9, 0x20, 0xa8, 0xb5, 0x28, 0x9d, 0x7c, 0xb4, 0x4e, 0x20, 0x38, 0x2a, 0x1a, 0x24, 0x5d,
		0xdb, 0x8a, 0xd3, 0xc3, 0xdb, 0x8a, 0x67, 0xdb, 0xf9, 0x76, 0x9d, 0x79, 0xc8, 0xad, 0x97, 0xfc,
		0x66, 0xce, 0x40, 0x32, 0x29, 0x70, 0x0f, 0xb8, 0x07, 0xdc, 0x03, 0x4f, 0x6e, 0x97, 0x3d, 0x39,
		0xab, 0x61, 0xb7, 0x7f, 0xaa, 0x3b, 0x23, 0x77, 0xad, 0xf1, 0xca, 0x4f, 0xd2, 0x8b, 0x34, 0xd5,
		0x0c, 0xde, 0xbd, 0xf6, 0xc3, 0x1f, 0x02, 0x35, 0xd6, 0x36, 0x4d, 0x94, 0x1e, 0xf3, 0x90, 0x05,
		0x09, 0xad, 0x97, 0x9d, 0xce, 0xc9, 0x69, 0xa7, 0xd3, 0x3c, 0x3d, 0x3e, 0x6d, 0x9e, 0x75, 0xbb,
		0xad, 0x93, 0x96, 0x46, 0xaf, 0x79, 0xe3, 0x97, 0x78, 0xa0, 0x62, 0x35, 0xf8, 0x6e, 0xbc, 0x36,
		0xe1, 0x28, 0x08, 0xac, 0x6e, 0x81, 0x66, 0xd6, 0x30, 0xff, 0xbe, 0x78, 0xf6, 0x70, 0x35, 0x03,
		0x76, 0x64, 0x94, 0x45, 0x70, 0x64, 0x13, 0x8b, 0xaf, 0xc6, 0xef, 0x72, 0x91, 0xbf, 0xdb, 0xd2,
		0xbf, 0xdf, 0x35, 0x48, 0x13, 0x9b, 0x6c, 0xf4, 0x76, 0x52, 0xc5, 0x2b, 0x3b, 0x5a, 0x7d, 0xb6,
		0x78, 0x10, 0xdd, 0x7a, 0x7e, 0xe8, 0xde, 0x7a, 0x69, 0xff, 0xa3, 0x6e, 0xbe, 0x78, 0x49, 0x06,
		0x23, 0x7b, 0xc8, 0x18, 0x1b, 0xda, 0x08, 0xfd, 0x91, 0x3d, 0xe5, 0x5b, 0xc3, 0x4a, 0xb6, 0x84,
		0x49, 0xaa, 0xde, 0xe4, 0xde, 0x67, 0xed, 0x2a, 0x8d, 0xd9, 0xd7, 0x29, 0xd1, 0x40, 0xe1, 0x0c,
		0x15, 0x4e, 0xb3, 0x44, 0x63, 0x72, 0x02, 0x4d, 0x0b, 0x34, 0xa6, 0x52, 0x28, 0xcf, 0xb0, 0x1c,
		0x85, 0xa0, 0x3c, 0x43, 0xd7, 0x49, 0xd1, 0x2e, 0xcf, 0x20, 0xa9, 0x48, 0x60, 0x8f, 0xc0, 0x5e,
		0xbd, 0x02, 0x7b, 0x24, 0x15, 0x57, 0x62, 0x50, 0x24, 0x15, 0x49, 0x2a, 0xee, 0xd3, 0x56, 0x90,
		0x54, 0x5c, 0x5b, 0xe4, 0x09, 0xc5, 0x16, 0x22, 0x22, 0x8b, 0xc2, 0x60, 0x22, 0x30, 0x91, 0x03,
		0x63, 0x22, 0xaf, 0xbd, 0x70, 0xe0, 0xa5, 0x51, 0x7c, 0x67, 0x30, 0x0e, 0x59, 0x8e, 0xcd, 0xbc,
		0x9e, 0x2e, 0xe0, 0x72, 0x70, 0x5b, 0xcf, 0xa7, 0xde, 0xe8, 0x5f, 0x77, 0x0c, 0x64, 0x18, 0xcd,
		0x27, 0x98, 0x2f, 0x96, 0xc4, 0x9c, 0x82, 0x5c, 0x5a, 0x6b, 0x32, 0xb6, 0x77, 0xd8, 0x10, 0x40,
		0xec, 0xf6, 0x64, 0xf6, 0x81, 0x84, 0xa8, 0x4e, 0x3e, 0xf9, 0xbe, 0xf1, 0x6c, 0x8b, 0x44, 0x44,
		0x60, 0x24, 0x42, 0x2e, 0x6a, 0xf2, 0x6b, 0xce, 0x9d, 0x8e, 0xc0, 0xf2, 0x8c, 0x37, 0x4c, 0x5b,
		0xdd, 0x96, 0x24, 0xa5, 0x63, 0xb5, 0x69, 0x6f, 0x89, 0x23, 0xdc, 0x93, 0x36, 0x27, 0x6d, 0x2e,
		0xb1, 0x05, 0x35, 0x4d, 0x9b, 0x4f, 0x53, 0x12, 0x47, 0x06, 0x81, 0x5d, 0xc7, 0x42, 0x7e, 0xf5,
		0xf5, 0xe4, 0xb5, 0x16, 0xff, 0x85, 0x64, 0xb9, 0xfe, 0xf6, 0x6e, 0x31, 0x53, 0x3e, 0xdd, 0xc9,
		0x2a, 0xd3, 0xe4, 0x25, 0x93, 0x1c, 0x2b, 0x6e, 0x12, 0xe9, 0x70, 0xb2, 0x73, 0xa6, 0x56, 0x40,
		0x3f, 0x1d, 0x2e, 0xe5, 0x1d, 0xe8, 0x78, 0x03, 0x7a, 0xec, 0xdf, 0x8c, 0xed, 0x9b, 0xb0, 0x7b,
		0x03, 0x36, 0xaf, 0xcd, 0xde, 0x4b, 0xcf, 0x0b, 0xd2, 0x66, 0xe7, 0x26, 0x6c, 0x5c, 0x9f, 0x7d,
		0xeb, 0xb0, 0xed, 0xfb, 0xca, 0x6f, 0x7f, 0x2d, 0x82, 0x02, 0xa9, 0xaf, 0xae, 0x62, 0xe5, 0xfd,
		0xa6, 0xe2, 0xf2, 0x48, 0xb0, 0xf0, 0x5d, 0xd0, 0x00, 0x34, 0xa8, 0x1b, 0x1a, 0x94, 0x3e, 0x9e,
		0xbb, 0x87, 0x08, 0xb7, 0x7e, 0xe8, 0x5e, 0xfb, 0x41, 0xa0, 0x0d, 0x0b, 0xb7, 0xde, 0x17, 0x6d,
		0x01, 0xc7, 0x63, 0x01, 0xb1, 0x17, 0x0e, 0xa2, 0xdb, 0xda, 0xa2, 0x43, 0xfe, 0xfb, 0xb4, 0x46,
		0x59, 0xce, 0xd7, 0x57, 0x0f, 0x25, 0xa6, 0x8b, 0x73, 0xee, 0x1c, 0xd7, 0x1d, 0x29, 0x8c, 0xee,
		0x77, 0x2e, 0xe9, 0xcd, 0x89, 0x7b, 0x71, 0x45, 0x2e, 0xe7, 0x16, 0xf3, 0xd7, 0x1a, 0xd6, 0xaf,
		0x54, 0x77, 0x57, 0xa6, 0xd2, 0xeb, 0x5e, 0xb1, 0xbe, 0x26, 0xa7, 0xd8, 0x95, 0xeb, 0x4d, 0xae,
		0x5c, 0x97, 0x03, 0xdb, 0x6d, 0x5d, 0xb9, 0x5e, 0x18, 0x4c, 0xf3, 0x95, 0x57, 0xb7, 0xc3, 0x42,
		0x5d, 0x20, 0x39, 0x40, 0x1e, 0xdb, 0x50, 0x84, 0xbe, 0x5a, 0x50, 0xf3, 0x12, 0x07, 0x7f, 0xf9,
		0x7b, 0xc5, 0x0e, 0x7a, 0x8b, 0x83, 0xbe, 0xfb, 0x07, 0xbd, 0x68, 0x09, 0x63, 0xc3, 0x1b, 0x0c,
		0x62, 0x95, 0x68, 0x14, 0xa5, 0xcf, 0xbe, 0x88, 0x8b, 0x83, 0x8b, 0xb3, 0x35, 0x17, 0xc7, 0x1f,
		0x7e, 0xea, 0xb8, 0xd3, 0x93, 0xe8, 0x86, 0x91, 0xfb, 0x7b, 0x14, 0x2a, 0x1d, 0xaf, 0xa6, 0x44,
		0xbb, 0xae, 0x76, 0x7b, 0x6e, 0xe3, 0xeb, 0xaf, 0xdf, 0x37, 0xdd, 0xb3, 0xcb, 0x3f, 0xdf, 0xb7,
		0xdc, 0xb3, 0xcb, 0xc9, 0xc7, 0x56, 0xf6, 0x8f, 0xc9, 0xe7, 0xf6, 0xfb, 0xa6, 0xdb, 0x99, 0x7d,
		0xee, 0xbe, 0x6f, 0xba, 0xdd, 0xcb, 0x6f, 0x7a, 0xbd, 0x17, 0xdf, 0xfc, 0x71, 0x7c, 0x5f, 0xfe,
		0x8b, 0x5f, 0x7f, 0xf5, 0xbe, 0xd7, 0x1b, 0xfe, 0xf1, 0xf3, 0xfd, 0xf8, 0xef, 0xaf, 0xee, 0x2f,
		0xbf, 0xfd, 0xe6, 0x6f, 0x65, 0x4f, 0xd9, 0x58, 0x60, 0xaf, 0xf7, 0xe2, 0xf2, 0x2f, 0x8d, 0x9a,
		0xde, 0x39, 0xef, 0x0d, 0x52, 0xff, 0x56, 0x27, 0x40, 0x33, 0xff, 0x6a, 0xd1, 0x7e, 0x09, 0x75,
		0xed, 0x8d, 0x82, 0xb4, 0xd4, 0x96, 0x37, 0x5a, 0xed, 0x66, 0xb1, 0x95, 0xbb, 0xc4, 0x84, 0x62,
		0x42, 0xb7, 0x66, 0x42, 0xb9, 0xf5, 0x3e, 0xff, 0xb2, 0x61, 0x3d, 0x33, 0xb7, 0xde, 0x9f, 0x3b,
		0xed, 0x2e, 0xd7, 0xdd, 0xd7, 0x01, 0x1d, 0x7f, 0x53, 0x6a, 0xe8, 0x05, 0x93, 0x55, 0x28, 0x89,
		0x8e, 0xf3, 0xaf, 0xda, 0x44, 0xc7, 0x63, 0xc0, 0x11, 0x70, 0x04, 0x1c, 0x01, 0x47, 0xc0, 0x11,
		0x70, 0xdc, 0x16, 0x38, 0xba, 0x69, 0x14, 0xa8, 0xd8, 0x0b, 0xfb, 0x26, 0x30, 0xb9, 0x20, 0xc4,
		0xaa, 0x3b, 0x09, 0x60, 0x02, 0x98, 0x00, 0x26, 0x80, 0x09, 0x60, 0x02, 0x98, 0x95, 0x03, 0xe6,
		0x5d, 0xff, 0xa3, 0xe7, 0x87, 0x3a, 0x28, 0x39, 0xfd, 0x26, 0xa8, 0x04, 0x2a, 0x6d, 0x0d, 0x95,
		0x92, 0x49, 0x41, 0x99, 0xe5, 0xc4, 0xd0, 0x2b, 0x15, 0xde, 0x64, 0xb5, 0x3b, 0xbb, 0x81, 0x4b,
		0x2d, 0x70, 0x49, 0x77, 0xe9, 0x8e, 0xdb, 0xc0, 0x52, 0x0d, 0x60, 0x29, 0x88, 0x6e, 0x6e, 0xca,
		0x14, 0x8a, 0x2e, 0x0c, 0x22, 0x9b, 0x7c, 0x91, 0x51, 0x7a, 0x80, 0x92, 0x21, 0x28, 0x95, 0x1e,
		0xa5, 0xa7, 0x3e, 0x4d, 0xfb, 0x50, 0x35, 0x87, 0xe8, 0x4d, 0xbf, 0xcf, 0xf8, 0x3c, 0x4b, 0x47,
		0x5c, 0xec, 0xa8, 0x8b, 0x1d, 0x79, 0xb9, 0xa3, 0xaf, 0x69, 0xfc, 0xab, 0x1a, 0x9f, 0x37, 0x54,
		0x2a, 0x76, 0x93, 0xd4, 0x4b, 0x47, 0x89, 0xf9, 0xd8, 0x9a, 0x45, 0x61, 0x8c, 0xad, 0x61, 0x6c,
		0xcd, 0xd6, 0x94, 0x4d, 0x4f, 0xe9, 0x0c, 0x38, 0xae, 0x23, 0x3b, 0x72, 0xa6, 0x68, 0x05, 0xf4,
		0x93, 0xd8, 0x73, 0xbc, 0x17, 0xd3, 0x30, 0x6a, 0x30, 0x8a, 0x61, 0xa9, 0xaa, 0xfb, 0x68, 0x4a,
		0x66, 0x8f, 0xb4, 0x88, 0x81, 0x63, 0xdc, 0x04, 0xd2, 0x57, 0x0b, 0xff, 0xf6, 0x6a, 0xf2, 0x2e,
		0x1f, 0x7e, 0x98, 0xbc, 0x0b, 0x43, 0x17, 0x34, 0x36, 0xb2, 0xb2, 0x71, 0x0b, 0x9b, 0x76, 0xae,
		0xca, 0x49, 0x0b, 0x43, 0x2f, 0x49, 0xa6, 0x20, 0x50, 0xd2, 0x7f, 0xcb, 0xbf, 0x49, 0x54, 0x11,
		0x07, 0x6e, 0x6b, 0x51, 0xc5, 0x37, 0x71, 0x34, 0x8c, 0x7d, 0x95, 0x7a, 0xf1, 0x9d, 0x5b, 0xf2,
		0x44, 0x3a, 0xd5, 0x17, 0x9f, 0xff, 0xaf, 0x17, 0xdf, 0x7e, 0xf3, 0xe7, 0xd7, 0xef, 0xff, 0xbf,
		0xff, 0x75, 0xf9, 0xe2, 0xdb, 0x6f, 0xea, 0x59, 0xd2, 0x3d, 0xb6, 0x87, 0x63, 0xc6, 0xae, 0xae,
		0x47, 0x81, 0x86, 0x51, 0x58, 0xfc, 0x36, 0x91, 0x1d, 0x0c, 0x43, 0xd5, 0x91, 0x1d, 0x6f, 0x94,
		0x46, 0x71, 0x34, 0x4a, 0x95, 0xeb, 0x85, 0x61, 0x34, 0x0a, 0x75, 0x76, 0x21, 0xef, 0xae, 0x5a,
		0x97, 0xa5, 0x17, 0xf1, 0x69, 0x12, 0xf1, 0x21, 0xe2, 0x63, 0xdb, 0x27, 0xd2, 0x76, 0x36, 0x8d,
		0x9d, 0x4c, 0x4d, 0xe7, 0xb2, 0x84, 0xaf, 0x51, 0xc2, 0xf4, 0xf6, 0x33, 0x17, 0x40, 0x7d, 0x49,
		0x55, 0x98, 0xe8, 0xf8, 0x87, 0xf3, 0xbb, 0x1f, 0x56, 0x04, 0xa1, 0xfa, 0xa8, 0x3e, 0xaa, 0x5f,
		0x67, 0xd5, 0x1f, 0xa8, 0x20, 0xcb, 0xc8, 0x9a, 0x68, 0xfd, 0x82, 0x0c, 0x14, 0x1e, 0x85, 0x47,
		0xe1, 0xeb, 0xac, 0xf0, 0x2a, 0xf4, 0xae, 0x02, 0x03, 0x82, 0x3f, 0xfd, 0x3e, 0x8a, 0x8e, 0xa2,
		0xa3, 0xe8, 0x75, 0x56, 0xf4, 0x6b, 0x2f, 0x49, 0xdd, 0x58, 0x0d, 0x3d, 0x8d, 0xac, 0x76, 0xbe,
		0x12, 0x8b, 0x42, 0x50, 0x79, 0x54, 0x1e, 0x95, 0xaf, 0xb3, 0xca, 0xfb, 0x61, 0x92, 0x7a, 0x61,
		0xea, 0x1b, 0xf2, 0xf9, 0x65, 0x31, 0xa8, 0x3d, 0x6a, 0x8f, 0xda, 0xd7, 0x59, 0xed, 0x63, 0x35,
		0x18, 0x85, 0x03, 0x2f, 0xec, 0xdf, 0xe9, 0xeb, 0xfc, 0x82, 0x0c, 0x2a, 0x34, 0x51, 0xf8, 0xbd,
		0xab, 0xd0, 0xec, 0xf7, 0xdd, 0xbe, 0x0a, 0xb5, 0xae, 0x01, 0x5f, 0x3b, 0x3d, 0x8b, 0xc2, 0xa8,
		0xd0, 0xa4, 0x42, 0x73, 0x6b, 0xca, 0xa6, 0xa7, 0x74, 0x9a, 0xca, 0x67, 0x8e, 0xba, 0x62, 0xe8,
		0x6b, 0x88, 0xc2, 0xfa, 0xcb, 0x76, 0x60, 0x15, 0x9a, 0x8b, 0x95, 0x29, 0x47, 0xda, 0x0c, 0xc1,
		0x91, 0x2d, 0xf8, 0x7b, 0xd3, 0x57, 0x6f, 0xa7, 0xef, 0xf4, 0xe1, 0xd7, 0xf9, 0x3b, 0xd5, 0x82,
		0x87, 0x0d, 0xa3, 0x38, 0x35, 0xe1, 0x60, 0xd9, 0xf7, 0x71, 0xb8, 0xe0, 0x5f, 0x38, 0x5c, 0x75,
		0x76, 0xb8, 0x66, 0x36, 0xd1, 0xcd, 0x86, 0xb1, 0x1a, 0xf4, 0xc4, 0xad, 0x0a, 0xc2, 0xf5, 0x42,
		0xf5, 0xf7, 0xcd, 0xf5, 0x8a, 0xd5, 0xbc, 0x3e, 0x20, 0x3b, 0xe7, 0xd1, 0x28, 0x35, 0xf7, 0xc1,
		0x36, 0x4a, 0xd5, 0xdc, 0x01, 0x9d, 0xb1, 0x56, 0x6b, 0x42, 0x5a, 0x2f, 0x9b, 0x7a, 0x04, 0xfe,
		0x12, 0x17, 0x12, 0x17, 0x12, 0x17, 0x52, 0xf3, 0xe4, 0x94, 0x9e, 0xdb, 0xf5, 0x90, 0x1e, 0x9d,
		0x1a, 0x88, 0xd0, 0x9b, 0xeb, 0xb5, 0xfa, 0x97, 0xc0, 0x55, 0xe6, 0x26, 0xf3, 0x55, 0xd6, 0x84,
		0x19, 0xce, 0x01, 0x5b, 0x93, 0x27, 0x35, 0x43, 0x64, 0xfd, 0x2c, 0x98, 0xce, 0x14, 0x11, 0x3a,
		0xd6, 0xcb, 0x5b, 0xe1, 0x7d, 0x91, 0xdf, 0x8a, 0x56, 0xf7, 0xf4, 0xe4, 0x65, 0x73, 0xfc, 0xd7,
		0xe1, 0xed, 0xc9, 0x96, 0xae, 0xc2, 0xbf, 0xac, 0x2a, 0xb4, 0xa4, 0x15, 0x54, 0xf1, 0x52, 0x25,
		0xc7, 0xa9, 0x96, 0xc5, 0x41, 0xa6, 0x20, 0x53, 0x90, 0x29, 0xc8, 0x14, 0x64, 0x0a, 0x32, 0xb5,
		0x97, 0x64, 0xea, 0xf8, 0x04, 0x1a, 0xb5, 0x7f, 0x34, 0xea, 0x80, 0x33, 0x74, 0x66, 0xd1, 0x64,
		0xc7, 0x5e, 0x9a, 0x6e, 0xf6, 0xe1, 0xdd, 0xe4, 0xbd, 0x98, 0xae, 0xa2, 0xbb, 0xc5, 0xdb, 0x19,
		0xb1, 0xb2, 0xb0, 0x95, 0x95, 0x8e, 0x59, 0xc9, 0x06, 0xa1, 0x65, 0x2c, 0x34, 0xbb, 0x2a, 0x51,
		0x63, 0xb2, 0xc2, 0xaa, 0x04, 0xc6, 0xae, 0x30, 0x5d, 0xc1, 0xd0, 0x2e, 0x70, 0xe7, 0x27, 0x77,
		0x7e, 0x6a, 0x99, 0xb2, 0x44, 0xcf, 0x7e, 0x25, 0x8c, 0x84, 0xc1, 0x68, 0x99, 0x1a, 0xad, 0xd2,
		0x23, 0x61, 0xc6, 0x27, 0x4f, 0xbf, 0xac, 0x21, 0xfb, 0x36, 0xb5, 0x0c, 0x96, 0x23, 0x6c, 0xd4,
		0x32, 0xe8, 0xba, 0x71, 0xda, 0xb5, 0x0c, 0xa5, 0xef, 0x13, 0x79, 0xf0, 0xe8, 0x94, 0xbc, 0x5f,
		0x84, 0x80, 0x35, 0x01, 0x6b, 0x02, 0xd6, 0x6b, 0x27, 0xa7, 0xf4, 0xfd, 0x28, 0x12, 0xa4, 0x7a,
		0x4d, 0x86, 0xe6, 0xfd, 0x29, 0xbb, 0x12, 0xb2, 0x6e, 0x11, 0xb2, 0xae, 0x4d, 0xc8, 0xba, 0x4d,
		0xc0, 0x7a, 0xdf, 0x02, 0xd6, 0x1a, 0xc4, 0xb1, 0xf4, 0x00, 0xe2, 0x87, 0x99, 0x7a, 0xf9, 0xf1,
		0xaf, 0xd0, 0x10, 0x68, 0x08, 0x34, 0xc4, 0x11, 0x1c, 0xa8, 0x6c, 0x85, 0x94, 0xe8, 0x46, 0xfe,
		0xd6, 0x23, 0x81, 0x9a, 0x03, 0x98, 0x77, 0xca, 0xa0, 0xf6, 0x95, 0x9b, 0x25, 0x0b, 0xa6, 0xe1,
		0x59, 0x89, 0x1e, 0xe1, 0x15, 0x89, 0x18, 0x58, 0x0c, 0x2c, 0x06, 0x56, 0xf3, 0xe4, 0x18, 0xa6,
		0x4e, 0x6a, 0x6e, 0x60, 0x77, 0x2a, 0xd5, 0xb2, 0xf6, 0xfa, 0x1a, 0xa9, 0x97, 0x9d, 0x82, 0x86,
		0x58, 0xf5, 0xd5, 0x40, 0x85, 0x26, 0x81, 0xda, 0x1c, 0x14, 0xe6, 0xb2, 0x80, 0x03, 0xe0, 0x00,
		0x38, 0xd0, 0x3c, 0x39, 0xd4, 0xa9, 0x5a, 0x0f, 0xfa, 0x51, 0xa7, 0x5a, 0x9b, 0xa0, 0x5f, 0xbb,
		0xdb, 0x25, 0xea, 0xb7, 0x6f, 0x51, 0x3f, 0xab, 0xf9, 0xcd, 0x7f, 0xaa, 0x3b, 0x01, 0x1f, 0xb4,
		0xf1, 0xca, 0x4f, 0xd2, 0x8b, 0x34, 0xd5, 0xcc, 0x95, 0xbe, 0xf6, 0xc3, 0x1f, 0x02, 0x75, 0x3b,
		0xbd, 0x34, 0xb8, 0xa9, 0x77, 0xe5, 0xf9, 0x82, 0x84, 0xd6, 0xcb, 0x4e, 0xe7, 0xe4, 0xb4, 0xd3,
		0x69, 0x9e, 0x1e, 0x9f, 0x36, 0xcf, 0xba, 0xdd, 0xd6, 0x49, 0x4b, 0x43, 0x2f, 0x1a, 0xbf, 0xc4,
		0x03, 0x15, 0xab, 0xc1, 0x77, 0xe3, 0x15, 0x0a, 0x47, 0x41, 0x70, 0x60, 0xf5, 0xc2, 0x4a, 0xc5,
		0x93, 0xbf, 0x6f, 0xb9, 0x3a, 0x78, 0xfc, 0x1e, 0xd9, 0xdf, 0xa9, 0x06, 0x2e, 0xbf, 0x81, 0x5b,
		0x2a, 0x03, 0x56, 0x85, 0x8b, 0xb7, 0x85, 0xaa, 0xe6, 0xca, 0xbb, 0x5e, 0xfa, 0xae, 0x16, 0x45,
		0xbf, 0x72, 0xae, 0x10, 0x45, 0xbf, 0xfa, 0xae, 0x8a, 0x86, 0x6b, 0xa2, 0xe9, 0x8a, 0xe8, 0x61,
		0xba, 0x7e, 0x14, 0xc4, 0xd0, 0xb5, 0x10, 0x63, 0xaf, 0xe6, 0x6c, 0xf5, 0x5e, 0x8f, 0xcc, 0x98,
		0x2f, 0x9d, 0xb6, 0x2b, 0x50, 0xa7, 0xc5, 0xb3, 0x04, 0xf8, 0x55, 0xd6, 0x73, 0xc7, 0x2a, 0x1a,
		0xa6, 0xfe, 0xad, 0xff, 0xfb, 0x98, 0x60, 0xc7, 0x7e, 0xa4, 0x71, 0x15, 0xf0, 0xba, 0x88, 0xa2,
		0xb5, 0xbc, 0x1a, 0x0d, 0xf6, 0x8d, 0x93, 0x82, 0xfd, 0xf4, 0x97, 0x80, 0x25, 0x60, 0x09, 0x58,
		0xd6, 0x07, 0x2c, 0x4f, 0x40, 0x4b, 0x83, 0xb5, 0xeb, 0xbc, 0x6c, 0x36, 0x01, 0xcc, 0x5a, 0x00,
		0xe6, 0xff, 0x8c, 0x54, 0x92, 0x96, 0x9e, 0x55, 0xb3, 0x00, 0x97, 0xcb, 0x02, 0x6c, 0x82, 0x65,
		0x0b, 0xb0, 0x04, 0x2c, 0x01, 0xcb, 0xdd, 0x03, 0xcb, 0x2e, 0x58, 0xa9, 0xbb, 0x74, 0x2d, 0x80,
		0xb2, 0x16, 0x40, 0x99, 0xa8, 0x9b, 0xb1, 0x75, 0x72, 0xe3, 0x68, 0x94, 0xfa, 0xe1, 0x4d, 0x79,
		0xa0, 0x5c, 0x15, 0x00, 0x46, 0x81, 0x51, 0x5b, 0xc3, 0xa8, 0xb2, 0xd3, 0xde, 0x4b, 0x4e, 0x79,
		0x17, 0x52, 0xb9, 0xa1, 0xf2, 0x7e, 0x53, 0xb1, 0xab, 0xc2, 0xd4, 0x4f, 0xef, 0x5c, 0x5f, 0x23,
		0x98, 0xb3, 0x2e, 0x02, 0xb5, 0x43, 0xed, 0xb6, 0xa6, 0x76, 0xa5, 0xdb, 0x22, 0xb5, 0x66, 0x8b,
		0x68, 0xb6, 0x3d, 0x6e, 0x8b, 0x1c, 0xb6, 0x20, 0x87, 0xba, 0x4b, 0xd7, 0xee, 0x9e, 0x40, 0x0e,
		0x6b, 0x40, 0x0e, 0xb3, 0xb9, 0x6e, 0xe5, 0xd1, 0x69, 0xf2, 0x35, 0xc6, 0xc8, 0x80, 0x48, 0x86,
		0x88, 0x54, 0x9b, 0x2a, 0x98, 0x32, 0x27, 0xda, 0x91, 0xad, 0x82, 0xc9, 0x66, 0x18, 0x8a, 0x55,
		0xc1, 0x3c, 0x33, 0xd8, 0x96, 0xb2, 0xdb, 0x21, 0xbe, 0x0d, 0x8d, 0x22, 0xe4, 0x5a, 0x6a, 0xe1,
		0x1f, 0x5f, 0xf2, 0x87, 0x17, 0xf2, 0x91, 0x45, 0x6c, 0xfc, 0xcf, 0x48, 0x8d, 0xd4, 0xd3, 0xcd,
		0x7e, 0xb9, 0xfd, 0x99, 0xfe, 0xf9, 0x27, 0xb6, 0xa5, 0x98, 0x05, 0x2d, 0x6c, 0x39, 0xcb, 0x58,
		0x4c, 0x4d, 0x4b, 0x59, 0xd6, 0x42, 0x6a, 0x5b, 0x46, 0x6d, 0x8b, 0xa8, 0x6f, 0x09, 0xcd, 0x54,
		0xac, 0xe8, 0xa4, 0xa0, 0xc9, 0xd1, 0x28, 0x0f, 0xcd, 0x93, 0xaf, 0x01, 0xcd, 0x40, 0xb3, 0x21,
		0x34, 0x97, 0x9e, 0xf0, 0x16, 0x47, 0x81, 0x32, 0xb8, 0xaa, 0x72, 0xfc, 0x6d, 0x2e, 0xaa, 0xb4,
		0x74, 0xbc, 0xc5, 0x8e, 0xb9, 0xd8, 0x71, 0x97, 0x3b, 0xf6, 0x9a, 0xfe, 0x58, 0xe5, 0x17, 0x55,
		0xfe, 0x1a, 0x8d, 0x52, 0xe5, 0x0e, 0x63, 0x3f, 0x8a, 0xfd, 0xf4, 0xce, 0xd5, 0x38, 0xf0, 0x4b,
		0x36, 0xbb, 0xa3, 0xf1, 0xdd, 0x1f, 0xc2, 0xd1, 0xad, 0xfe, 0xd9, 0x79, 0x17, 0xbd, 0x9d, 0x84,
		0x81, 0x8c, 0x5a, 0xee, 0x9a, 0x13, 0x6d, 0x5f, 0x5b, 0x0b, 0xf7, 0xa3, 0xf2, 0x06, 0xee, 0x95,
		0xd7, 0xff, 0xcd, 0x1d, 0x0d, 0x4d, 0x3a, 0xf1, 0x5a, 0x8f, 0x3e, 0x60, 0x18, 0xfb, 0xb7, 0x5e,
		0x6c, 0x74, 0x47, 0x74, 0xfb, 0xa1, 0x07, 0xdc, 0xfa, 0x83, 0x41, 0xa0, 0x1a, 0xd5, 0xf6, 0x40,
		0x46, 0x3f, 0x85, 0xa9, 0xd9, 0x8e, 0x3c, 0xb9, 0x19, 0x46, 0x6d, 0x5d, 0x4f, 0x6f, 0x85, 0xd1,
		0x40, 0xb0, 0xc7, 0x36, 0xe2, 0xdc, 0x69, 0xd7, 0xb3, 0xfb, 0xca, 0xca, 0x1d, 0xb2, 0x9f, 0xa6,
		0xb1, 0x35, 0x4d, 0x00, 0x9e, 0x7c, 0x1d, 0x04, 0x06, 0x81, 0x6b, 0x8a, 0xc0, 0xaf, 0xbd, 0x70,
		0xe0, 0xa5, 0x91, 0x8e, 0xc1, 0x10, 0x40, 0x6f, 0xed, 0x0e, 0x71, 0x83, 0xce, 0x70, 0xc3, 0x8e,
		0x70, 0x03, 0x48, 0x90, 0xe8, 0x00, 0x97, 0xea, 0xfc, 0x16, 0x6f, 0x32, 0x96, 0x6b, 0x2e, 0x36,
		0xe8, 0xf0, 0x16, 0xe9, 0xec, 0x9e, 0xa7, 0xa2, 0xda, 0xfb, 0xbb, 0xc6, 0x15, 0x41, 0xf8, 0xe5,
		0x4e, 0xb4, 0x8d, 0x4e, 0x1b, 0xb1, 0x4b, 0x38, 0x0f, 0x7a, 0x4d, 0xd7, 0xfa, 0xcd, 0xd6, 0xa2,
		0x4d, 0xd6, 0x7a, 0xcd, 0xd5, 0xf5, 0xcf, 0x3e, 0x4c, 0xe2, 0xbe, 0x47, 0x65, 0x82, 0x75, 0xc6,
		0xc1, 0xef, 0xff, 0x27, 0x7b, 0xe6, 0xe4, 0x1f, 0x87, 0x9a, 0x6e, 0x28, 0x14, 0x6f, 0x17, 0x5a,
		0x69, 0x1b, 0xf9, 0x85, 0xac, 0xc7, 0xcb, 0x1d, 0xa8, 0xc0, 0xbb, 0x73, 0xc7, 0xeb, 0xe0, 0x0e,
		0xe3, 0x28, 0x55, 0xfd, 0xd4, 0x4d, 0x3e, 0xfb, 0x69, 0xff, 0x63, 0xf4, 0x49, 0xc5, 0x6e, 0xb1,
		0x9c, 0xee, 0x72, 0xdb, 0x58, 0x21, 0x91, 0x4f, 0x45, 0xb6, 0x4b, 0x54, 0xc6, 0x3f, 0x7d, 0x1f,
		0xeb, 0x65, 0xb1, 0x9c, 0x48, 0x93, 0x9c, 0x88, 0x9c, 0x67, 0xb0, 0xad, 0x9c, 0x48, 0x61, 0x76,
		0x5e, 0x9e, 0x8d, 0x97, 0x60, 0xdf, 0x25, 0xd9, 0x76, 0x39, 0x2c, 0x2d, 0xef, 0x97, 0x6b, 0xb2,
		0x67, 0x63, 0x26, 0xa7, 0xcf, 0xdc, 0xee, 0xcb, 0x91, 0x04, 0xfd, 0x25, 0xd1, 0x69, 0xc3, 0xda,
		0xe6, 0xba, 0x08, 0x81, 0xed, 0xa5, 0x2d, 0x40, 0x99, 0x34, 0x0d, 0x4f, 0x20, 0xc0, 0xbb, 0x4e,
		0x55, 0xec, 0x7a, 0xd7, 0xd7, 0x7e, 0xe8, 0xa7, 0x77, 0xee, 0xb5, 0xe7, 0x07, 0xa3, 0x58, 0x69,
		0x81, 0x4a, 0x61, 0xb1, 0x98, 0x7a, 0x4c, 0x3d, 0xa6, 0xbe, 0x7c, 0x54, 0x0b, 0x53, 0x8f, 0xa9,
		0x37, 0x36, 0xf5, 0xd7, 0x71, 0x2c, 0x64, 0xdd, 0xe7, 0x92, 0x30, 0xe8, 0x18, 0x74, 0x0c, 0x3a,
		0xdc, 0x7d, 0x63, 0xa4, 0x1a, 0x6b, 0x6e, 0xc5, 0x9a, 0xf7, 0x03, 0xe5, 0x85, 0xa3, 0xa1, 0xb1,
		0x2d, 0x5f, 0x96, 0x83, 0x25, 0xc7, 0x92, 0x63, 0xc9, 0xb1, 0xe4, 0x1b, 0x96, 0xe4, 0x18, 0x5e,
		0x6e, 0xc7, 0x92, 0xfb, 0x61, 0x92, 0x7a, 0x41, 0x60, 0x6c, 0xc9, 0x97, 0xe5, 0x60, 0xc9, 0xb1,
		0xe4, 0x58, 0x72, 0x2c, 0xf9, 0x26, 0x4b, 0x7e, 0x82, 0x29, 0x97, 0x36, 0xe5, 0x81, 0x1f, 0x4e,
		0x6b, 0x67, 0xcb, 0x9b, 0xef, 0xd9, 0x77, 0x31, 0xd9, 0x98, 0xec, 0x07, 0x57, 0xbe, 0xe8, 0x24,
		0x94, 0x82, 0x13, 0x50, 0xcc, 0x0f, 0x7c, 0x94, 0x55, 0x8c, 0x07, 0x5e, 0xd8, 0x2f, 0xd2, 0x23,
		0xb0, 0xf1, 0xdc, 0x2f, 0x8b, 0xe0, 0xf8, 0x73, 0xfc, 0x77, 0xe6, 0xf8, 0x67, 0x24, 0xdb, 0xbd,
		0xce, 0xa6, 0x4a, 0x86, 0xfd, 0x3b, 0xad, 0xf3, 0xbf, 0x2a, 0x43, 0xb2, 0xe0, 0x66, 0x8c, 0xf1,
		0x54, 0xdc, 0xa0, 0x6f, 0x78, 0x08, 0x78, 0x08, 0xe5, 0x97, 0x84, 0x34, 0xac, 0x18, 0x66, 0x24,
		0xaa, 0x1f, 0x85, 0x03, 0x2f, 0xbe, 0xcb, 0x06, 0x2a, 0xaa, 0xd8, 0xf5, 0x07, 0x25, 0x06, 0x46,
		0x6c, 0xfc, 0x36, 0xe3, 0x23, 0x18, 0x1f, 0x51, 0xe0, 0x98, 0xe9, 0x8c, 0xfe, 0x5c, 0x17, 0xc2,
		0x68, 0x09, 0x46, 0x4b, 0x98, 0xc1, 0x51, 0xf9, 0xd1, 0x12, 0x1b, 0xce, 0xa1, 0x6b, 0xd8, 0xee,
		0xfa, 0xb0, 0x48, 0x5a, 0x60, 0x2d, 0x29, 0x82, 0x98, 0x42, 0x88, 0x29, 0x86, 0x9c, 0x82, 0x94,
		0x53, 0x14, 0x0d, 0xfe, 0xe6, 0xc8, 0xb4, 0xb1, 0x0a, 0xdd, 0x7b, 0x6f, 0x72, 0xdf, 0xbd, 0xf1,
		0x3d, 0xf7, 0x3b, 0x7a, 0xbf, 0xbd, 0xc9, 0xbd, 0xf6, 0x3b, 0xd5, 0x9c, 0x68, 0x6a, 0x5a, 0xe9,
		0x58, 0x7c, 0xd8, 0x4e, 0x6d, 0xad, 0x63, 0x71, 0x93, 0xe3, 0x71, 0xa4, 0xcf, 0x0f, 0x1d, 0xd3,
		0x1e, 0xbb, 0xb7, 0xb3, 0x47, 0x67, 0x63, 0x75, 0xe2, 0x9f, 0x06, 0x1b, 0xfe, 0xd3, 0xa1, 0x76,
		0x39, 0x6a, 0x38, 0x89, 0x16, 0xf6, 0xc3, 0x46, 0xff, 0x63, 0x12, 0x5d, 0xa7, 0xee, 0x30, 0x56,
		0xea, 0x76, 0x58, 0x68, 0x41, 0xe7, 0x74, 0x6f, 0xe5, 0x8b, 0xb8, 0xcc, 0xb8, 0xcc, 0xab, 0x7f,
		0x50, 0x85, 0xde, 0x55, 0xa0, 0x31, 0x72, 0x71, 0xfa, 0x3d, 0x06, 0xf4, 0xe3, 0x18, 0x1b, 0xc2,
		0xbb, 0xfe, 0x80, 0xfe, 0xab, 0x28, 0x0a, 0x94, 0x17, 0xea, 0x4c, 0xe8, 0x6f, 0x55, 0x38, 0x6f,
		0xfc, 0x3a, 0x8e, 0xdd, 0x58, 0x7d, 0x8e, 0xfd, 0x54, 0x43, 0xcf, 0x16, 0xbf, 0x8c, 0xb2, 0xa1,
		0x6c, 0x5b, 0x53, 0xb6, 0x9d, 0xb8, 0x84, 0x46, 0xfb, 0x62, 0xc4, 0x2a, 0x2e, 0x44, 0xe4, 0xf6,
		0x60, 0xf4, 0xbc, 0xfe, 0x7a, 0xce, 0x85, 0x88, 0xf9, 0x97, 0xb9, 0xf3, 0xc6, 0x78, 0xe9, 0x8e,
		0xb9, 0x10, 0xd1, 0x30, 0xbe, 0xb9, 0x87, 0x91, 0x9a, 0x52, 0x61, 0x09, 0xf3, 0x20, 0x4d, 0x74,
		0x9d, 0xbe, 0x99, 0x3f, 0xcd, 0x46, 0x80, 0x26, 0x0e, 0x4a, 0xd4, 0x7e, 0x66, 0x7f, 0x9a, 0x50,
		0x0c, 0xa1, 0x98, 0xd5, 0x3f, 0x38, 0x98, 0x90, 0x4a, 0xd7, 0x1b, 0xdc, 0xfa, 0xa1, 0xfb, 0x59,
		0xf9, 0x37, 0x1f, 0x35, 0x98, 0xec, 0x46, 0x29, 0x56, 0xef, 0xf9, 0x86, 0xd5, 0xc2, 0x6a, 0x61,
		0xb5, 0x3b, 0xc7, 0x6a, 0x9b, 0xb0, 0x5a, 0xdd, 0xa5, 0xeb, 0xb4, 0xcf, 0x3a, 0x67, 0x27, 0xa7,
		0xed, 0xb3, 0x2e, 0xe4, 0xd6, 0x36, 0xb9, 0x7d, 0x4e, 0x0e, 0x03, 0x60, 0x22, 0xac, 0xba, 0xd5,
		0xb0, 0xea, 0xd8, 0xf1, 0x4a, 0xca, 0xeb, 0xd7, 0xe4, 0x6b, 0xd4, 0xce, 0xa2, 0x5e, 0x86, 0xea,
		0x55, 0xba, 0x76, 0x76, 0x1a, 0x29, 0xd0, 0x2c, 0x93, 0xcd, 0xbe, 0xad, 0x57, 0x11, 0xdb, 0xa2,
		0x22, 0xb6, 0xb2, 0x63, 0x2e, 0x76, 0xdc, 0xe5, 0x8e, 0xbd, 0x26, 0xab, 0x2a, 0xb9, 0xf7, 0x65,
		0xd5, 0x21, 0xff, 0xa2, 0x56, 0x64, 0xe1, 0xc1, 0xe3, 0xa3, 0x11, 0x61, 0x30, 0x24, 0x55, 0x62,
		0xea, 0x23, 0xa1, 0x46, 0xc2, 0xea, 0x24, 0xa5, 0x56, 0xe2, 0xea, 0x25, 0xae, 0x66, 0xf2, 0xea,
		0xa6, 0xa7, 0x76, 0x06, 0x6e, 0xa4, 0x63, 0x54, 0x98, 0x6e, 0x1e, 0x9d, 0x10, 0x88, 0x56, 0x08,
		0x45, 0x2f, 0xcc, 0xa3, 0x19, 0xa2, 0xd1, 0x0d, 0xe9, 0x68, 0x87, 0x35, 0xcf, 0x5d, 0xde, 0x93,
		0x17, 0x3a, 0xd6, 0x62, 0xd1, 0x12, 0x6b, 0xd1, 0x93, 0x5d, 0xde, 0x93, 0x67, 0xdb, 0xf9, 0xf6,
		0x65, 0x55, 0x57, 0x42, 0x6a, 0xd0, 0xc8, 0x24, 0x0e, 0x6e, 0x5c, 0x2d, 0xc2, 0xbe, 0x66, 0x47,
		0xe7, 0xa2, 0xa0, 0x23, 0xd0, 0x11, 0xe8, 0x88, 0xe6, 0xc9, 0x99, 0xe4, 0xf4, 0xfd, 0x28, 0x71,
		0xbf, 0xc4, 0x6e, 0x32, 0xb9, 0xfe, 0xd8, 0x9c, 0x9b, 0xe8, 0xb4, 0xcd, 0xe5, 0x32, 0x5e, 0xa9,
		0xf0, 0x26, 0xab, 0x38, 0xd8, 0x4f, 0x76, 0xd2, 0x82, 0x9d, 0xd4, 0x85, 0x9d, 0x9c, 0x74, 0x60,
		0x25, 0x55, 0xb1, 0x12, 0x03, 0x83, 0x60, 0xda, 0x4f, 0x9b, 0x0b, 0x7a, 0xdf, 0xeb, 0x7d, 0xee,
		0xf5, 0xdc, 0x5e, 0xef, 0xc5, 0xf9, 0xf3, 0x0f, 0x7f, 0xff, 0x97, 0xaf, 0xfe, 0xb5, 0xd7, 0xfb,
		0xf6, 0xaf, 0xbd, 0xde, 0x9f, 0xff, 0x7e, 0xf9, 0x6d, 0x63, 0x3f, 0xf9, 0x56, 0xea, 0xa5, 0x7e,
		0xdf, 0xcd, 0xb8, 0xd2, 0xad, 0xba, 0xbd, 0x52, 0x71, 0x22, 0xc0, 0xbc, 0x36, 0x08, 0x35, 0xe3,
		0x60, 0x2d, 0x38, 0x18, 0x1c, 0x6c, 0xd7, 0x38, 0x98, 0x6e, 0x64, 0xf6, 0x11, 0xe5, 0x34, 0xdf,
		0xf5, 0x87, 0x75, 0xd4, 0x74, 0xfb, 0xcd, 0x54, 0x55, 0x4c, 0x65, 0x25, 0x55, 0xd7, 0x92, 0x0a,
		0x4b, 0xab, 0xb2, 0x35, 0x95, 0xb6, 0xa6, 0xda, 0xf6, 0x54, 0x5c, 0x88, 0xc6, 0x18, 0x9e, 0x3d,
		0x53, 0xd5, 0xcf, 0x05, 0x5d, 0xc7, 0xd1, 0xed, 0x6c, 0x5a, 0x89, 0xdc, 0x39, 0x99, 0xf7, 0x13,
		0x2e, 0x48, 0x17, 0xda, 0x51, 0xb3, 0xa8, 0x89, 0x35, 0x73, 0x60, 0xc3, 0x2c, 0x58, 0x36, 0x0f,
		0xb6, 0xcc, 0x84, 0x75, 0x73, 0x61, 0xdd, 0x6c, 0xd8, 0x37, 0x1f, 0x32, 0x66, 0x44, 0xd0, 0xbf,
		0x95, 0x89, 0xea, 0x3c, 0x78, 0x72, 0x85, 0xa6, 0x22, 0xd9, 0x0c, 0xfb, 0x58, 0xf3, 0xfa, 0xd6,
		0x04, 0xef, 0xe6, 0x74, 0xa5, 0x87, 0x9d, 0x5a, 0xfd, 0xa9, 0x4b, 0xb2, 0x2e, 0xad, 0xbc, 0x72,
		0x49, 0x04, 0x8e, 0xd2, 0xc8, 0x1e, 0xc0, 0x2e, 0xc8, 0x06, 0x5e, 0x81, 0x57, 0xe0, 0xb5, 0xd6,
		0xf0, 0xfa, 0xda, 0x0b, 0x07, 0x5e, 0x1a, 0xc5, 0x77, 0x82, 0x41, 0x78, 0x20, 0x1b, 0xc8, 0x06,
		0xb2, 0x6b, 0xe3, 0x98, 0x4f, 0x07, 0x34, 0x0a, 0x3a, 0xbe, 0x7a, 0xb3, 0x1a, 0x1f, 0xb6, 0x41,
		0xba, 0x33, 0x1c, 0x1f, 0xb1, 0x6a, 0x72, 0xb3, 0x1d, 0x1f, 0x7c, 0x88, 0xd6, 0xcc, 0x47, 0x5b,
		0x9b, 0xac, 0x39, 0x23, 0xf2, 0x41, 0x79, 0x02, 0x5d, 0xee, 0x71, 0x70, 0x73, 0x94, 0x75, 0x40,
		0x64, 0x7f, 0x3f, 0xda, 0x90, 0x21, 0x39, 0x12, 0x8f, 0xc8, 0x3a, 0xc6, 0xcd, 0xf2, 0x71, 0x70,
		0xf3, 0x61, 0x0c, 0x37, 0x49, 0xf6, 0xf7, 0x0f, 0x6f, 0xb3, 0x37, 0x1c, 0xff, 0xd7, 0xd7, 0x93,
		0x77, 0x5e, 0xfb, 0x2f, 0x8d, 0x2d, 0x25, 0x0f, 0xab, 0x0d, 0xec, 0x0b, 0x9d, 0xaf, 0x6a, 0xce,
		0x95, 0x49, 0xaa, 0xc9, 0xea, 0xe1, 0x69, 0x54, 0x95, 0x16, 0xb5, 0x5a, 0x7e, 0x3f, 0x9b, 0xf8,
		0xab, 0x59, 0x6c, 0x66, 0x86, 0x1e, 0xe6, 0x68, 0x61, 0x05, 0x1d, 0xcc, 0xd0, 0xa0, 0xec, 0x0e,
		0x18, 0x6a, 0xa3, 0xbc, 0x16, 0x36, 0xb4, 0xf2, 0xf0, 0x62, 0x9a, 0xd6, 0xd8, 0x89, 0x49, 0xd9,
		0x5b, 0x9c, 0xe3, 0x9c, 0xef, 0x56, 0x65, 0x93, 0x9a, 0xf3, 0x0d, 0x3a, 0xd8, 0x79, 0xcc, 0x4f,
		0x8f, 0xb9, 0x11, 0x59, 0x65, 0xed, 0x81, 0x3e, 0xcf, 0x4a, 0xac, 0x63, 0xd1, 0xf5, 0x33, 0x5f,
		0xb7, 0xc6, 0x63, 0x73, 0x86, 0xf4, 0x97, 0x6a, 0xf3, 0x2a, 0xad, 0xaf, 0xc1, 0x86, 0xdf, 0xdf,
		0xb8, 0xc9, 0x5e, 0x36, 0x0c, 0xfd, 0x07, 0x7f, 0x7a, 0x1e, 0xa0, 0x98, 0xff, 0xd1, 0x07, 0xd6,
		0xf1, 0xf1, 0x8a, 0x81, 0x27, 0x63, 0x93, 0x45, 0x62, 0x8d, 0x25, 0x63, 0x87, 0x45, 0x63, 0x81,
		0xa5, 0x63, 0x7b, 0xa5, 0x63, 0x75, 0xe5, 0x63, 0x6f, 0xe5, 0xce, 0xf0, 0x53, 0x19, 0xea, 0xe9,
		0x3c, 0x04, 0xf7, 0xe9, 0xfd, 0x5e, 0x5b, 0xea, 0xb5, 0x6f, 0x72, 0xad, 0x22, 0xd7, 0x2a, 0x3e,
		0x7c, 0x5a, 0xea, 0x70, 0x8d, 0xe9, 0xd8, 0x46, 0xbb, 0x89, 0x0a, 0x54, 0x56, 0xa4, 0xeb, 0xde,
		0xaa, 0x34, 0xf6, 0xfb, 0xc5, 0x4f, 0xfc, 0xe6, 0xaf, 0x73, 0xec, 0x39, 0xf6, 0x0f, 0xae, 0xfc,
		0xeb, 0xe9, 0xcb, 0xe9, 0x1c, 0x9d, 0x25, 0x75, 0x28, 0x50, 0xa1, 0xde, 0xf8, 0x21, 0x1c, 0xdd,
		0x16, 0xdf, 0xb5, 0x77, 0xd1, 0xdb, 0x49, 0x9b, 0x47, 0x29, 0x62, 0xde, 0xca, 0x72, 0x12, 0x37,
		0xc3, 0x32, 0xa4, 0xba, 0x9d, 0xe5, 0x48, 0xcb, 0x38, 0x4c, 0x8d, 0xce, 0x64, 0xac, 0x5d, 0xe0,
		0xdd, 0x35, 0x64, 0x87, 0xb6, 0x44, 0x3f, 0x85, 0xe5, 0xda, 0xe0, 0xa7, 0x6f, 0x71, 0xee, 0x94,
		0xe8, 0x11, 0xc8, 0x16, 0xa8, 0x54, 0x72, 0xa9, 0x91, 0xcd, 0x89, 0x6f, 0x57, 0xe3, 0x37, 0x68,
		0xd9, 0xce, 0x34, 0x1a, 0x46, 0x41, 0x74, 0x73, 0xe7, 0xfa, 0x61, 0x92, 0x7a, 0x61, 0x5f, 0x95,
		0xb8, 0xcc, 0x73, 0xc3, 0x77, 0x19, 0x86, 0xc9, 0x30, 0xcc, 0x27, 0x8f, 0x98, 0xc6, 0x4c, 0xf7,
		0x35, 0x11, 0x8c, 0x22, 0x62, 0x14, 0x91, 0x21, 0x68, 0x94, 0x1e, 0x45, 0xe4, 0xdf, 0x0c, 0xf3,
		0x03, 0xe8, 0x9a, 0xcd, 0x25, 0x5a, 0x17, 0xc5, 0xb5, 0x9d, 0x96, 0x0e, 0xbe, 0x98, 0x02, 0x88,
		0x29, 0x82, 0x9c, 0x42, 0x54, 0x93, 0x25, 0x31, 0xbf, 0xb6, 0x53, 0xa6, 0x0d, 0xd9, 0xe8, 0xd6,
		0x4e, 0xc3, 0xb6, 0x63, 0x83, 0x44, 0xa1, 0x44, 0x9b, 0xb1, 0x54, 0x7b, 0xb1, 0x78, 0x2b, 0xab,
		0x5c, 0x0b, 0xab, 0x41, 0xdd, 0x80, 0x48, 0xfb, 0xf0, 0x7c, 0xa8, 0x49, 0x73, 0x7f, 0xd7, 0xb8,
		0xa2, 0xac, 0xed, 0xe5, 0x36, 0xae, 0xd5, 0x15, 0x6d, 0xff, 0xb5, 0x76, 0x63, 0x6d, 0x39, 0x77,
		0xd3, 0x4d, 0x75, 0x6c, 0xef, 0x12, 0xcd, 0xc8, 0x24, 0xc0, 0x2e, 0x60, 0x17, 0x7b, 0xcb, 0x2e,
		0x66, 0xd1, 0xb8, 0xf1, 0x69, 0x1f, 0xc6, 0x51, 0x1a, 0xf5, 0xa3, 0xc0, 0x84, 0x5e, 0x68, 0x8c,
		0x8d, 0x28, 0x17, 0xa4, 0x93, 0x09, 0xda, 0xad, 0x49, 0x69, 0x66, 0x13, 0x4f, 0xcd, 0x0a, 0x89,
		0xa7, 0x91, 0xc0, 0xc4, 0x37, 0x2a, 0x3d, 0xca, 0x42, 0x83, 0x51, 0x32, 0xbc, 0x6e, 0x54, 0x3b,
		0x37, 0xa7, 0x74, 0x18, 0x70, 0xdd, 0xe6, 0x8e, 0x7f, 0xb9, 0x11, 0xcd, 0x9a, 0xec, 0x80, 0x11,
		0xe8, 0x4f, 0x96, 0xae, 0x68, 0xe0, 0xd0, 0x1c, 0xae, 0xef, 0x6b, 0x00, 0x76, 0xe3, 0x9f, 0xec,
		0x7a, 0xb1, 0xf2, 0x0c, 0x21, 0x6f, 0x45, 0x0e, 0xc0, 0x07, 0xf0, 0xed, 0x2d, 0xf0, 0xfd, 0x92,
		0x9f, 0xf5, 0xdb, 0x68, 0xa0, 0x0e, 0x16, 0xf2, 0x32, 0x95, 0xf7, 0xc3, 0xd4, 0x18, 0xf6, 0xc6,
		0x82, 0xfc, 0x61, 0xd6, 0x5a, 0xb0, 0x73, 0xc0, 0x95, 0x2f, 0x82, 0x39, 0xf2, 0xcc, 0x96, 0xe0,
		0xdc, 0x69, 0x1d, 0x1a, 0x00, 0xf9, 0x1a, 0xdb, 0xb0, 0x0c, 0x3d, 0xe5, 0xcf, 0x21, 0x03, 0xe7,
		0x01, 0x9d, 0xca, 0x40, 0x47, 0x7b, 0xe0, 0x7c, 0x3f, 0x0a, 0xd3, 0x38, 0x0a, 0x02, 0x91, 0x19,
		0x63, 0x8b, 0xc2, 0x98, 0x2d, 0xc6, 0x6c, 0xb1, 0xad, 0x29, 0x9b, 0x61, 0x60, 0x74, 0x5b, 0xb3,
		0xc5, 0xe6, 0xfa, 0x23, 0x37, 0x53, 0x6c, 0x41, 0x26, 0xb3, 0xc4, 0x2a, 0x52, 0x59, 0x69, 0xd5,
		0xb5, 0xa6, 0xc2, 0xd6, 0x54, 0xd9, 0x9e, 0x4a, 0x9b, 0xa9, 0xb6, 0xa1, 0x8a, 0x8b, 0xa9, 0x7a,
		0x2e, 0x48, 0xe4, 0xc2, 0x97, 0x07, 0x8f, 0xb3, 0xc0, 0x05, 0x30, 0x42, 0xb1, 0x14, 0xeb, 0xe6,
		0xc0, 0x86, 0x59, 0xb0, 0x6c, 0x1e, 0x6c, 0x99, 0x09, 0xeb, 0xe6, 0xc2, 0xba, 0xd9, 0xb0, 0x6f,
		0x3e, 0x64, 0xcc, 0x88, 0x90, 0x39, 0x31, 0x8f, 0x1d, 0x3d, 0x79, 0x72, 0x8d, 0x2f, 0xb0, 0x79,
		0xc8, 0x0e, 0x9c, 0x0a, 0x8a, 0x94, 0xb9, 0xe0, 0x66, 0xf5, 0x2f, 0x59, 0xa5, 0x72, 0xa4, 0x47,
		0xcc, 0xaf, 0x09, 0x17, 0xbe, 0x10, 0x67, 0x4d, 0xbe, 0xad, 0xb1, 0xe7, 0xeb, 0x67, 0x4f, 0x7a,
		0x0c, 0xba, 0x25, 0xb5, 0x5b, 0xde, 0x5a, 0xef, 0x8b, 0xfd, 0xad, 0x3d, 0xe9, 0x76, 0x8f, 0xbb,
		0x6c, 0x6f, 0x25, 0xb6, 0x59, 0x5e, 0xda, 0x3e, 0x0d, 0xda, 0xf3, 0xae, 0xaf, 0xfd, 0xd0, 0x4f,
		0xef, 0xdc, 0x72, 0x37, 0xc8, 0x16, 0x67, 0xa0, 0xcb, 0xf2, 0x65, 0x39, 0x68, 0x0b, 0x0e, 0x0a,
		0x07, 0x85, 0x83, 0xca, 0x72, 0x50, 0x29, 0xd7, 0x76, 0xb3, 0x89, 0x91, 0x3f, 0x60, 0x1b, 0x2d,
		0x8d, 0xf4, 0x21, 0x93, 0x75, 0x7a, 0xad, 0x19, 0x1e, 0x9b, 0x06, 0xa8, 0x22, 0x43, 0x64, 0xdb,
		0x20, 0x55, 0x66, 0x98, 0x2a, 0x33, 0x50, 0xd5, 0x19, 0x2a, 0x4b, 0xc4, 0x4c, 0xf8, 0xec, 0x8b,
		0x3b, 0xd1, 0x6b, 0x27, 0xdf, 0xf8, 0xc6, 0xb5, 0x27, 0x89, 0xcd, 0xcb, 0x5a, 0xaf, 0xb0, 0xe8,
		0x74, 0xc5, 0x4d, 0xce, 0xb5, 0xec, 0xb4, 0xc5, 0x4d, 0x3e, 0xde, 0xc2, 0x13, 0x8e, 0xdb, 0x16,
		0x1e, 0x21, 0x3a, 0x7b, 0xd1, 0x9e, 0xfe, 0xd5, 0x8b, 0x7a, 0x08, 0xcf, 0x88, 0xcc, 0xe5, 0x96,
		0x9e, 0xf9, 0x33, 0x9b, 0x92, 0x72, 0xb4, 0xde, 0x0b, 0xbd, 0xfe, 0x9f, 0x8e, 0x66, 0x05, 0x22,
		0x47, 0x0b, 0xf9, 0xef, 0x85, 0xcf, 0x47, 0x56, 0x7c, 0x20, 0xa7, 0xec, 0xbc, 0xa1, 0xf1, 0x6f,
		0xfa, 0x39, 0xf4, 0x3f, 0xbc, 0x9b, 0xbe, 0xff, 0x4f, 0xb3, 0x5f, 0xb4, 0xf6, 0x5f, 0x3e, 0xfc,
		0x92, 0x0c, 0xaf, 0x7f, 0x0a, 0xd3, 0x0f, 0xff, 0x31, 0xff, 0x3d, 0x0b, 0x9f, 0x3f, 0x5c, 0x4c,
		0x7f, 0x4f, 0x89, 0xe9, 0x59, 0xbb, 0xe1, 0x0c, 0xcf, 0xf7, 0x4c, 0x96, 0xab, 0x6e, 0x48, 0xc6,
		0x4a, 0xb2, 0x54, 0x52, 0x32, 0xb8, 0xc3, 0xb8, 0xc3, 0x96, 0x30, 0xc9, 0x5e, 0x4a, 0xe6, 0xa7,
		0x30, 0x55, 0xf1, 0xb5, 0xa7, 0xd7, 0x29, 0x5e, 0x8c, 0x45, 0xee, 0xc2, 0x94, 0xf8, 0xf7, 0x9e,
		0xfb, 0xfb, 0x85, 0xfb, 0x7f, 0x9b, 0xee, 0xd9, 0x8b, 0xf3, 0x0f, 0x47, 0xae, 0xc9, 0xa5, 0x9e,
		0xab, 0x7f, 0xed, 0x53, 0xa0, 0x76, 0x36, 0xd8, 0x46, 0x18, 0x91, 0x26, 0x62, 0xc1, 0x21, 0x70,
		0x08, 0x1c, 0x3a, 0x50, 0x1c, 0xa2, 0x34, 0x40, 0x38, 0x7a, 0x61, 0x3f, 0x7f, 0xdc, 0x22, 0x77,
		0x5c, 0x6d, 0xc8, 0xcb, 0xa9, 0xac, 0x34, 0xa0, 0x75, 0x72, 0x7a, 0x7a, 0xda, 0x6e, 0x51, 0x1d,
		0x50, 0x5d, 0x10, 0xcc, 0xa1, 0x3a, 0xe0, 0x81, 0x4d, 0x9c, 0x4c, 0x0d, 0x96, 0x67, 0x9d, 0x53,
		0xb9, 0xd0, 0x4e, 0x68, 0x27, 0xb4, 0xf3, 0x40, 0x69, 0x67, 0xd1, 0x19, 0xd3, 0xa5, 0xa3, 0x1e,
		0xc7, 0xfb, 0x74, 0x0f, 0x6a, 0xea, 0x4f, 0x9a, 0xc0, 0xe5, 0x6f, 0x41, 0x9d, 0x49, 0xa6, 0x24,
		0x0b, 0x23, 0x8c, 0x11, 0xae, 0xb5, 0x11, 0x16, 0x2f, 0xc9, 0x4a, 0xfb, 0xb7, 0xfe, 0xc0, 0x5e,
		0x29, 0xd6, 0x44, 0x3c, 0x25, 0x58, 0x94, 0x60, 0x6d, 0xd7, 0x10, 0x55, 0x66, 0x90, 0xaa, 0x33,
		0x4c, 0x96, 0xbc, 0xdf, 0x9d, 0x2b, 0xc1, 0x12, 0x0f, 0x5a, 0xae, 0xda, 0x99, 0x53, 0x0b, 0xa2,
		0xed, 0x04, 0x31, 0x67, 0x7f, 0xd9, 0x51, 0x52, 0xc7, 0x76, 0x50, 0x73, 0x3d, 0x02, 0xf6, 0xdc,
		0xee, 0x73, 0xaa, 0x0a, 0x81, 0x55, 0x17, 0x0a, 0xb3, 0xa4, 0xc6, 0xcb, 0x47, 0xc0, 0x62, 0xf0,
		0x73, 0xed, 0x08, 0x9c, 0x70, 0x04, 0x6a, 0x81, 0x0b, 0xf6, 0xa4, 0x5e, 0xd6, 0x1a, 0xbf, 0xd4,
		0x97, 0x34, 0xf6, 0xdc, 0x51, 0x98, 0xa4, 0xa2, 0xf1, 0xcf, 0xa5, 0x67, 0x7c, 0xfe, 0xa8, 0xc2,
		0x5d, 0xc4, 0x82, 0x19, 0x02, 0xbf, 0x78, 0x71, 0x34, 0x8b, 0x21, 0x64, 0x33, 0x19, 0x9d, 0xbf,
		0x3a, 0xff, 0x96, 0xf6, 0x6f, 0xff, 0xad, 0x61, 0xd1, 0x08, 0x59, 0x26, 0xa4, 0x9b, 0x88, 0x69,
		0xb6, 0x4d, 0x96, 0xad, 0x43, 0x55, 0xf4, 0x74, 0x23, 0x4d, 0x7d, 0x70, 0x1f, 0x77, 0x12, 0xa6,
		0xbe, 0x57, 0x49, 0x3f, 0xf6, 0x87, 0xe2, 0x35, 0xc4, 0x4f, 0xa9, 0xc2, 0xbb, 0x77, 0x3f, 0xbd,
		0x8e, 0x06, 0xea, 0xdd, 0x64, 0x01, 0xdf, 0xfd, 0xc7, 0x6b, 0xdb, 0x67, 0xa6, 0x22, 0x55, 0x58,
		0x55, 0x87, 0xc1, 0xc2, 0xfa, 0x3e, 0xb7, 0xff, 0xe4, 0xaa, 0x35, 0x63, 0x93, 0x76, 0xac, 0x6f,
		0xad, 0xd5, 0x57, 0xb8, 0x87, 0x1b, 0xd4, 0xb5, 0x59, 0x42, 0x30, 0xb6, 0xbb, 0x64, 0x72, 0x2d,
		0x46, 0xe2, 0x96, 0x1e, 0x43, 0x44, 0x8e, 0x88, 0x5c, 0x61, 0x4b, 0x4f, 0x44, 0x6e, 0x9b, 0x76,
		0x70, 0xf7, 0x22, 0x72, 0x59, 0x83, 0x91, 0x70, 0x56, 0x71, 0x93, 0xb9, 0xd1, 0x19, 0x6a, 0xfd,
		0xa4, 0x6c, 0xa3, 0xa1, 0xd7, 0x4f, 0x2f, 0xbe, 0xc4, 0x50, 0xec, 0x27, 0x9f, 0x92, 0xcd, 0xba,
		0x4e, 0x6e, 0x6d, 0xfa, 0x5f, 0xd9, 0x05, 0x10, 0x43, 0xab, 0x8f, 0x38, 0x9e, 0x26, 0x90, 0xec,
		0x90, 0x2c, 0x4b, 0xae, 0x87, 0xc0, 0xa4, 0xef, 0x27, 0x1f, 0x31, 0x1c, 0x1f, 0xd0, 0xb6, 0xc5,
		0x95, 0x4f, 0x6e, 0xed, 0x06, 0x5f, 0xb3, 0x5d, 0x3d, 0x77, 0x8e, 0x77, 0x84, 0x85, 0xde, 0xd3,
		0xb2, 0x5b, 0x04, 0x5e, 0xf7, 0xb3, 0x65, 0xd7, 0x02, 0x8e, 0x6d, 0xa9, 0x59, 0xf7, 0x5d, 0xea,
		0x8f, 0xbd, 0xd7, 0xda, 0xb4, 0xe9, 0x6e, 0x75, 0x6c, 0xeb, 0x3f, 0xd5, 0x9d, 0x7c, 0x1b, 0xae,
		0xec, 0x38, 0x04, 0xf9, 0xf1, 0x07, 0x2b, 0xe3, 0x0e, 0x5a, 0x2f, 0x3b, 0x9d, 0x93, 0xd3, 0x4e,
		0xa7, 0x79, 0x7a, 0x7c, 0xda, 0x3c, 0xeb, 0x76, 0x5b, 0x27, 0x12, 0xc5, 0xe6, 0xb2, 0x03, 0x0f,
		0x4c, 0xf7, 0x59, 0xd8, 0x2a, 0x6d, 0xd9, 0x1a, 0x49, 0x4c, 0xa2, 0xde, 0x8a, 0xf1, 0x31, 0x33,
		0x3a, 0xf7, 0x3b, 0x32, 0xf6, 0x5d, 0xe8, 0xb0, 0x6d, 0xe3, 0x90, 0x99, 0x5c, 0x4b, 0x50, 0xdd,
		0x89, 0x6a, 0x54, 0x75, 0x5d, 0x8d, 0xc6, 0x8d, 0x27, 0xfe, 0xcd, 0x30, 0xbb, 0xaa, 0xc9, 0xfc,
		0xf2, 0x8c, 0x5c, 0x92, 0xd9, 0xcd, 0x19, 0x4d, 0x6e, 0xce, 0x90, 0x8e, 0x96, 0x71, 0x73, 0x86,
		0x6d, 0x13, 0x6a, 0x1c, 0x9d, 0x92, 0xab, 0x0b, 0x13, 0xa8, 0xff, 0x12, 0xaa, 0xf3, 0x92, 0xe1,
		0x92, 0x72, 0x9d, 0x03, 0xc2, 0x73, 0xa9, 0xad, 0x15, 0xe1, 0xc8, 0x17, 0xdb, 0xdc, 0xcb, 0x90,
		0x70, 0xf9, 0xad, 0xe8, 0xb4, 0xcf, 0x3a, 0x67, 0x27, 0xa7, 0xed, 0xb3, 0xee, 0xe1, 0xed, 0xc9,
		0x96, 0xb8, 0xe5, 0x65, 0x3d, 0xef, 0xce, 0x2b, 0x7b, 0x37, 0xdd, 0xc4, 0x11, 0xd6, 0xe4, 0x1c,
		0x66, 0x1e, 0xaf, 0xb9, 0x87, 0x6b, 0xc5, 0xa3, 0x35, 0xf3, 0x60, 0xcb, 0x6e, 0x80, 0x40, 0x85,
		0x99, 0x59, 0x05, 0x99, 0x00, 0xd6, 0xbe, 0x78, 0x71, 0xb4, 0x7c, 0x2d, 0xaf, 0xf3, 0x57, 0xe7,
		0xdf, 0x66, 0x6e, 0xc6, 0xbf, 0xd5, 0x8c, 0xb8, 0x09, 0xd4, 0x71, 0xd9, 0xa5, 0x6d, 0x4f, 0xac,
		0xe6, 0xb3, 0x2d, 0x80, 0x97, 0x68, 0x35, 0xd5, 0xe2, 0xb1, 0xf9, 0xe5, 0xed, 0x9b, 0x1f, 0x2f,
		0x62, 0xe5, 0x4d, 0x6b, 0x6a, 0xc6, 0xff, 0xfa, 0x53, 0x68, 0x7a, 0x43, 0x91, 0x64, 0x72, 0xdc,
		0x5e, 0xc9, 0x93, 0x95, 0xcc, 0xf7, 0xea, 0x41, 0x7a, 0x60, 0x7d, 0x77, 0x2b, 0x1c, 0xf3, 0xcc,
		0x2e, 0x34, 0x97, 0xb5, 0xd8, 0x86, 0x61, 0x9e, 0xaa, 0xc2, 0x3b, 0x3a, 0xd7, 0xb6, 0xda, 0x0d,
		0xe5, 0x34, 0x6a, 0x72, 0x0b, 0xf0, 0xfc, 0xfe, 0x63, 0x83, 0x8b, 0x80, 0x67, 0x42, 0xb8, 0x0b,
		0xd8, 0xb2, 0x35, 0xe6, 0x2e, 0x60, 0x5d, 0x43, 0xa5, 0x7d, 0x17, 0xf0, 0xf8, 0x60, 0xab, 0x44,
		0xe0, 0x1e, 0xe0, 0x99, 0x20, 0x22, 0x99, 0x44, 0x32, 0x89, 0x64, 0x6a, 0x9e, 0x1c, 0x7f, 0xf8,
		0xa9, 0xe3, 0x4e, 0x35, 0xc9, 0x0d, 0x23, 0xf7, 0xf7, 0x28, 0x54, 0x02, 0x71, 0x4d, 0x93, 0xa1,
		0xb0, 0x62, 0x43, 0x60, 0x1b, 0x5f, 0x7f, 0xfd, 0xbe, 0xe9, 0x9e, 0x5d, 0xfe, 0xf9, 0xbe, 0xe5,
		0x9e, 0x5d, 0x4e, 0x3e, 0xb6, 0xb2, 0x7f, 0x4c, 0x3e, 0xb7, 0xdf, 0x37, 0xdd, 0xce, 0xec, 0x73,
		0xf7, 0x7d, 0xd3, 0xed, 0x5e, 0x7e, 0xd3, 0xeb, 0xbd, 0xf8, 0xe6, 0x8f, 0xe3, 0xfb, 0xf2, 0x5f,
		0xfc, 0xfa, 0xab, 0xf7, 0xbd, 0xde, 0xf0, 0x8f, 0x9f, 0xef, 0xc7, 0x7f, 0x7f, 0x75, 0x7f, 0xf9,
		0xed, 0x37, 0x7f, 0x33, 0x3d, 0xf5, 0xe3, 0x07, 0xf4, 0x7a, 0x2f, 0x2e, 0xff, 0xd2, 0xa8, 0x7f,
		0x1c, 0xe9, 0x39, 0x97, 0xc2, 0x03, 0x08, 0x00, 0xc2, 0xb6, 0x00, 0x81, 0x4b, 0xe1, 0xab, 0x50,
		0x51, 0x49, 0x55, 0xb5, 0xa4, 0xb2, 0x36, 0xc2, 0x54, 0x0e, 0x97, 0xc2, 0x0b, 0xc5, 0xa8, 0x1c,
		0x2e, 0x85, 0x17, 0x30, 0x03, 0x8c, 0xe0, 0x64, 0xfa, 0x1b, 0xd3, 0xdf, 0x64, 0xcc, 0x89, 0x9c,
		0x4b, 0xf9, 0xe0, 0xc9, 0x65, 0xf2, 0xbb, 0xe4, 0xb1, 0xe4, 0x52, 0xf8, 0x42, 0x67, 0x8f, 0xc9,
		0xef, 0x0f, 0x6c, 0x2d, 0x97, 0xc2, 0x57, 0x67, 0x9b, 0xe5, 0xa5, 0x71, 0x29, 0x7c, 0x09, 0x06,
		0xca, 0xa5, 0xf0, 0x70, 0x50, 0x38, 0xe8, 0x0e, 0x71, 0x50, 0x2e, 0x85, 0xb7, 0xee, 0xf4, 0x5a,
		0x33, 0x3c, 0x36, 0x0d, 0x50, 0x45, 0x86, 0xc8, 0xb6, 0x41, 0xaa, 0xcc, 0x30, 0x55, 0x66, 0xa0,
		0xaa, 0x33, 0x54, 0x96, 0x88, 0x19, 0x97, 0xc2, 0xaf, 0x11, 0x1b, 0x2e, 0x85, 0xe7, 0x52, 0xf8,
		0x2a, 0xf4, 0x8f, 0x09, 0x13, 0x42, 0xf5, 0x98, 0xd3, 0x62, 0xc1, 0xbd, 0xba, 0x17, 0xde, 0x1f,
		0x5e, 0x0c, 0x06, 0x31, 0x57, 0xc3, 0x73, 0x35, 0x3c, 0x4e, 0x31, 0x4e, 0xf1, 0x41, 0x3b, 0xc5,
		0x5c, 0x0d, 0x3f, 0xd5, 0x61, 0xae, 0x86, 0xdf, 0x2a, 0x36, 0x71, 0x35, 0x3c, 0x38, 0x04, 0x0e,
		0x81, 0x43, 0x14, 0x08, 0x08, 0xfe, 0xc5, 0xd5, 0xf0, 0xcb, 0xf2, 0x29, 0x10, 0x78, 0x22, 0x78,
		0xc4, 0xd5, 0xf0, 0xf5, 0xd9, 0x61, 0x6a, 0x04, 0xac, 0x93, 0x4e, 0xae, 0x86, 0x87, 0x76, 0x42,
		0x3b, 0xa1, 0x9d, 0x5c, 0x0d, 0xbf, 0x25, 0x03, 0xcc, 0xd5, 0xf0, 0x18, 0x61, 0x8c, 0xf0, 0xa1,
		0x1b, 0x61, 0xae, 0x86, 0xa7, 0x10, 0xab, 0x42, 0xc3, 0x63, 0xdb, 0x00, 0x55, 0x66, 0x88, 0x2a,
		0x33, 0x48, 0xd5, 0x19, 0x26, 0x4b, 0xde, 0x2f, 0x57, 0xc3, 0xaf, 0xda, 0x19, 0xae, 0x86, 0x5f,
		0x8c, 0x7c, 0x71, 0x35, 0x7c, 0x9d, 0x43, 0x61, 0x96, 0xd4, 0x78, 0xf9, 0x08, 0x70, 0x35, 0xfc,
		0x4e, 0x1c, 0x01, 0xae, 0x86, 0x17, 0xd8, 0x2e, 0xae, 0x86, 0x7f, 0x1a, 0x81, 0xb9, 0x1a, 0x7e,
		0xe7, 0xe8, 0xe9, 0x46, 0x9a, 0xca, 0xd5, 0xf0, 0x12, 0xaa, 0xc0, 0xd5, 0xf0, 0x7b, 0xa1, 0x19,
		0x0e, 0x57, 0xc3, 0xef, 0x1d, 0x37, 0xe0, 0x6a, 0x78, 0xae, 0x86, 0x77, 0x88, 0xc8, 0x95, 0xb5,
		0xf4, 0x44, 0xe4, 0xb6, 0x69, 0x07, 0xb9, 0x1a, 0xfe, 0x21, 0x73, 0xc3, 0xd5, 0xf0, 0x0f, 0x3c,
		0x85, 0xab, 0xe1, 0xb7, 0xe6, 0x7a, 0x70, 0x35, 0x7c, 0x21, 0xce, 0xc3, 0xd5, 0xf0, 0xb5, 0x91,
		0x44, 0xe3, 0xee, 0x53, 0x8d, 0xbb, 0x3b, 0x76, 0x3b, 0xfc, 0xe3, 0x2d, 0xbb, 0x5c, 0x10, 0xbf,
		0x4c, 0x72, 0xb9, 0x20, 0x9e, 0x0b, 0xe2, 0x77, 0xcf, 0x26, 0xd5, 0xfc, 0x8e, 0xf8, 0x47, 0x4d,
		0x10, 0xd7, 0xc4, 0xd7, 0xff, 0xa8, 0xd5, 0xf4, 0xa6, 0xf8, 0xf5, 0x73, 0xd5, 0xd8, 0xa7, 0xfb,
		0x59, 0xf5, 0x2e, 0x52, 0xe2, 0x7a, 0x56, 0xe3, 0xf5, 0xdf, 0xeb, 0xeb, 0x59, 0xa7, 0xea, 0xcd,
		0x0d, 0xad, 0x25, 0x63, 0x84, 0x4f, 0x2f, 0xe8, 0xde, 0x5f, 0xd2, 0xfa, 0xe6, 0xa2, 0xfc, 0xe5,
		0x87, 0x36, 0x23, 0xd5, 0x7b, 0x78, 0x4f, 0xeb, 0x64, 0x89, 0xb9, 0xaa, 0xd5, 0xc0, 0x7a, 0xef,
		0xc0, 0x55, 0xad, 0x7a, 0xf7, 0x88, 0x56, 0x43, 0xa7, 0xac, 0x5d, 0xd8, 0xfa, 0x4c, 0x70, 0xb3,
		0x67, 0x14, 0x69, 0xc5, 0x22, 0xfb, 0x37, 0xc3, 0x7c, 0xa1, 0x33, 0xdf, 0x3d, 0xfb, 0x2f, 0x25,
		0x52, 0x9c, 0x7a, 0xe4, 0x49, 0x9f, 0x34, 0x89, 0x92, 0x25, 0x3d, 0x92, 0x54, 0x74, 0xc5, 0x0d,
		0x48, 0x51, 0xe3, 0x76, 0x94, 0xa4, 0xa5, 0xc9, 0x90, 0xc1, 0xe5, 0xb5, 0xb3, 0xeb, 0x90, 0x9d,
		0x28, 0x76, 0x0c, 0xf5, 0x4d, 0x02, 0x5f, 0xf3, 0xf7, 0x9a, 0x5e, 0xc5, 0x3d, 0x7e, 0xad, 0xb9,
		0xb5, 0x77, 0xc6, 0xab, 0xe3, 0x5c, 0x29, 0x67, 0x18, 0xab, 0x44, 0x85, 0xe9, 0x0b, 0xdd, 0x8b,
		0xf2, 0x04, 0x90, 0x55, 0x1e, 0x51, 0x45, 0x91, 0x74, 0x09, 0x41, 0x0b, 0x2e, 0x66, 0x3d, 0x3d,
		0xc2, 0x67, 0xb2, 0x58, 0x59, 0x54, 0x89, 0x35, 0xb1, 0xd1, 0x32, 0x26, 0x96, 0x38, 0x5e, 0x96,
		0xf0, 0xaf, 0xd8, 0x29, 0x79, 0x7a, 0xd7, 0x1e, 0xff, 0x13, 0x4f, 0xec, 0x52, 0xd9, 0xdd, 0x11,
		0xdd, 0x95, 0x02, 0x7b, 0x20, 0xb3, 0xf6, 0x8f, 0x2f, 0xf5, 0xc3, 0x0b, 0xf8, 0xc8, 0xe2, 0x35,
		0xd2, 0x51, 0x18, 0xaa, 0xc0, 0xfd, 0xa8, 0xbc, 0xc1, 0xd3, 0x17, 0x56, 0xcc, 0x6b, 0xa0, 0x16,
		0xbf, 0xf5, 0xc4, 0xd6, 0x14, 0xeb, 0x62, 0x2e, 0x5c, 0xa2, 0x54, 0xa6, 0xe4, 0x48, 0xb3, 0x84,
		0xa8, 0x2c, 0x1c, 0x68, 0x97, 0xf8, 0x68, 0x5b, 0x78, 0xfd, 0x12, 0x1c, 0x33, 0x35, 0x2b, 0xda,
		0x35, 0xbb, 0x78, 0x40, 0x8a, 0x2f, 0xe3, 0x86, 0xd3, 0x55, 0x74, 0x21, 0xcb, 0xb5, 0xca, 0x97,
		0xae, 0x87, 0xd3, 0xa9, 0x73, 0x33, 0xac, 0x5f, 0xd3, 0xe5, 0x24, 0xc6, 0xf5, 0x66, 0xc6, 0xb4,
		0xc3, 0xbc, 0x3e, 0x4c, 0xd6, 0xe1, 0x29, 0xdb, 0xea, 0xdd, 0xf0, 0xc2, 0x30, 0x1a, 0x8d, 0xfd,
		0xa0, 0x24, 0x0e, 0xca, 0x17, 0x18, 0xcd, 0xef, 0xd0, 0x58, 0x12, 0x53, 0x36, 0x90, 0xad, 0x55,
		0x08, 0xaa, 0x5d, 0xe8, 0x69, 0x52, 0xc8, 0x29, 0x54, 0xa8, 0x69, 0x4a, 0xc2, 0xc5, 0x0a, 0x2d,
		0xc5, 0x78, 0xb7, 0x5c, 0xa1, 0xa4, 0xdd, 0xa4, 0x89, 0x76, 0x21, 0xa3, 0xf1, 0xe0, 0x19, 0xcd,
		0x01, 0x33, 0x25, 0x42, 0x27, 0x25, 0x0c, 0x6e, 0x7f, 0x14, 0xc7, 0x2a, 0x4c, 0xdd, 0x20, 0x19,
		0xba, 0xc9, 0xc7, 0x51, 0x3a, 0x88, 0x3e, 0x87, 0xfa, 0xda, 0xbf, 0x51, 0x1a, 0x46, 0x00, 0x23,
		0x80, 0x11, 0xa8, 0xb3, 0x11, 0x18, 0xa8, 0x24, 0xf5, 0x43, 0xbd, 0x18, 0xf8, 0xc2, 0x04, 0xe8,
		0xb9, 0x10, 0x3d, 0x95, 0x6f, 0xa1, 0xf2, 0xa8, 0xbc, 0x6d, 0x95, 0xd7, 0x9d, 0x81, 0x64, 0xa4,
		0x24, 0x82, 0xca, 0x62, 0x88, 0x93, 0xc6, 0xca, 0x23, 0xa1, 0x44, 0xc2, 0xca, 0x24, 0x19, 0xd1,
		0x76, 0x6c, 0x74, 0x2f, 0xd9, 0xad, 0x34, 0x10, 0xe9, 0x46, 0xaa, 0xb6, 0xbc, 0xcd, 0xb8, 0x8b,
		0x28, 0x3f, 0x39, 0xfe, 0xf0, 0x53, 0xc7, 0x9d, 0x56, 0x3e, 0xb9, 0x61, 0xe4, 0xfe, 0x1e, 0x85,
		0x26, 0x15, 0xb8, 0x12, 0x57, 0x5e, 0x88, 0x5d, 0x71, 0xd1, 0xf8, 0xfa, 0xeb, 0xf7, 0x4d, 0xf7,
		0xec, 0xf2, 0xcf, 0xf7, 0x2d, 0xf7, 0xec, 0x72, 0xf2, 0xb1, 0x95, 0xfd, 0x63, 0xf2, 0xb9, 0xfd,
		0xbe, 0xe9, 0x76, 0x66, 0x9f, 0xbb, 0xef, 0x9b, 0x6e, 0xf7, 0xf2, 0x9b, 0x5e, 0xef, 0xc5, 0x37,
		0x7f, 0x1c, 0xdf, 0x97, 0xff, 0xe2, 0xd7, 0x5f, 0xbd, 0xef, 0xf5, 0x86, 0x7f, 0xfc, 0x7c, 0x3f,
		0xfe, 0xfb, 0xab, 0xfb, 0xcb, 0x6f, 0xbf, 0xf9, 0x9b, 0xe9, 0xa9, 0x1f, 0x3f, 0xa0, 0xd7, 0x7b,
		0x71, 0xf9, 0x17, 0xfd, 0x63, 0x79, 0x59, 0x55, 0x3a, 0xe6, 0xb9, 0x11, 0x20, 0x98, 0x75, 0xdf,
		0x6e, 0x42, 0x05, 0x93, 0x46, 0x5b, 0xa0, 0x01, 0x68, 0x00, 0x1a, 0x1a, 0xbf, 0xa4, 0xa1, 0x6b,
		0xce, 0xb3, 0x1c, 0xa1, 0x96, 0x51, 0x99, 0xd6, 0x50, 0xd9, 0x16, 0xd0, 0x46, 0x73, 0xbc, 0x4e,
		0xe1, 0xe8, 0xf6, 0x4a, 0xc5, 0xae, 0x92, 0x98, 0xb4, 0x39, 0x69, 0x1e, 0x1d, 0x85, 0xee, 0x5c,
		0xe8, 0x56, 0x5b, 0x37, 0xe4, 0xfa, 0x29, 0x17, 0x96, 0x49, 0xa6, 0x8f, 0x66, 0x69, 0x91, 0xce,
		0x9d, 0xd6, 0x9e, 0x17, 0xf1, 0xe9, 0x20, 0xac, 0x9f, 0xdf, 0x6c, 0xe6, 0x5f, 0xbb, 0x7e, 0x38,
		0x50, 0x5f, 0xcc, 0x31, 0x76, 0x83, 0x4c, 0x50, 0x16, 0x94, 0x05, 0x65, 0x35, 0x4f, 0x8e, 0xf1,
		0x00, 0x55, 0x81, 0x41, 0xa9, 0x42, 0x03, 0x51, 0x65, 0xda, 0x2d, 0xe5, 0x46, 0xec, 0xcf, 0xa6,
		0x58, 0x4a, 0x8d, 0xae, 0xb7, 0x35, 0xad, 0x52, 0x7e, 0x2a, 0xe5, 0xbd, 0x4c, 0x9f, 0xaa, 0xfc,
		0x56, 0x74, 0xda, 0x67, 0x9d, 0xb3, 0x93, 0xd3, 0xf6, 0x59, 0xf7, 0xf0, 0xf6, 0x64, 0x4b, 0x04,
		0xe5, 0x72, 0x2f, 0x7a, 0xf4, 0xb6, 0xd8, 0x65, 0xb0, 0x50, 0xb6, 0xb6, 0xf8, 0x2f, 0x47, 0x66,
		0xbe, 0x91, 0x5e, 0x75, 0x5f, 0xf6, 0xf8, 0x7f, 0x8c, 0x5f, 0x65, 0xe1, 0xf3, 0x87, 0xef, 0x17,
		0xde, 0xa4, 0x06, 0xe9, 0x30, 0xcd, 0xdb, 0xaa, 0xcc, 0x6e, 0xa5, 0x22, 0xef, 0xbd, 0x3d, 0x9a,
		0x48, 0xde, 0xbb, 0xfc, 0x19, 0xdf, 0x87, 0xbc, 0x77, 0x10, 0xdd, 0xdc, 0xe8, 0xc4, 0x52, 0xf2,
		0x55, 0x98, 0x09, 0x20, 0xdf, 0x8d, 0xaa, 0xef, 0x5b, 0xbe, 0x7b, 0xcc, 0x4b, 0x3f, 0xa9, 0xac,
		0x94, 0xeb, 0x56, 0x25, 0x89, 0x77, 0x23, 0x90, 0xe0, 0xd8, 0x20, 0x93, 0xe0, 0x0b, 0xc1, 0x17,
		0x82, 0x2f, 0x15, 0xa3, 0xb0, 0x21, 0x1a, 0x1b, 0x38, 0x59, 0x1a, 0xd0, 0xf1, 0x31, 0xba, 0x55,
		0x63, 0xc7, 0xc7, 0x4d, 0x52, 0x2f, 0x55, 0x72, 0xc6, 0xe8, 0x01, 0xb9, 0x18, 0x24, 0x0c, 0x12,
		0x06, 0x09, 0x83, 0xf4, 0xf0, 0x3b, 0xfa, 0x61, 0x32, 0xba, 0xbe, 0xf6, 0xfb, 0xbe, 0x0a, 0x53,
		0xf7, 0xea, 0xb3, 0x9c, 0x45, 0x7a, 0x48, 0x30, 0x26, 0x09, 0x93, 0x84, 0x49, 0xc2, 0x24, 0x3d,
		0xfc, 0x8e, 0x19, 0x8f, 0xe9, 0x7f, 0xf4, 0xc2, 0x1b, 0x41, 0x82, 0xb4, 0x49, 0x28, 0xa6, 0x08,
		0x53, 0x84, 0x29, 0xc2, 0x14, 0x3d, 0xfc, 0x8e, 0x89, 0x7f, 0x13, 0x7a, 0x41, 0xe0, 0x87, 0x37,
		0xd2, 0x0e, 0xdb, 0x83, 0x92, 0x31, 0x4a, 0x18, 0x25, 0x8c, 0x12, 0x46, 0xe9, 0x11, 0xa3, 0x94,
		0x7a, 0xa9, 0xdf, 0x77, 0xfb, 0x71, 0x94, 0x24, 0x6e, 0x3f, 0x0a, 0x43, 0xd5, 0x4f, 0x05, 0x0d,
		0xd3, 0x63, 0xd2, 0x31, 0x4e, 0x18, 0x27, 0x8c, 0x13, 0xc6, 0xe9, 0xe1, 0x77, 0x9c, 0x16, 0xe5,
		0x08, 0xb3, 0xa5, 0x8d, 0x52, 0x31, 0x46, 0x18, 0x23, 0x8c, 0xd1, 0xc1, 0x18, 0xa3, 0x43, 0x2b,
		0x69, 0xd4, 0xab, 0xc7, 0x71, 0x84, 0xcb, 0x19, 0x5f, 0x4d, 0xdf, 0xa2, 0x06, 0x15, 0x4e, 0x59,
		0x08, 0x2f, 0xca, 0x86, 0xb2, 0x26, 0xfa, 0x65, 0x4e, 0x4b, 0x52, 0xa8, 0x75, 0xb2, 0x0c, 0x0d,
		0xd4, 0x3a, 0xe9, 0x5a, 0x24, 0xed, 0x5a, 0xa7, 0x85, 0x03, 0x2e, 0x14, 0x36, 0x8f, 0x86, 0x02,
		0xb3, 0x3d, 0x5a, 0xf0, 0x2d, 0xf8, 0xd6, 0xae, 0xf1, 0x2d, 0x5d, 0x25, 0xcc, 0x05, 0x78, 0xd7,
		0xd7, 0x7e, 0xe8, 0xa7, 0x77, 0xae, 0x97, 0xa6, 0xb1, 0x7f, 0x35, 0x4a, 0x95, 0x9b, 0xa8, 0xd4,
		0x9d, 0x42, 0xb3, 0xd0, 0x95, 0x25, 0x8f, 0x3d, 0xc4, 0xf4, 0x5a, 0x40, 0x91, 0xeb, 0xcc, 0xc5,
		0xae, 0x2f, 0x97, 0xbc, 0xae, 0xdc, 0xd2, 0xf5, 0xe4, 0xd2, 0xd7, 0x91, 0x5b, 0xbb, 0x7e, 0xdc,
		0xda, 0x75, 0xe3, 0xf6, 0xae, 0x17, 0xdf, 0xee, 0x15, 0x99, 0x62, 0xd7, 0x85, 0xe7, 0x27, 0xef,
		0x62, 0x49, 0x5f, 0x73, 0x35, 0x1e, 0x2b, 0xae, 0x1b, 0xa8, 0xf0, 0x26, 0xfd, 0x28, 0x71, 0x20,
		0x05, 0xc6, 0x00, 0xe5, 0xb2, 0x5e, 0x4d, 0xde, 0xca, 0xb4, 0x3b, 0x75, 0xf6, 0x97, 0xe0, 0xe5,
		0xb8, 0x92, 0xdd, 0xaa, 0xb9, 0xd0, 0x59, 0xab, 0xa4, 0xf0, 0x0d, 0xd0, 0xd6, 0x3a, 0x25, 0xe7,
		0x27, 0x4c, 0xba, 0x63, 0x52, 0x48, 0x89, 0x96, 0xb7, 0x4c, 0xb0, 0xab, 0x75, 0x6d, 0xcb, 0x4e,
		0x3a, 0xec, 0x99, 0x88, 0xd9, 0x94, 0x93, 0x72, 0x29, 0x60, 0x80, 0xa4, 0xe6, 0x91, 0xe5, 0x02,
		0xdf, 0xf7, 0x7a, 0x9f, 0x7b, 0x3d, 0xb7, 0xd7, 0x7b, 0x71, 0xfe, 0xfc, 0xc3, 0xdf, 0xff, 0xe5,
		0xab, 0x7f, 0xed, 0xf5, 0xbe, 0xfd, 0x6b, 0xaf, 0xf7, 0xe7, 0xbf, 0x5f, 0x7e, 0x6b, 0x0e, 0x58,
		0x97, 0xdb, 0x1a, 0x84, 0x62, 0xe0, 0x9c, 0x04, 0x51, 0xff, 0x37, 0xad, 0xc9, 0xc9, 0x0f, 0xc2,
		0x5c, 0x2e, 0x11, 0x32, 0x0a, 0x19, 0x85, 0x8c, 0xd6, 0x94, 0x8c, 0xbe, 0x9e, 0x2e, 0xce, 0x42,
		0xc8, 0xc7, 0x1d, 0xc6, 0xd1, 0x50, 0xc5, 0x46, 0x89, 0x82, 0x35, 0x1a, 0x2a, 0x80, 0xcb, 0x32,
		0xf3, 0xc7, 0xe6, 0x6b, 0x29, 0x39, 0x87, 0x2c, 0x97, 0x3a, 0x99, 0x47, 0x66, 0x36, 0xc2, 0x73,
		0x4d, 0x68, 0x4b, 0xd0, 0x9e, 0x2e, 0x0b, 0x3e, 0xc9, 0x8a, 0x3f, 0xd4, 0xcd, 0x58, 0x57, 0xdc,
		0x38, 0x1a, 0xa5, 0x7a, 0xb9, 0x87, 0x07, 0x1f, 0x70, 0xdc, 0x9e, 0x54, 0x97, 0xf8, 0xfd, 0xdf,
		0xee, 0x24, 0xe5, 0x76, 0xc6, 0x62, 0x3f, 0xa9, 0xf8, 0xca, 0x4b, 0xfd, 0x5b, 0x49, 0xc1, 0x2f,
		0x33, 0x23, 0x57, 0xf4, 0x7e, 0xac, 0x8a, 0x78, 0xb3, 0xe0, 0x10, 0xb8, 0x4d, 0x80, 0x2f, 0xe8,
		0xe7, 0x4c, 0x8e, 0xbe, 0x28, 0x4b, 0xce, 0x76, 0xe3, 0xdc, 0x79, 0x29, 0x28, 0x71, 0xf5, 0xc0,
		0x9f, 0x3b, 0xad, 0x13, 0x49, 0xf1, 0x93, 0xe3, 0x7e, 0xee, 0x1c, 0xb7, 0x05, 0xa5, 0xe6, 0xa7,
		0xfd, 0xdc, 0xe9, 0xd4, 0x84, 0xda, 0xdf, 0xef, 0x20, 0xd1, 0xcd, 0x80, 0xce, 0x1f, 0xc8, 0xf1,
		0xdc, 0x99, 0x40, 0x68, 0x2e, 0x34, 0x17, 0x9a, 0x5b, 0x53, 0x9a, 0x6b, 0x3c, 0xe3, 0x6f, 0x55,
		0x4f, 0x4f, 0x05, 0x44, 0xc9, 0xcc, 0xfc, 0x9b, 0xfd, 0x45, 0x54, 0x95, 0xa8, 0xaa, 0xad, 0xa8,
		0x6a, 0xb7, 0x7b, 0xdc, 0x65, 0xdb, 0xc4, 0x78, 0x93, 0x8c, 0x94, 0xcb, 0x5d, 0x65, 0x5f, 0xb2,
		0x79, 0xf0, 0xb9, 0x48, 0x18, 0x18, 0x0c, 0x0c, 0x06, 0x56, 0x53, 0x06, 0x96, 0x4c, 0x82, 0x6d,
		0x92, 0x99, 0xed, 0x5d, 0xb5, 0x7f, 0xa9, 0xc4, 0xe2, 0x2e, 0xdb, 0x3f, 0x83, 0xbb, 0x56, 0xb0,
		0x7f, 0xd8, 0x3f, 0xec, 0x9f, 0x75, 0xfb, 0xb7, 0x21, 0xd1, 0x42, 0x7e, 0xa5, 0xbc, 0xd4, 0x69,
		0x7e, 0x25, 0x75, 0x13, 0x95, 0x8a, 0xa7, 0x58, 0x06, 0x77, 0xa1, 0x77, 0xeb, 0xf7, 0x45, 0x13,
		0x20, 0x59, 0xdb, 0xcd, 0x97, 0x61, 0xe0, 0xf7, 0x7d, 0x91, 0xe2, 0xcc, 0x25, 0xe9, 0x9d, 0x65,
		0xe9, 0xd9, 0x65, 0x2c, 0x92, 0xf2, 0xbb, 0x93, 0xd5, 0x76, 0x55, 0x1c, 0x49, 0x8a, 0x9d, 0x64,
		0x9d, 0xe2, 0xbd, 0xcf, 0xb1, 0xcc, 0xce, 0x93, 0x6c, 0x8a, 0x65, 0xf9, 0x34, 0x9d, 0x3b, 0xc7,
		0x56, 0x64, 0x4f, 0xce, 0xd2, 0xb9, 0xd3, 0x11, 0x4d, 0x0e, 0x65, 0x27, 0xe9, 0xdc, 0xe9, 0x8a,
		0x0a, 0x9d, 0x18, 0x03, 0xd9, 0xa4, 0x53, 0x32, 0xfe, 0xed, 0x27, 0xe4, 0x59, 0xf4, 0x99, 0x6e,
		0xac, 0xae, 0x55, 0xac, 0xc2, 0xbe, 0x72, 0x03, 0xf5, 0x49, 0x05, 0x82, 0x84, 0x77, 0x55, 0x32,
		0xbc, 0x17, 0xde, 0x0b, 0xef, 0xad, 0x29, 0xef, 0x25, 0xf3, 0x52, 0xe6, 0xc5, 0xc8, 0xbc, 0x2c,
		0x9d, 0xa1, 0x83, 0xcf, 0xbc, 0xb4, 0x9a, 0xcd, 0x26, 0xbb, 0x26, 0x46, 0xa4, 0x9c, 0xc3, 0x4d,
		0xbc, 0xc4, 0x51, 0xaa, 0xfa, 0xa9, 0x1a, 0xb8, 0x57, 0x77, 0xae, 0x4d, 0x6e, 0xf6, 0xd8, 0x63,
		0x20, 0x6a, 0x10, 0x35, 0x88, 0x1a, 0x44, 0x0d, 0xa2, 0x06, 0x51, 0xdb, 0x3f, 0xa2, 0xc6, 0xae,
		0x41, 0xd4, 0xcc, 0x89, 0x5a, 0xac, 0x92, 0x34, 0x8a, 0x95, 0x5d, 0x9a, 0xf6, 0xd8, 0x43, 0x20,
		0x69, 0x90, 0x34, 0x48, 0x1a, 0x24, 0x0d, 0x92, 0x06, 0x49, 0x23, 0x9a, 0x06, 0x49, 0x83, 0xa4,
		0xad, 0x6f, 0xca, 0x97, 0x38, 0xb2, 0x3a, 0xdb, 0xeb, 0x01, 0xf9, 0x50, 0x33, 0xa8, 0x19, 0xd4,
		0xac, 0xa6, 0xd4, 0xec, 0x62, 0x4d, 0x5f, 0x99, 0xe6, 0x05, 0x5f, 0x83, 0xaf, 0x19, 0x6c, 0x19,
		0xd3, 0xbc, 0x60, 0x6b, 0x42, 0x6c, 0x4d, 0xb6, 0xe7, 0x22, 0x97, 0x08, 0x23, 0x83, 0x91, 0xc1,
		0xc8, 0x44, 0x18, 0xd9, 0x6b, 0x2f, 0x1c, 0x78, 0x69, 0x14, 0xdf, 0x99, 0x63, 0x75, 0x45, 0x73,
		0xb2, 0xbe, 0x88, 0x54, 0xc5, 0xd3, 0xc2, 0x21, 0x24, 0xb7, 0xb5, 0xd9, 0x73, 0xce, 0xec, 0xf4,
		0xbe, 0x77, 0x1a, 0xd8, 0x29, 0x82, 0x7f, 0x60, 0x31, 0xcf, 0x9d, 0xd6, 0xa1, 0x17, 0xc6, 0x57,
		0x3a, 0x8f, 0xfe, 0x9f, 0xea, 0x4e, 0xb0, 0xee, 0xbd, 0xf1, 0xca, 0x4f, 0xd2, 0xb1, 0xb3, 0x6a,
		0x36, 0xe3, 0xfe, 0xb5, 0x1f, 0xfe, 0x10, 0xa8, 0x31, 0x0e, 0x19, 0xf2, 0xe8, 0xb1, 0x0b, 0xb1,
		0x20, 0xa9, 0xf5, 0xb2, 0xd3, 0x39, 0x39, 0xed, 0x74, 0x9a, 0xa7, 0xc7, 0xa7, 0xcd, 0xb3, 0x6e,
		0xb7, 0x75, 0xd2, 0x32, 0xe8, 0x16, 0x69, 0xfc, 0x12, 0x0f, 0x54, 0xac, 0x06, 0xdf, 0x8d, 0x57,
		0x30, 0x1c, 0x05, 0x41, 0xa5, 0x1b, 0x67, 0x78, 0xbf, 0x50, 0x2e, 0xc7, 0xc2, 0x3d, 0x43, 0x8b,
		0x17, 0xe2, 0x1c, 0xc9, 0xf4, 0x24, 0x4a, 0x5e, 0x40, 0xf4, 0xc6, 0x4b, 0x3f, 0xfe, 0x32, 0x79,
		0xbb, 0x85, 0xcf, 0x0d, 0x6e, 0x9d, 0xb2, 0x7f, 0x1a, 0xb6, 0x7c, 0xf5, 0xd4, 0xc2, 0xce, 0xd7,
		0xe6, 0xfa, 0xa9, 0x69, 0x55, 0xeb, 0x98, 0xf3, 0x2d, 0xc3, 0xe1, 0x30, 0x8e, 0xae, 0xfd, 0x40,
		0x19, 0xde, 0x4b, 0xf5, 0xa4, 0x78, 0xbd, 0x0b, 0xab, 0x9a, 0x5c, 0x58, 0x55, 0xb9, 0x17, 0x78,
		0x70, 0x17, 0x56, 0x69, 0x7b, 0x5a, 0xe6, 0x83, 0x41, 0x4c, 0x82, 0xe2, 0xa6, 0x41, 0x70, 0x33,
		0xe2, 0x64, 0x1e, 0x88, 0x12, 0x0a, 0x6a, 0x8b, 0x07, 0x44, 0xe5, 0x02, 0xa0, 0xf7, 0x66, 0x8c,
		0x52, 0x6e, 0x89, 0x4d, 0x83, 0xd0, 0x75, 0x5e, 0xe3, 0x8a, 0xf8, 0xd4, 0x65, 0x5d, 0x80, 0x3c,
		0x51, 0xc1, 0x14, 0x68, 0x6f, 0x55, 0x1a, 0x67, 0x9d, 0xf9, 0x26, 0xc0, 0xbd, 0x26, 0x0e, 0xa0,
		0x06, 0xa8, 0xf7, 0x16, 0xa8, 0x97, 0x42, 0xa0, 0x86, 0x47, 0xdf, 0x34, 0xf0, 0x69, 0x16, 0xe8,
		0x94, 0x09, 0x6c, 0x4e, 0x02, 0x8e, 0xfe, 0xcd, 0xd0, 0xc4, 0x67, 0xce, 0xe6, 0xe3, 0xa7, 0x26,
		0x89, 0xa4, 0xc9, 0x10, 0x98, 0x81, 0x0a, 0xbc, 0xbb, 0x46, 0xb5, 0xd7, 0x52, 0x1b, 0x87, 0x31,
		0xa7, 0x6f, 0x6d, 0x34, 0x64, 0x24, 0xdb, 0x00, 0x23, 0x22, 0x34, 0x5e, 0xfe, 0x73, 0xa7, 0x5d,
		0xcf, 0xd8, 0x82, 0x25, 0x2c, 0xbc, 0x0b, 0x22, 0x6f, 0x60, 0x82, 0x7e, 0x13, 0x01, 0xe0, 0x1d,
		0x78, 0xb7, 0xb7, 0x78, 0xf7, 0x4b, 0x1a, 0xba, 0x7a, 0x07, 0x7d, 0x2f, 0xd0, 0x2d, 0x4b, 0xd3,
		0x8d, 0xc2, 0xdf, 0x42, 0xb3, 0x3b, 0x67, 0x1a, 0xdd, 0x4c, 0xd0, 0xd5, 0xad, 0x11, 0x4c, 0x76,
		0x33, 0x90, 0xbb, 0xb9, 0x1e, 0xba, 0xd7, 0x46, 0x62, 0xb2, 0x81, 0x66, 0x37, 0x66, 0xef, 0x72,
		0xda, 0xcc, 0xdf, 0xc5, 0x55, 0x5f, 0xd2, 0x9d, 0x03, 0xdd, 0xf1, 0x56, 0x9c, 0x3b, 0x5d, 0x93,
		0x94, 0xcd, 0x64, 0x23, 0xce, 0x9d, 0x6e, 0xc7, 0x54, 0x48, 0xb6, 0x82, 0xe7, 0xce, 0xa9, 0xd1,
		0xdb, 0x4c, 0x7e, 0x90, 0x49, 0x9a, 0x68, 0x76, 0xce, 0xcf, 0x9d, 0xe6, 0x21, 0xf1, 0x80, 0x79,
		0xe0, 0x39, 0xf9, 0xec, 0xa7, 0xfd, 0x8f, 0x3a, 0x46, 0x63, 0x75, 0xf6, 0xc3, 0xb2, 0x34, 0x3d,
		0x86, 0xd0, 0x82, 0x21, 0xc0, 0x10, 0x6c, 0x33, 0x04, 0xdd, 0x6b, 0xde, 0xb3, 0xab, 0xb3, 0xa2,
		0x91, 0xbe, 0x15, 0x5e, 0xba, 0x22, 0x73, 0x2c, 0x48, 0xb7, 0x2e, 0xc0, 0xa8, 0x7a, 0xd0, 0xb8,
		0x6a, 0x50, 0xa2, 0x5a, 0x50, 0xb8, 0x4a, 0x50, 0xaa, 0x3a, 0x50, 0xbc, 0x2a, 0x50, 0xbc, 0x1a,
		0x50, 0xbe, 0x0a, 0xb0, 0xda, 0x9a, 0x16, 0xe3, 0x0a, 0xbd, 0x65, 0x9a, 0xbe, 0x0a, 0x3d, 0xae,
		0x99, 0x6a, 0x39, 0x42, 0x75, 0x79, 0x32, 0xf5, 0x78, 0xb2, 0x75, 0x78, 0xa2, 0x57, 0x54, 0x4e,
		0x62, 0x60, 0x9f, 0xa3, 0xf8, 0xb7, 0xf1, 0xeb, 0x6d, 0xb7, 0xa3, 0x47, 0xac, 0xaa, 0x4e, 0xf0,
		0x12, 0xc3, 0x7c, 0x69, 0x4c, 0x6b, 0xe6, 0xee, 0x6b, 0x9f, 0xe4, 0x39, 0xbc, 0xa2, 0x19, 0x73,
		0xbe, 0xeb, 0x48, 0x17, 0xcf, 0xe4, 0xaf, 0xf4, 0x36, 0x7f, 0xa3, 0x1a, 0xf8, 0x19, 0xb1, 0xea,
		0x47, 0xf1, 0x20, 0xbb, 0x6e, 0xd3, 0xa0, 0x56, 0x66, 0x49, 0x0a, 0x91, 0x47, 0xfc, 0x8a, 0xbd,
		0x8d, 0x3c, 0xaa, 0xdb, 0xa1, 0xd6, 0xed, 0xdb, 0x39, 0x65, 0x39, 0xae, 0x85, 0xd2, 0x4f, 0x66,
		0x0c, 0x05, 0xc9, 0xd0, 0x4d, 0x3e, 0x8e, 0xd2, 0xe9, 0x65, 0xc3, 0xda, 0xca, 0xbf, 0x41, 0x1a,
		0x46, 0x00, 0x23, 0x80, 0x11, 0xa8, 0xb3, 0x11, 0x30, 0x57, 0x7c, 0x94, 0x1d, 0x65, 0x47, 0xd9,
		0x77, 0x43, 0xd9, 0xfd, 0x9b, 0xd0, 0x0b, 0x02, 0x35, 0x70, 0xaf, 0xbc, 0x70, 0xf0, 0xd9, 0x1f,
		0x64, 0xce, 0x96, 0xae, 0xde, 0x6f, 0x10, 0x46, 0x32, 0x01, 0x13, 0xb0, 0x6f, 0xc9, 0x84, 0x2b,
		0x3f, 0x8d, 0xbd, 0x54, 0x99, 0x27, 0x13, 0x66, 0x82, 0x48, 0x26, 0x90, 0x4c, 0xd8, 0x9a, 0x92,
		0x19, 0x06, 0x1d, 0xb7, 0x9e, 0x4c, 0x30, 0x9e, 0xaf, 0x29, 0x30, 0x57, 0x53, 0x68, 0x9e, 0xa6,
		0x40, 0x1c, 0x5c, 0x72, 0x1e, 0x53, 0xde, 0x4f, 0x21, 0xd4, 0xa0, 0x6e, 0x6d, 0x96, 0x8f, 0xfc,
		0x0c, 0x1f, 0x81, 0xb9, 0x01, 0xa2, 0x73, 0x96, 0xf2, 0xad, 0xe8, 0xb4, 0xcf, 0x3a, 0x67, 0x27,
		0xa7, 0xed, 0xb3, 0xee, 0xe1, 0xed, 0xc9, 0x96, 0xb2, 0x31, 0x97, 0x95, 0x1a, 0x46, 0xf5, 0x25,
		0x8d, 0x3d, 0x77, 0x14, 0x26, 0xa9, 0x77, 0x15, 0x18, 0x9a, 0xc8, 0xcf, 0x1f, 0x55, 0x58, 0x07,
		0xa3, 0x34, 0x33, 0xd5, 0x2f, 0x5e, 0x1c, 0x6d, 0xf0, 0x11, 0xb2, 0x09, 0x15, 0xce, 0x5f, 0x9d,
		0x7f, 0x8b, 0x06, 0xee, 0xe8, 0x3a, 0x50, 0x5f, 0xdc, 0xfe, 0x55, 0xfc, 0x6f, 0x4e, 0x14, 0x3b,
		0x45, 0xff, 0xfc, 0xcd, 0xf5, 0xd0, 0x8d, 0x55, 0xe2, 0xff, 0xae, 0x4a, 0x7f, 0x2d, 0x8c, 0xd2,
		0xd9, 0x57, 0x6b, 0x3e, 0xea, 0x28, 0xdb, 0xcc, 0x5d, 0x1a, 0x74, 0x54, 0xf3, 0xdd, 0xae, 0x05,
		0x46, 0x7c, 0xaf, 0x92, 0x7e, 0xec, 0x0f, 0x8d, 0xe7, 0x4d, 0x3c, 0xa4, 0x6e, 0x6f, 0x67, 0x2b,
		0xf3, 0xdd, 0x6c, 0x61, 0xde, 0x4d, 0xd6, 0xe5, 0x97, 0xef, 0xff, 0x6b, 0xbc, 0x2a, 0xff, 0xf1,
		0xdd, 0xaf, 0x4e, 0x14, 0xf7, 0xc2, 0x47, 0xfe, 0x68, 0x2f, 0x9c, 0xfe, 0xd9, 0xff, 0xfc, 0xf1,
		0xcd, 0xaf, 0xd9, 0xda, 0x65, 0xab, 0xde, 0x0b, 0x8b, 0x7d, 0xe5, 0xe7, 0x28, 0x9d, 0x7c, 0x4b,
		0xea, 0xec, 0x0a, 0xab, 0xd8, 0xaa, 0x9a, 0x0d, 0x16, 0x76, 0x44, 0x70, 0x2e, 0x8f, 0x2d, 0x8d,
		0xdb, 0xa4, 0x75, 0x75, 0xda, 0xf4, 0x03, 0x9f, 0x3a, 0x74, 0x59, 0x55, 0x25, 0x87, 0x46, 0xe0,
		0x29, 0xb7, 0x8c, 0xd7, 0xb1, 0x77, 0xeb, 0x87, 0x37, 0x66, 0x03, 0x17, 0x73, 0xab, 0xb3, 0x59,
		0x2c, 0x21, 0x0e, 0x42, 0x1c, 0x84, 0x38, 0x34, 0x4f, 0xce, 0x2f, 0x69, 0xe8, 0x4e, 0x38, 0xce,
		0x12, 0xc5, 0x59, 0xd4, 0x32, 0xaa, 0x26, 0xd7, 0xa5, 0xb5, 0xb3, 0xb2, 0xc9, 0xfe, 0x55, 0x2c,
		0xc1, 0xec, 0xdb, 0x59, 0xd9, 0xe4, 0x78, 0xb5, 0xd5, 0x20, 0xe3, 0x92, 0xd7, 0xfe, 0x17, 0x35,
		0x10, 0x91, 0xdc, 0x5e, 0x91, 0x1c, 0x0b, 0x40, 0x67, 0x8d, 0x4a, 0x33, 0xc7, 0x1b, 0x70, 0xee,
		0xb4, 0x25, 0x4a, 0x33, 0xd7, 0x96, 0xff, 0xdc, 0x69, 0xb7, 0x64, 0xe5, 0x4e, 0x17, 0xff, 0xdc,
		0x69, 0xb7, 0x0f, 0x62, 0x52, 0x21, 0xf1, 0x06, 0xe2, 0x0d, 0xc4, 0x1b, 0x88, 0x37, 0x10, 0x6f,
		0x20, 0xde, 0x40, 0xbc, 0x81, 0x78, 0x83, 0xbd, 0x78, 0xc3, 0x43, 0x56, 0xd3, 0x3c, 0xe4, 0xf0,
		0xa0, 0x64, 0xa2, 0x0e, 0x44, 0x1d, 0x88, 0x3a, 0x88, 0x46, 0x1d, 0x08, 0x34, 0xac, 0x4b, 0x6b,
		0x4d, 0xe2, 0x9e, 0xa3, 0x96, 0x48, 0x7b, 0x66, 0x73, 0x2a, 0xad, 0x29, 0x22, 0x6d, 0xf6, 0x6e,
		0x6d, 0x91, 0xde, 0xd1, 0xf6, 0x4c, 0x9a, 0x88, 0xb0, 0xe6, 0x52, 0xbc, 0x58, 0x34, 0x50, 0xb3,
		0x81, 0xbd, 0xcb, 0xc5, 0x6a, 0x1e, 0xe0, 0xf8, 0x22, 0x0f, 0x38, 0x9e, 0x9d, 0x25, 0x19, 0x71,
		0x9d, 0x99, 0xb8, 0x6b, 0x11, 0x71, 0xdd, 0xd9, 0xfe, 0xcb, 0x88, 0x3b, 0x99, 0x8a, 0x3b, 0x56,
		0x22, 0xaa, 0xd3, 0x3e, 0xcd, 0xe5, 0x89, 0x1c, 0xd0, 0xd9, 0x5e, 0x1c, 0x4b, 0x08, 0x9b, 0xed,
		0x44, 0x67, 0x6f, 0x02, 0x7b, 0x4b, 0x9a, 0x2b, 0x14, 0xe1, 0x7b, 0x48, 0xb5, 0xce, 0x9d, 0x76,
		0x5b, 0x5a, 0xfc, 0x5c, 0x74, 0x4b, 0x44, 0xf4, 0xa8, 0x99, 0x5d, 0x58, 0x2c, 0x23, 0xab, 0x25,
		0x73, 0xff, 0xe1, 0xd4, 0x94, 0x9c, 0x3b, 0xed, 0x63, 0x21, 0x61, 0xd7, 0x63, 0x61, 0x1d, 0x19,
		0x61, 0x63, 0x6b, 0xda, 0x16, 0x12, 0x95, 0xcd, 0xd6, 0x16, 0x5a, 0xb1, 0x76, 0xf6, 0x23, 0xbb,
		0x32, 0xc2, 0xc6, 0x56, 0x44, 0x68, 0xf1, 0xc7, 0x76, 0xf2, 0xdc, 0x69, 0x9f, 0x48, 0x49, 0xcb,
		0xd6, 0xff, 0x54, 0x46, 0xda, 0xd8, 0xbe, 0x75, 0x18, 0x98, 0xa0, 0x6f, 0xaa, 0xeb, 0x38, 0x30,
		0xc1, 0xbc, 0xa5, 0xc7, 0x11, 0x9e, 0x97, 0xb0, 0x1e, 0x0e, 0x6a, 0xd4, 0xaa, 0x8f, 0x4a, 0xeb,
		0x56, 0xf1, 0x0d, 0x91, 0x0c, 0x8d, 0xdb, 0xc3, 0x69, 0xa0, 0xdc, 0x5e, 0x3c, 0x82, 0x06, 0xca,
		0xf2, 0x67, 0x9d, 0x5b, 0x44, 0xca, 0x0b, 0xe1, 0x16, 0x91, 0x47, 0x97, 0x58, 0xf2, 0x16, 0x91,
		0x76, 0x97, 0x6b, 0x44, 0x4c, 0xbf, 0x55, 0x87, 0x6b, 0x44, 0x92, 0xd4, 0x0b, 0x07, 0x57, 0x77,
		0x42, 0x53, 0x4d, 0x36, 0x4a, 0x03, 0xa7, 0xc1, 0x69, 0x06, 0x1d, 0x3c, 0x04, 0xd3, 0xc7, 0xf5,
		0x30, 0x02, 0xa9, 0xdf, 0x77, 0x47, 0xa1, 0x6f, 0xa4, 0xfa, 0x33, 0x19, 0x8c, 0x35, 0x40, 0xe1,
		0xf7, 0x6d, 0xac, 0x81, 0xba, 0x89, 0x55, 0x92, 0xb8, 0xfd, 0x28, 0x4c, 0xe3, 0x28, 0x08, 0x54,
		0xec, 0xfa, 0xd7, 0xae, 0x1f, 0x0e, 0xd4, 0x17, 0xf3, 0x0c, 0xfd, 0x23, 0xb2, 0xc9, 0xd1, 0x93,
		0xa3, 0xdf, 0x9a, 0x2a, 0x1a, 0xf2, 0x61, 0x86, 0x1f, 0x30, 0xfc, 0x60, 0x5b, 0xce, 0xa0, 0xbc,
		0x53, 0x28, 0xe0, 0x81, 0x8b, 0x7a, 0xe2, 0x6b, 0x5b, 0xc1, 0xf0, 0x83, 0xca, 0xbf, 0x5d, 0xe7,
		0x82, 0xc2, 0x29, 0xa9, 0x90, 0xa9, 0x21, 0x5c, 0x14, 0x06, 0x25, 0x81, 0x92, 0x40, 0x49, 0x34,
		0x4f, 0x4e, 0x56, 0x36, 0xa8, 0xeb, 0x29, 0x6f, 0xf4, 0x9a, 0xf7, 0xf2, 0x36, 0x07, 0xf3, 0x6b,
		0xda, 0x72, 0x79, 0x59, 0xc1, 0xdb, 0x97, 0xbe, 0x58, 0x7d, 0x5f, 0xaa, 0xe2, 0x5b, 0x3f, 0x9c,
		0x24, 0xa2, 0xf7, 0xa5, 0x56, 0x69, 0xf1, 0x37, 0xc9, 0xd4, 0x9c, 0x2c, 0xdc, 0x3f, 0x26, 0x20,
		0xed, 0x4b, 0xff, 0x10, 0xee, 0x9b, 0xd0, 0x00, 0x79, 0x3f, 0x5c, 0x0b, 0x1d, 0x68, 0xa5, 0xd8,
		0xd7, 0xec, 0xd4, 0x43, 0x82, 0x01, 0x7f, 0xc0, 0x1f, 0xf0, 0xd7, 0x3c, 0x39, 0x93, 0x9a, 0x23,
		0x3f, 0x4a, 0xdc, 0x2f, 0xb1, 0xab, 0x9d, 0xe0, 0x5f, 0x63, 0x00, 0x2f, 0x0d, 0x64, 0x18, 0x26,
		0xfc, 0xeb, 0x1e, 0x9e, 0x68, 0x11, 0x9e, 0xa8, 0x4b, 0x78, 0xa2, 0xdd, 0x25, 0x2e, 0x51, 0x59,
		0x5c, 0xc2, 0xc0, 0x22, 0xbc, 0xf1, 0xd2, 0x54, 0xc5, 0xe6, 0x93, 0x0a, 0x1a, 0xef, 0x7b, 0xbd,
		0xcf, 0xbd, 0x9e, 0xdb, 0xeb, 0xbd, 0x38, 0x7f, 0xfe, 0xe1, 0xef, 0xff, 0xf2, 0xd5, 0xbf, 0xf6,
		0x7a, 0xdf, 0xfe, 0xb5, 0xd7, 0xfb, 0xf3, 0xdf, 0x2f, 0xbf, 0x6d, 0xec, 0x65, 0xc4, 0x65, 0xc6,
		0x99, 0x64, 0x42, 0x2e, 0x4b, 0xd2, 0xa0, 0x5d, 0xd0, 0x2e, 0x68, 0x17, 0x31, 0x17, 0x62, 0x2e,
		0xc4, 0x5c, 0x88, 0xb9, 0x08, 0xc2, 0xfc, 0xc1, 0xb5, 0xac, 0x98, 0xd8, 0x41, 0xd1, 0x4e, 0x95,
		0xec, 0x45, 0xfe, 0x2b, 0xf4, 0xeb, 0xd0, 0xa0, 0x32, 0x5d, 0x21, 0x7f, 0xa0, 0x5f, 0xfe, 0x36,
		0x17, 0x41, 0xb9, 0xab, 0x65, 0x0e, 0x46, 0xf5, 0x9b, 0xae, 0x41, 0x32, 0x2f, 0x77, 0xd5, 0x2e,
		0xa9, 0x31, 0x28, 0xa5, 0x31, 0x2c, 0xa1, 0xa9, 0x4b, 0x53, 0x4a, 0x93, 0xa6, 0x14, 0x4b, 0xb1,
		0xa6, 0x7c, 0x89, 0x4f, 0xba, 0xdd, 0xe3, 0x2e, 0x6d, 0x29, 0x86, 0xdf, 0xb2, 0xd6, 0x96, 0xf2,
		0x4c, 0xf0, 0x30, 0x8d, 0x41, 0x40, 0x07, 0x77, 0x1b, 0xaf, 0xfc, 0x24, 0xbd, 0x48, 0xd3, 0x72,
		0x65, 0xc0, 0x63, 0x4b, 0xf0, 0x43, 0xa0, 0xc6, 0x26, 0xbe, 0xe4, 0x91, 0x18, 0x1f, 0xf0, 0x85,
		0x6f, 0xb6, 0x5e, 0x76, 0x3a, 0x27, 0xa7, 0x9d, 0x4e, 0xf3, 0xf4, 0xf8, 0xb4, 0x79, 0xd6, 0xed,
		0xb6, 0x4e, 0x5a, 0x25, 0x0e, 0x6c, 0xe3, 0x97, 0x78, 0xa0, 0x62, 0x35, 0xf8, 0x6e, 0xfc, 0xd3,
		0xc3, 0x51, 0x10, 0x88, 0xae, 0xa8, 0x26, 0x5d, 0xb5, 0x40, 0x53, 0x1b, 0xa5, 0x7a, 0x17, 0xa4,
		0x38, 0x69, 0x31, 0xb4, 0x7e, 0xfa, 0x14, 0x3f, 0xfe, 0x27, 0x9e, 0xd8, 0x8d, 0xb2, 0xbb, 0x20,
		0xb4, 0xfa, 0x05, 0x56, 0xdc, 0x74, 0xa5, 0x1f, 0x5f, 0xde, 0x87, 0x17, 0x6d, 0xf3, 0xff, 0x79,
		0x60, 0x19, 0x8b, 0x2e, 0x9f, 0xfe, 0xb2, 0x3d, 0xb2, 0x52, 0x3a, 0x2b, 0xb4, 0x79, 0x55, 0xd6,
		0x7f, 0xf3, 0x86, 0xdf, 0xdb, 0x98, 0xbc, 0xd3, 0x63, 0x5d, 0x3b, 0x39, 0x6f, 0x9b, 0xff, 0xd1,
		0x07, 0xd6, 0xed, 0xf1, 0x26, 0x9c, 0x27, 0xdd, 0x8d, 0x22, 0x6e, 0x45, 0x49, 0xf7, 0xa1, 0xa8,
		0x9b, 0x50, 0xda, 0x1d, 0x28, 0x4d, 0xfb, 0xcb, 0xd3, 0xfb, 0x72, 0x67, 0xf6, 0xa9, 0xa6, 0x94,
		0xc6, 0xbc, 0x0a, 0x23, 0x79, 0x7a, 0x39, 0x66, 0xab, 0xbc, 0xf8, 0xa5, 0x27, 0x7e, 0x5f, 0xb1,
		0x0e, 0xac, 0xc2, 0x3e, 0x67, 0x19, 0x1f, 0x53, 0xd3, 0xa7, 0x2c, 0xeb, 0x43, 0x6a, 0xfb, 0x8c,
		0xda, 0x3e, 0xa2, 0xbe, 0x4f, 0x68, 0x86, 0x1f, 0x45, 0x3b, 0x9c, 0x16, 0xce, 0x47, 0xf1, 0x55,
		0x5c, 0x3f, 0x5b, 0x45, 0x97, 0xb1, 0x5c, 0x93, 0x5f, 0xe9, 0xf0, 0x86, 0x4e, 0x58, 0xc3, 0x30,
		0x9c, 0xa1, 0x1b, 0xc6, 0x30, 0x0e, 0x5f, 0x18, 0x87, 0x2d, 0xcc, 0xc3, 0x15, 0xb2, 0x54, 0xbe,
		0x6c, 0x53, 0x5e, 0xc3, 0x0b, 0xc3, 0x68, 0x14, 0xf6, 0x0d, 0x46, 0xc9, 0xe4, 0x12, 0xe8, 0x55,
		0x25, 0x5a, 0xb7, 0x6f, 0xbd, 0xaa, 0x49, 0x1c, 0xb8, 0x37, 0x89, 0xc0, 0xe4, 0xe8, 0x89, 0x1c,
		0x8a, 0x0f, 0x28, 0x3e, 0xd8, 0x9a, 0x8a, 0x19, 0x06, 0xbf, 0xb6, 0x5e, 0x7c, 0xa0, 0x3b, 0x1f,
		0x62, 0x0d, 0x71, 0x8e, 0x49, 0x89, 0x6a, 0xbb, 0xed, 0xa3, 0xd0, 0x3f, 0x5a, 0x70, 0x87, 0x16,
		0x3e, 0x1f, 0x69, 0x12, 0x01, 0x2d, 0x77, 0xff, 0xbf, 0x42, 0xff, 0xc3, 0x7f, 0xcc, 0x5f, 0x63,
		0xe1, 0xf3, 0x87, 0x8b, 0xd9, 0x6b, 0xd4, 0x20, 0x1b, 0xba, 0x50, 0xf3, 0x1f, 0x44, 0x37, 0x37,
		0x3a, 0x55, 0x26, 0x1b, 0x1c, 0x85, 0x5c, 0x16, 0x8c, 0x0b, 0xc6, 0xb5, 0x6f, 0x8c, 0x6b, 0x30,
		0xd6, 0xfd, 0x4f, 0x2a, 0x56, 0x03, 0x37, 0x89, 0x83, 0x1b, 0xb7, 0xff, 0xd1, 0x0b, 0x6f, 0x94,
		0xb6, 0xfa, 0xac, 0x1d, 0xa8, 0x27, 0xe4, 0xc3, 0xd0, 0x60, 0x68, 0x30, 0x34, 0x18, 0xda, 0x5e,
		0x32, 0x34, 0x63, 0x0a, 0x21, 0xcd, 0xd5, 0xe6, 0x1f, 0x5f, 0x4d, 0xdf, 0xa7, 0x5e, 0xa4, 0xcd,
		0x6c, 0xc8, 0xb2, 0x59, 0xc7, 0x27, 0xe5, 0x6c, 0xd0, 0xb5, 0xca, 0x4c, 0x95, 0x79, 0x39, 0xdb,
		0x4f, 0x61, 0xaa, 0xe2, 0x6b, 0xaf, 0xaf, 0x74, 0xbb, 0x9b, 0x8d, 0xa6, 0x2d, 0x9b, 0xb6, 0x5a,
		0x35, 0xde, 0x7b, 0xee, 0xef, 0x17, 0xee, 0xff, 0x6d, 0xba, 0x67, 0x2f, 0xce, 0x3f, 0x1c, 0xb9,
		0x3a, 0x8d, 0x55, 0x75, 0x98, 0x41, 0xab, 0x42, 0xad, 0xdb, 0x75, 0xe7, 0x08, 0x3e, 0xf9, 0x3e,
		0x96, 0x0a, 0x4b, 0xc5, 0x9c, 0x59, 0x19, 0x76, 0x6a, 0x47, 0xd1, 0x73, 0xae, 0xb7, 0x58, 0xeb,
		0xa5, 0xad, 0xf6, 0x1b, 0xa5, 0x11, 0x5d, 0xc2, 0x08, 0xec, 0x5d, 0x74, 0x49, 0x25, 0xe9, 0xbc,
		0x55, 0xcc, 0x34, 0x94, 0xb4, 0x20, 0x8c, 0xb8, 0x11, 0x71, 0x23, 0xe2, 0x46, 0x9a, 0x27, 0xc7,
		0x1f, 0x7e, 0xea, 0xb8, 0xde, 0x60, 0x90, 0x75, 0xe9, 0x87, 0x91, 0xfb, 0x7b, 0x14, 0xaa, 0x6d,
		0x8f, 0x73, 0x11, 0x1b, 0xde, 0xf0, 0xf5, 0xd7, 0xef, 0x9b, 0xee, 0xd9, 0xe5, 0x9f, 0xef, 0x5b,
		0xee, 0xd9, 0xe5, 0xe4, 0x63, 0x2b, 0xfb, 0xc7, 0xe4, 0x73, 0xfb, 0x7d, 0xd3, 0xed, 0xcc, 0x3e,
		0x77, 0xdf, 0x37, 0xdd, 0xee, 0xe5, 0x37, 0xbd, 0xde, 0x8b, 0x6f, 0xfe, 0x38, 0xbe, 0x2f, 0xff,
		0xc5, 0xaf, 0xbf, 0x7a, 0xdf, 0xeb, 0x0d, 0xff, 0xf8, 0xf9, 0x7e, 0xfc, 0xf7, 0x57, 0xf7, 0x97,
		0xdf, 0x7e, 0xf3, 0x37, 0xd3, 0x53, 0x3f, 0x7e, 0x40, 0xaf, 0xf7, 0xe2, 0xf2, 0x2f, 0xfb, 0x39,
		0x69, 0x42, 0xd3, 0x61, 0x92, 0x71, 0x9c, 0x80, 0x01, 0x60, 0x00, 0x18, 0xd8, 0xe1, 0xf4, 0x81,
		0x96, 0xc1, 0xe9, 0x4b, 0x4d, 0x12, 0x9e, 0x49, 0xc2, 0xe8, 0x60, 0x74, 0x30, 0x3a, 0x9a, 0x27,
		0xe7, 0xf5, 0xf4, 0xc7, 0x07, 0xc9, 0xd0, 0x55, 0x61, 0x9f, 0x99, 0x36, 0xeb, 0xd2, 0xb2, 0x99,
		0x36, 0x2a, 0xfd, 0xa8, 0xe2, 0x50, 0xa5, 0x99, 0xc9, 0x69, 0x89, 0x8d, 0xb6, 0x59, 0x12, 0xdb,
		0x16, 0x1b, 0x73, 0x13, 0x78, 0xb7, 0x57, 0x03, 0x4f, 0xec, 0x6e, 0xf6, 0x6b, 0xff, 0x4a, 0xc5,
		0x7b, 0x33, 0x2f, 0x67, 0x65, 0x2b, 0x65, 0x86, 0xdc, 0xac, 0x6c, 0xa4, 0xcc, 0xa5, 0xe2, 0x93,
		0x75, 0x97, 0xb9, 0xd6, 0x7a, 0x7a, 0x24, 0xce, 0x9d, 0x36, 0xd3, 0x8f, 0xd7, 0x16, 0xe7, 0x66,
		0xa8, 0x31, 0xb1, 0x65, 0xcd, 0x96, 0x66, 0x52, 0x60, 0x23, 0xb0, 0x11, 0xd8, 0x88, 0xe6, 0xc9,
		0xe1, 0x9e, 0xa5, 0xc5, 0x17, 0xe1, 0x9e, 0x25, 0x06, 0x19, 0xef, 0xdd, 0x66, 0x70, 0xc1, 0xd2,
		0x3a, 0x35, 0x93, 0x2a, 0xee, 0x96, 0xa9, 0xe2, 0x6e, 0xc1, 0x41, 0xe0, 0x20, 0xbb, 0xc6, 0x41,
		0x74, 0x53, 0xe2, 0xb9, 0x80, 0x24, 0xf5, 0x52, 0xe5, 0xde, 0xaa, 0x24, 0xf1, 0x6e, 0x04, 0x36,
		0x7c, 0xf1, 0x32, 0xe3, 0xb9, 0x58, 0xc3, 0x3d, 0x32, 0x73, 0x12, 0xc4, 0x14, 0x55, 0x52, 0x61,
		0x2d, 0x29, 0xae, 0xb4, 0x02, 0x5b, 0x53, 0x64, 0x6b, 0x0a, 0x6d, 0x4f, 0xb1, 0x85, 0xa0, 0xdc,
		0x34, 0x20, 0x64, 0xea, 0x74, 0xac, 0x9d, 0x3c, 0xd3, 0xfc, 0xcb, 0x1a, 0x8e, 0x1e, 0xef, 0x56,
		0xa4, 0x45, 0xb7, 0x66, 0xca, 0xac, 0xcd, 0x63, 0x6e, 0x80, 0xa5, 0xdb, 0x3d, 0x36, 0x55, 0xf5,
		0x1d, 0x99, 0x51, 0x24, 0x47, 0xb8, 0x01, 0x64, 0xf6, 0xff, 0xd3, 0xf9, 0x38, 0x63, 0xad, 0x4e,
		0x90, 0x6a, 0xf9, 0xea, 0x78, 0x8f, 0xdc, 0x68, 0x38, 0xde, 0x72, 0x81, 0xd9, 0x10, 0x4b, 0xd2,
		0x60, 0xae, 0x30, 0x57, 0x98, 0xab, 0xb6, 0x3a, 0xca, 0xf1, 0xd6, 0x45, 0xa1, 0x32, 0xac, 0xb5,
		0x05, 0x6b, 0x85, 0xb5, 0x1e, 0x3a, 0x6b, 0x35, 0x55, 0xf6, 0x5c, 0xd0, 0xe0, 0xf3, 0xe0, 0x36,
		0x6b, 0xde, 0x0f, 0x55, 0x20, 0x77, 0x4e, 0xf2, 0xd2, 0xee, 0x45, 0xe9, 0x42, 0x3b, 0xfa, 0xbd,
		0xba, 0xf6, 0x46, 0x41, 0x6a, 0x1c, 0x58, 0x5f, 0x12, 0xda, 0x6a, 0x88, 0xc8, 0xba, 0x14, 0xfa,
		0x8d, 0x32, 0x0e, 0xba, 0xb8, 0xc9, 0xb3, 0x61, 0xfa, 0x2c, 0x9b, 0x40, 0x5b, 0xa6, 0xd0, 0xba,
		0x49, 0xb4, 0x6e, 0x1a, 0xed, 0x9b, 0x48, 0x19, 0x53, 0x29, 0x64, 0x32, 0xe5, 0x1d, 0xfe, 0xb5,
		0x93, 0x6b, 0x9c, 0x75, 0x7c, 0xc8, 0x0e, 0x9c, 0x0a, 0x8a, 0x94, 0xc9, 0x4a, 0xae, 0xfe, 0x25,
		0xab, 0x54, 0x8e, 0x74, 0xd6, 0x72, 0x4d, 0xb8, 0xf0, 0x75, 0xac, 0x6b, 0xf2, 0x6d, 0x25, 0xd2,
		0xd6, 0xcf, 0x9e, 0x74, 0x62, 0xcd, 0x92, 0xda, 0x2d, 0x6f, 0xad, 0xf7, 0xc5, 0xfe, 0xd6, 0xbe,
		0x3c, 0x63, 0x6f, 0x2b, 0x31, 0xcc, 0xf2, 0xd2, 0x2e, 0x9f, 0xd5, 0xe3, 0x7d, 0x24, 0x32, 0xfe,
		0x41, 0xd4, 0xff, 0x6d, 0x30, 0xb9, 0x04, 0x4f, 0x98, 0x5c, 0xe7, 0x92, 0x21, 0x9d, 0x90, 0x4e,
		0x48, 0x67, 0xad, 0x49, 0xe7, 0x6b, 0x2f, 0x1c, 0x78, 0x69, 0x14, 0xdf, 0x09, 0x5e, 0x01, 0x6f,
		0x8f, 0xc8, 0xce, 0x8a, 0xf9, 0x17, 0x82, 0x77, 0xee, 0x30, 0x8e, 0x86, 0x2a, 0x16, 0x49, 0x6c,
		0xad, 0x5a, 0x1c, 0x93, 0x4a, 0xff, 0x35, 0x99, 0x22, 0x95, 0xff, 0xeb, 0x6b, 0x2d, 0xd9, 0x09,
		0xb0, 0x26, 0x3d, 0xeb, 0x0c, 0x08, 0xcd, 0xba, 0x75, 0x1f, 0x09, 0x6d, 0xc8, 0x63, 0xc5, 0xf2,
		0x03, 0x4e, 0xb2, 0x02, 0x05, 0x75, 0x33, 0xd6, 0x67, 0x37, 0x8e, 0x46, 0xa9, 0x59, 0x62, 0xec,
		0xc1, 0x07, 0x1d, 0xb7, 0x27, 0x95, 0x10, 0x7e, 0xff, 0xb7, 0x3b, 0x1b, 0xf2, 0x3b, 0x63, 0xf1,
		0x9f, 0x54, 0x7c, 0xe5, 0xa5, 0xfe, 0xad, 0x8d, 0x07, 0xbc, 0xcc, 0x0c, 0x76, 0xd9, 0x99, 0xba,
		0x15, 0x33, 0x74, 0xc1, 0x16, 0x89, 0xc7, 0xc8, 0x90, 0x05, 0xcf, 0x6b, 0xa2, 0x42, 0x56, 0xf8,
		0x78, 0xb6, 0x6b, 0xe7, 0xce, 0x4b, 0x0b, 0x92, 0x57, 0x15, 0xe7, 0xdc, 0x69, 0x9d, 0xd8, 0x78,
		0xcc, 0x44, 0x6d, 0xce, 0x9d, 0xe3, 0xb6, 0x05, 0xe9, 0xb9, 0xd6, 0x9c, 0x3b, 0x9d, 0x9a, 0x3a,
		0x15, 0xf7, 0x7b, 0xe4, 0x54, 0x64, 0xc0, 0x6c, 0xd0, 0x6a, 0xf2, 0x20, 0xf2, 0xcf, 0x04, 0x13,
		0xab, 0xc7, 0x6d, 0xc2, 0x6d, 0xc2, 0x6d, 0xda, 0xb2, 0xdb, 0x44, 0xac, 0x9e, 0x58, 0x3d, 0xb1,
		0xfa, 0x6d, 0x79, 0x02, 0x4e, 0x65, 0xb1, 0x7a, 0x81, 0x6b, 0xb2, 0x0f, 0x61, 0x7b, 0x09, 0xd7,
		0x57, 0xc3, 0xac, 0xb5, 0xe6, 0x95, 0x17, 0xe3, 0xd6, 0x9a, 0x53, 0x9d, 0x61, 0x9e, 0x30, 0x4f,
		0x98, 0xe7, 0x5e, 0x30, 0xcf, 0x64, 0x12, 0x48, 0xb6, 0x10, 0x46, 0x7f, 0xb9, 0x6f, 0x76, 0x38,
		0x95, 0xdc, 0x84, 0x65, 0x3b, 0x6c, 0x30, 0xf1, 0x0b, 0x3b, 0x8c, 0x1d, 0xc6, 0x0e, 0x57, 0x64,
		0x87, 0x77, 0x3e, 0x71, 0x4a, 0xbe, 0xd4, 0x5a, 0xbe, 0x34, 0x75, 0x13, 0x95, 0x5a, 0x4b, 0x99,
		0x0e, 0xee, 0x42, 0xef, 0xd6, 0xef, 0x5b, 0x49, 0x64, 0x66, 0x6d, 0xa2, 0x5f, 0x86, 0x81, 0xdf,
		0xf7, 0x53, 0x49, 0x97, 0x60, 0xe9, 0x29, 0x9d, 0xe5, 0xa7, 0x8c, 0x6e, 0xaf, 0x0a, 0x5f, 0x8e,
		0x5f, 0xea, 0x39, 0xdd, 0xc9, 0x6e, 0xb8, 0x2a, 0x8e, 0x6c, 0x88, 0x9f, 0x64, 0x97, 0xe3, 0x83,
		0xcd, 0x99, 0xce, 0xce, 0xa1, 0x9d, 0x94, 0xe9, 0xf2, 0x29, 0x14, 0x19, 0x11, 0xf7, 0xc8, 0x33,
		0x26, 0x67, 0xf0, 0xdc, 0xe9, 0x58, 0x49, 0xfe, 0x66, 0x27, 0xf0, 0xdc, 0xe9, 0x5a, 0x11, 0x3e,
		0x31, 0x36, 0x76, 0x92, 0xcb, 0xc9, 0x78, 0x4d, 0x4e, 0xc8, 0x9b, 0xda, 0xf7, 0x2a, 0xe2, 0xff,
		0x9f, 0xbd, 0x77, 0x6f, 0x6e, 0xdb, 0x48, 0xd6, 0xc6, 0xff, 0xf7, 0xa7, 0x40, 0x71, 0x37, 0xb5,
		0x92, 0x2d, 0x88, 0x77, 0xca, 0xe2, 0x56, 0xca, 0xab, 0x24, 0xce, 0xbb, 0xae, 0x63, 0x27, 0xae,
		0xd8, 0xef, 0xd6, 0xaf, 0x5e, 0x91, 0x47, 0x05, 0x11, 0x43, 0x09, 0x27, 0x20, 0xc0, 0x03, 0x80,
		0xba, 0xc4, 0xd6, 0x77, 0xff, 0x15, 0x00, 0x12, 0xbc, 0x93, 0x98, 0x99, 0x1e, 0x5c, 0xc8, 0x27,
		0xa9, 0x92, 0x68, 0x9b, 0x68, 0x00, 0x33, 0xd3, 0xdd, 0x4f, 0xf7, 0x74, 0x3f, 0xc3, 0x86, 0xcc,
		0x63, 0xce, 0x80, 0xe9, 0x36, 0x7b, 0x50, 0xd1, 0xf1, 0xb4, 0x76, 0x07, 0xc4, 0x18, 0x88, 0x31,
		0x10, 0x63, 0x1c, 0x69, 0xae, 0x07, 0xbb, 0x8c, 0x94, 0xcb, 0x12, 0xbb, 0x8c, 0xa9, 0xd6, 0x1e,
		0x76, 0x19, 0xb7, 0x4d, 0x6d, 0xad, 0x56, 0xc3, 0xec, 0x66, 0x06, 0x1c, 0x35, 0x6c, 0x32, 0x6e,
		0xc3, 0xfb, 0xd6, 0x9d, 0x63, 0xd8, 0xcc, 0xd4, 0x6d, 0xe3, 0x56, 0x05, 0x08, 0x5d, 0x91, 0x5f,
		0xe4, 0x62, 0xbe, 0x59, 0x60, 0x85, 0x92, 0x3e, 0x80, 0x6d, 0x80, 0x6d, 0x80, 0x6d, 0x89, 0x95,
		0x3b, 0x4b, 0xbe, 0x2b, 0xb1, 0x7e, 0x1a, 0xf2, 0xef, 0x73, 0xe9, 0xd9, 0xe4, 0xdf, 0x1f, 0xcd,
		0xd1, 0xf1, 0x26, 0x7d, 0xc3, 0x97, 0x57, 0xd5, 0x24, 0x93, 0xa4, 0x32, 0x91, 0x71, 0x54, 0x0e,
		0xf5, 0x16, 0x1a, 0x63, 0x88, 0x41, 0x1e, 0x71, 0xa3, 0x9a, 0x2a, 0x78, 0xe7, 0x30, 0x60, 0x3b,
		0x60, 0x3b, 0x60, 0x3b, 0x60, 0x3b, 0x0a, 0x6c, 0x87, 0x8e, 0xf4, 0x4c, 0x11, 0x1e, 0x3a, 0xd2,
		0x77, 0xdf, 0x08, 0x1d, 0xe9, 0x65, 0x07, 0xda, 0xe8, 0x48, 0x5f, 0x97, 0x8c, 0x8e, 0x74, 0xc4,
		0x39, 0xbc, 0xc3, 0xfd, 0xe4, 0xb9, 0xba, 0x11, 0x04, 0x9e, 0x75, 0x3b, 0x09, 0x58, 0x18, 0x5f,
		0x2a, 0x6a, 0xa2, 0xd9, 0x72, 0x1f, 0x04, 0x07, 0x08, 0x0e, 0x10, 0x1c, 0x1c, 0x69, 0x70, 0x70,
		0xb5, 0x66, 0x0f, 0x74, 0x9b, 0x39, 0x77, 0xc1, 0xbd, 0x92, 0x26, 0x1b, 0x42, 0x99, 0x1f, 0xe3,
		0xa7, 0x44, 0xe9, 0x05, 0x4a, 0x2f, 0x72, 0x01, 0xd6, 0x5a, 0x76, 0x0d, 0xde, 0x2d, 0xcc, 0x6d,
		0x66, 0xb8, 0x52, 0x43, 0xe1, 0xc5, 0x0e, 0x94, 0xaa, 0xa6, 0xa9, 0x30, 0x91, 0x0c, 0x24, 0x0a,
		0x24, 0x0a, 0x24, 0x5a, 0x68, 0x24, 0x5a, 0x7e, 0x32, 0xd6, 0x27, 0xd2, 0x56, 0x2b, 0x64, 0xbd,
		0xa7, 0xd2, 0x33, 0xa9, 0x6b, 0x58, 0xcf, 0x60, 0x44, 0x7e, 0xe3, 0x58, 0x13, 0xb0, 0x6a, 0x3b,
		0xab, 0xb6, 0x0c, 0x76, 0x57, 0xab, 0x23, 0x27, 0xa8, 0x50, 0x82, 0xec, 0xf1, 0x56, 0xff, 0xc5,
		0x9e, 0x15, 0x34, 0x53, 0x55, 0x3e, 0x5a, 0x7e, 0x70, 0x15, 0x04, 0x44, 0x47, 0x67, 0x7d, 0xb2,
		0x9c, 0xf7, 0x36, 0x0b, 0xfd, 0x26, 0x51, 0xdc, 0x11, 0x86, 0x62, 0x0b, 0x12, 0xeb, 0x6f, 0x5b,
		0xad, 0xce, 0x45, 0xab, 0x55, 0xbb, 0x68, 0x5e, 0xd4, 0x2e, 0xdb, 0xed, 0x7a, 0xa7, 0x4e, 0xd0,
		0xda, 0x58, 0xf9, 0xdd, 0x33, 0x99, 0xc7, 0xcc, 0x9f, 0xc2, 0x11, 0x76, 0x26, 0xb6, 0x9d, 0xeb,
		0x44, 0x13, 0x1d, 0xfa, 0x9a, 0xc8, 0xcb, 0xe6, 0xf0, 0xd7, 0xc5, 0xa3, 0x46, 0xab, 0xb4, 0xbd,
		0xfe, 0x8a, 0x4f, 0x85, 0xfd, 0x6c, 0x04, 0xf7, 0xbf, 0xc7, 0x0f, 0xbe, 0xf0, 0xb9, 0x82, 0x03,
		0x86, 0x0b, 0xbd, 0xc6, 0x8a, 0x7b, 0xca, 0xf0, 0xc2, 0x7a, 0x2a, 0xf4, 0x49, 0xc3, 0x9e, 0xe5,
		0x7a, 0x56, 0xf0, 0x4c, 0x70, 0xca, 0xf0, 0x4c, 0x12, 0x4e, 0x18, 0xc6, 0x09, 0xc3, 0xb9, 0xc7,
		0xd9, 0x25, 0x3b, 0x61, 0xf8, 0xde, 0xb5, 0x4d, 0x5d, 0x5a, 0x17, 0xd7, 0xd6, 0xe1, 0xb2, 0x58,
		0x9a, 0x53, 0x86, 0x6b, 0x38, 0x65, 0x38, 0xaf, 0xc4, 0x1a, 0x4e, 0x19, 0x2e, 0x4a, 0x18, 0x46,
		0x98, 0x28, 0xa3, 0x4b, 0x90, 0xd1, 0x37, 0xd7, 0x13, 0x36, 0xd5, 0x13, 0x37, 0xd3, 0x13, 0xa6,
		0x13, 0x55, 0xec, 0xe0, 0x26, 0xdb, 0x7b, 0xc4, 0xa9, 0x1b, 0xe5, 0xbb, 0x7a, 0xea, 0x76, 0xf3,
		0x08, 0x33, 0x6f, 0x4a, 0x76, 0x66, 0x93, 0x29, 0xbb, 0xc0, 0x94, 0x15, 0x2c, 0xe5, 0xd6, 0xcf,
		0x2b, 0x0a, 0x97, 0x89, 0x2e, 0x59, 0x30, 0x19, 0x2b, 0x80, 0x74, 0x2b, 0x72, 0x81, 0xe9, 0x80,
		0xe9, 0x80, 0xe9, 0x80, 0xe9, 0x80, 0xe9, 0x80, 0xe9, 0x80, 0xe9, 0x80, 0xe9, 0x80, 0xe9, 0x94,
		0x5c, 0x29, 0x9a, 0x18, 0x64, 0x4f, 0x81, 0x67, 0xe8, 0x13, 0xc7, 0x0f, 0x8c, 0x5b, 0x5b, 0xce,
		0x23, 0x84, 0xe8, 0xc0, 0x67, 0xce, 0x40, 0xde, 0xde, 0x12, 0x7a, 0xa5, 0x0f, 0x8e, 0x69, 0x0d,
		0x8c, 0x80, 0xf9, 0x9a, 0xa1, 0xcd, 0x30, 0xa9, 0xe6, 0xb8, 0x26, 0xd3, 0x2c, 0x5f, 0x1b, 0x44,
		0xa8, 0x70, 0xe2, 0x31, 0xf3, 0xbc, 0xf8, 0xc0, 0x2b, 0x1e, 0xda, 0x32, 0x41, 0xaf, 0xd4, 0x63,
		0x9f, 0x37, 0x2e, 0x7b, 0x95, 0xad, 0x8d, 0x38, 0x92, 0x5d, 0x50, 0xf9, 0x08, 0x50, 0xf5, 0x0e,
		0xe8, 0xec, 0x09, 0x0b, 0xbd, 0xfd, 0xe9, 0x06, 0x2c, 0xf2, 0xe4, 0xcb, 0xc5, 0x50, 0x14, 0xdb,
		0xa1, 0x5b, 0x24, 0xcb, 0x6d, 0x8f, 0xd6, 0xb0, 0x3d, 0x4a, 0xed, 0x10, 0xb0, 0x3d, 0xaa, 0xda,
		0xb2, 0x4a, 0x47, 0xc3, 0xc9, 0xca, 0x89, 0x8d, 0xa9, 0xe5, 0xfa, 0xfa, 0x93, 0xa7, 0x4b, 0x9f,
		0x17, 0x45, 0xd1, 0xba, 0x46, 0xd5, 0xaa, 0x46, 0x53, 0x76, 0x47, 0x87, 0x8e, 0x88, 0x5b, 0xcf,
		0x94, 0x45, 0x4c, 0xf4, 0x91, 0xd2, 0x0b, 0x4d, 0xbd, 0x22, 0xfd, 0x54, 0x50, 0xb5, 0x8a, 0x95,
		0x69, 0x2e, 0xf2, 0x42, 0x9e, 0x12, 0x06, 0xe1, 0xb3, 0x11, 0x04, 0xcc, 0x73, 0xa4, 0x2d, 0x42,
		0xe5, 0xba, 0xd7, 0x7b, 0xec, 0xf5, 0xf4, 0x5e, 0xef, 0xbc, 0x7b, 0x76, 0xf3, 0xaf, 0xbf, 0xfd,
		0xf0, 0xf7, 0x5e, 0xef, 0xcd, 0x8f, 0xbd, 0xde, 0xf7, 0x7f, 0xf6, 0xdf, 0x54, 0xb2, 0xc6, 0xd4,
		0x99, 0xa0, 0x31, 0x8f, 0x0d, 0x5c, 0xcf, 0x8c, 0xd8, 0x35, 0x98, 0x3c, 0x02, 0x5b, 0x92, 0x06,
		0xd4, 0x05, 0xd4, 0x05, 0xd4, 0x25, 0xb8, 0x72, 0xd8, 0x68, 0x2c, 0x17, 0x68, 0xce, 0x70, 0x56,
		0xb3, 0xf0, 0xc6, 0x47, 0xa6, 0x83, 0x6a, 0xc5, 0xf2, 0x88, 0x63, 0x53, 0xd4, 0xc2, 0xc2, 0xec,
		0x1c, 0x6f, 0x2d, 0xac, 0xef, 0xd9, 0x77, 0x84, 0xf5, 0x12, 0xa1, 0x34, 0x54, 0x49, 0x64, 0xa4,
		0xa6, 0xd4, 0xea, 0xaa, 0x4c, 0x6d, 0x95, 0xa9, 0xaf, 0x3a, 0x35, 0x26, 0x8a, 0x89, 0x0a, 0x57,
		0xd9, 0x20, 0x8b, 0x2e, 0x88, 0x50, 0x86, 0xfc, 0xf0, 0xa2, 0x69, 0x6b, 0xfb, 0x76, 0x85, 0x2c,
		0x24, 0xd2, 0xd4, 0xef, 0x57, 0xfc, 0x91, 0x3c, 0x62, 0x81, 0x51, 0x6a, 0x7c, 0x84, 0x83, 0xcd,
		0x4c, 0x39, 0x16, 0xc1, 0x95, 0x03, 0x71, 0x12, 0x79, 0x08, 0x93, 0x81, 0x57, 0x11, 0x26, 0x8b,
		0xea, 0x12, 0xf6, 0x23, 0x96, 0x9e, 0x04, 0xfb, 0x11, 0x87, 0xbd, 0x1f, 0xd1, 0x68, 0x63, 0x43,
		0x22, 0xab, 0xab, 0x8b, 0x9c, 0xb6, 0x9f, 0xe2, 0x3c, 0xcb, 0x94, 0x87, 0x23, 0x73, 0x51, 0x40,
		0x22, 0x40, 0x22, 0x40, 0x22, 0x82, 0x2b, 0x47, 0xba, 0x59, 0x80, 0xa0, 0x49, 0x80, 0xa8, 0x39,
		0xa0, 0xa8, 0x38, 0xa4, 0x06, 0x1c, 0x52, 0x14, 0x1c, 0xd2, 0x69, 0xb7, 0x9b, 0x6d, 0x20, 0x91,
		0x43, 0x43, 0x22, 0xaf, 0x14, 0x2e, 0x4e, 0xd9, 0xec, 0x59, 0x36, 0x59, 0xb3, 0x8a, 0x48, 0x82,
		0x48, 0x65, 0x8e, 0x8c, 0xcf, 0x93, 0xa6, 0x9f, 0x41, 0x8e, 0xd9, 0xab, 0x8c, 0x82, 0x09, 0xf7,
		0x94, 0xcd, 0x21, 0x55, 0x30, 0xe1, 0x1c, 0x54, 0x41, 0x44, 0x29, 0x8c, 0x24, 0x65, 0x10, 0x24,
		0x11, 0x72, 0x94, 0x45, 0x8c, 0x64, 0x48, 0x91, 0x0c, 0x21, 0xd2, 0x21, 0x43, 0xb5, 0x56, 0x49,
		0x18, 0x01, 0xca, 0x23, 0x3f, 0x09, 0xc4, 0x27, 0x89, 0xf4, 0x24, 0xf0, 0x2e, 0x05, 0xb2, 0x23,
		0x2b, 0xaf, 0x24, 0xc7, 0x0e, 0x74, 0x98, 0x41, 0x86, 0xc8, 0x80, 0x02, 0xb2, 0x51, 0x42, 0xb5,
		0x22, 0x0f, 0x73, 0x46, 0xd0, 0xa8, 0x5f, 0x00, 0x37, 0xec, 0x3f, 0x5a, 0xc1, 0xe0, 0xde, 0x72,
		0xee, 0xc4, 0x8e, 0x0d, 0x98, 0x27, 0xcd, 0x97, 0xe5, 0xc0, 0x39, 0xc3, 0x39, 0x1f, 0xac, 0x73,
		0x9e, 0x11, 0xd6, 0xdb, 0xfe, 0x58, 0x8f, 0xd7, 0xbd, 0x84, 0xa3, 0x16, 0xe1, 0xa4, 0x97, 0xe3,
		0x9e, 0xa7, 0xe1, 0x98, 0x8f, 0xb9, 0xe4, 0xcd, 0x81, 0x3f, 0x90, 0xc9, 0x4f, 0xc5, 0x27, 0xa5,
		0xca, 0xc9, 0x88, 0x8e, 0x28, 0x1d, 0xfa, 0x83, 0x4a, 0xb6, 0x59, 0x3e, 0x69, 0xc6, 0xf8, 0x78,
		0xf0, 0xa4, 0xfc, 0x5e, 0xf4, 0xda, 0x5d, 0x4d, 0xe2, 0x78, 0xc9, 0x68, 0xf0, 0x45, 0xd9, 0xe2,
		0x95, 0x67, 0x03, 0x5e, 0xd1, 0x7e, 0x33, 0xe5, 0x5c, 0xcf, 0xd8, 0xd9, 0xe7, 0x61, 0x3d, 0x4f,
		0x55, 0x85, 0x18, 0x09, 0xbb, 0x38, 0xd9, 0x3a, 0x29, 0xa9, 0xba, 0x18, 0x79, 0x7a, 0xda, 0x71,
		0x15, 0xcc, 0xd6, 0x90, 0x67, 0x69, 0x2a, 0x3c, 0x00, 0x89, 0x2c, 0x11, 0x93, 0xce, 0x3e, 0xed,
		0x5f, 0xc9, 0xbb, 0xbf, 0xb1, 0x67, 0x2e, 0x78, 0xe7, 0x80, 0x66, 0xec, 0x53, 0x0c, 0xb8, 0xec,
		0x40, 0xef, 0x1e, 0xdd, 0xed, 0x63, 0xb6, 0x63, 0xbc, 0x2a, 0x81, 0x35, 0x0a, 0x25, 0xef, 0x1b,
		0xa7, 0xf9, 0xb6, 0x67, 0xfc, 0xfd, 0x3d, 0x33, 0x90, 0xae, 0x2b, 0x20, 0x35, 0xb8, 0xe5, 0x01,
		0xb3, 0x82, 0xe0, 0x95, 0x17, 0xac, 0x0a, 0x83, 0x53, 0x61, 0x30, 0x2a, 0x0e, 0x3e, 0xe5, 0xb4,
		0x29, 0x6d, 0x95, 0x7c, 0x65, 0xf1, 0x70, 0xa3, 0x94, 0xcb, 0x6a, 0x6d, 0xd2, 0x36, 0xc8, 0x48,
		0xeb, 0xd0, 0xb8, 0x1a, 0x51, 0xb8, 0xe3, 0x2a, 0x91, 0x78, 0x4a, 0x32, 0x8e, 0x12, 0x8d, 0x9f,
		0xa4, 0xe3, 0x26, 0xe9, 0x78, 0x49, 0x3e, 0x4e, 0xa2, 0x05, 0x3b, 0xbc, 0x8d, 0x1e, 0x11, 0x1b,
		0xf9, 0xf4, 0x44, 0x79, 0xc1, 0x64, 0x41, 0x22, 0x41, 0x2c, 0x4d, 0x50, 0x47, 0x9a, 0x00, 0x69,
		0x02, 0xd5, 0x69, 0x02, 0xd1, 0xfe, 0xa7, 0xca, 0xc8, 0x78, 0xb2, 0x46, 0x32, 0xe1, 0x79, 0xb2,
		0x72, 0xa6, 0x82, 0x50, 0x42, 0x85, 0x12, 0xaa, 0xdc, 0x94, 0x4c, 0x32, 0x27, 0x8e, 0x12, 0xaa,
		0xc3, 0x2f, 0xa1, 0x6a, 0xa3, 0x84, 0x4a, 0x64, 0x2a, 0x54, 0x94, 0x50, 0x35, 0x3b, 0xb5, 0x1a,
		0x2a, 0xa8, 0x32, 0xba, 0xba, 0xc8, 0xb5, 0xdc, 0x23, 0xcb, 0x21, 0x02, 0x21, 0x53, 0x41, 0x00,
		0x21, 0x00, 0x21, 0x00, 0x21, 0x00, 0x21, 0x00, 0x21, 0x00, 0x21, 0x00, 0x21, 0x47, 0x08, 0x42,
		0x0e, 0xb4, 0x8c, 0x3b, 0xce, 0xa3, 0x57, 0xd7, 0x53, 0xeb, 0x55, 0xc1, 0x24, 0xa5, 0x26, 0xba,
		0x97, 0xf5, 0x35, 0xba, 0xed, 0xc2, 0x81, 0xb3, 0xd3, 0xbf, 0xf8, 0xf7, 0xec, 0x39, 0x4a, 0xb1,
		0x75, 0x9e, 0xfd, 0x16, 0xef, 0xd6, 0x19, 0x54, 0xbd, 0xcb, 0xbb, 0x65, 0xc2, 0x8e, 0x6d, 0x9b,
		0x37, 0xf5, 0x60, 0x4b, 0x0c, 0xb2, 0xf0, 0xe6, 0xee, 0x2b, 0x8e, 0xb1, 0x4b, 0x3b, 0x66, 0xe2,
		0x63, 0xb5, 0x63, 0x90, 0x44, 0x06, 0x67, 0xf3, 0xa8, 0xac, 0xbf, 0xf3, 0x86, 0xf7, 0xad, 0x58,
		0x4e, 0xc0, 0xbc, 0xa1, 0x31, 0x60, 0xdb, 0xf7, 0x21, 0x13, 0xf8, 0xba, 0xf0, 0xdd, 0x2d, 0x23,
		0xb7, 0x7b, 0x63, 0x66, 0x6f, 0x18, 0x97, 0x26, 0x4c, 0xe3, 0x0c, 0xc3, 0xd2, 0x86, 0x59, 0xdc,
		0x61, 0x14, 0x77, 0x98, 0xc4, 0x1f, 0x06, 0xf1, 0xad, 0xda, 0x7d, 0x1b, 0x15, 0xf3, 0xe9, 0x4b,
		0x5f, 0xc8, 0x30, 0xbf, 0x04, 0xb5, 0x0c, 0xa8, 0x65, 0x58, 0xfd, 0xe2, 0x9d, 0xed, 0xde, 0x1a,
		0xf6, 0xfc, 0x3c, 0x04, 0x81, 0x52, 0x86, 0x75, 0x11, 0xa8, 0x64, 0x40, 0x25, 0x83, 0x24, 0xf6,
		0xe4, 0xae, 0x64, 0x30, 0x26, 0x81, 0xab, 0xc7, 0x6d, 0x91, 0xe2, 0xc5, 0x0c, 0x8b, 0x42, 0x50,
		0xcf, 0xa0, 0x38, 0xfb, 0x89, 0x7a, 0x06, 0xd1, 0x10, 0x5b, 0xb8, 0x9e, 0xe1, 0xd6, 0x18, 0xfc,
		0x39, 0x19, 0xcb, 0xef, 0x24, 0x4c, 0xe5, 0x80, 0x4a, 0x19, 0x1b, 0x09, 0x47, 0xb6, 0x91, 0x20,
		0x4d, 0xa5, 0x4c, 0x73, 0xa6, 0xd5, 0xba, 0xe7, 0x22, 0x38, 0xd0, 0x6a, 0x55, 0x41, 0x41, 0xae,
		0x9c, 0xb9, 0x02, 0x2b, 0x53, 0x64, 0x65, 0x0a, 0xad, 0x4e, 0xb1, 0x89, 0xd2, 0xf1, 0x85, 0x23,
		0x57, 0xbe, 0x5a, 0x54, 0xd5, 0xa8, 0x1b, 0x49, 0xb7, 0x63, 0x82, 0x48, 0x42, 0xc2, 0xe5, 0xb7,
		0x04, 0xb2, 0x88, 0x68, 0x2b, 0x67, 0xff, 0x95, 0xe5, 0x2c, 0xe9, 0x3a, 0x0e, 0x26, 0xa6, 0xd1,
		0x9d, 0xe5, 0x29, 0x53, 0x79, 0x96, 0x34, 0xd5, 0x31, 0x5c, 0x87, 0x30, 0x67, 0xc7, 0x7e, 0x98,
		0xb4, 0x04, 0x0a, 0x67, 0x8e, 0xf4, 0x91, 0xd0, 0x4b, 0x96, 0x7e, 0x2a, 0x0f, 0x68, 0x0c, 0x68,
		0x0c, 0x68, 0xac, 0xa0, 0x68, 0xec, 0x70, 0x8e, 0xba, 0x90, 0x31, 0x7c, 0x4f, 0x03, 0x7b, 0x62,
		0x52, 0x5a, 0xbe, 0xa9, 0x40, 0x1a, 0xd3, 0x57, 0x87, 0xe9, 0x83, 0xe9, 0x3b, 0x76, 0xd3, 0x27,
		0x9b, 0x79, 0x4a, 0x04, 0xf9, 0x9e, 0x7d, 0xa7, 0x8f, 0x5c, 0x93, 0x70, 0x91, 0x2c, 0x9e, 0xec,
		0x15, 0x8b, 0x26, 0x9a, 0x4b, 0x1a, 0xec, 0x43, 0x6e, 0x08, 0x54, 0x18, 0x04, 0xc5, 0x86, 0x41,
		0x95, 0x81, 0x50, 0x6e, 0x28, 0x94, 0x1b, 0x0c, 0xf5, 0x86, 0x83, 0x38, 0x36, 0x23, 0x5a, 0xbb,
		0x64, 0x58, 0x6a, 0x6d, 0xe5, 0x4e, 0x49, 0xb5, 0x22, 0x6b, 0x40, 0x83, 0x04, 0x36, 0xa2, 0x02,
		0xc2, 0xa0, 0x5f, 0x8e, 0x85, 0x6b, 0xfb, 0x10, 0x53, 0xb0, 0x73, 0x6d, 0x95, 0x5e, 0x8f, 0x3b,
		0x8b, 0x1d, 0xd3, 0x08, 0x5c, 0xef, 0x99, 0x58, 0xdd, 0xb4, 0x84, 0x8e, 0x2b, 0xd4, 0x66, 0xe6,
		0x79, 0xcc, 0x54, 0x71, 0x87, 0x66, 0x78, 0x87, 0x47, 0x66, 0xdd, 0xdd, 0x07, 0xcc, 0xac, 0x90,
		0xca, 0x7f, 0x39, 0xa3, 0x9e, 0x4c, 0x59, 0x96, 0xb0, 0xad, 0xa2, 0xe7, 0x93, 0x48, 0x9e, 0x7e,
		0x8c, 0xe4, 0xcf, 0xa7, 0x50, 0x8a, 0x60, 0x6c, 0xab, 0xfc, 0x64, 0x02, 0xbb, 0x5a, 0x93, 0x76,
		0x0e, 0x0f, 0x2e, 0x2f, 0x96, 0x2f, 0x88, 0x24, 0x3a, 0xa1, 0x70, 0x8e, 0x25, 0x39, 0xcb, 0x67,
		0xe7, 0xe5, 0xa7, 0xf3, 0x8f, 0xd5, 0xb5, 0x02, 0xb2, 0xea, 0x42, 0x1d, 0x4e, 0x35, 0xae, 0x35,
		0xa8, 0xd2, 0xf9, 0x11, 0x9e, 0xf2, 0xdc, 0x0f, 0xc9, 0xf3, 0xce, 0x3f, 0xde, 0xfc, 0x9f, 0xe8,
		0x79, 0x93, 0x6d, 0x1c, 0xff, 0xe6, 0x6a, 0x12, 0xb8, 0x5f, 0xa3, 0xa7, 0xbd, 0xf9, 0x29, 0x7a,
		0xda, 0x9b, 0xf7, 0xd3, 0xa7, 0x2d, 0x61, 0x2e, 0xc0, 0x61, 0x4f, 0x81, 0x7e, 0xef, 0x8e, 0x75,
		0xd7, 0xb1, 0x9f, 0xe9, 0x32, 0x02, 0xcb, 0x62, 0x91, 0x12, 0x45, 0x5e, 0x00, 0x79, 0x01, 0x12,
		0x93, 0x8e, 0x94, 0x28, 0xf1, 0x95, 0x65, 0x3b, 0xfd, 0x57, 0xd8, 0xa7, 0x66, 0x74, 0xee, 0xaf,
		0xa0, 0x0f, 0xad, 0xa0, 0x1b, 0x32, 0x93, 0xc5, 0xa0, 0xb8, 0x27, 0x92, 0x77, 0xf6, 0x8b, 0x70,
		0x9e, 0x4d, 0xac, 0x1e, 0x7a, 0x38, 0xea, 0xbe, 0x78, 0x31, 0xf9, 0x92, 0x14, 0x54, 0x93, 0x2b,
		0x06, 0x28, 0xa8, 0x26, 0x17, 0x35, 0x51, 0x92, 0xd5, 0xe4, 0xfa, 0xd4, 0x38, 0x91, 0x94, 0x94,
		0xc7, 0xc2, 0x50, 0x57, 0x8e, 0xba, 0xf2, 0xdc, 0xd1, 0x7d, 0xc9, 0xea, 0xca, 0xa7, 0x67, 0xd4,
		0x39, 0x93, 0xd1, 0x2d, 0xf3, 0xe8, 0xc2, 0xf6, 0x65, 0xb1, 0x08, 0xdb, 0x11, 0xb6, 0x23, 0x6c,
		0x2f, 0x68, 0xd8, 0x2e, 0xcd, 0x4c, 0xb5, 0xaa, 0xa7, 0x17, 0x04, 0xa2, 0x68, 0x98, 0xaa, 0x66,
		0xff, 0x95, 0xa5, 0x84, 0xbc, 0x86, 0x72, 0x64, 0x1a, 0x35, 0x59, 0x9e, 0x32, 0xa5, 0x25, 0xe4,
		0x74, 0x27, 0x16, 0x1f, 0xc2, 0xb4, 0x1d, 0x7b, 0x15, 0x79, 0xa6, 0xe0, 0x6f, 0x7a, 0x46, 0x11,
		0x05, 0xd6, 0x12, 0x3b, 0xb1, 0x68, 0x93, 0x75, 0x14, 0x3b, 0xc1, 0x68, 0x93, 0xd2, 0x92, 0x9d,
		0x68, 0xb4, 0x26, 0x5c, 0xe8, 0x84, 0xa3, 0x23, 0xc9, 0xf7, 0x2e, 0xa6, 0x9f, 0xaa, 0xf2, 0xd1,
		0xb5, 0x9a, 0xbc, 0x5f, 0x9c, 0xea, 0xfd, 0x1c, 0x3e, 0xe3, 0xc2, 0x67, 0xa4, 0x7e, 0x33, 0x5a,
		0x17, 0x85, 0xc8, 0xfd, 0x2e, 0xac, 0x81, 0x02, 0x25, 0x7f, 0x63, 0x63, 0x2c, 0x9f, 0xfe, 0x9d,
		0xc9, 0x41, 0x02, 0x18, 0x09, 0xe0, 0x03, 0x4d, 0x00, 0x0b, 0xb2, 0xee, 0xec, 0xd6, 0x18, 0x24,
		0x81, 0x91, 0x04, 0x46, 0x12, 0x58, 0x30, 0x09, 0x1c, 0xaf, 0x1f, 0xe2, 0x14, 0x70, 0xfa, 0x63,
		0x53, 0x91, 0x00, 0x46, 0x02, 0x18, 0x09, 0xe0, 0xcc, 0x13, 0xc0, 0x71, 0x84, 0x60, 0xb9, 0xbe,
		0xfe, 0xe4, 0xe9, 0x7e, 0xdc, 0x78, 0x00, 0x4a, 0x91, 0x22, 0xe4, 0x83, 0x41, 0x29, 0x52, 0xba,
		0x7c, 0x70, 0x1b, 0x94, 0x22, 0x85, 0x4b, 0x06, 0x13, 0x18, 0xa0, 0xcf, 0x46, 0x10, 0x30, 0xcf,
		0x21, 0xb3, 0x40, 0x95, 0xeb, 0x5e, 0xef, 0xb1, 0xd7, 0xd3, 0x7b, 0xbd, 0xf3, 0xee, 0xd9, 0xcd,
		0xbf, 0xfe, 0xf6, 0xc3, 0xdf, 0x7b, 0xbd, 0x37, 0x3f, 0xf6, 0x7a, 0xdf, 0xff, 0xd9, 0x7f, 0x53,
		0x41, 0xfa, 0x3b, 0x2d, 0x24, 0xa1, 0xc1, 0x99, 0x48, 0x7e, 0x67, 0x36, 0x67, 0xe5, 0x48, 0x7e,
		0x4f, 0x93, 0x6f, 0x55, 0x8a, 0xcc, 0x82, 0xca, 0xe4, 0x67, 0x5c, 0xfa, 0xba, 0xfc, 0x27, 0x24,
		0xc1, 0x33, 0x5b, 0x1f, 0x05, 0x4a, 0x83, 0x4f, 0x57, 0x02, 0x0e, 0x88, 0xe1, 0x9f, 0x54, 0x45,
		0x67, 0xc4, 0xa4, 0x9a, 0x3d, 0xb2, 0x83, 0x62, 0x52, 0x1c, 0x7a, 0x90, 0x0c, 0x01, 0x5f, 0x9e,
		0x67, 0xfd, 0x40, 0x08, 0x1e, 0x57, 0xcb, 0x99, 0xba, 0x01, 0x59, 0xbf, 0xca, 0x54, 0x49, 0xd1,
		0xc8, 0xfa, 0xb9, 0x53, 0x19, 0xc9, 0xcc, 0x7d, 0x10, 0x59, 0x8b, 0xa2, 0x59, 0x09, 0x61, 0xf0,
		0x5f, 0xb9, 0x36, 0xf4, 0xbf, 0xae, 0xf4, 0xff, 0x57, 0xd3, 0x2f, 0xcf, 0xbb, 0x37, 0x55, 0x9d,
		0x07, 0xda, 0xf7, 0x33, 0xb4, 0x0c, 0xf6, 0xc0, 0x18, 0xf0, 0xdb, 0x83, 0xe8, 0x2a, 0x1c, 0xd9,
		0x01, 0x2b, 0x20, 0x69, 0x05, 0xf8, 0x8f, 0xec, 0x30, 0x47, 0x96, 0xa3, 0xc7, 0xdc, 0x11, 0x12,
		0x67, 0x76, 0x2c, 0x4a, 0x11, 0xdb, 0x65, 0xaf, 0x61, 0x97, 0x3d, 0xb3, 0x65, 0x4f, 0xb6, 0xfc,
		0xe9, 0xd4, 0x20, 0x9b, 0x48, 0x48, 0x38, 0xdf, 0x2f, 0x5f, 0xe0, 0x2d, 0x51, 0xd0, 0x2d, 0x59,
		0xc0, 0x2d, 0x97, 0x85, 0x91, 0xdf, 0xc3, 0x24, 0x2a, 0xc8, 0x26, 0x4f, 0xde, 0xd2, 0x25, 0x6b,
		0x5f, 0xe4, 0xd2, 0x53, 0x74, 0x43, 0xdc, 0x6a, 0x5c, 0xb6, 0x2e, 0x3b, 0x17, 0x8d, 0xcb, 0xf6,
		0xe1, 0x8e, 0x75, 0x46, 0x29, 0x99, 0x7e, 0x01, 0xca, 0xe0, 0xe6, 0x07, 0x8a, 0x0c, 0x6d, 0xe3,
		0x4e, 0xa2, 0x0e, 0x6e, 0x55, 0x10, 0x5c, 0x34, 0x5c, 0xf4, 0xc1, 0xba, 0xe8, 0x7f, 0xb3, 0x27,
		0xdd, 0x72, 0x02, 0x76, 0x27, 0x54, 0xc0, 0x2f, 0xb3, 0xd5, 0x2e, 0xbd, 0xb3, 0x55, 0xb9, 0xae,
		0xe9, 0x97, 0x86, 0x3e, 0xbc, 0xd2, 0x7f, 0xed, 0x7f, 0xab, 0x9f, 0xbd, 0x7d, 0xa9, 0x94, 0xdc,
		0x6e, 0x45, 0x27, 0xab, 0x3c, 0x79, 0x14, 0x96, 0x6b, 0x26, 0x0a, 0x45, 0xbc, 0xb0, 0x5d, 0x87,
		0x56, 0xc4, 0xbb, 0xbc, 0xca, 0xe5, 0xab, 0x78, 0x57, 0xe4, 0xc9, 0x95, 0xf1, 0xd6, 0x50, 0xc6,
		0x4b, 0xa5, 0x5a, 0xe4, 0x2a, 0x46, 0xae, 0x6a, 0xf4, 0x2a, 0x27, 0x09, 0xdc, 0x05, 0xd7, 0x8e,
		0x74, 0x65, 0xdf, 0x9c, 0x4f, 0x5d, 0xb6, 0x88, 0x6f, 0x8e, 0x28, 0x32, 0x1d, 0x81, 0x62, 0xd7,
		0x61, 0x34, 0x1b, 0xb9, 0x57, 0x5d, 0x60, 0x97, 0x7e, 0x7d, 0x43, 0xd7, 0x1e, 0x18, 0x83, 0xaa,
		0x2c, 0xe6, 0xd2, 0x28, 0x76, 0x77, 0x3f, 0x0e, 0x8c, 0xc1, 0x4d, 0xb2, 0xb9, 0x1b, 0x2a, 0xe3,
		0xff, 0xe7, 0x55, 0x0a, 0x87, 0x6d, 0x7d, 0x2a, 0x64, 0x8b, 0xe6, 0x34, 0xe0, 0x5a, 0xe0, 0xda,
		0x4c, 0x71, 0x2d, 0xda, 0xd3, 0x80, 0x6b, 0x8f, 0xf0, 0xec, 0xeb, 0xe1, 0xd0, 0x72, 0xac, 0xe0,
		0x59, 0xb7, 0x1c, 0x93, 0x3d, 0x11, 0x1e, 0x7e, 0xbd, 0x2c, 0x17, 0x4d, 0x6a, 0x19, 0xa9, 0x2e,
		0xb5, 0x0a, 0x2b, 0x53, 0x65, 0x65, 0x2a, 0xad, 0x4e, 0xb5, 0xe5, 0x54, 0x5c, 0x52, 0xd5, 0xe9,
		0x42, 0xd9, 0xb5, 0x95, 0x07, 0x96, 0x32, 0xce, 0x10, 0x18, 0x5d, 0x69, 0xf3, 0x35, 0x74, 0xf4,
		0x5d, 0x69, 0x97, 0x98, 0x32, 0x12, 0xbb, 0x48, 0x27, 0xa5, 0x8c, 0xe7, 0x5c, 0x3f, 0x4c, 0x57,
		0x13, 0x11, 0xfc, 0x8a, 0xc5, 0x01, 0x75, 0x01, 0x75, 0x01, 0x75, 0x15, 0x14, 0x75, 0x29, 0x60,
		0x03, 0xc8, 0x75, 0x84, 0x48, 0x36, 0x18, 0x16, 0x51, 0xd6, 0x62, 0x9b, 0x26, 0xc1, 0x28, 0xd1,
		0x6d, 0x38, 0x24, 0x22, 0x49, 0x36, 0x1e, 0x08, 0xfc, 0x4e, 0x1e, 0xad, 0xc1, 0x24, 0x01, 0x3e,
		0xba, 0x83, 0x33, 0x9b, 0xb6, 0x42, 0x75, 0x07, 0x6f, 0xd8, 0x57, 0xf2, 0xab, 0x24, 0xd9, 0x5c,
		0x4d, 0xcd, 0x66, 0x93, 0xbf, 0xfc, 0x47, 0x34, 0x02, 0x2b, 0x5d, 0x0a, 0xc5, 0xd8, 0x60, 0x2c,
		0x06, 0xf5, 0xe5, 0xd0, 0x94, 0xe0, 0xbb, 0x1c, 0x9a, 0xa8, 0xed, 0x55, 0x8d, 0xd9, 0xb1, 0x8f,
		0x28, 0x6a, 0x7f, 0xe4, 0x6b, 0x7b, 0x45, 0x8f, 0x45, 0x14, 0x3c, 0x06, 0x51, 0x8d, 0x8a, 0x9b,
		0xee, 0xa3, 0xa3, 0x07, 0xf7, 0x1e, 0xf3, 0xef, 0x5d, 0xdb, 0x94, 0x28, 0x21, 0x58, 0x15, 0x84,
		0x12, 0x02, 0xa8, 0xfe, 0xa1, 0x95, 0x10, 0x2c, 0xaf, 0x71, 0xf9, 0x12, 0x82, 0x15, 0x79, 0x28,
		0x8d, 0x45, 0x09, 0x41, 0xee, 0x19, 0xaf, 0xb2, 0x96, 0xc6, 0x86, 0xf0, 0x5a, 0x0f, 0xf1, 0xbc,
		0x3e, 0xb4, 0x5d, 0xd7, 0xb4, 0x9c, 0xbb, 0xb9, 0x66, 0xe9, 0x63, 0xe6, 0x0d, 0x98, 0x13, 0xe8,
		0x5e, 0xb4, 0xaf, 0x27, 0x5f, 0x3e, 0x2b, 0xb1, 0xc7, 0x48, 0xb4, 0xb7, 0x48, 0x93, 0xe5, 0xa2,
		0xcb, 0x15, 0x13, 0x9f, 0x74, 0xa4, 0x6c, 0x23, 0x8a, 0x7e, 0x03, 0xea, 0x85, 0x26, 0x3d, 0x48,
		0x3f, 0x15, 0xf5, 0xda, 0x11, 0x4e, 0x46, 0x4e, 0x59, 0xd0, 0x3e, 0xca, 0xe9, 0xe7, 0x89, 0xcb,
		0x16, 0xca, 0xe9, 0x8b, 0x9a, 0xeb, 0x92, 0x8b, 0xd2, 0xe8, 0x72, 0x5d, 0xbf, 0xb8, 0x8f, 0xce,
		0xd7, 0xf9, 0x63, 0x14, 0x20, 0x10, 0x66, 0x8e, 0x71, 0x6b, 0x33, 0xf1, 0xf8, 0x77, 0x7a, 0x3d,
		0x32, 0x5e, 0x08, 0x7b, 0x91, 0xf1, 0x2a, 0x72, 0xc6, 0x6b, 0x68, 0x4c, 0xec, 0x40, 0x77, 0x8d,
		0x91, 0x6e, 0xbb, 0x83, 0x3f, 0xdd, 0x89, 0x04, 0xd5, 0xd4, 0xba, 0x28, 0xa8, 0x3f, 0xd4, 0x1f,
		0xea, 0x5f, 0x68, 0xf5, 0xb7, 0x5d, 0xd7, 0xd4, 0x0d, 0x8f, 0x19, 0x12, 0x7a, 0x3f, 0x97, 0x81,
		0x34, 0x37, 0x14, 0xfe, 0xe0, 0x3a, 0xe5, 0x3c, 0x66, 0xe8, 0x16, 0x41, 0x7e, 0x7b, 0x26, 0x08,
		0x89, 0x6d, 0x24, 0xb6, 0x73, 0x53, 0x32, 0xb9, 0xe4, 0x4e, 0xfe, 0x89, 0x6d, 0xe9, 0x06, 0x19,
		0x24, 0xad, 0xf7, 0x65, 0x4a, 0x91, 0xb4, 0x16, 0xcc, 0xfa, 0xd1, 0x4f, 0x05, 0x15, 0x6b, 0x64,
		0x19, 0xe7, 0xa4, 0x5c, 0xb9, 0xeb, 0x57, 0x19, 0xac, 0xb9, 0x8a, 0x75, 0x37, 0xd6, 0x03, 0x19,
		0x53, 0x3a, 0x3f, 0xe5, 0x60, 0x26, 0x09, 0x60, 0x04, 0x60, 0x04, 0x60, 0x44, 0x70, 0xe5, 0x6c,
		0xd8, 0x65, 0xb7, 0xee, 0xc6, 0x14, 0x84, 0x54, 0x32, 0x9b, 0x46, 0xef, 0x9d, 0xc9, 0x48, 0x7e,
		0x19, 0x7e, 0x75, 0xbf, 0xc4, 0x5d, 0x31, 0x24, 0x3d, 0x24, 0xb5, 0x70, 0xb8, 0x5c, 0x7f, 0x3c,
		0xac, 0xe4, 0xdb, 0x3a, 0xe4, 0x7e, 0x70, 0x02, 0x9a, 0x37, 0x8a, 0x5e, 0xa6, 0xab, 0xd5, 0xca,
		0xd5, 0x68, 0x92, 0x89, 0x9b, 0x1a, 0x7b, 0xee, 0x80, 0xf9, 0x3e, 0x11, 0xb3, 0xcc, 0x92, 0x34,
		0xb8, 0x2b, 0xb8, 0x2b, 0xb8, 0x2b, 0xc1, 0x95, 0x43, 0x7b, 0x02, 0x32, 0xc5, 0xc9, 0xc7, 0x54,
		0x27, 0x1e, 0x17, 0x35, 0x94, 0xae, 0x23, 0x94, 0x2e, 0x4a, 0x28, 0x4d, 0xd1, 0x65, 0x8a, 0x10,
		0x3a, 0x5d, 0x08, 0x2d, 0x61, 0x10, 0xa8, 0x4e, 0x20, 0x56, 0x73, 0xf2, 0x70, 0x1f, 0x05, 0x58,
		0xa4, 0x05, 0x58, 0xc2, 0x5b, 0x87, 0x1a, 0x59, 0xed, 0xd5, 0xaf, 0xe1, 0x23, 0x5c, 0x85, 0x4f,
		0x50, 0x80, 0xed, 0x58, 0xdf, 0xb3, 0x65, 0x0e, 0x13, 0x89, 0x2f, 0xc7, 0x26, 0xac, 0x62, 0xec,
		0x8b, 0x4d, 0x58, 0x51, 0xcb, 0x23, 0xbc, 0x09, 0x1b, 0xae, 0x6c, 0xf9, 0x50, 0x32, 0x92, 0x02,
		0x6a, 0x52, 0x84, 0x90, 0x47, 0x16, 0x42, 0x4a, 0x53, 0x93, 0x86, 0x8a, 0xa3, 0x3b, 0x93, 0xd1,
		0x2d, 0xf3, 0xe8, 0x88, 0xb1, 0x16, 0x85, 0x82, 0x1e, 0x2b, 0x23, 0xa5, 0xa5, 0x56, 0x5e, 0x65,
		0x4a, 0xac, 0x4c, 0x99, 0xd5, 0x29, 0x35, 0x51, 0xdc, 0x05, 0x52, 0xd2, 0x34, 0xa2, 0x8e, 0x93,
		0x94, 0xb4, 0x06, 0x86, 0x4b, 0xba, 0x44, 0x93, 0x92, 0x84, 0xd3, 0xda, 0x94, 0x51, 0xd7, 0x70,
		0x1c, 0xc2, 0xdc, 0x1d, 0x3b, 0x3b, 0x69, 0x1e, 0x2c, 0x71, 0xf2, 0x70, 0x0b, 0x14, 0x71, 0x99,
		0xcd, 0x59, 0xf1, 0x28, 0xe2, 0xa2, 0xdc, 0x52, 0x55, 0x22, 0x82, 0xa6, 0x4b, 0xd9, 0x7d, 0x09,
		0x1f, 0x25, 0xfa, 0x09, 0xf2, 0x37, 0x05, 0x93, 0x9c, 0x5b, 0x2a, 0x36, 0x9a, 0xd7, 0x42, 0xa4,
		0x61, 0x1f, 0xad, 0x60, 0x70, 0x6f, 0x39, 0x52, 0xb9, 0xd8, 0xb9, 0x0c, 0x24, 0x64, 0x91, 0x90,
		0x3d, 0xb8, 0x84, 0xec, 0x6c, 0x79, 0x13, 0x64, 0x65, 0x13, 0x51, 0x48, 0xcd, 0x22, 0x35, 0x8b,
		0xd4, 0x2c, 0x9f, 0x80, 0x81, 0x31, 0x36, 0x6e, 0x2d, 0xdb, 0x0a, 0x9e, 0xe9, 0x32, 0xb3, 0x0b,
		0x32, 0x91, 0x98, 0x45, 0x62, 0x16, 0x89, 0xd9, 0x82, 0x26, 0x66, 0x3f, 0x4d, 0x07, 0x27, 0xf1,
		0xa0, 0xfa, 0xc0, 0x18, 0x53, 0x1e, 0x63, 0xd0, 0x22, 0x90, 0x45, 0x52, 0x8e, 0x3e, 0x1f, 0x44,
		0xca, 0xb2, 0xf4, 0x44, 0x6a, 0x3d, 0xd2, 0x0e, 0x7f, 0x50, 0xaf, 0x10, 0x66, 0x15, 0xeb, 0xed,
		0xa8, 0xea, 0xdd, 0xf6, 0x07, 0x94, 0x52, 0x1b, 0xb5, 0x48, 0xea, 0xd0, 0x1f, 0x54, 0x5e, 0x15,
		0x28, 0x8f, 0x4a, 0x58, 0x5a, 0x9f, 0x88, 0x0c, 0xdf, 0xb1, 0xab, 0x35, 0x6a, 0x84, 0x79, 0xcd,
		0x68, 0x36, 0xba, 0x5a, 0xbd, 0x4d, 0x29, 0x33, 0x5a, 0x38, 0x5d, 0xad, 0x5e, 0x90, 0xac, 0xe6,
		0x4b, 0x09, 0xcf, 0x5c, 0x62, 0xce, 0x20, 0xea, 0x9f, 0xa1, 0xc3, 0x30, 0x89, 0x44, 0x20, 0x18,
		0x20, 0x18, 0x20, 0x98, 0xd2, 0x20, 0x18, 0x22, 0xbd, 0x3d, 0x62, 0x18, 0x63, 0x0c, 0xfe, 0x64,
		0x01, 0x29, 0xe4, 0x88, 0xec, 0x69, 0x70, 0xcf, 0x3c, 0x87, 0x56, 0x70, 0x3b, 0x4a, 0xff, 0xb8,
		0x8e, 0xc9, 0x02, 0xdd, 0x37, 0xef, 0x0f, 0x1e, 0xd0, 0x24, 0x63, 0xd8, 0xd5, 0x1a, 0x94, 0xf8,
		0x23, 0x9e, 0x71, 0xd2, 0x23, 0x4b, 0x17, 0xa7, 0xa5, 0xab, 0xb5, 0x01, 0x6d, 0xc4, 0x07, 0x32,
		0x31, 0x6d, 0x12, 0x24, 0x42, 0x6b, 0x86, 0x73, 0x49, 0x2a, 0x20, 0x0e, 0x20, 0x0e, 0x20, 0x4e,
		0x69, 0x20, 0x0e, 0xc5, 0x39, 0xfc, 0x4b, 0xf8, 0x86, 0xe0, 0xdc, 0xe3, 0xd9, 0x8b, 0x17, 0xae,
		0x9c, 0x6e, 0x1e, 0xcf, 0x4d, 0x46, 0xcc, 0x8b, 0x77, 0xc9, 0x09, 0xdd, 0x1c, 0x21, 0x44, 0x54,
		0x03, 0x15, 0xd5, 0x42, 0xc6, 0x39, 0xc6, 0x6b, 0x47, 0x60, 0xcc, 0xb6, 0x9c, 0x3f, 0x2b, 0xa4,
		0xd2, 0x5f, 0xce, 0xa8, 0x87, 0x81, 0x1a, 0x96, 0xcd, 0x73, 0x43, 0xe1, 0xcb, 0x77, 0xb5, 0x46,
		0xbb, 0x4d, 0x3b, 0x02, 0x45, 0xab, 0x9b, 0x3b, 0x2b, 0xaa, 0x8e, 0x93, 0x15, 0x1a, 0xaf, 0xaa,
		0xf7, 0x05, 0xa1, 0x48, 0xda, 0xc2, 0x63, 0xfa, 0xd1, 0x4c, 0x1e, 0x54, 0x45, 0x21, 0x72, 0x22,
		0x9c, 0xb8, 0xc3, 0x7d, 0x4d, 0xbe, 0xea, 0xe2, 0xd6, 0xf9, 0xda, 0x53, 0x55, 0xe4, 0xaa, 0xc8,
		0x00, 0x6a, 0xaa, 0x0a, 0x96, 0xd7, 0xa6, 0xb6, 0xd1, 0x6e, 0x63, 0x72, 0x33, 0xb3, 0xed, 0xb4,
		0xd2, 0xfa, 0xa8, 0xb0, 0xce, 0x4e, 0x55, 0x93, 0x0a, 0x6b, 0xf9, 0x98, 0x1c, 0x25, 0xd6, 0x99,
		0x4d, 0x5a, 0x01, 0x4b, 0xac, 0x93, 0x92, 0xd1, 0xaa, 0x6c, 0x4d, 0x9c, 0x46, 0x57, 0x94, 0x9b,
		0x3c, 0xd4, 0xfc, 0x23, 0xca, 0xae, 0x55, 0x4d, 0x7c, 0x7e, 0xb5, 0xd7, 0xf3, 0x47, 0x28, 0x40,
		0x01, 0xf6, 0x64, 0x4c, 0x72, 0x0a, 0xef, 0xb2, 0x18, 0x94, 0x61, 0x2b, 0xce, 0x6a, 0xa2, 0x0c,
		0x5b, 0xd4, 0x14, 0x09, 0x97, 0x61, 0x2f, 0xae, 0x70, 0xf9, 0x4a, 0xec, 0x25, 0x69, 0xa0, 0x5a,
		0x44, 0x31, 0x76, 0x6e, 0xea, 0x96, 0x0f, 0x8e, 0xc7, 0xf9, 0xbb, 0xb9, 0x65, 0xaf, 0x70, 0x94,
		0x01, 0xce, 0xdf, 0x3d, 0xbc, 0xc9, 0xc0, 0xf9, 0xbb, 0xf9, 0xa7, 0x2c, 0x70, 0xfe, 0x6e, 0x61,
		0xe3, 0x5e, 0x99, 0xf8, 0x8c, 0x2e, 0xf4, 0xfd, 0xbf, 0xe3, 0x0c, 0xce, 0xde, 0x7d, 0x45, 0x38,
		0x93, 0xa2, 0x33, 0x48, 0x37, 0x73, 0x15, 0x9e, 0x66, 0x6a, 0x82, 0x39, 0x4a, 0x37, 0x2d, 0xfb,
		0x07, 0x39, 0xc5, 0x00, 0x57, 0x02, 0xcf, 0x70, 0xfc, 0xb1, 0xeb, 0x05, 0xfa, 0xd8, 0x73, 0x87,
		0x96, 0xcd, 0xf4, 0xe9, 0xbe, 0x70, 0xba, 0x81, 0x4e, 0x20, 0xe0, 0x16, 0x39, 0x29, 0xa7, 0x98,
		0x2f, 0xfb, 0xc0, 0x1d, 0x36, 0x89, 0x84, 0x49, 0x92, 0x61, 0x91, 0x68, 0x18, 0x24, 0x1d, 0xf6,
		0x48, 0x87, 0x39, 0xf2, 0x61, 0x0d, 0xad, 0xfa, 0xf3, 0x66, 0x0b, 0xa2, 0xc2, 0x06, 0x89, 0x34,
		0x5a, 0x7c, 0x39, 0xd2, 0x67, 0x48, 0x9f, 0x1d, 0x5a, 0xfa, 0x8c, 0xcb, 0xb2, 0xef, 0xd4, 0x0f,
		0x70, 0x17, 0x20, 0x5d, 0x76, 0x6c, 0xe9, 0x32, 0x69, 0xee, 0x82, 0x50, 0x71, 0x48, 0xab, 0xe2,
		0x67, 0x02, 0x51, 0x10, 0x9f, 0x91, 0xb2, 0x52, 0x2b, 0xad, 0x32, 0xe5, 0x55, 0xa6, 0xc4, 0xea,
		0x94, 0x99, 0x28, 0x8b, 0x04, 0x3a, 0xd9, 0x34, 0xa2, 0x8e, 0x93, 0x4e, 0xb6, 0x0e, 0x4a, 0x52,
		0x1a, 0x35, 0x59, 0x4d, 0x40, 0xaa, 0x9b, 0xb2, 0x4e, 0xbb, 0xdd, 0x04, 0x93, 0x2c, 0x8d, 0x6d,
		0xa4, 0x93, 0xd2, 0x2f, 0x61, 0x63, 0xa2, 0xc3, 0x9e, 0x02, 0xfd, 0xde, 0x1d, 0xeb, 0x86, 0x69,
		0x7a, 0xcc, 0xf7, 0xe9, 0x60, 0xd8, 0x9a, 0x64, 0xe0, 0x31, 0xe0, 0x31, 0xe0, 0xb1, 0x82, 0xe2,
		0x31, 0x6b, 0xfc, 0xd0, 0x9a, 0x69, 0xaa, 0xee, 0xb8, 0xfa, 0x5f, 0xae, 0xc3, 0x28, 0xbb, 0x13,
		0xdf, 0x12, 0xc8, 0xa2, 0x3a, 0x16, 0x2e, 0x11, 0x78, 0x72, 0x72, 0x5d, 0xd3, 0x2f, 0xfb, 0xdf,
		0xaf, 0xeb, 0xfa, 0x65, 0x3f, 0xfe, 0x58, 0x8f, 0x7e, 0xc5, 0x9f, 0x1b, 0xd7, 0x35, 0xbd, 0x35,
		0xfb, 0xdc, 0xbe, 0xae, 0xe9, 0xed, 0xfe, 0x69, 0xaf, 0x77, 0x7e, 0xfa, 0xad, 0xf9, 0xc2, 0x7f,
		0xe1, 0xc9, 0x0f, 0xd7, 0xbd, 0xde, 0xf8, 0xdb, 0x6f, 0x2f, 0xe1, 0xcf, 0x8f, 0x2f, 0xfd, 0x37,
		0xa7, 0xef, 0xa8, 0xb4, 0x27, 0xbc, 0x51, 0xaf, 0x77, 0xde, 0x7f, 0x5d, 0xc9, 0xdb, 0x85, 0x49,
		0x2e, 0x6b, 0xf6, 0x14, 0x78, 0x86, 0x3e, 0x71, 0xfc, 0xc0, 0xb8, 0xb5, 0x89, 0x16, 0xf8, 0xe3,
		0x3d, 0x73, 0x8a, 0xdc, 0xd2, 0x7a, 0x7e, 0x5e, 0x4d, 0x3c, 0x65, 0xf0, 0x3c, 0x66, 0xda, 0x8f,
		0xda, 0x3f, 0x16, 0x95, 0xf1, 0x1f, 0x94, 0x9d, 0x70, 0xc4, 0x0e, 0x61, 0x93, 0x63, 0x88, 0xc6,
		0x9b, 0x18, 0x39, 0xaa, 0x72, 0x0f, 0x1b, 0xdd, 0xc4, 0xfe, 0x09, 0x29, 0x64, 0xbc, 0xf1, 0x0b,
		0xf3, 0x07, 0x9e, 0x35, 0x96, 0x6e, 0x65, 0xd8, 0xb7, 0x58, 0x7f, 0x63, 0x4f, 0xc1, 0xbf, 0xdd,
		0xf1, 0xd7, 0x78, 0x64, 0x3e, 0x7c, 0xfe, 0x4f, 0xeb, 0x8a, 0x04, 0xdf, 0x65, 0xb5, 0x56, 0x57,
		0xd7, 0xab, 0xb9, 0x30, 0x6e, 0x0a, 0x9a, 0xf4, 0x54, 0x2f, 0xdd, 0x4d, 0xcb, 0x77, 0xfb, 0x14,
		0x1d, 0x76, 0x4b, 0xf3, 0x71, 0x07, 0x70, 0x01, 0x05, 0x26, 0x5c, 0x8f, 0xde, 0x22, 0xb1, 0x08,
		0xdd, 0x10, 0xba, 0x21, 0x74, 0x23, 0xc1, 0xb8, 0x9f, 0x0c, 0xc7, 0x34, 0x02, 0xd7, 0x7b, 0x96,
		0xcf, 0xbc, 0x2a, 0x08, 0x03, 0x3f, 0x5a, 0xce, 0x9f, 0xfa, 0x4c, 0xf7, 0xc1, 0xbe, 0xc7, 0x2f,
		0x35, 0x62, 0xdf, 0x73, 0x68, 0x82, 0xe7, 0x44, 0x68, 0x63, 0x35, 0x42, 0x3f, 0x78, 0x92, 0xbc,
		0xa5, 0x97, 0xa5, 0x25, 0xca, 0x8b, 0x26, 0x07, 0x44, 0xbd, 0xb9, 0x34, 0xc7, 0xcb, 0x6d, 0xcd,
		0xa3, 0x2f, 0x3e, 0xb3, 0xf9, 0x2a, 0x54, 0x5f, 0xfc, 0xe6, 0x22, 0xda, 0x6a, 0x54, 0x91, 0x58,
		0x95, 0xa8, 0xbb, 0xd2, 0x28, 0x2a, 0x93, 0xbf, 0xce, 0x1e, 0xee, 0x73, 0xfc, 0x6c, 0xa1, 0x07,
		0xbd, 0x09, 0x7f, 0xf8, 0xd1, 0x4f, 0x74, 0xc9, 0x67, 0xb2, 0x0c, 0xf2, 0xe8, 0x1b, 0xd8, 0x3e,
		0xf3, 0x68, 0x20, 0x10, 0x9c, 0xcc, 0x2c, 0x5b, 0x0a, 0x36, 0x4d, 0x1f, 0x59, 0x8b, 0xc1, 0x2b,
		0x89, 0x09, 0x9a, 0x39, 0xcb, 0x64, 0xb0, 0xf4, 0xe8, 0x25, 0xf7, 0x5c, 0xc4, 0xe5, 0x1b, 0xf9,
		0x7d, 0x20, 0x89, 0xaf, 0xe3, 0xf3, 0x69, 0xfb, 0x86, 0x89, 0x73, 0xfd, 0x92, 0xac, 0xdb, 0x14,
		0x0b, 0x54, 0x76, 0x61, 0xee, 0x5e, 0x83, 0xdb, 0x57, 0xd6, 0xe6, 0x7f, 0xd9, 0x32, 0x88, 0x69,
		0x07, 0x4f, 0x62, 0xd0, 0x76, 0x0c, 0x95, 0xd8, 0x10, 0x6d, 0x1e, 0x98, 0xf5, 0xd7, 0xde, 0xf0,
		0xca, 0x95, 0xa8, 0x5f, 0x69, 0xdb, 0x8b, 0xce, 0x2b, 0x47, 0xb7, 0x77, 0x35, 0xed, 0xa9, 0xd1,
		0xde, 0x9b, 0x9b, 0x4a, 0x93, 0x73, 0xe2, 0xcc, 0x25, 0xa5, 0xcd, 0x11, 0x71, 0xe7, 0x7e, 0xb8,
		0x73, 0x3a, 0xfc, 0xb9, 0x1a, 0xbe, 0xc5, 0xba, 0xaf, 0xc6, 0xb8, 0x72, 0x6b, 0x38, 0xe6, 0xa3,
		0x65, 0x06, 0xf7, 0x7a, 0xd4, 0x5b, 0x1f, 0x58, 0x23, 0xb6, 0xdf, 0x10, 0x26, 0xc3, 0xbd, 0xf1,
		0xea, 0x7d, 0x36, 0x3a, 0x55, 0x4a, 0x33, 0x75, 0xca, 0x92, 0x27, 0x25, 0x29, 0x98, 0x72, 0xe4,
		0x4d, 0x29, 0x0a, 0xa7, 0x0c, 0x85, 0x53, 0x82, 0xe2, 0x29, 0x3f, 0x39, 0x7f, 0x9b, 0x3a, 0x8d,
		0xb6, 0x81, 0xd9, 0x61, 0xd3, 0xda, 0x49, 0xcd, 0xe9, 0xc0, 0x51, 0xbb, 0xca, 0x59, 0x9b, 0xca,
		0x01, 0xe7, 0x44, 0x6a, 0x4b, 0x45, 0x6b, 0x47, 0xa5, 0x8b, 0x0c, 0xc5, 0x8b, 0x08, 0x79, 0x98,
		0xa7, 0x44, 0x6a, 0x37, 0x93, 0x21, 0x69, 0xf2, 0x72, 0x1c, 0xe4, 0x39, 0x28, 0x44, 0x78, 0xb7,
		0x2f, 0x8a, 0x59, 0x76, 0x78, 0xb7, 0xdb, 0xa1, 0xc9, 0x61, 0xc2, 0x87, 0x66, 0x4a, 0x8b, 0x5d,
		0x87, 0xc5, 0x2e, 0xbf, 0xc5, 0x4e, 0xdb, 0x74, 0x54, 0x31, 0x59, 0xc0, 0x22, 0xdd, 0xd2, 0x47,
		0x13, 0x3b, 0xb0, 0xc6, 0xb6, 0xc5, 0x3c, 0xfe, 0x2e, 0xee, 0x8d, 0x52, 0xf8, 0x7a, 0xb8, 0x6b,
		0xe8, 0xe1, 0x46, 0x0f, 0xb7, 0x30, 0xf0, 0x58, 0x9b, 0x39, 0xee, 0xf6, 0x19, 0x81, 0x36, 0x19,
		0xc1, 0x76, 0x18, 0x81, 0xf4, 0xa0, 0x4c, 0x7b, 0xcb, 0x9c, 0xa9, 0x5a, 0x30, 0xd5, 0x4d, 0xd5,
		0xf7, 0x20, 0xdf, 0xdf, 0x20, 0x90, 0xac, 0x97, 0x6a, 0x33, 0x59, 0xa0, 0x65, 0x2a, 0xff, 0xd8,
		0x29, 0x4a, 0xb9, 0xf6, 0x33, 0x24, 0x1d, 0x89, 0x72, 0x27, 0x0f, 0x86, 0xcd, 0xef, 0xa0, 0x92,
		0x2b, 0xe1, 0x94, 0xe0, 0x94, 0xe0, 0x94, 0x8a, 0xe3, 0x94, 0x44, 0x77, 0x80, 0xe1, 0x95, 0x24,
		0xce, 0x7c, 0x86, 0x5b, 0x4a, 0xef, 0x96, 0x0a, 0xbd, 0x03, 0x13, 0xf1, 0xc3, 0xed, 0x0f, 0xed,
		0x35, 0xce, 0x2d, 0x85, 0x88, 0xf0, 0xed, 0xa7, 0xa1, 0x59, 0x51, 0x90, 0xb5, 0x30, 0x99, 0x6d,
		0x3c, 0xeb, 0x63, 0x8f, 0xb1, 0xd1, 0x38, 0xd0, 0x6f, 0x27, 0x8e, 0x69, 0x33, 0x7d, 0x60, 0x8c,
		0x8d, 0x81, 0x15, 0x3c, 0xf3, 0x26, 0xa6, 0xd3, 0x08, 0x43, 0x9e, 0x1a, 0x79, 0x6a, 0x79, 0x8f,
		0x5c, 0xfe, 0x4c, 0x74, 0x0d, 0x99, 0x68, 0x64, 0xa2, 0xd5, 0x64, 0xa2, 0xd7, 0xd9, 0xbb, 0xd3,
		0x9b, 0xf0, 0x0d, 0xd7, 0x22, 0x4f, 0x8d, 0x3c, 0xf5, 0x1a, 0x6c, 0x70, 0x1f, 0x1d, 0xdd, 0x0f,
		0x3c, 0x66, 0x8c, 0x04, 0xd2, 0xd3, 0x0b, 0x17, 0x23, 0x01, 0x80, 0x04, 0x40, 0x6e, 0x09, 0x80,
		0x68, 0x5b, 0x5c, 0xf4, 0x60, 0x83, 0xc3, 0x4f, 0x06, 0xd4, 0x90, 0x0b, 0x10, 0xcf, 0x50, 0x23,
		0x17, 0x50, 0x84, 0x14, 0xf5, 0x64, 0x2c, 0xec, 0xa5, 0xe6, 0x97, 0xc2, 0x47, 0xc1, 0x47, 0xc1,
		0x47, 0xc1, 0x47, 0xc1, 0x47, 0xc1, 0x47, 0x1d, 0x5e, 0xbe, 0x9a, 0x3b, 0xe2, 0x17, 0x4a, 0x5f,
		0xff, 0x3a, 0xbd, 0x4b, 0x72, 0x6a, 0x89, 0x8a, 0x64, 0xf6, 0x98, 0x79, 0x96, 0x6b, 0x5a, 0x8b,
		0xe7, 0x97, 0xf1, 0x25, 0xb0, 0xb7, 0x09, 0x40, 0xd2, 0x1a, 0x49, 0x6b, 0x24, 0xad, 0x91, 0xb4,
		0xde, 0x94, 0xb4, 0xee, 0x20, 0x6b, 0x9d, 0xde, 0x78, 0x17, 0xa2, 0xe7, 0x6b, 0xcf, 0x61, 0x50,
		0xbc, 0xbe, 0x4d, 0xa6, 0xcf, 0x2b, 0xbc, 0x89, 0xa9, 0x07, 0x13, 0xc7, 0x61, 0xb6, 0xbf, 0xbf,
		0xe1, 0x6b, 0xf9, 0xeb, 0xe8, 0xfc, 0x2a, 0x5f, 0xe7, 0x17, 0x73, 0x52, 0x51, 0x45, 0x26, 0x03,
		0x3c, 0xfd, 0x3e, 0x00, 0x08, 0x00, 0xc8, 0xf6, 0x35, 0x32, 0x1a, 0x07, 0xcf, 0x1c, 0xf8, 0xa3,
		0xde, 0x54, 0x80, 0xbd, 0xf7, 0xd9, 0xb0, 0xb5, 0xa7, 0xde, 0x6d, 0xc5, 0x52, 0x5a, 0x33, 0x2c,
		0xed, 0x83, 0xdc, 0x5e, 0x8c, 0xd7, 0x86, 0xc0, 0xf1, 0x85, 0xf1, 0x75, 0x38, 0xae, 0x10, 0x09,
		0x5b, 0xc9, 0x84, 0x2d, 0xf7, 0x71, 0x85, 0xf1, 0xd2, 0xd3, 0x8d, 0x20, 0xf0, 0xac, 0xdb, 0x49,
		0xc0, 0x24, 0x8e, 0x2e, 0x5c, 0x17, 0x85, 0x63, 0x0c, 0x15, 0x2d, 0x7c, 0x32, 0x05, 0x20, 0x53,
		0x04, 0x3a, 0x85, 0x10, 0xcc, 0x91, 0x66, 0x75, 0x8c, 0xa1, 0x31, 0x1c, 0x5a, 0x8e, 0x15, 0x3c,
		0xeb, 0x23, 0xc3, 0x27, 0x38, 0xcf, 0x70, 0x59, 0x1c, 0x0e, 0x36, 0xc4, 0xc1, 0x86, 0xb9, 0x29,
		0x9c, 0x98, 0xe2, 0x09, 0x2a, 0xa0, 0xb4, 0x22, 0xae, 0x29, 0x24, 0x1d, 0x29, 0x73, 0x22, 0x11,
		0x7c, 0xcc, 0x19, 0xa9, 0x2b, 0xb5, 0xda, 0x2a, 0x53, 0x5f, 0x65, 0x6a, 0xac, 0x4e, 0x9d, 0xe5,
		0xd4, 0x5a, 0x52, 0xbd, 0x17, 0x92, 0xd5, 0x45, 0xe6, 0x63, 0xfe, 0x37, 0x7b, 0xd2, 0x2d, 0x27,
		0x60, 0x77, 0xa9, 0x09, 0x07, 0x52, 0xf9, 0xe3, 0x42, 0x9e, 0xc6, 0x73, 0x5d, 0xd3, 0x2f, 0x0d,
		0x7d, 0x78, 0xa5, 0xff, 0xda, 0xff, 0x56, 0x3f, 0x7b, 0xfb, 0x52, 0x39, 0x4a, 0x3e, 0x7f, 0x29,
		0xf4, 0xb6, 0x6e, 0x05, 0xc5, 0xc1, 0x1b, 0xbc, 0x05, 0xbc, 0x05, 0xbc, 0x05, 0xbc, 0x05, 0xbc,
		0x85, 0x6a, 0x6f, 0x91, 0x69, 0x58, 0x43, 0x78, 0xc6, 0x5a, 0x68, 0x8b, 0x7c, 0xe6, 0x0c, 0xe4,
		0x8f, 0x4c, 0x26, 0xd4, 0x81, 0x0f, 0x8e, 0x69, 0x0d, 0x8c, 0x80, 0xf9, 0x9a, 0xa1, 0x2d, 0xe5,
		0x30, 0x34, 0xc7, 0x35, 0x99, 0x66, 0xf9, 0xda, 0x20, 0x72, 0x44, 0x13, 0x8f, 0x99, 0xe7, 0xc5,
		0xb7, 0xf5, 0xf1, 0xf8, 0x96, 0xc9, 0xda, 0xf3, 0x4d, 0x40, 0x69, 0xcf, 0x4f, 0xe8, 0x1f, 0x05,
		0x1f, 0xff, 0x52, 0x81, 0x44, 0x75, 0xf9, 0x77, 0x75, 0x2d, 0xaf, 0x5e, 0xa5, 0x48, 0x1a, 0x6a,
		0x9c, 0x25, 0x23, 0xa1, 0xe2, 0x9b, 0x5f, 0xe3, 0x27, 0xbb, 0x59, 0xfe, 0x3d, 0xfd, 0x75, 0x95,
		0x3c, 0xe0, 0xcd, 0xd5, 0xf4, 0x01, 0x3f, 0x85, 0xcf, 0x97, 0x15, 0x35, 0xbf, 0x40, 0xfa, 0xdd,
		0x98, 0x04, 0xee, 0x9c, 0x5b, 0x94, 0x20, 0x9b, 0xbb, 0x2c, 0x0f, 0xe9, 0x5c, 0xa4, 0x73, 0x73,
		0x47, 0xf4, 0x65, 0x4b, 0xe7, 0x9a, 0xff, 0x33, 0xf1, 0x83, 0x70, 0x04, 0x38, 0xfa, 0xc0, 0xd3,
		0x2b, 0xe8, 0x26, 0xe9, 0x34, 0x81, 0x7b, 0x1d, 0x81, 0x3b, 0x02, 0xf7, 0x63, 0x0f, 0xdc, 0x65,
		0xd5, 0x7f, 0xa7, 0x19, 0x98, 0xf5, 0x93, 0xd1, 0xad, 0x9b, 0x5d, 0x66, 0x21, 0xb9, 0x1b, 0xd1,
		0x8c, 0xd3, 0xe4, 0xf7, 0xc8, 0xcd, 0x85, 0x0a, 0xb3, 0xa1, 0xd8, 0x7c, 0xa8, 0x32, 0x23, 0xca,
		0xcd, 0x89, 0x72, 0xb3, 0xa2, 0xde, 0xbc, 0xd0, 0x98, 0x19, 0x22, 0x73, 0xa3, 0x22, 0x5f, 0x48,
		0x9f, 0x37, 0x5c, 0xd3, 0x06, 0x6e, 0x02, 0xc7, 0xb4, 0xb6, 0xe5, 0x82, 0x50, 0xa4, 0x58, 0x3f,
		0xad, 0xfa, 0x0c, 0xd4, 0xfa, 0xdc, 0x5b, 0x8e, 0x92, 0xd3, 0xcb, 0x35, 0x89, 0x03, 0x18, 0x52,
		0xcb, 0xa7, 0x6a, 0x49, 0xdd, 0xbf, 0xf6, 0x64, 0x5b, 0x56, 0x33, 0x52, 0xe5, 0x15, 0xb5, 0x7e,
		0xca, 0x60, 0x6a, 0x6b, 0x35, 0x4c, 0x6e, 0x26, 0xd6, 0x9e, 0x5e, 0x5a, 0xbf, 0x28, 0xa7, 0xcb,
		0x9e, 0x29, 0x42, 0xbc, 0x0f, 0xd3, 0x45, 0x9a, 0x05, 0xde, 0x8d, 0xef, 0x05, 0xb4, 0x0b, 0xb4,
		0x0b, 0xb4, 0x0b, 0xb4, 0x0b, 0xb4, 0x7b, 0xc4, 0x68, 0x17, 0x88, 0xe8, 0x60, 0xe1, 0x6e, 0xab,
		0x71, 0xd9, 0xba, 0xec, 0x5c, 0x34, 0x2e, 0xdb, 0x98, 0x63, 0xa0, 0xde, 0x1c, 0x25, 0xc8, 0xa6,
		0x9a, 0x09, 0x2b, 0x6c, 0x12, 0x99, 0x64, 0x95, 0x36, 0xf4, 0x1e, 0x60, 0x73, 0xe5, 0xcd, 0x06,
		0x1c, 0xaf, 0xa8, 0x00, 0x27, 0x63, 0x18, 0x4a, 0x59, 0x90, 0x93, 0x0f, 0x10, 0x15, 0x9a, 0xa7,
		0xa2, 0x21, 0xd6, 0xbc, 0xab, 0xfd, 0x64, 0x37, 0xd3, 0x69, 0xea, 0x79, 0x12, 0x79, 0xaa, 0xeb,
		0x7a, 0x96, 0xca, 0x47, 0xaa, 0x0a, 0x36, 0xab, 0x35, 0xa5, 0x55, 0x3f, 0x93, 0xc0, 0xfd, 0x69,
		0xf6, 0xf4, 0x37, 0x57, 0xc9, 0xd3, 0xa7, 0x24, 0x4f, 0x53, 0xb7, 0x18, 0x65, 0x1a, 0x05, 0x8c,
		0xf1, 0xd8, 0x0e, 0xf5, 0xd8, 0x72, 0x1d, 0x7d, 0xe8, 0xb1, 0xff, 0x9d, 0x30, 0x67, 0x40, 0xd9,
		0x6b, 0xb6, 0x51, 0x3c, 0x5a, 0x09, 0x32, 0x4e, 0xb2, 0xa0, 0x22, 0xe1, 0x50, 0x2b, 0x12, 0xe8,
		0xcb, 0xff, 0xc9, 0x12, 0x1a, 0x84, 0x89, 0x0c, 0xe2, 0x04, 0x06, 0x21, 0x6c, 0x55, 0x91, 0xb0,
		0x48, 0x82, 0x59, 0xe2, 0x18, 0x56, 0x79, 0xec, 0xaa, 0x2e, 0x66, 0x25, 0xcc, 0x47, 0x28, 0xc9,
		0x43, 0x2c, 0x6e, 0xb7, 0xbd, 0xad, 0x61, 0xda, 0x0e, 0x0b, 0xa6, 0xe7, 0x83, 0xcc, 0x42, 0xb4,
		0x3c, 0x3b, 0xa6, 0x8d, 0x10, 0x91, 0x2d, 0x89, 0x45, 0x6d, 0x28, 0x90, 0x18, 0x90, 0x18, 0x09,
		0x12, 0x23, 0xab, 0x0d, 0x1d, 0xd8, 0xae, 0xc3, 0x7c, 0x7d, 0x64, 0x3c, 0x59, 0xa3, 0xc9, 0x88,
		0x7e, 0x77, 0x7c, 0x45, 0x3e, 0xd1, 0xac, 0xfe, 0xc2, 0x86, 0xc6, 0xc4, 0x0e, 0x48, 0x37, 0x99,
		0x2a, 0x9d, 0x26, 0x4d, 0xca, 0xa8, 0x8f, 0x6d, 0xff, 0x82, 0xd9, 0x41, 0x55, 0xf6, 0x50, 0xb9,
		0x5d, 0x54, 0x6e, 0x1f, 0xd5, 0xdb, 0x49, 0x62, 0x74, 0x86, 0x2d, 0x7a, 0x0a, 0x91, 0xd8, 0xa2,
		0x27, 0x38, 0x40, 0x26, 0xf7, 0x50, 0x4a, 0x7d, 0x48, 0xa5, 0x20, 0x22, 0x56, 0x1a, 0x19, 0xaf,
		0x4d, 0x6d, 0xa7, 0x89, 0xb9, 0xcd, 0xc4, 0x30, 0xd3, 0x4b, 0x3b, 0xa4, 0x7a, 0xd4, 0x19, 0x0a,
		0xb6, 0x1c, 0xb5, 0x28, 0x7b, 0x2a, 0xbf, 0xc8, 0x28, 0xbb, 0x06, 0x90, 0x0d, 0x90, 0x0d, 0x90,
		0x0d, 0x90, 0x0d, 0x90, 0x0d, 0x90, 0x0d, 0x20, 0x06, 0x90, 0x0d, 0x90, 0x0d, 0x90, 0x4d, 0x02,
		0xb2, 0x53, 0x9e, 0xab, 0xc4, 0xed, 0x6c, 0x52, 0x9d, 0xbf, 0x04, 0xc0, 0x09, 0xc0, 0x09, 0xc0,
		0x79, 0xb0, 0x80, 0xf3, 0xd6, 0x75, 0x6d, 0x66, 0x38, 0x0a, 0x10, 0x67, 0xbd, 0x7e, 0x40, 0x26,
		0x78, 0xc4, 0xbc, 0x3b, 0x46, 0x40, 0x02, 0xb7, 0xdd, 0x82, 0xac, 0xdc, 0x00, 0x46, 0x19, 0x46,
		0x19, 0x46, 0x19, 0x59, 0x00, 0x64, 0x01, 0x90, 0x05, 0x40, 0x16, 0x20, 0xd7, 0x2c, 0x00, 0x9a,
		0x61, 0x91, 0x0d, 0x28, 0x10, 0x14, 0x75, 0xdc, 0x91, 0xe5, 0x18, 0xb6, 0x4a, 0x30, 0xba, 0x7e,
		0x0b, 0xc0, 0x51, 0xc0, 0x51, 0xc0, 0x51, 0xc0, 0x51, 0xc0, 0x51, 0xc0, 0x51, 0xc0, 0x51, 0xc0,
		0x51, 0xc0, 0x51, 0xc0, 0xd1, 0x78, 0x12, 0xfd, 0xb1, 0x6d, 0x05, 0x2a, 0xc1, 0xe8, 0xea, 0x0d,
		0x00, 0x45, 0x01, 0x45, 0x01, 0x45, 0x01, 0x45, 0x01, 0x45, 0x01, 0x45, 0x01, 0x45, 0x01, 0x45,
		0x01, 0x45, 0x0f, 0x02, 0x8a, 0x82, 0x02, 0x4c, 0x9c, 0x02, 0x8c, 0x90, 0x8c, 0x40, 0xcb, 0x90,
		0xfb, 0x6b, 0x12, 0xb8, 0x3f, 0xcf, 0x9e, 0xba, 0x84, 0xd4, 0x12, 0xc9, 0x04, 0xe8, 0xb6, 0x35,
		0x8a, 0xcd, 0x13, 0x11, 0xbb, 0xc4, 0x9a, 0x64, 0x10, 0x4c, 0x64, 0x1c, 0xd3, 0x80, 0x60, 0x02,
		0x04, 0x13, 0xa9, 0xd5, 0x7f, 0x64, 0x3c, 0xc5, 0x8a, 0x4a, 0x9f, 0xfc, 0xd8, 0x74, 0x13, 0x24,
		0x40, 0x90, 0x00, 0x41, 0x02, 0xa4, 0xd0, 0x09, 0x10, 0x1c, 0xbe, 0x80, 0xa4, 0x0a, 0x92, 0x2a,
		0x48, 0xaa, 0x20, 0xa9, 0x82, 0xa4, 0x4a, 0x9e, 0x49, 0x95, 0x33, 0x52, 0x98, 0x6b, 0x39, 0x19,
		0xc0, 0xdc, 0xe4, 0x26, 0x80, 0xb9, 0x80, 0xb9, 0x80, 0xb9, 0x80, 0xb9, 0x80, 0xb9, 0x80, 0xb9,
		0x80, 0x40, 0x80, 0xb9, 0x80, 0xb9, 0x80, 0xb9, 0x2a, 0x24, 0xe0, 0x88, 0x31, 0x31, 0x77, 0xba,
		0x78, 0x74, 0xd5, 0xea, 0x86, 0x15, 0x8e, 0x17, 0x2b, 0x06, 0x06, 0xe5, 0x9e, 0x23, 0x9c, 0x59,
		0x40, 0x6a, 0x1b, 0xca, 0x5d, 0x57, 0x40, 0xbc, 0x0d, 0xad, 0x65, 0x57, 0x5a, 0x90, 0x7c, 0xfa,
		0x18, 0x3f, 0x78, 0x09, 0xab, 0x0b, 0x06, 0xae, 0x6d, 0xb3, 0x08, 0xc0, 0xe8, 0xae, 0x63, 0x13,
		0x1e, 0x5d, 0xb1, 0x2a, 0x18, 0xc7, 0x88, 0x65, 0x9c, 0x47, 0x41, 0x6d, 0x01, 0x8e, 0x11, 0x4b,
		0xbb, 0xf2, 0xd8, 0x68, 0x4c, 0x53, 0xd2, 0x35, 0x2b, 0x01, 0x6a, 0x96, 0xd0, 0x14, 0xc6, 0x3c,
		0x65, 0x26, 0x9d, 0x09, 0x9c, 0x09, 0x84, 0xe9, 0x83, 0xe9, 0x83, 0xe9, 0x2b, 0xa8, 0xe9, 0xa3,
		0x63, 0x26, 0x23, 0x62, 0x24, 0xcb, 0xc7, 0xf8, 0xb9, 0x0f, 0xcc, 0x1b, 0xda, 0xee, 0x23, 0x9d,
		0xf5, 0x4b, 0x24, 0xa2, 0xaa, 0x14, 0xe6, 0x0f, 0xe6, 0x8f, 0xc4, 0xfc, 0x91, 0x55, 0x95, 0xce,
		0x94, 0x73, 0x7e, 0x98, 0xb7, 0xaa, 0x3d, 0xf7, 0xad, 0x77, 0xc2, 0xc6, 0x7b, 0xc1, 0xcc, 0x46,
		0xc6, 0x69, 0x4f, 0x6c, 0xbc, 0xab, 0xcb, 0x67, 0x62, 0xe3, 0x9d, 0xd2, 0xb6, 0x60, 0xe3, 0x9d,
		0x5a, 0x78, 0x72, 0x00, 0x33, 0x36, 0x65, 0xb3, 0x51, 0xe5, 0x15, 0xb5, 0xce, 0x60, 0xe3, 0xbd,
		0x8e, 0xa2, 0x8a, 0x6c, 0x8c, 0x3d, 0xbd, 0xb4, 0x43, 0xaa, 0x2b, 0xdd, 0x00, 0x3f, 0xc7, 0xcc,
		0x1b, 0xc4, 0x3e, 0x5c, 0x3d, 0xd4, 0x9d, 0xdd, 0x0b, 0x60, 0x17, 0x60, 0x17, 0x60, 0x17, 0x60,
		0x17, 0x60, 0x17, 0x60, 0x17, 0x80, 0xe8, 0x00, 0xc1, 0x2e, 0xd0, 0x2e, 0xd0, 0x6e, 0x21, 0xd1,
		0xee, 0xc3, 0x74, 0x89, 0xaa, 0xc7, 0xba, 0xf1, 0x9d, 0x80, 0x74, 0x81, 0x74, 0x81, 0x74, 0x81,
		0x74, 0x81, 0x74, 0x8f, 0x18, 0xe9, 0x02, 0x0d, 0x1d, 0x2c, 0xd4, 0x45, 0x43, 0x15, 0x10, 0x2f,
		0x15, 0xe2, 0x45, 0x43, 0x55, 0x76, 0x1e, 0x60, 0x63, 0x43, 0xd5, 0x0c, 0xc5, 0xa3, 0x91, 0xaa,
		0x18, 0xe0, 0x33, 0xf5, 0xdc, 0xa0, 0x81, 0x8a, 0xd4, 0x16, 0x94, 0xbb, 0x81, 0x8a, 0xa8, 0xd2,
		0x52, 0xcb, 0xae, 0x71, 0xea, 0xf7, 0xd9, 0x13, 0x97, 0xb8, 0x52, 0x56, 0x27, 0x3a, 0x2f, 0x7d,
		0x3d, 0xa5, 0x42, 0x72, 0x60, 0x3a, 0xda, 0x06, 0x72, 0x77, 0x53, 0xa8, 0x9b, 0x2d, 0x0a, 0xd6,
		0x43, 0xdb, 0x80, 0x22, 0x63, 0xe8, 0x31, 0xdf, 0xba, 0x73, 0x0c, 0x5b, 0xb7, 0x0d, 0x7f, 0xe1,
		0xf4, 0x1c, 0x3d, 0xb0, 0x46, 0x4c, 0x77, 0x27, 0x01, 0x9d, 0x75, 0xdc, 0x7b, 0x27, 0x98, 0x4b,
		0x98, 0x4b, 0x98, 0xcb, 0x82, 0x9a, 0x4b, 0xb2, 0x24, 0x2e, 0x61, 0xf2, 0x96, 0x38, 0x69, 0x4b,
		0x18, 0xaa, 0xab, 0x48, 0xd2, 0xaa, 0x2a, 0x43, 0x50, 0x9e, 0xaf, 0x53, 0x97, 0xa7, 0x23, 0xcc,
		0xc1, 0x2a, 0xc9, 0xbd, 0x26, 0x53, 0xd6, 0xec, 0xd4, 0xc2, 0xff, 0x30, 0x71, 0x87, 0x95, 0xb4,
		0xc8, 0x05, 0xb1, 0x4d, 0x1c, 0x93, 0xba, 0xd3, 0x73, 0x2e, 0x12, 0xad, 0x9e, 0xc0, 0x60, 0xc0,
		0x60, 0x24, 0x18, 0x8c, 0xac, 0xd5, 0x33, 0xd1, 0x4e, 0xf5, 0xbd, 0x9e, 0xdb, 0x6f, 0x85, 0xaa,
		0xa0, 0x82, 0x19, 0x0e, 0x55, 0x06, 0x44, 0xb9, 0x21, 0x51, 0x6e, 0x50, 0xd4, 0x1b, 0x16, 0x62,
		0x18, 0x83, 0xaa, 0x20, 0x4a, 0xdb, 0x82, 0xaa, 0x20, 0x6a, 0xe1, 0xa8, 0x7f, 0xcf, 0x21, 0x20,
		0x55, 0x1a, 0x98, 0xae, 0x4f, 0x2d, 0x0a, 0xbe, 0xb2, 0x31, 0xf6, 0xf4, 0xd2, 0x0e, 0xa9, 0xfc,
		0x7d, 0x13, 0xfe, 0x54, 0xd6, 0xed, 0xb9, 0xeb, 0x66, 0x80, 0xbb, 0x80, 0xbb, 0x80, 0xbb, 0x80,
		0xbb, 0x80, 0xbb, 0x80, 0xbb, 0x80, 0x44, 0x07, 0x08, 0x77, 0x81, 0x77, 0x81, 0x77, 0x8b, 0x89,
		0x77, 0x15, 0xf5, 0x7b, 0x6e, 0xbf, 0x15, 0xb0, 0x2e, 0xb0, 0x2e, 0xb0, 0x2e, 0xb0, 0x2e, 0xb0,
		0xee, 0x11, 0x63, 0x5d, 0xe0, 0xa1, 0x83, 0x05, 0xbb, 0x68, 0xf8, 0x04, 0xe6, 0xa5, 0xc2, 0xbc,
		0x68, 0xf8, 0xcc, 0xce, 0x03, 0x6c, 0x6c, 0xf8, 0x4c, 0x60, 0x3c, 0x3a, 0x3e, 0x8b, 0x81, 0x3e,
		0xd3, 0x4f, 0x0e, 0xaa, 0x27, 0x49, 0xad, 0x41, 0xb9, 0x5b, 0x3e, 0xa9, 0x4a, 0x2e, 0xb5, 0xec,
		0x7a, 0x3e, 0xff, 0x6f, 0xf2, 0xc8, 0x65, 0xae, 0x9a, 0x25, 0xef, 0xfa, 0x5c, 0x93, 0x8c, 0x3e,
		0xa6, 0x8c, 0xf3, 0x25, 0xa8, 0xa1, 0x45, 0x1f, 0x53, 0xda, 0x95, 0x77, 0x48, 0x6d, 0x9f, 0xaf,
		0x32, 0x9c, 0x12, 0x2a, 0x77, 0x9b, 0xad, 0x9b, 0x95, 0x98, 0xe6, 0x6c, 0x9c, 0xaa, 0x98, 0x82,
		0xf2, 0xcf, 0xbc, 0xc0, 0xac, 0x57, 0xc2, 0xa1, 0xf4, 0xdc, 0x49, 0x20, 0xae, 0x81, 0x89, 0xd6,
		0xcd, 0x45, 0x09, 0xae, 0x3e, 0xb9, 0xc6, 0x12, 0x69, 0x67, 0x48, 0xe1, 0x04, 0x89, 0x9d, 0x1f,
		0x95, 0xd3, 0x23, 0x77, 0x76, 0xe4, 0x4e, 0x8e, 0xde, 0xb9, 0x65, 0x6b, 0x39, 0x65, 0x1b, 0x41,
		0xe6, 0xda, 0xa3, 0x1b, 0x8e, 0xe3, 0x4e, 0x9c, 0x01, 0x21, 0x7a, 0xdd, 0x20, 0x1b, 0x3d, 0x60,
		0xc0, 0xaf, 0xc0, 0xaf, 0x24, 0xf8, 0x95, 0xac, 0x07, 0x8c, 0x28, 0x68, 0x5d, 0x5b, 0xc8, 0x24,
		0x21, 0x2b, 0x71, 0xe8, 0x4a, 0x6e, 0x02, 0x54, 0x98, 0x02, 0xc5, 0x26, 0x21, 0xe3, 0x34, 0x2c,
		0x4a, 0x00, 0xd4, 0xa5, 0x59, 0x0b, 0xbf, 0x5d, 0x4f, 0x75, 0x76, 0xfc, 0x1a, 0x02, 0x68, 0x1e,
		0x50, 0xa5, 0x16, 0x7b, 0x1a, 0xd8, 0x13, 0x93, 0xe9, 0x81, 0x67, 0x0c, 0x87, 0xd6, 0x40, 0x81,
		0x25, 0x5e, 0xb9, 0x01, 0xad, 0x49, 0xae, 0xc3, 0x24, 0xc3, 0x24, 0xc3, 0x24, 0xd3, 0x9a, 0x64,
		0x2a, 0x74, 0x37, 0x4f, 0x39, 0xb1, 0xbb, 0x70, 0xf8, 0xf4, 0x30, 0x20, 0xb3, 0x9c, 0x3b, 0xfa,
		0x25, 0x36, 0xd3, 0x8c, 0xd5, 0x1b, 0x11, 0xaf, 0x03, 0x5a, 0x1c, 0xa8, 0xcc, 0xf8, 0xa8, 0x34,
		0x42, 0x19, 0x19, 0x23, 0xd5, 0x46, 0x29, 0x33, 0xe3, 0x94, 0x99, 0x91, 0xca, 0xce, 0x58, 0xd1,
		0x1a, 0x2d, 0x62, 0xe3, 0xa5, 0x0e, 0x57, 0x2a, 0xc7, 0x97, 0x8a, 0x70, 0x26, 0xfd, 0x74, 0x15,
		0xcb, 0x5b, 0x11, 0xd7, 0x4b, 0xcc, 0x9d, 0x96, 0xfa, 0x0d, 0x9d, 0x28, 0x41, 0x59, 0x5d, 0x4f,
		0x55, 0x56, 0xd5, 0x80, 0x66, 0x4d, 0xf5, 0xf6, 0x4f, 0xf4, 0x16, 0xf3, 0x4f, 0x57, 0xd3, 0xd7,
		0xb9, 0x79, 0x1f, 0xbf, 0xce, 0xd7, 0xe9, 0xdb, 0x1c, 0x50, 0xf8, 0x64, 0x39, 0xf1, 0x44, 0x59,
		0xe3, 0x87, 0x0e, 0x7d, 0xec, 0xb4, 0x24, 0x1d, 0xb9, 0x2c, 0x04, 0x4e, 0x08, 0x9c, 0x90, 0xcb,
		0x42, 0x2e, 0x6b, 0xdb, 0x3b, 0x8d, 0x58, 0xe0, 0xa9, 0x48, 0x61, 0x4d, 0xe5, 0x22, 0x73, 0x05,
		0x03, 0x0c, 0x03, 0x7c, 0x5c, 0x99, 0x2b, 0xe3, 0xd6, 0x77, 0xed, 0x10, 0x9a, 0x13, 0xdb, 0x96,
		0x35, 0xcd, 0x58, 0xbd, 0x11, 0x32, 0x57, 0xc8, 0x5c, 0x21, 0x73, 0x85, 0xcc, 0x95, 0x92, 0x95,
		0x4f, 0xde, 0xc8, 0xbc, 0x6a, 0x67, 0x2e, 0x14, 0x88, 0x56, 0xd3, 0xd8, 0x3c, 0xfb, 0x4f, 0x8d,
		0x92, 0x6a, 0xaa, 0x1b, 0x9d, 0x93, 0x9b, 0x28, 0x26, 0xf7, 0x49, 0xee, 0x93, 0x55, 0x4f, 0xec,
		0x7c, 0xcd, 0xaa, 0xee, 0x8d, 0x55, 0xa4, 0xc6, 0xcb, 0x4b, 0x40, 0x61, 0x3f, 0xf4, 0xda, 0x12,
		0x68, 0xd4, 0x5b, 0x17, 0xad, 0xb7, 0xcd, 0x4e, 0xeb, 0x02, 0x6b, 0xa1, 0x10, 0x0e, 0x42, 0x9d,
		0xd4, 0x7e, 0xa1, 0x1d, 0x99, 0x82, 0xbe, 0xe6, 0xb5, 0x7b, 0x3c, 0xde, 0x33, 0xa7, 0x8c, 0x4e,
		0x61, 0xe6, 0x8a, 0xcf, 0xcf, 0xab, 0x31, 0xe2, 0xd7, 0x83, 0xe7, 0x31, 0xd3, 0x7e, 0xd4, 0xfe,
		0x31, 0x8b, 0x04, 0xfe, 0x51, 0x51, 0x68, 0x90, 0x14, 0x83, 0xd3, 0x4d, 0x20, 0x35, 0x9a, 0x29,
		0xc5, 0x06, 0x22, 0x2b, 0xa8, 0xba, 0x11, 0xb2, 0xee, 0x9a, 0xca, 0x52, 0x7a, 0xad, 0x5f, 0x98,
		0x3f, 0xf0, 0xac, 0x31, 0xf9, 0xd6, 0xda, 0x3e, 0x85, 0xf8, 0x14, 0x8d, 0xe2, 0xd7, 0x78, 0x10,
		0xaf, 0xa6, 0x63, 0xa8, 0x7a, 0xe9, 0x64, 0xa4, 0x11, 0xab, 0x5a, 0x61, 0x2e, 0x8c, 0xf1, 0x99,
		0xfa, 0x3b, 0x67, 0xad, 0x20, 0x9b, 0x94, 0x64, 0xf3, 0xf4, 0x2a, 0x7d, 0x8c, 0x17, 0x20, 0x85,
		0xa2, 0xd6, 0x12, 0x10, 0xa6, 0x81, 0x07, 0x6e, 0x08, 0x35, 0x9c, 0x40, 0x79, 0xb2, 0x6e, 0xf5,
		0x46, 0x48, 0xd6, 0x21, 0x59, 0x97, 0xda, 0xe2, 0x23, 0x59, 0x97, 0xa7, 0x2d, 0x44, 0xb2, 0x6e,
		0xcd, 0xce, 0x20, 0x59, 0xb7, 0x98, 0xa9, 0x41, 0xb2, 0xae, 0x14, 0x09, 0x1a, 0x24, 0xeb, 0xb0,
		0x16, 0x8e, 0x1b, 0x82, 0x23, 0x59, 0x97, 0x99, 0x53, 0xd8, 0x9e, 0xac, 0x9b, 0x45, 0x02, 0x48,
		0xd6, 0x15, 0x3f, 0x17, 0xb1, 0x27, 0x59, 0x37, 0x9f, 0x4a, 0x24, 0xeb, 0x38, 0x14, 0x62, 0x29,
		0x9b, 0xf3, 0xf3, 0x74, 0x0c, 0x91, 0xac, 0x2b, 0xa3, 0x82, 0x68, 0xfb, 0x92, 0x75, 0xc9, 0xf4,
		0x22, 0x59, 0x57, 0x26, 0xa4, 0x50, 0xc8, 0x64, 0xdd, 0x82, 0xf5, 0x55, 0x97, 0xa8, 0x5b, 0xbc,
		0x09, 0x92, 0x74, 0x48, 0xd2, 0xa5, 0xb6, 0xf4, 0x48, 0xd2, 0xe5, 0x69, 0x03, 0xcb, 0x97, 0xa4,
		0xfb, 0x34, 0x1d, 0xdc, 0x79, 0x2f, 0x9f, 0x92, 0xad, 0x81, 0x45, 0xcb, 0x53, 0x6f, 0x29, 0x90,
		0xfd, 0xde, 0x99, 0x8c, 0xd4, 0x29, 0xd8, 0x57, 0xf7, 0x4b, 0xe0, 0xa9, 0x20, 0x00, 0x58, 0xba,
		0x4b, 0x3d, 0x9c, 0x10, 0x8f, 0xd9, 0x71, 0xf6, 0x41, 0x21, 0xe4, 0x6e, 0x2c, 0x16, 0x6e, 0xab,
		0xbc, 0x51, 0x73, 0x71, 0xd3, 0x49, 0x0d, 0xf8, 0x52, 0x14, 0x9a, 0x54, 0xbe, 0xba, 0x1f, 0x08,
		0xcf, 0xb8, 0xdd, 0x78, 0x8b, 0x64, 0x06, 0xba, 0x5a, 0x43, 0xe1, 0x24, 0x24, 0xe3, 0xdf, 0xd5,
		0x9a, 0x0a, 0x6f, 0x93, 0x2c, 0xdc, 0xae, 0x56, 0x2f, 0x09, 0x5c, 0x7d, 0x39, 0x02, 0xb8, 0x3a,
		0x9b, 0x16, 0xe5, 0x7b, 0xcb, 0xab, 0x37, 0x02, 0x6c, 0x05, 0x6c, 0x05, 0x6c, 0x05, 0x6c, 0x55,
		0xb2, 0xf2, 0x55, 0x6f, 0x2d, 0x37, 0xb1, 0xb5, 0x3c, 0x7f, 0xf0, 0x6c, 0xb7, 0x96, 0x6b, 0x07,
		0xbc, 0x9f, 0x18, 0x9a, 0x1e, 0x6c, 0x2d, 0x1f, 0xf5, 0x12, 0xc0, 0x96, 0xb2, 0x86, 0x2d, 0xe5,
		0x83, 0xdc, 0x52, 0x9e, 0x05, 0x00, 0xd8, 0x52, 0x2e, 0x2e, 0x42, 0xdd, 0x88, 0x54, 0x77, 0x4d,
		0x25, 0xb6, 0x94, 0x39, 0x14, 0x62, 0x69, 0xcf, 0xf1, 0x0f, 0xf5, 0x89, 0x3c, 0x0d, 0x5b, 0xca,
		0x59, 0x2a, 0xc9, 0xe6, 0xe9, 0xc5, 0x96, 0x72, 0x99, 0x90, 0x02, 0xb8, 0x24, 0xb9, 0xe4, 0xe6,
		0xc9, 0x25, 0x49, 0x9e, 0x47, 0xcc, 0x85, 0x42, 0x32, 0x36, 0x1a, 0x15, 0x9c, 0x17, 0x5d, 0xce,
		0x13, 0x62, 0xb7, 0xad, 0xce, 0xa2, 0x9f, 0x12, 0xbb, 0x65, 0x39, 0x96, 0xf1, 0xa4, 0x58, 0x93,
		0xf9, 0x81, 0xe5, 0x44, 0xcb, 0xc6, 0xa7, 0x3b, 0x67, 0x6b, 0x49, 0x2a, 0x4e, 0xd8, 0xda, 0x3b,
		0x5e, 0x38, 0x61, 0x0b, 0x27, 0x6c, 0xa5, 0x8a, 0xbd, 0xa8, 0x4e, 0xd8, 0x5a, 0x50, 0x50, 0x7a,
		0x66, 0xcc, 0x45, 0xe1, 0xa0, 0xc7, 0x2c, 0x98, 0x71, 0x50, 0x1d, 0xda, 0x82, 0x1e, 0xb3, 0x6c,
		0xe1, 0x0d, 0x39, 0x3d, 0xe6, 0x82, 0xfe, 0xeb, 0x86, 0x69, 0x7a, 0xcc, 0xf7, 0xd5, 0x55, 0x46,
		0x6c, 0xba, 0x19, 0xaa, 0x23, 0x50, 0x1d, 0x91, 0xaf, 0x91, 0xca, 0x3c, 0xb5, 0x86, 0xea, 0x88,
		0x78, 0x18, 0x32, 0xa8, 0x8e, 0x18, 0x3f, 0xb4, 0x66, 0x96, 0x46, 0x77, 0x5c, 0xfd, 0x2f, 0xd7,
		0x61, 0x2a, 0x0b, 0x7a, 0xdf, 0x2a, 0x90, 0xfd, 0xd9, 0x08, 0x02, 0xe6, 0xa9, 0xdb, 0x22, 0xab,
		0x9c, 0x9c, 0x5c, 0xd7, 0xf4, 0xcb, 0xfe, 0xf7, 0xeb, 0xba, 0x7e, 0xd9, 0x8f, 0x3f, 0xd6, 0xa3,
		0x5f, 0xf1, 0xe7, 0xc6, 0x75, 0x4d, 0x6f, 0xcd, 0x3e, 0xb7, 0xaf, 0x6b, 0x7a, 0xbb, 0x7f, 0xda,
		0xeb, 0x9d, 0x9f, 0x7e, 0x6b, 0xbe, 0xf0, 0x5f, 0x78, 0xf2, 0xc3, 0x75, 0xaf, 0x37, 0xfe, 0xf6,
		0xdb, 0x4b, 0xf8, 0xf3, 0xe3, 0x4b, 0xff, 0xcd, 0xe9, 0x3b, 0x55, 0xda, 0x1c, 0xde, 0xb8, 0xd7,
		0x3b, 0xef, 0xbf, 0xae, 0x20, 0x15, 0x9b, 0x0b, 0x56, 0xf9, 0x2f, 0xf6, 0xac, 0xd6, 0xe9, 0x57,
		0x3e, 0x5a, 0x7e, 0x70, 0x15, 0x04, 0xc4, 0x90, 0xe8, 0x93, 0xe5, 0xbc, 0xb7, 0x59, 0x68, 0x9f,
		0x89, 0x2b, 0x22, 0x2a, 0x9f, 0x8c, 0xa7, 0x05, 0xc9, 0xf5, 0xb7, 0xad, 0x56, 0xe7, 0xa2, 0xd5,
		0xaa, 0x5d, 0x34, 0x2f, 0x6a, 0x97, 0xed, 0x76, 0xbd, 0x53, 0x6f, 0x13, 0xde, 0xec, 0x77, 0xcf,
		0x64, 0x1e, 0x33, 0x7f, 0x0a, 0x27, 0xc1, 0x99, 0xd8, 0x36, 0xd2, 0xf4, 0x94, 0x89, 0xd0, 0xc5,
		0xac, 0x59, 0x95, 0x3e, 0x88, 0xce, 0x28, 0x2d, 0xfa, 0xcb, 0xc2, 0x5b, 0x2c, 0xfe, 0x01, 0x59,
		0xfa, 0x52, 0x67, 0xe9, 0x09, 0x53, 0xba, 0x39, 0x2c, 0xc4, 0xdc, 0x52, 0xf3, 0xaf, 0x32, 0x5c,
		0x64, 0x54, 0x8b, 0x2b, 0xb3, 0x45, 0x25, 0xb1, 0x8e, 0xd4, 0xaf, 0x1f, 0xb1, 0x25, 0xc3, 0x3f,
		0xe1, 0x02, 0x93, 0x5d, 0xb9, 0x35, 0x1c, 0xf3, 0xd1, 0x32, 0xa3, 0xf9, 0x11, 0x9b, 0xe7, 0x24,
		0x9c, 0x99, 0x8b, 0x12, 0x5c, 0x74, 0x72, 0xa9, 0x59, 0xe9, 0x2c, 0x08, 0x45, 0xb6, 0x83, 0x38,
		0xab, 0x41, 0x95, 0xbd, 0x20, 0xcf, 0x52, 0x90, 0x67, 0x23, 0xe8, 0xb3, 0x0e, 0xd9, 0x1a, 0x4c,
		0xd9, 0xd4, 0x27, 0x81, 0x22, 0x92, 0x2b, 0x24, 0x71, 0xda, 0x12, 0x1b, 0xa7, 0x05, 0x4c, 0x33,
		0x62, 0xe3, 0x94, 0x3b, 0x4a, 0x76, 0x4c, 0x23, 0x70, 0xbd, 0x67, 0x82, 0x4a, 0x02, 0xb2, 0x14,
		0x23, 0x3d, 0x99, 0x27, 0x21, 0x79, 0x27, 0x71, 0x47, 0x15, 0x6d, 0x2e, 0x85, 0x7e, 0x3b, 0x69,
		0xd6, 0x1e, 0x43, 0xbd, 0x17, 0xa3, 0xba, 0x1b, 0x46, 0x5d, 0xf7, 0xcb, 0x0b, 0x6d, 0x92, 0x4a,
		0xdd, 0x94, 0xb5, 0x1a, 0x97, 0xad, 0xcb, 0xce, 0x45, 0xe3, 0xb2, 0x8d, 0xb9, 0xa3, 0x4d, 0xda,
		0x4a, 0x4b, 0xe9, 0x97, 0xb0, 0x22, 0x6e, 0x60, 0x1b, 0xbe, 0xaf, 0xbb, 0x9e, 0x3e, 0x76, 0x5d,
		0x9b, 0x86, 0x89, 0x6a, 0x4e, 0x11, 0xbf, 0x2e, 0x1b, 0x20, 0x0f, 0x20, 0x0f, 0x20, 0x0f, 0x20,
		0x0f, 0x20, 0x0f, 0x20, 0x0f, 0x20, 0x6f, 0xeb, 0x94, 0xd5, 0x31, 0x65, 0xc0, 0x76, 0xd2, 0xd8,
		0xce, 0xf4, 0x03, 0x46, 0x0c, 0xe9, 0xe6, 0x22, 0x81, 0xe4, 0x80, 0xe4, 0x80, 0xe4, 0x8e, 0x00,
		0xc9, 0xcd, 0x68, 0x3d, 0x93, 0x4c, 0xbd, 0x1e, 0x1a, 0x01, 0x42, 0x64, 0x47, 0x41, 0xe2, 0x49,
		0x4b, 0xda, 0xa9, 0x86, 0xa4, 0xb3, 0x52, 0x0b, 0x87, 0xd3, 0x0f, 0xc2, 0xd9, 0xf6, 0x4c, 0xaa,
		0x51, 0x4c, 0xa4, 0xd7, 0xa7, 0x8a, 0xac, 0x2f, 0xdf, 0xa1, 0x50, 0x45, 0x4b, 0xf4, 0x4c, 0x98,
		0x1b, 0xde, 0x98, 0x14, 0x3e, 0x55, 0x56, 0x65, 0xd7, 0x0e, 0xa3, 0xb0, 0xa7, 0x24, 0x5b, 0x96,
		0x84, 0xf4, 0x39, 0xe1, 0x4a, 0xf1, 0x99, 0x33, 0x90, 0x0f, 0x00, 0x09, 0x8d, 0xeb, 0x07, 0xc7,
		0xb4, 0x06, 0x46, 0xc0, 0x7c, 0xcd, 0xd0, 0x12, 0x03, 0xab, 0x39, 0xae, 0xc9, 0x34, 0xcb, 0xd7,
		0x06, 0x11, 0xba, 0x99, 0x78, 0xcc, 0x3c, 0x2f, 0x3e, 0x80, 0x88, 0xc7, 0xb6, 0x4c, 0x10, 0x22,
		0xfd, 0xe0, 0x97, 0x56, 0x5b, 0xfb, 0xa8, 0xc8, 0x5a, 0xaf, 0xc8, 0xa2, 0xa8, 0x39, 0x50, 0x56,
		0x91, 0xf5, 0x53, 0xf2, 0x70, 0x05, 0xae, 0xc8, 0x32, 0x99, 0x6d, 0x3c, 0xeb, 0x23, 0x66, 0xf8,
		0x13, 0x8f, 0x4d, 0xd5, 0x49, 0xb2, 0x32, 0x6b, 0x5d, 0xa4, 0x5c, 0x85, 0x56, 0x0d, 0x15, 0x5a,
		0xd4, 0x86, 0x1f, 0x15, 0x5a, 0xaa, 0x0d, 0xa8, 0x74, 0xf4, 0x96, 0xac, 0x1c, 0x36, 0x1a, 0x07,
		0xcf, 0x32, 0x6b, 0x66, 0x16, 0x9c, 0x35, 0x0b, 0x6d, 0x86, 0xe4, 0xfb, 0xfa, 0x09, 0xfb, 0xf8,
		0x61, 0x7a, 0x60, 0x7a, 0x60, 0x7a, 0xa8, 0x5b, 0x46, 0x29, 0x5a, 0x43, 0xc9, 0x5a, 0x40, 0x4b,
		0xde, 0xea, 0x49, 0xd1, 0xd2, 0xd9, 0x2f, 0xb0, 0x43, 0x18, 0x1a, 0x7e, 0xa0, 0x7b, 0x2c, 0xee,
		0x68, 0x90, 0xf6, 0x08, 0x4b, 0xd2, 0xd0, 0x2f, 0x00, 0x97, 0x70, 0x64, 0x2e, 0x81, 0xae, 0x5f,
		0x40, 0x1f, 0x7b, 0x6e, 0xc0, 0x06, 0x24, 0x8d, 0x80, 0xeb, 0xad, 0x03, 0x8b, 0xd2, 0xb1, 0x2d,
		0x99, 0x91, 0x1a, 0x67, 0x94, 0x55, 0xc4, 0xb6, 0xa4, 0xf8, 0xd5, 0x28, 0x30, 0xe3, 0xd1, 0x79,
		0x14, 0x98, 0xf1, 0x0a, 0x45, 0x81, 0x19, 0xb1, 0xca, 0xad, 0xa8, 0x1f, 0x0a, 0xcc, 0xb2, 0x98,
		0x32, 0x14, 0x98, 0x09, 0x4f, 0x8a, 0xe3, 0x9a, 0x4c, 0x09, 0xb4, 0x5b, 0x15, 0x0c, 0x54, 0x07,
		0x54, 0x07, 0x54, 0x07, 0x54, 0x07, 0x54, 0x07, 0x54, 0x07, 0x54, 0x07, 0x54, 0x07, 0x54, 0xa7,
		0xe4, 0x4a, 0x54, 0xe9, 0x6d, 0xf6, 0x4a, 0x8b, 0x85, 0x62, 0x8b, 0x9b, 0x02, 0x28, 0xd4, 0xcb,
		0xbe, 0x50, 0x6f, 0xef, 0xf8, 0xa3, 0x56, 0x2f, 0xdd, 0xf8, 0x96, 0xa3, 0x56, 0x8f, 0x60, 0x0f,
		0x4e, 0x53, 0x59, 0xae, 0xf7, 0xab, 0xe1, 0x07, 0x7f, 0xb0, 0xc2, 0x53, 0xa8, 0x0d, 0x5d, 0xef,
		0xd1, 0xf0, 0x4c, 0x3d, 0x6a, 0xc9, 0x27, 0xd8, 0x19, 0x5d, 0x12, 0x87, 0x6a, 0x19, 0x6c, 0x8d,
		0xe6, 0x1e, 0x5d, 0x97, 0xb5, 0x5a, 0x46, 0x3a, 0xe2, 0x25, 0x88, 0x74, 0x89, 0x22, 0x5c, 0x02,
		0xc4, 0x45, 0x19, 0xd1, 0x52, 0x47, 0xb2, 0xca, 0xc2, 0x21, 0xfa, 0x30, 0x88, 0x20, 0x62, 0x25,
		0x8d, 0x54, 0x93, 0xa9, 0xb8, 0x38, 0xbe, 0xa9, 0x28, 0x17, 0x9a, 0xcc, 0x12, 0x8d, 0x58, 0xce,
		0x9d, 0x6e, 0x98, 0xff, 0x63, 0x0c, 0x98, 0x33, 0x78, 0x26, 0x03, 0x25, 0xcb, 0x52, 0x51, 0xb6,
		0x05, 0x6c, 0x72, 0x64, 0xd8, 0x44, 0xba, 0x6c, 0x8b, 0x39, 0xd2, 0x69, 0x9c, 0xa5, 0x05, 0x38,
		0x95, 0x87, 0x4d, 0xbc, 0x8c, 0x54, 0x35, 0xa3, 0x3c, 0x12, 0x36, 0xf1, 0xf2, 0xc2, 0x67, 0x0a,
		0x36, 0xde, 0x64, 0xfb, 0x85, 0xd6, 0x3c, 0x67, 0xb3, 0x84, 0xf5, 0x0c, 0xf7, 0xae, 0x6d, 0xea,
		0x81, 0x35, 0x22, 0xb4, 0x7d, 0x73, 0x91, 0x30, 0x7f, 0x30, 0x7f, 0x30, 0x7f, 0x05, 0x35, 0x7f,
		0xa8, 0x3b, 0xc8, 0x2b, 0x4b, 0xa3, 0x2a, 0x5b, 0xa3, 0x3c, 0x55, 0xa0, 0x2e, 0x65, 0x40, 0x98,
		0xc5, 0x51, 0x92, 0xcd, 0x59, 0x9b, 0xb2, 0x46, 0xad, 0x56, 0xc3, 0xb4, 0xd1, 0xd8, 0x46, 0x3a,
		0x29, 0x65, 0xac, 0x28, 0xb5, 0x9c, 0x81, 0x3d, 0x31, 0x99, 0x6e, 0x8d, 0x1f, 0x3a, 0x74, 0x20,
		0x6c, 0x49, 0x2a, 0x70, 0x18, 0x70, 0x18, 0x70, 0x18, 0xc2, 0x50, 0xc5, 0x46, 0x10, 0xc5, 0x1c,
		0x1b, 0x8a, 0x39, 0xe8, 0x32, 0xf4, 0x9a, 0xd2, 0xa2, 0x8e, 0xe4, 0x39, 0xaf, 0x92, 0xc7, 0x2c,
		0xf0, 0x76, 0x8a, 0xed, 0x1a, 0xa6, 0xee, 0xdf, 0x1b, 0x1e, 0x41, 0xcf, 0xfb, 0x82, 0x2c, 0x94,
		0x75, 0x60, 0xeb, 0x24, 0x77, 0x47, 0x87, 0xb2, 0x0e, 0x94, 0x75, 0x6c, 0x89, 0x3a, 0xeb, 0x28,
		0xeb, 0xc8, 0x39, 0x11, 0xa0, 0xec, 0x50, 0x2a, 0xd4, 0x77, 0x28, 0x8a, 0xee, 0xb3, 0x02, 0x24,
		0x77, 0x77, 0x32, 0xec, 0xd9, 0x0b, 0x68, 0x24, 0x16, 0x84, 0x2a, 0x0e, 0x40, 0x91, 0x23, 0x83,
		0x22, 0xd2, 0x55, 0x1c, 0x86, 0x6d, 0xd3, 0x65, 0xd0, 0x42, 0x61, 0x48, 0x9c, 0x21, 0x71, 0x86,
		0xc4, 0x19, 0x12, 0x67, 0x8a, 0x13, 0x67, 0x67, 0x14, 0x7c, 0x63, 0x83, 0xfb, 0x30, 0xf4, 0xd1,
		0x47, 0xcc, 0xf7, 0x8d, 0x3b, 0xa6, 0x82, 0x73, 0x6c, 0xe5, 0x0e, 0x30, 0x8e, 0x30, 0x8e, 0x30,
		0x8e, 0x30, 0x8e, 0x05, 0x36, 0x8e, 0x43, 0x53, 0xf7, 0x03, 0x23, 0x50, 0x61, 0x15, 0xd7, 0x44,
		0xc3, 0x1c, 0xc2, 0x1c, 0xc2, 0x1c, 0xc2, 0x1c, 0x16, 0xd7, 0x1c, 0x5a, 0x8e, 0x3f, 0x19, 0x0e,
		0xad, 0x81, 0xc5, 0x9c, 0x40, 0xbf, 0x7d, 0xa4, 0x37, 0x8a, 0xdb, 0x6e, 0x00, 0xd3, 0x08, 0xd3,
		0x08, 0xd3, 0x08, 0xd3, 0x58, 0x5c, 0xd3, 0x68, 0xfb, 0x63, 0xdd, 0x7f, 0xb4, 0x82, 0xc1, 0xbd,
		0xee, 0x3e, 0x30, 0x4f, 0x59, 0x30, 0xbd, 0xe7, 0x3e, 0x30, 0x94, 0x30, 0x94, 0x30, 0x94, 0x30,
		0x94, 0xc5, 0x35, 0x94, 0x63, 0x23, 0xb8, 0xd7, 0x99, 0xe7, 0xb9, 0x1e, 0xbd, 0x71, 0xdc, 0x20,
		0x1b, 0x06, 0x11, 0x06, 0x11, 0x06, 0x11, 0x06, 0xb1, 0xc0, 0x06, 0x71, 0x60, 0xd8, 0x03, 0x7d,
		0x68, 0x58, 0xf6, 0xc4, 0x53, 0x00, 0x18, 0x37, 0x8b, 0x87, 0x59, 0x84, 0x59, 0x84, 0x59, 0x84,
		0x59, 0x2c, 0xae, 0x59, 0xf4, 0xd8, 0xc0, 0xf5, 0x4c, 0x3d, 0x62, 0x89, 0x8c, 0xcc, 0x16, 0xad,
		0x59, 0xdc, 0x2c, 0x1e, 0x66, 0x11, 0x66, 0x11, 0x66, 0x11, 0x66, 0xb1, 0xc8, 0x66, 0xd1, 0x1d,
		0x07, 0xd6, 0xc8, 0xfa, 0x8b, 0xe9, 0x46, 0x10, 0x84, 0x43, 0xe2, 0xd3, 0x63, 0xc6, 0x5d, 0x37,
		0x81, 0x89, 0x84, 0x89, 0x84, 0x89, 0x84, 0x89, 0x2c, 0x83, 0x89, 0x34, 0x55, 0x9a, 0x46, 0x13,
		0x26, 0x11, 0x26, 0x11, 0x26, 0x11, 0x26, 0xb1, 0x14, 0x26, 0x51, 0x5d, 0x1c, 0x8d, 0x10, 0x1a,
		0xc6, 0x10, 0xc6, 0x10, 0xc6, 0xb0, 0x34, 0xc6, 0x50, 0x51, 0x41, 0x37, 0x8a, 0xb9, 0x61, 0x06,
		0x61, 0x06, 0x61, 0x06, 0x33, 0x35, 0x83, 0x60, 0xcc, 0x5a, 0x67, 0xcc, 0x92, 0x23, 0x40, 0xd0,
		0x54, 0x92, 0x64, 0x7d, 0x9c, 0x3e, 0x5a, 0x81, 0x79, 0x28, 0x1c, 0xf6, 0xa8, 0xfb, 0xc1, 0xb3,
		0xcd, 0x74, 0x63, 0x38, 0xb4, 0x1c, 0x2b, 0x78, 0x9e, 0x7f, 0x08, 0x9e, 0xc7, 0x8c, 0xe0, 0x24,
		0xb4, 0xfd, 0xb7, 0x00, 0x77, 0x05, 0xb8, 0x2b, 0x72, 0xf7, 0x7e, 0x25, 0xe3, 0xae, 0xd8, 0xa7,
		0x55, 0x74, 0x48, 0x77, 0xef, 0x9d, 0x68, 0xc0, 0x6f, 0x1d, 0xe0, 0x17, 0xe0, 0xf7, 0xd8, 0xc1,
		0xaf, 0xac, 0x59, 0x48, 0x04, 0xd1, 0xda, 0x82, 0xb5, 0xf5, 0x4c, 0x69, 0x00, 0x88, 0xa3, 0x60,
		0x72, 0x83, 0xa0, 0xc2, 0x30, 0x28, 0x36, 0x10, 0xaa, 0x0c, 0x85, 0x72, 0x83, 0xa1, 0xdc, 0x70,
		0xa8, 0x37, 0x20, 0x34, 0x86, 0x84, 0xc8, 0xa0, 0xd0, 0x47, 0xd5, 0x6b, 0x2b, 0xf7, 0xd3, 0x74,
		0xf0, 0x66, 0x91, 0xd9, 0xd4, 0x32, 0x50, 0xae, 0xe2, 0x19, 0x42, 0x68, 0x11, 0xca, 0x7c, 0xef,
		0x4c, 0x46, 0xf4, 0x7a, 0xf1, 0xd5, 0xfd, 0x12, 0x78, 0x32, 0xbc, 0x7e, 0x3b, 0xa5, 0xd7, 0x17,
		0x98, 0xfa, 0x89, 0x15, 0x2e, 0x92, 0xdf, 0x58, 0x3c, 0x09, 0xc0, 0x0f, 0x3c, 0x6b, 0x10, 0xa8,
		0xb8, 0x4d, 0x33, 0x4a, 0xca, 0x3c, 0x29, 0x7b, 0x8d, 0xd6, 0x82, 0x7c, 0x5d, 0x9e, 0x96, 0x6d,
		0xe3, 0x3d, 0xda, 0xd1, 0x50, 0xdd, 0x39, 0xae, 0xc7, 0x2a, 0xa4, 0xd2, 0x5f, 0xce, 0xa8, 0x57,
		0xe4, 0x87, 0xc8, 0xc8, 0x29, 0x58, 0x8e, 0xb3, 0x29, 0xec, 0x6a, 0xcd, 0x33, 0x65, 0xd2, 0xf5,
		0x98, 0xa4, 0xaf, 0xa5, 0xe0, 0x0e, 0xd3, 0xe9, 0xeb, 0x6a, 0x6d, 0x15, 0xc2, 0x9d, 0xd9, 0xe0,
		0xd4, 0xd5, 0x49, 0x9f, 0x29, 0x69, 0x57, 0x6b, 0xd0, 0x2e, 0xc2, 0x83, 0x3b, 0xe9, 0x25, 0x5f,
		0x58, 0xff, 0x5f, 0xec, 0x99, 0x1a, 0x35, 0x57, 0x3e, 0x5a, 0x7e, 0x70, 0x15, 0x04, 0x44, 0xf1,
		0xc2, 0x27, 0xcb, 0x79, 0x6f, 0xb3, 0x10, 0x10, 0x11, 0x51, 0x09, 0x57, 0x3e, 0x19, 0x4f, 0x0b,
		0x12, 0xeb, 0x6f, 0x5b, 0xad, 0xce, 0x45, 0xab, 0x55, 0xbb, 0x68, 0x5e, 0xd4, 0x2e, 0xdb, 0xed,
		0x7a, 0xa7, 0x4e, 0xa0, 0x75, 0x95, 0xdf, 0x3d, 0x93, 0x79, 0xcc, 0xfc, 0x29, 0x1c, 0x5e, 0x67,
		0x62, 0xdb, 0xb9, 0xce, 0x32, 0x51, 0xc2, 0x3c, 0x91, 0xa7, 0x38, 0x71, 0xbe, 0x37, 0x2f, 0x5b,
		0x55, 0x9c, 0xf9, 0xd1, 0x54, 0xe6, 0xde, 0x7f, 0x63, 0x8f, 0x5f, 0xc2, 0x47, 0xbf, 0x9a, 0x3e,
		0xf0, 0xec, 0x77, 0x08, 0x84, 0x77, 0xff, 0x6b, 0xa5, 0x84, 0x9b, 0xdc, 0xfb, 0x66, 0x2a, 0xf9,
		0x53, 0x3d, 0xbb, 0xbc, 0xe0, 0xc2, 0x3d, 0x91, 0x21, 0x44, 0x86, 0x10, 0x19, 0x42, 0x64, 0x08,
		0x91, 0x21, 0x44, 0x86, 0x10, 0x19, 0x42, 0x64, 0x08, 0x91, 0x21, 0x44, 0x86, 0x10, 0x19, 0x42,
		0x64, 0x08, 0x91, 0x21, 0x44, 0x86, 0xb0, 0x30, 0x19, 0xc2, 0x33, 0x3a, 0x4c, 0x5d, 0x57, 0x87,
		0xa7, 0xeb, 0xc0, 0xd2, 0xc0, 0xd2, 0xc0, 0xd2, 0xc7, 0x8a, 0xa5, 0xe3, 0x24, 0xb0, 0xe5, 0xfa,
		0xfa, 0x93, 0x17, 0xd9, 0x76, 0xe7, 0x4e, 0x05, 0x8e, 0x7e, 0x4b, 0x28, 0xf3, 0xb3, 0x11, 0x04,
		0xcc, 0x73, 0xa4, 0x0f, 0xd9, 0x5c, 0x13, 0x7c, 0xdd, 0xeb, 0x3d, 0xf6, 0x7a, 0x7a, 0xaf, 0x77,
		0xde, 0x3d, 0xbb, 0xf9, 0xd7, 0xdf, 0x7e, 0xf8, 0x7b, 0xaf, 0xf7, 0xe6, 0xc7, 0x5e, 0xef, 0xfb,
		0x3f, 0xfb, 0x6f, 0xe8, 0x16, 0x56, 0x1f, 0x1b, 0x58, 0x5b, 0x36, 0xb0, 0x34, 0xb2, 0xfc, 0x2e,
		0xb6, 0xb2, 0xb0, 0x95, 0x95, 0xf3, 0x56, 0x96, 0x4e, 0x89, 0xaf, 0x0a, 0xb8, 0xa9, 0x75, 0x95,
		0xbc, 0xde, 0x41, 0xef, 0x6e, 0x25, 0x9f, 0x1a, 0x79, 0xec, 0x73, 0x2d, 0xdc, 0x1d, 0x3b, 0x5e,
		0x19, 0x83, 0x70, 0xec, 0x78, 0x61, 0xc7, 0x2b, 0x65, 0x74, 0x8e, 0x1d, 0x2f, 0x44, 0xe9, 0x88,
		0xd2, 0x11, 0xa5, 0x63, 0xc7, 0x6b, 0x45, 0x26, 0x76, 0xbc, 0xd6, 0xe5, 0x63, 0xc7, 0x2b, 0xf5,
		0x3d, 0xb0, 0xe3, 0x85, 0x1d, 0xaf, 0xdd, 0xc2, 0xb1, 0xe3, 0xa5, 0x61, 0xc7, 0x8b, 0x17, 0x4f,
		0x63, 0xc7, 0x0b, 0x58, 0x1a, 0x58, 0xfa, 0x68, 0xb1, 0x34, 0x76, 0xbc, 0xe6, 0x82, 0x8f, 0x6b,
		0xc7, 0x8b, 0xd0, 0x3d, 0x35, 0xd4, 0xb9, 0xa7, 0x06, 0xdc, 0x13, 0xdc, 0x13, 0xdc, 0x13, 0xdc,
		0x13, 0xdc, 0x13, 0x0a, 0x32, 0xb2, 0x5a, 0xd8, 0x7b, 0x0a, 0x32, 0x34, 0xb2, 0x8d, 0x48, 0x94,
		0x66, 0xa0, 0x34, 0xa3, 0x30, 0xa5, 0x19, 0x3a, 0x25, 0xe6, 0x2a, 0x72, 0x91, 0xc6, 0x55, 0xf2,
		0x9e, 0x47, 0x52, 0xad, 0x91, 0x7c, 0x6a, 0xe6, 0x5b, 0xb7, 0xb1, 0xf0, 0x1c, 0xa8, 0xe0, 0xc8,
		0x18, 0xb5, 0xa3, 0x82, 0x03, 0x15, 0x1c, 0x29, 0xc3, 0x79, 0x54, 0x70, 0x20, 0xac, 0x47, 0x58,
		0x8f, 0xb0, 0x1e, 0x15, 0x1c, 0x2b, 0x32, 0x51, 0xc1, 0xb1, 0x2e, 0x1f, 0x15, 0x1c, 0xa9, 0xef,
		0x81, 0x0a, 0x0e, 0x54, 0x70, 0xec, 0x16, 0x8e, 0x0a, 0x0e, 0x0d, 0x15, 0x1c, 0xbc, 0x78, 0x1a,
		0x15, 0x1c, 0xc0, 0xd2, 0xc0, 0xd2, 0x47, 0x8b, 0xa5, 0xb1, 0x45, 0x36, 0x17, 0x8c, 0x0a, 0x0e,
		0x41, 0xf7, 0x84, 0x0a, 0x0e, 0xb8, 0x27, 0xb8, 0x27, 0xb8, 0x27, 0xb8, 0x27, 0xb8, 0xa7, 0x02,
		0xba, 0xa7, 0xa6, 0x3a, 0xf7, 0xd4, 0x84, 0x7b, 0x82, 0x7b, 0x82, 0x7b, 0x82, 0x7b, 0x82, 0x7b,
		0x42, 0x81, 0x61, 0x56, 0x0b, 0x3b, 0x75, 0x81, 0xa1, 0x46, 0x56, 0x31, 0x83, 0x52, 0x43, 0x94,
		0x1a, 0x16, 0xb0, 0xd4, 0x50, 0xa7, 0xc4, 0x61, 0xa5, 0x28, 0x3a, 0xbc, 0x4a, 0x5e, 0xf8, 0xe8,
		0xaa, 0x0f, 0x93, 0x4f, 0xad, 0xa2, 0xd4, 0x21, 0x2e, 0x3c, 0x11, 0x2a, 0x12, 0x33, 0x86, 0xf9,
		0xa8, 0x48, 0x44, 0x45, 0x62, 0xca, 0xf8, 0x1f, 0x15, 0x89, 0xc8, 0x03, 0x20, 0x0f, 0x80, 0x3c,
		0x00, 0x2a, 0x12, 0x57, 0x64, 0xa2, 0x22, 0x71, 0x5d, 0x3e, 0x2a, 0x12, 0x53, 0xdf, 0x03, 0x15,
		0x89, 0xa8, 0x48, 0xdc, 0x2d, 0x1c, 0x15, 0x89, 0x1a, 0x2a, 0x12, 0x79, 0xf1, 0x34, 0x2a, 0x12,
		0x81, 0xa5, 0x81, 0xa5, 0x8f, 0x16, 0x4b, 0x63, 0x4f, 0x6d, 0x2e, 0x18, 0x25, 0x1f, 0x82, 0xee,
		0x09, 0x15, 0x89, 0x70, 0x4f, 0x70, 0x4f, 0x70, 0x4f, 0x70, 0x4f, 0x70, 0x4f, 0x05, 0x74, 0x4f,
		0xa8, 0x48, 0x84, 0x7b, 0x82, 0x7b, 0x82, 0x7b, 0x82, 0x7b, 0x82, 0x7b, 0x2a, 0xa0, 0x7b, 0x6a,
		0xa9, 0x73, 0x4f, 0x2d, 0xb8, 0x27, 0xb8, 0x27, 0xb8, 0x27, 0xb8, 0x27, 0xb8, 0x27, 0x14, 0xcc,
		0x67, 0xb5, 0xb0, 0x05, 0x0a, 0xe6, 0x35, 0xb2, 0xd2, 0x4e, 0x94, 0xce, 0xa3, 0x74, 0xbe, 0xd0,
		0xa5, 0xf3, 0x3a, 0x25, 0x36, 0x2b, 0x57, 0x11, 0xfd, 0x55, 0xf2, 0xe6, 0x47, 0x5c, 0x4d, 0x9f,
		0x7c, 0x6a, 0x17, 0xaf, 0xae, 0x7e, 0xe1, 0xd9, 0x50, 0x61, 0x9f, 0x71, 0x5c, 0x80, 0x0a, 0x7b,
		0x54, 0xd8, 0xa7, 0x4c, 0x18, 0xa0, 0xc2, 0x1e, 0x89, 0x03, 0x24, 0x0e, 0x90, 0x38, 0x40, 0x85,
		0xfd, 0x8a, 0x4c, 0x54, 0xd8, 0xaf, 0xcb, 0x47, 0x85, 0x7d, 0xea, 0x7b, 0xa0, 0xc2, 0x1e, 0x15,
		0xf6, 0xbb, 0x85, 0xa3, 0xc2, 0x5e, 0x43, 0x85, 0x3d, 0x2f, 0x9e, 0x46, 0x85, 0x3d, 0xb0, 0x34,
		0xb0, 0xf4, 0xd1, 0x62, 0x69, 0x6c, 0xc2, 0xcd, 0x05, 0xa3, 0x46, 0x44, 0xd0, 0x3d, 0xa1, 0xc2,
		0x1e, 0xee, 0x09, 0xee, 0x09, 0xee, 0x09, 0xee, 0x09, 0xee, 0xa9, 0x80, 0xee, 0x09, 0x15, 0xf6,
		0x70, 0x4f, 0x70, 0x4f, 0x70, 0x4f, 0x70, 0x4f, 0x70, 0x4f, 0x05, 0x74, 0x4f, 0xa8, 0xb0, 0x87,
		0x7b, 0x82, 0x7b, 0x82, 0x7b, 0x82, 0x7b, 0x82, 0x7b, 0x2a, 0xa0, 0x7b, 0x6a, 0xab, 0x73, 0x4f,
		0x6d, 0xb8, 0x27, 0xb8, 0x27, 0xb8, 0x27, 0xb8, 0x27, 0xb8, 0x27, 0x34, 0x80, 0x65, 0xb5, 0xb0,
		0xa5, 0x1a, 0xc0, 0x34, 0xb2, 0x1e, 0x04, 0xb4, 0x82, 0xa1, 0x15, 0xac, 0x24, 0xad, 0x60, 0x3a,
		0x25, 0x5e, 0x2b, 0x69, 0x53, 0xd8, 0x55, 0x32, 0x04, 0xe8, 0x0e, 0x0b, 0x9e, 0xdb, 0xc9, 0xa7,
		0x4e, 0x91, 0xfb, 0xc4, 0x16, 0x9e, 0x12, 0x1d, 0x63, 0x19, 0x07, 0x12, 0xe8, 0x18, 0x43, 0xc7,
		0x58, 0xca, 0x0c, 0x03, 0x3a, 0xc6, 0x90, 0x69, 0x40, 0xa6, 0x01, 0x99, 0x06, 0x74, 0x8c, 0xad,
		0xc8, 0x44, 0xc7, 0xd8, 0xba, 0x7c, 0x74, 0x8c, 0xa5, 0xbe, 0x07, 0x3a, 0xc6, 0xd0, 0x31, 0xb6,
		0x5b, 0x38, 0x3a, 0xc6, 0x34, 0x74, 0x8c, 0xf1, 0xe2, 0x69, 0x74, 0x8c, 0x01, 0x4b, 0x03, 0x4b,
		0x1f, 0x2d, 0x96, 0xc6, 0xae, 0xdd, 0x5c, 0x30, 0x8a, 0x4a, 0x04, 0xdd, 0x13, 0x3a, 0xc6, 0xe0,
		0x9e, 0xe0, 0x9e, 0xe0, 0x9e, 0xe0, 0x9e, 0xe0, 0x9e, 0x0a, 0xe8, 0x9e, 0xd0, 0x31, 0x06, 0xf7,
		0x04, 0xf7, 0x04, 0xf7, 0x04, 0xf7, 0x04, 0xf7, 0x54, 0x40, 0xf7, 0x84, 0x8e, 0x31, 0xb8, 0x27,
		0xb8, 0x27, 0xb8, 0x27, 0xb8, 0x27, 0xb8, 0xa7, 0x02, 0xba, 0x27, 0x74, 0x8c, 0xc1, 0x3d, 0xc1,
		0x3d, 0xc1, 0x3d, 0xc1, 0x3d, 0xc1, 0x3d, 0x15, 0xd0, 0x3d, 0x75, 0xd4, 0xb9, 0xa7, 0x0e, 0xdc,
		0x13, 0xdc, 0x13, 0xdc, 0x13, 0xdc, 0x13, 0xdc, 0x13, 0x1a, 0x9a, 0xb3, 0x5a, 0xd8, 0x44, 0x0d,
		0xcd, 0x1a, 0x59, 0xb3, 0x1c, 0x5a, 0x9b, 0xd1, 0xda, 0x5c, 0xba, 0xd6, 0x66, 0x9d, 0x12, 0xc3,
		0x95, 0xbd, 0xc9, 0xf9, 0x2a, 0x19, 0x0b, 0x74, 0x3b, 0x2f, 0xad, 0x8d, 0xe4, 0xd3, 0x45, 0x39,
		0xfa, 0x9e, 0x17, 0x9e, 0x17, 0x1d, 0xd0, 0x19, 0x47, 0x1e, 0xe8, 0x80, 0x46, 0x07, 0x74, 0xca,
		0x94, 0x04, 0x3a, 0xa0, 0x91, 0x9a, 0x40, 0x6a, 0x02, 0xa9, 0x09, 0x74, 0x40, 0xaf, 0xc8, 0x44,
		0x07, 0xf4, 0xba, 0x7c, 0x74, 0x40, 0xa7, 0xbe, 0x07, 0x3a, 0xa0, 0xd1, 0x01, 0xbd, 0x5b, 0x38,
		0x3a, 0xa0, 0x35, 0x74, 0x40, 0xf3, 0xe2, 0x69, 0x74, 0x40, 0x03, 0x4b, 0x03, 0x4b, 0x1f, 0x2d,
		0x96, 0xc6, 0x36, 0xdf, 0x5c, 0x30, 0xaa, 0x50, 0x04, 0xdd, 0x13, 0x3a, 0xa0, 0xe1, 0x9e, 0xe0,
		0x9e, 0xe0, 0x9e, 0xe0, 0x9e, 0xe0, 0x9e, 0x0a, 0xe8, 0x9e, 0xd0, 0x01, 0x0d, 0xf7, 0x04, 0xf7,
		0x04, 0xf7, 0x04, 0xf7, 0x04, 0xf7, 0x54, 0x40, 0xf7, 0x84, 0x0e, 0x68, 0xb8, 0x27, 0xb8, 0x27,
		0xb8, 0x27, 0xb8, 0x27, 0xb8, 0xa7, 0x02, 0xba, 0x27, 0x74, 0x40, 0xc3, 0x3d, 0xc1, 0x3d, 0xc1,
		0x3d, 0xc1, 0x3d, 0xc1, 0x3d, 0x15, 0xd0, 0x3d, 0xa1, 0x03, 0x1a, 0xee, 0x09, 0xee, 0x09, 0xee,
		0x09, 0xee, 0x09, 0xee, 0xa9, 0x80, 0xee, 0xe9, 0x42, 0x9d, 0x7b, 0xba, 0x80, 0x7b, 0x82, 0x7b,
		0x82, 0x7b, 0x82, 0x7b, 0x82, 0x7b, 0x02, 0x41, 0x47, 0x56, 0x0b, 0x9b, 0x9c, 0xa0, 0x43, 0x23,
		0xeb, 0xea, 0x06, 0x55, 0x07, 0xa8, 0x3a, 0x4a, 0x4c, 0xd5, 0xa1, 0x53, 0xe2, 0xba, 0x83, 0x21,
		0xed, 0xb8, 0x4a, 0x06, 0x05, 0xec, 0x1d, 0x5b, 0x96, 0x4b, 0xf2, 0xe9, 0x6d, 0xd9, 0x78, 0x3c,
		0x16, 0x9e, 0x1c, 0x8c, 0x1e, 0x19, 0x87, 0x2a, 0x60, 0xf4, 0x00, 0xa3, 0x47, 0xca, 0x1c, 0x06,
		0x18, 0x3d, 0x90, 0xcb, 0x40, 0x2e, 0x03, 0xb9, 0x0c, 0x30, 0x7a, 0xac, 0xc8, 0x04, 0xa3, 0xc7,
		0xba, 0x7c, 0x30, 0x7a, 0xa4, 0xbe, 0x07, 0x18, 0x3d, 0xc0, 0xe8, 0xb1, 0x5b, 0x38, 0x18, 0x3d,
		0x34, 0x30, 0x7a, 0xf0, 0xe2, 0x69, 0x30, 0x7a, 0x00, 0x4b, 0x03, 0x4b, 0x1f, 0x2d, 0x96, 0xc6,
		0xbe, 0xe0, 0x5c, 0x30, 0xca, 0x56, 0x04, 0xdd, 0x13, 0x18, 0x3d, 0xe0, 0x9e, 0xe0, 0x9e, 0xe0,
		0x9e, 0xe0, 0x9e, 0xe0, 0x9e, 0x0a, 0xe8, 0x9e, 0xc0, 0xe8, 0x01, 0xf7, 0x04, 0xf7, 0x04, 0xf7,
		0x04, 0xf7, 0x04, 0xf7, 0x54, 0x40, 0xf7, 0x04, 0x46, 0x0f, 0xb8, 0x27, 0xb8, 0x27, 0xb8, 0x27,
		0xb8, 0x27, 0xb8, 0xa7, 0x02, 0xba, 0x27, 0x30, 0x7a, 0xc0, 0x3d, 0xc1, 0x3d, 0xc1, 0x3d, 0xc1,
		0x3d, 0xc1, 0x3d, 0x15, 0xd0, 0x3d, 0x81, 0xd1, 0x03, 0xee, 0x09, 0xee, 0x09, 0xee, 0x09, 0xee,
		0x09, 0xee, 0xa9, 0x80, 0xee, 0x09, 0x8c, 0x1e, 0x70, 0x4f, 0x70, 0x4f, 0x70, 0x4f, 0x70, 0x4f,
		0x70, 0x4f, 0x05, 0x74, 0x4f, 0x6f, 0xd5, 0xb9, 0xa7, 0xb7, 0x70, 0x4f, 0x70, 0x4f, 0x70, 0x4f,
		0x70, 0x4f, 0x70, 0x4f, 0x20, 0x9c, 0xca, 0x6a, 0x61, 0x2b, 0x24, 0x9c, 0xd2, 0xc8, 0xe8, 0x47,
		0x40, 0x3d, 0x05, 0xea, 0xa9, 0x83, 0xa0, 0x9e, 0xd2, 0x29, 0xb1, 0xde, 0xe1, 0x91, 0x50, 0x5d,
		0x25, 0xa3, 0x03, 0x36, 0xaa, 0xbd, 0x2b, 0x28, 0xf9, 0x74, 0x59, 0x5e, 0x5e, 0xaa, 0x85, 0x77,
		0x00, 0x43, 0x55, 0xc6, 0xb1, 0x0d, 0x18, 0xaa, 0xc0, 0x50, 0x95, 0x32, 0xe9, 0x01, 0x86, 0x2a,
		0x24, 0x3f, 0x90, 0xfc, 0x40, 0xf2, 0x03, 0x0c, 0x55, 0x2b, 0x32, 0xc1, 0x50, 0xb5, 0x2e, 0x1f,
		0x0c, 0x55, 0xa9, 0xef, 0x01, 0x86, 0x2a, 0x30, 0x54, 0xed, 0x16, 0x0e, 0x86, 0x2a, 0x0d, 0x0c,
		0x55, 0xbc, 0x78, 0x1a, 0x0c, 0x55, 0xc0, 0xd2, 0xc0, 0xd2, 0x47, 0x8b, 0xa5, 0xb1, 0x91, 0x38,
		0x17, 0x8c, 0x3a, 0x17, 0x41, 0xf7, 0x04, 0x86, 0x2a, 0xb8, 0x27, 0xb8, 0x27, 0xb8, 0x27, 0xb8,
		0x27, 0xb8, 0xa7, 0x02, 0xba, 0x27, 0x30, 0x54, 0xc1, 0x3d, 0xc1, 0x3d, 0xc1, 0x3d, 0xc1, 0x3d,
		0xc1, 0x3d, 0x15, 0xd0, 0x3d, 0x81, 0xa1, 0x0a, 0xee, 0x09, 0xee, 0x09, 0xee, 0x09, 0xee, 0x09,
		0xee, 0xa9, 0x80, 0xee, 0x09, 0x0c, 0x55, 0x70, 0x4f, 0x70, 0x4f, 0x70, 0x4f, 0x70, 0x4f, 0x70,
		0x4f, 0x05, 0x74, 0x4f, 0x60, 0xa8, 0x82, 0x7b, 0x82, 0x7b, 0x82, 0x7b, 0x82, 0x7b, 0x82, 0x7b,
		0x2a, 0xa0, 0x7b, 0x02, 0x43, 0x15, 0xdc, 0x13, 0xdc, 0x13, 0xdc, 0x13, 0xdc, 0x13, 0xdc, 0x53,
		0x01, 0xdd, 0x13, 0x18, 0xaa, 0xe0, 0x9e, 0xe0, 0x9e, 0xe0, 0x9e, 0xe0, 0x9e, 0xe0, 0x9e, 0x0a,
		0xe8, 0x9e, 0x2e, 0xd5, 0xb9, 0xa7, 0x4b, 0xb8, 0x27, 0xb8, 0x27, 0xb8, 0x27, 0xb8, 0x27, 0xb8,
		0x27, 0x10, 0x28, 0x66, 0xb5, 0xb0, 0x33, 0x21, 0x50, 0xd4, 0xc8, 0x78, 0xb2, 0x40, 0xa5, 0x08,
		0x2a, 0xc5, 0x03, 0xa3, 0x52, 0xd4, 0x29, 0xf1, 0xdf, 0x01, 0x93, 0x2a, 0x5e, 0x25, 0xc3, 0x04,
		0x76, 0x45, 0x8e, 0x45, 0x35, 0x97, 0x5c, 0x3b, 0x04, 0xa2, 0xc5, 0xc5, 0xd7, 0x01, 0xe7, 0x62,
		0xc6, 0xe1, 0x10, 0x38, 0x17, 0xc1, 0xb9, 0x98, 0x32, 0x4f, 0x02, 0xce, 0x45, 0xe4, 0x4b, 0x90,
		0x2f, 0x41, 0xbe, 0x04, 0x9c, 0x8b, 0x2b, 0x32, 0xc1, 0xb9, 0xb8, 0x2e, 0x1f, 0x9c, 0x8b, 0xa9,
		0xef, 0x01, 0xce, 0x45, 0x70, 0x2e, 0xee, 0x16, 0x0e, 0xce, 0x45, 0x0d, 0x9c, 0x8b, 0xbc, 0x78,
		0x1a, 0x9c, 0x8b, 0xc0, 0xd2, 0xc0, 0xd2, 0x47, 0x8b, 0xa5, 0xb1, 0xf7, 0x38, 0x17, 0x8c, 0xd2,
		0x18, 0x51, 0xf7, 0x54, 0x53, 0xe8, 0x9f, 0x6a, 0x70, 0x50, 0x70, 0x50, 0x70, 0x50, 0x70, 0x50,
		0x70, 0x50, 0x70, 0x50, 0x82, 0x0e, 0x0a, 0xa4, 0xc0, 0x70, 0x4f, 0x70, 0x4f, 0x70, 0x4f, 0x70,
		0x4f, 0x70, 0x4f, 0x05, 0x74, 0x4f, 0x20, 0x05, 0x86, 0x7b, 0x82, 0x7b, 0x82, 0x7b, 0x82, 0x7b,
		0x82, 0x7b, 0x2a, 0xa0, 0x7b, 0x02, 0x29, 0x30, 0xdc, 0x13, 0xdc, 0x13, 0xdc, 0x13, 0xdc, 0x13,
		0xdc, 0x53, 0x01, 0xdd, 0x13, 0x48, 0x81, 0xe1, 0x9e, 0xe0, 0x9e, 0xe0, 0x9e, 0xe0, 0x9e, 0xe0,
		0x9e, 0x0a, 0xe8, 0x9e, 0x40, 0x0a, 0x0c, 0xf7, 0x04, 0xf7, 0x04, 0xf7, 0x04, 0xf7, 0x04, 0xf7,
		0x54, 0x40, 0xf7, 0x04, 0x52, 0x60, 0xb8, 0x27, 0xb8, 0x27, 0xb8, 0x27, 0xb8, 0x27, 0xb8, 0xa7,
		0x02, 0xba, 0x27, 0x90, 0x02, 0xc3, 0x3d, 0xc1, 0x3d, 0xc1, 0x3d, 0xc1, 0x3d, 0xc1, 0x3d, 0x15,
		0xd0, 0x3d, 0x81, 0x14, 0x18, 0xee, 0x09, 0xee, 0x09, 0xee, 0x09, 0xee, 0x09, 0xee, 0x89, 0xca,
		0x3d, 0x1d, 0x11, 0x29, 0xb0, 0x46, 0xc7, 0xe9, 0x08, 0x7e, 0x60, 0xf0, 0x03, 0x1f, 0x2c, 0x3f,
		0xb0, 0x4e, 0xda, 0x0d, 0x7f, 0x0c, 0x54, 0xc1, 0x57, 0xf3, 0x01, 0xcb, 0x8b, 0x34, 0xf8, 0x55,
		0x86, 0x4a, 0x47, 0xa5, 0x6c, 0xb9, 0x2b, 0x99, 0xc4, 0xf2, 0xce, 0x67, 0x59, 0x8b, 0x2d, 0x2f,
		0xfe, 0xc5, 0x21, 0xb0, 0x30, 0x2a, 0xe1, 0x34, 0xea, 0x3e, 0xb3, 0xd9, 0x20, 0x5c, 0x18, 0xfa,
		0x88, 0x05, 0x9e, 0x35, 0x10, 0x5e, 0x1f, 0x09, 0x34, 0xdd, 0x2c, 0x56, 0x70, 0xe1, 0xca, 0x45,
		0xa7, 0xd2, 0xd1, 0x28, 0x45, 0xf4, 0x49, 0x1c, 0x6d, 0x52, 0x45, 0x97, 0xe4, 0xd1, 0x24, 0x79,
		0xf4, 0x48, 0x1f, 0x2d, 0x66, 0x6b, 0x74, 0xa5, 0xa3, 0xbf, 0x35, 0x4a, 0x53, 0x4a, 0xd5, 0xd2,
		0x88, 0x88, 0x4c, 0x69, 0x88, 0x4b, 0x69, 0x89, 0x4a, 0xa7, 0xc4, 0xa4, 0x77, 0x63, 0x0a, 0x38,
		0x14, 0x91, 0x90, 0x06, 0x14, 0xc4, 0xa0, 0x31, 0x11, 0xa8, 0xc9, 0x6c, 0xe3, 0xb9, 0x92, 0x2b,
		0xf6, 0xa6, 0xe3, 0xe0, 0x9c, 0xbe, 0x0d, 0x09, 0x1f, 0x66, 0x34, 0x61, 0x24, 0xf4, 0x94, 0xe1,
		0x74, 0xc9, 0x52, 0x50, 0x66, 0x0e, 0xed, 0xb2, 0xf4, 0xf9, 0xc1, 0x64, 0xec, 0x93, 0x79, 0xfa,
		0x48, 0x98, 0x9c, 0x7f, 0xaf, 0xc3, 0xbf, 0xc3, 0xbf, 0x97, 0xcd, 0xbf, 0xcb, 0x9e, 0x8d, 0xb0,
		0xa0, 0x3f, 0x74, 0x27, 0xb0, 0x2c, 0xc8, 0xc4, 0x31, 0x28, 0x19, 0xa9, 0x2c, 0xb5, 0xea, 0x2a,
		0x53, 0x61, 0x65, 0xaa, 0xac, 0x4e, 0xa5, 0x8b, 0x91, 0xf7, 0x26, 0x3b, 0x06, 0x25, 0x52, 0xcf,
		0x81, 0x3b, 0x1a, 0x4f, 0x08, 0x73, 0x9f, 0xeb, 0x06, 0x60, 0xf1, 0x0e, 0xb4, 0xfb, 0xc4, 0x75,
		0xec, 0x13, 0x93, 0x89, 0xc7, 0x3e, 0x71, 0xe6, 0x66, 0x84, 0xc6, 0x9c, 0x10, 0x99, 0x15, 0x72,
		0xf3, 0x92, 0x08, 0x64, 0x4f, 0x63, 0xdb, 0x1a, 0x58, 0x41, 0x9c, 0x31, 0x98, 0xe6, 0x3c, 0x89,
		0x57, 0xd9, 0x4c, 0x39, 0x36, 0xdc, 0x8b, 0x78, 0x35, 0xd0, 0x96, 0xa8, 0x28, 0x33, 0x41, 0x2a,
		0x4d, 0x51, 0x46, 0x26, 0x49, 0xb5, 0x69, 0xca, 0xcc, 0x44, 0x65, 0x66, 0xaa, 0xb2, 0x33, 0x59,
		0xb4, 0xa6, 0x8b, 0xd8, 0x84, 0xcd, 0x53, 0x4b, 0xd4, 0x25, 0x2f, 0x6b, 0x2b, 0x9f, 0xbc, 0xda,
		0x65, 0x0d, 0xe2, 0xbc, 0x2d, 0xea, 0xd9, 0x25, 0x84, 0xd8, 0x63, 0x15, 0x26, 0xea, 0x23, 0x16,
		0xdc, 0xbb, 0xa6, 0x3a, 0x37, 0xb1, 0xed, 0x86, 0xf0, 0x15, 0xf0, 0x15, 0xf0, 0x15, 0x47, 0xe9,
		0x2b, 0x3e, 0x19, 0x8e, 0x69, 0x04, 0xae, 0xf7, 0x4c, 0x7f, 0x28, 0x55, 0x06, 0x7e, 0x68, 0x69,
		0x53, 0x4e, 0xb9, 0x61, 0xd3, 0x14, 0x9d, 0x3b, 0x98, 0xc8, 0x56, 0x72, 0xfe, 0xe0, 0x7c, 0x3a,
		0x54, 0x9e, 0x43, 0x98, 0xdc, 0xa5, 0x16, 0x9d, 0x41, 0xed, 0x06, 0xba, 0xcf, 0x02, 0x45, 0x46,
		0x42, 0x4b, 0xb6, 0x17, 0xcd, 0x67, 0xc7, 0x18, 0x49, 0x6d, 0xbf, 0xee, 0xbd, 0x4f, 0xb4, 0xf5,
		0x38, 0x1e, 0x30, 0x95, 0xf7, 0x68, 0x2e, 0xc6, 0x70, 0x15, 0x25, 0xf7, 0x79, 0x39, 0x53, 0xb5,
		0xa8, 0x54, 0x1d, 0x25, 0x98, 0xdc, 0x62, 0x36, 0xc9, 0x4a, 0x4e, 0xcd, 0x5b, 0x0b, 0xd7, 0xd5,
		0x9c, 0x5c, 0x98, 0xdc, 0x66, 0xa6, 0x19, 0xe4, 0x28, 0x66, 0x19, 0x59, 0x0e, 0x18, 0xf9, 0xf9,
		0x7f, 0x6a, 0xfc, 0x99, 0x02, 0x0f, 0x59, 0x0e, 0xac, 0xef, 0x33, 0xef, 0x81, 0x79, 0x19, 0x62,
		0xfd, 0xe9, 0x0d, 0x89, 0x7d, 0xfc, 0x2f, 0x6c, 0x68, 0x4c, 0xec, 0x80, 0xbc, 0xa3, 0x20, 0xf6,
		0x25, 0xe7, 0xd1, 0xff, 0xb4, 0x16, 0xb1, 0x8f, 0x68, 0x07, 0xd1, 0x0e, 0xa2, 0x1d, 0x64, 0xc6,
		0x94, 0xac, 0x7c, 0x6b, 0xfc, 0xd0, 0xd2, 0x0d, 0xd3, 0xf4, 0x98, 0xef, 0xeb, 0x8e, 0xab, 0xff,
		0xe5, 0x3a, 0x4c, 0x69, 0x9e, 0x4c, 0x81, 0x6c, 0x55, 0x5d, 0x62, 0xc9, 0x0d, 0x4e, 0x4e, 0xae,
		0x6b, 0xfa, 0x65, 0xff, 0xfb, 0x75, 0x5d, 0xbf, 0xec, 0xc7, 0x1f, 0xeb, 0xd1, 0xaf, 0xf8, 0x73,
		0xe3, 0xba, 0xa6, 0xb7, 0x66, 0x9f, 0xdb, 0xd7, 0x35, 0xbd, 0xdd, 0x3f, 0xed, 0xf5, 0xce, 0x4f,
		0xbf, 0x35, 0x5f, 0xf8, 0x2f, 0x3c, 0xf9, 0xe1, 0xba, 0xd7, 0x1b, 0x7f, 0xfb, 0xed, 0x25, 0xfc,
		0xf9, 0xf1, 0xa5, 0xff, 0xe6, 0xf4, 0x9d, 0x2a, 0x6d, 0x0e, 0x6f, 0xdc, 0xeb, 0x9d, 0xf7, 0x5f,
		0xd3, 0xab, 0x55, 0xff, 0xb0, 0x8f, 0x72, 0x26, 0xda, 0xc3, 0x63, 0x4f, 0x81, 0x67, 0xe8, 0x13,
		0xc7, 0x0f, 0x8c, 0x5b, 0x9b, 0xb8, 0xeb, 0x73, 0xec, 0x31, 0x9f, 0x39, 0x91, 0xd7, 0xa1, 0xd5,
		0x0a, 0x85, 0xc6, 0xe8, 0x83, 0x63, 0x5a, 0x03, 0x23, 0x60, 0xbe, 0x66, 0x68, 0xab, 0x78, 0x50,
		0x73, 0x5c, 0x93, 0x69, 0x96, 0xaf, 0x0d, 0x22, 0xa0, 0x31, 0xf1, 0x98, 0x79, 0x5e, 0x7e, 0x5f,
		0x1d, 0x4f, 0xd1, 0x21, 0x79, 0x6b, 0xee, 0x39, 0x3c, 0x9a, 0xf0, 0xac, 0x5f, 0x28, 0xdb, 0x43,
		0xdc, 0x4b, 0x99, 0xc8, 0x55, 0xdc, 0xee, 0xb5, 0x50, 0x3f, 0xbc, 0xf0, 0xb9, 0xaa, 0xa8, 0x82,
		0x49, 0x53, 0xd9, 0x04, 0xf6, 0xd9, 0x08, 0xee, 0xbf, 0x44, 0x6f, 0x32, 0xff, 0x18, 0x7d, 0xfa,
		0x79, 0xe1, 0x3d, 0x0e, 0x88, 0xe1, 0x64, 0x3e, 0x5d, 0xb4, 0xd5, 0x25, 0x1b, 0xea, 0x58, 0x29,
		0x4b, 0x4a, 0xc0, 0x76, 0x82, 0x2a, 0xb6, 0xcc, 0x5c, 0x2a, 0xd8, 0x4e, 0xa8, 0x56, 0x2e, 0xd8,
		0x4e, 0x16, 0x02, 0x3d, 0x90, 0x71, 0x71, 0x07, 0x4f, 0x43, 0xe6, 0x4d, 0xc3, 0x27, 0x6a, 0x2f,
		0x35, 0x97, 0x0d, 0x07, 0x05, 0x07, 0x05, 0x07, 0x75, 0xa4, 0x0e, 0x6a, 0x62, 0x39, 0x41, 0xb3,
		0xa1, 0xc0, 0x27, 0x5d, 0x10, 0x8a, 0xfc, 0xc3, 0x70, 0xee, 0x4a, 0x91, 0x42, 0xfa, 0x64, 0x39,
		0xea, 0x72, 0x36, 0xff, 0x31, 0xec, 0x09, 0x53, 0xb7, 0x05, 0x5e, 0xf9, 0xd5, 0x33, 0xa2, 0xee,
		0xfc, 0x5f, 0xac, 0x3b, 0x8b, 0x8a, 0x1e, 0x6a, 0xf3, 0xda, 0x63, 0x77, 0x46, 0x60, 0x3d, 0x84,
		0xef, 0x32, 0x34, 0x6c, 0x9f, 0xd1, 0xe7, 0x5e, 0x14, 0x64, 0xe4, 0x3e, 0x19, 0x4f, 0xea, 0xa7,
		0xb6, 0xd1, 0x6e, 0x63, 0x72, 0x8f, 0x3b, 0xb1, 0x76, 0x18, 0x3c, 0x7b, 0xb4, 0x49, 0x10, 0x90,
		0xe0, 0x81, 0x04, 0x4f, 0x45, 0xc2, 0xb6, 0xc8, 0x9c, 0x73, 0x9b, 0xf2, 0xb2, 0xa0, 0x7c, 0x2b,
		0xe6, 0x92, 0x2a, 0x22, 0xb9, 0xdb, 0x7c, 0xfd, 0x14, 0x9a, 0xc9, 0xcd, 0xb3, 0x5c, 0xcf, 0x0a,
		0x9e, 0x09, 0x28, 0x5d, 0x66, 0x92, 0xc0, 0xe7, 0x02, 0x3e, 0x97, 0xdc, 0xd3, 0x09, 0x25, 0xe3,
		0x73, 0xb9, 0x77, 0x6d, 0x53, 0x97, 0xd6, 0xc5, 0xb5, 0x75, 0xb8, 0x2c, 0x96, 0x86, 0xd5, 0xa5,
		0x06, 0x56, 0x97, 0xbc, 0xf2, 0x87, 0x60, 0x75, 0x29, 0x4a, 0x94, 0x45, 0xd8, 0x7f, 0x46, 0x97,
		0x5b, 0xa4, 0xcf, 0x29, 0x12, 0xe6, 0x12, 0x89, 0x73, 0x88, 0x84, 0x99, 0x58, 0x15, 0x39, 0x43,
		0x55, 0xb9, 0x42, 0xe5, 0x69, 0x24, 0x75, 0xe9, 0x23, 0xca, 0xb6, 0x14, 0x15, 0xb9, 0xc0, 0x64,
		0xca, 0x2e, 0x30, 0x65, 0xa4, 0xb9, 0x39, 0x79, 0x29, 0xfd, 0xbc, 0xc2, 0x6e, 0x99, 0xb0, 0x32,
		0xca, 0xbd, 0xd1, 0x43, 0xba, 0x15, 0xb9, 0xc0, 0x74, 0xc0, 0x74, 0xc0, 0x74, 0xc0, 0x74, 0xc0,
		0x74, 0xc0, 0x74, 0xc0, 0x74, 0xc0, 0x74, 0xc0, 0x74, 0x4a, 0xae, 0x14, 0x4d, 0x0c, 0x12, 0xb6,
		0x76, 0xd1, 0xb5, 0x72, 0x11, 0x7a, 0xa5, 0xa5, 0x36, 0x9f, 0x29, 0x26, 0x55, 0xd4, 0xa2, 0xa5,
		0x18, 0x78, 0x51, 0xb6, 0x60, 0x65, 0x03, 0xbd, 0x52, 0x8f, 0x7d, 0xde, 0xb8, 0xec, 0x55, 0xb6,
		0x36, 0xe2, 0xd0, 0xb7, 0x3d, 0xe5, 0x43, 0x3f, 0x75, 0x7b, 0x9e, 0xb3, 0x67, 0x2b, 0xf0, 0x8e,
		0xa7, 0xc7, 0x06, 0xae, 0x67, 0xea, 0x9e, 0x3b, 0x09, 0x98, 0xfc, 0xae, 0xe7, 0x92, 0x34, 0x9c,
		0x54, 0x85, 0x9d, 0xcf, 0xdc, 0x83, 0xe9, 0xb2, 0x9e, 0x54, 0xc5, 0x46, 0x63, 0x39, 0xa3, 0x36,
		0x2b, 0x20, 0x68, 0x16, 0xd8, 0xf8, 0xf8, 0xf7, 0x93, 0xc0, 0x74, 0x1f, 0x1d, 0x79, 0xc3, 0x93,
		0x48, 0x82, 0xd1, 0x81, 0xd1, 0x81, 0xd1, 0x81, 0xd1, 0xd9, 0x61, 0x74, 0xdc, 0x61, 0xa0, 0x8f,
		0x3d, 0x16, 0xbe, 0xac, 0x0c, 0xba, 0x9d, 0xdb, 0x9e, 0x15, 0x81, 0x30, 0x41, 0x30, 0x41, 0x30,
		0x41, 0x30, 0x41, 0xdb, 0x9f, 0x71, 0x1a, 0xc6, 0x2e, 0x9f, 0x42, 0x2a, 0x6f, 0x88, 0x36, 0x8b,
		0x45, 0x01, 0x2a, 0xcc, 0xd1, 0x91, 0x99, 0x23, 0xe9, 0x02, 0x54, 0xcb, 0x79, 0x30, 0x6c, 0xcb,
		0xa4, 0x69, 0x28, 0x99, 0xd3, 0x0a, 0x2e, 0x4a, 0xc5, 0xa1, 0x82, 0x19, 0xa9, 0x2d, 0xb5, 0xfa,
		0x2a, 0x53, 0x63, 0x65, 0xea, 0xac, 0x4e, 0xad, 0xe5, 0xd4, 0x5b, 0x52, 0xcd, 0xc9, 0xd4, 0x3d,
		0x11, 0x14, 0x79, 0xce, 0x45, 0x2d, 0xd5, 0x8d, 0x81, 0xc2, 0xc3, 0x05, 0x37, 0xdd, 0x09, 0xec,
		0x17, 0x05, 0x33, 0x1b, 0xaa, 0xcc, 0x87, 0x72, 0x33, 0xa2, 0xdc, 0x9c, 0xa8, 0x37, 0x2b, 0x34,
		0xe6, 0x85, 0xc8, 0xcc, 0xd0, 0x05, 0x3b, 0x5b, 0x57, 0xee, 0x67, 0xb5, 0x56, 0x41, 0x53, 0x74,
		0xf4, 0x89, 0x9a, 0x23, 0x4f, 0xd4, 0x1e, 0x75, 0x12, 0x1f, 0x3d, 0x12, 0x30, 0xc3, 0x53, 0xc1,
		0x97, 0x1a, 0x9d, 0x37, 0x62, 0x7a, 0xee, 0xb8, 0x52, 0x6c, 0x26, 0x6d, 0x65, 0xe7, 0x7e, 0xc4,
		0x2f, 0xdf, 0xd5, 0x1a, 0x0a, 0x06, 0x37, 0x9a, 0xb4, 0xae, 0x56, 0x3f, 0x6c, 0x36, 0xe5, 0xe2,
		0xb0, 0x53, 0x2e, 0x19, 0xa4, 0xc0, 0x1a, 0x31, 0x77, 0x12, 0x64, 0x81, 0x88, 0x66, 0xb7, 0x02,
		0x24, 0x02, 0x24, 0x02, 0x24, 0x3a, 0x52, 0x48, 0x04, 0x42, 0x30, 0xca, 0x65, 0x09, 0x42, 0xb0,
		0x54, 0x6b, 0x0f, 0x84, 0x60, 0x5b, 0xa6, 0xb6, 0x53, 0xab, 0xd5, 0x30, 0xbd, 0xd9, 0x61, 0x49,
		0x0d, 0x94, 0x60, 0xd4, 0xca, 0xa3, 0xe2, 0x7c, 0x11, 0xfa, 0x73, 0x45, 0x14, 0x78, 0x52, 0xe6,
		0x84, 0xef, 0xab, 0x11, 0x6e, 0x42, 0xe4, 0x80, 0x05, 0x55, 0x1c, 0x0d, 0x92, 0x2d, 0x1a, 0xdc,
		0x34, 0x0d, 0x68, 0x67, 0x21, 0xd5, 0xf0, 0x92, 0x91, 0xc1, 0x6d, 0xdc, 0xb6, 0xaf, 0x12, 0xeb,
		0xa9, 0xb2, 0x22, 0xf7, 0xf8, 0x2f, 0x62, 0x7a, 0xaf, 0xe9, 0xb3, 0xdf, 0x7c, 0x20, 0x5b, 0xdc,
		0xf9, 0x74, 0xab, 0x2f, 0x4f, 0x85, 0x3e, 0x70, 0xfd, 0x40, 0xb7, 0xad, 0x91, 0x15, 0xd0, 0xed,
		0x05, 0x6f, 0xbf, 0x05, 0x7a, 0xd8, 0x33, 0x4e, 0x67, 0x60, 0x63, 0xf8, 0x50, 0x37, 0x86, 0xd1,
		0x77, 0x9e, 0x2f, 0xf4, 0x54, 0xda, 0x77, 0x5e, 0x47, 0x13, 0x33, 0x7d, 0x3a, 0x41, 0x6d, 0xdf,
		0x79, 0xab, 0x71, 0xd9, 0xba, 0xec, 0x5c, 0x34, 0x2e, 0xdb, 0x98, 0xbb, 0xc3, 0x42, 0xec, 0x45,
		0x80, 0x69, 0x26, 0xb3, 0x8d, 0x67, 0xc5, 0x38, 0x6d, 0xf1, 0x1e, 0x00, 0x6a, 0x00, 0x6a, 0x00,
		0x6a, 0x00, 0x6a, 0x00, 0x6a, 0x00, 0x6a, 0x00, 0x6a, 0x00, 0x6a, 0x00, 0x6a, 0x29, 0x81, 0xda,
		0xbd, 0x3b, 0x56, 0x0c, 0xd3, 0xe6, 0x77, 0x00, 0x48, 0x03, 0x48, 0x03, 0x48, 0x03, 0x48, 0x03,
		0x48, 0x03, 0x48, 0x3b, 0x30, 0x90, 0x46, 0x7e, 0x3a, 0x1f, 0xd0, 0xd9, 0x51, 0xa2, 0xb3, 0xc0,
		0x62, 0xb7, 0x1e, 0x33, 0xfe, 0x64, 0x1e, 0x1d, 0x1e, 0x5b, 0x90, 0x09, 0x04, 0x06, 0x04, 0x06,
		0x04, 0x56, 0x50, 0x04, 0xf6, 0x69, 0x3a, 0x38, 0x2b, 0xf1, 0x13, 0x99, 0xfa, 0x6a, 0xc4, 0x2d,
		0x67, 0xb4, 0xad, 0x66, 0x6a, 0x5a, 0xcc, 0xe2, 0xd6, 0xb2, 0x91, 0xe5, 0xe8, 0x43, 0xcb, 0xb6,
		0x29, 0x6b, 0xec, 0xa2, 0xb6, 0xb2, 0x91, 0xf1, 0x44, 0x2e, 0xb8, 0x19, 0x91, 0x37, 0x1a, 0x8e,
		0xe9, 0x8e, 0x2a, 0xc5, 0x6a, 0x2c, 0x20, 0xef, 0x50, 0x9b, 0x8f, 0x1f, 0x69, 0x77, 0xda, 0x7c,
		0xbe, 0x49, 0xb1, 0xf4, 0x6c, 0x52, 0xba, 0x5a, 0xf3, 0x30, 0x8a, 0x77, 0x71, 0xe8, 0xa7, 0xf2,
		0xd2, 0xc1, 0x22, 0x52, 0xe1, 0x6e, 0xa8, 0x12, 0xcc, 0x8c, 0x15, 0xf7, 0x95, 0xc2, 0x05, 0x23,
		0xbb, 0x50, 0x14, 0x2f, 0x90, 0x8a, 0x08, 0x3f, 0x9e, 0x9a, 0x25, 0xc0, 0x37, 0xdd, 0xe9, 0x27,
		0x8d, 0x63, 0xc2, 0x66, 0x04, 0x59, 0x96, 0xc9, 0x3d, 0x57, 0xab, 0x1c, 0x5b, 0x96, 0xc9, 0x39,
		0xb4, 0x82, 0x84, 0x3d, 0xc2, 0x71, 0x8b, 0x4c, 0x9c, 0x42, 0x14, 0x97, 0xc8, 0xc6, 0x21, 0x64,
		0x71, 0x07, 0x59, 0x9c, 0x41, 0x17, 0x57, 0xa8, 0x35, 0x4a, 0xa2, 0x84, 0x38, 0x12, 0x0a, 0x42,
		0xa6, 0x28, 0x44, 0x81, 0x3f, 0x08, 0xe8, 0x32, 0x0c, 0xe8, 0x41, 0x40, 0x47, 0x1d, 0xa8, 0xd3,
		0x6d, 0x91, 0x10, 0x6c, 0x8d, 0x10, 0x6d, 0x89, 0x10, 0xa4, 0x2d, 0x28, 0xb7, 0x40, 0xa8, 0xfb,
		0x95, 0x95, 0x65, 0xcf, 0xe9, 0xb3, 0xe6, 0x14, 0xd4, 0x20, 0x94, 0x5b, 0x1b, 0xf3, 0xfe, 0xe2,
		0x76, 0xbb, 0xd9, 0x3e, 0xbe, 0xe9, 0x28, 0xd7, 0x81, 0x32, 0x59, 0x52, 0xe4, 0x5a, 0xa6, 0x1e,
		0xc8, 0xd8, 0xd2, 0x75, 0x38, 0x12, 0xcb, 0x03, 0x26, 0x01, 0x26, 0x39, 0x32, 0x4c, 0x42, 0x70,
		0xa0, 0x27, 0x21, 0xae, 0x99, 0x6d, 0x3c, 0xc8, 0x86, 0x09, 0x1a, 0xd1, 0x06, 0x03, 0xcd, 0xc6,
		0x02, 0xed, 0x86, 0x42, 0xa5, 0x16, 0x8e, 0x94, 0x31, 0x09, 0x5c, 0x8a, 0x5d, 0x98, 0x68, 0x57,
		0x82, 0x3d, 0x8d, 0x6d, 0x6b, 0x60, 0x05, 0x95, 0x7c, 0xf7, 0xb1, 0xc8, 0xb2, 0xfa, 0xf1, 0xe8,
		0x90, 0xf8, 0xf6, 0xf9, 0xd8, 0xc8, 0x72, 0xcb, 0x65, 0x9e, 0xe4, 0x2e, 0x58, 0xfa, 0x81, 0x80,
		0x61, 0x43, 0x9e, 0x51, 0x83, 0xc0, 0x46, 0x2d, 0x1e, 0x29, 0x98, 0xd8, 0x29, 0xe2, 0xf3, 0x1c,
		0x15, 0xf9, 0x4f, 0x0a, 0x9e, 0x0c, 0xb5, 0x1e, 0x34, 0xfd, 0xe0, 0x16, 0x5e, 0x9b, 0xfa, 0x47,
		0xb7, 0xc3, 0x20, 0xe4, 0xae, 0x69, 0x77, 0x16, 0x3e, 0x98, 0x05, 0xda, 0x51, 0x98, 0xbe, 0x93,
		0xdc, 0x9e, 0x42, 0x24, 0x44, 0x6c, 0x57, 0xa1, 0x86, 0x5d, 0x85, 0xcc, 0x03, 0x8d, 0xa3, 0xdb,
		0x55, 0x10, 0x06, 0xff, 0xc9, 0xcc, 0xc7, 0xb6, 0xc7, 0x72, 0x7d, 0xfd, 0xc9, 0xd3, 0xfd, 0x18,
		0x28, 0x0b, 0xac, 0x80, 0x19, 0xdc, 0x7f, 0x2b, 0x70, 0xed, 0x47, 0xe6, 0xdc, 0x45, 0x96, 0x30,
		0x73, 0x54, 0x41, 0x91, 0xbb, 0xa4, 0x2a, 0xd7, 0x26, 0x4f, 0x8e, 0xd1, 0x25, 0xc5, 0x64, 0x2a,
		0x59, 0x29, 0x72, 0x92, 0xc9, 0x10, 0xb7, 0x5b, 0x87, 0x3b, 0xc6, 0x59, 0x01, 0x23, 0x01, 0x05,
		0xfd, 0x6c, 0x04, 0x01, 0xf3, 0x1c, 0x61, 0x0d, 0xad, 0x5c, 0xf7, 0x7a, 0x8f, 0xbd, 0x9e, 0xde,
		0xeb, 0x9d, 0x77, 0xcf, 0x6e, 0xfe, 0xf5, 0xb7, 0x1f, 0xfe, 0xde, 0xeb, 0xbd, 0xf9, 0xb1, 0xd7,
		0xfb, 0xfe, 0xcf, 0xfe, 0x9b, 0x8a, 0x6a, 0x68, 0xa7, 0x12, 0x63, 0x08, 0xe5, 0x41, 0x57, 0x31,
		0x86, 0x40, 0xf2, 0x13, 0x18, 0x03, 0x18, 0xa3, 0x44, 0x18, 0x63, 0x96, 0x58, 0x8c, 0x23, 0xc8,
		0x69, 0x1c, 0x23, 0x83, 0x32, 0x04, 0xdc, 0x80, 0x5c, 0x32, 0x91, 0x26, 0x89, 0x18, 0x27, 0x0f,
		0xc7, 0x8d, 0xb1, 0x4c, 0x72, 0xa2, 0x1e, 0xcb, 0x18, 0x09, 0x9e, 0x63, 0x21, 0xbc, 0x7d, 0x2e,
		0x9d, 0x1f, 0x8c, 0x1f, 0x5a, 0x0a, 0x27, 0x45, 0x63, 0xd7, 0xd5, 0x6a, 0xc5, 0x4c, 0xc9, 0xbd,
		0xa2, 0xfd, 0x66, 0xca, 0x99, 0x0a, 0x0d, 0xdb, 0x4a, 0xc4, 0xaa, 0xf1, 0x7b, 0x96, 0xca, 0x47,
		0xcb, 0x0f, 0xae, 0x82, 0x80, 0xaf, 0x48, 0x29, 0x04, 0xd0, 0xef, 0x6d, 0x16, 0x1a, 0x31, 0x4e,
		0x30, 0x15, 0xe2, 0xc2, 0x85, 0x2b, 0xeb, 0x6f, 0x5b, 0xad, 0xce, 0x45, 0xab, 0x55, 0xbb, 0x68,
		0x5e, 0xd4, 0x2e, 0xdb, 0xed, 0x7a, 0xa7, 0xce, 0xb1, 0xe7, 0x5c, 0xf9, 0xdd, 0x33, 0x99, 0xc7,
		0xcc, 0x9f, 0xc2, 0x81, 0x70, 0x26, 0xb6, 0x4d, 0x3a, 0xbe, 0x82, 0xc9, 0x1e, 0xd2, 0x24, 0x0f,
		0x87, 0xc1, 0x20, 0x4a, 0xe9, 0xa4, 0xb3, 0x2e, 0xfb, 0x57, 0xf2, 0xee, 0x6f, 0xec, 0x99, 0x03,
		0xde, 0xb1, 0xa7, 0x19, 0xf3, 0x14, 0x83, 0x2d, 0x3b, 0xc8, 0xbb, 0x47, 0x77, 0xfb, 0x98, 0x6d,
		0xfe, 0x97, 0x2d, 0xa3, 0x98, 0x76, 0xf4, 0xe4, 0x46, 0x6d, 0xc7, 0x68, 0x89, 0x8e, 0xd2, 0xe6,
		0xd1, 0x59, 0x7f, 0xf7, 0x0d, 0xef, 0x5d, 0x09, 0x3c, 0xc3, 0xf1, 0xc7, 0xae, 0x17, 0xe8, 0x63,
		0xcf, 0x1d, 0x5a, 0x3b, 0xf6, 0x3a, 0xe6, 0x38, 0x7c, 0xed, 0x92, 0x2d, 0xe3, 0xb9, 0xbb, 0x5e,
		0x78, 0x2f, 0xba, 0x4e, 0x83, 0xa2, 0x39, 0xd1, 0x72, 0x5a, 0x54, 0xcc, 0x8d, 0x7e, 0xb9, 0x51,
		0x2e, 0x3f, 0x9a, 0xe5, 0x5b, 0xcb, 0xfb, 0xea, 0x67, 0x2b, 0x86, 0x6d, 0x78, 0xfb, 0x01, 0x5e,
		0x32, 0xbe, 0xf1, 0xd7, 0xf7, 0xbc, 0x53, 0xba, 0x02, 0xf1, 0xd4, 0x61, 0x15, 0x4f, 0x18, 0x25,
		0x18, 0x36, 0xf1, 0x86, 0x49, 0xc2, 0x61, 0x91, 0x70, 0x18, 0x24, 0x1e, 0xf6, 0xc8, 0xb9, 0x92,
		0xb4, 0x05, 0xd8, 0x53, 0x36, 0x78, 0x3d, 0xdd, 0x7a, 0x5a, 0x9b, 0xae, 0xa5, 0xab, 0xd3, 0x22,
		0x38, 0xae, 0x68, 0x9e, 0x3b, 0x8a, 0x17, 0x89, 0xde, 0x25, 0xa3, 0x76, 0xd1, 0x68, 0x5d, 0x3a,
		0x4a, 0x97, 0x8e, 0xce, 0xe5, 0xa3, 0x72, 0x5a, 0x74, 0xcf, 0x1d, 0x7d, 0x0b, 0x1f, 0xdb, 0xcf,
		0x79, 0x4c, 0x7f, 0x0a, 0xe8, 0x97, 0x06, 0x47, 0xb9, 0xc6, 0x9f, 0xd1, 0xa9, 0x72, 0xfc, 0x9a,
		0x36, 0xbf, 0x34, 0xe5, 0x50, 0xfe, 0xc2, 0x86, 0xc6, 0xc4, 0x0e, 0xb8, 0xd2, 0x98, 0x95, 0x66,
		0xba, 0x89, 0xef, 0x43, 0xd5, 0xa1, 0xea, 0xb9, 0xa9, 0x3a, 0x77, 0x47, 0x82, 0x40, 0x07, 0x82,
		0x60, 0xc7, 0x81, 0x40, 0xda, 0x50, 0x66, 0x57, 0x4e, 0xb6, 0x83, 0x80, 0x6c, 0x87, 0x48, 0x7e,
		0x67, 0x48, 0xa4, 0x44, 0x5b, 0x66, 0xb7, 0x6d, 0xbe, 0x91, 0x79, 0x00, 0x63, 0xa7, 0x28, 0x73,
		0xd7, 0xcf, 0xd2, 0x35, 0x4e, 0xc6, 0x63, 0x8f, 0xf9, 0xbe, 0xce, 0x1e, 0x18, 0x47, 0xea, 0x75,
		0xee, 0x1f, 0x97, 0xaf, 0xe7, 0x73, 0x50, 0x75, 0x38, 0x28, 0x38, 0x28, 0xd1, 0x10, 0x2a, 0xb9,
		0xc0, 0xb4, 0x7c, 0xa1, 0x72, 0xd3, 0x64, 0xc6, 0x67, 0x02, 0xb0, 0x3d, 0xaa, 0x68, 0x91, 0x93,
		0x2d, 0x76, 0xb2, 0x45, 0x4f, 0xb7, 0xf8, 0x05, 0x9d, 0x41, 0xe6, 0xdb, 0xa3, 0xbc, 0x81, 0x9a,
		0x60, 0xc0, 0xc6, 0x3f, 0x1c, 0x2f, 0xa5, 0xdc, 0x47, 0x59, 0x4b, 0xe7, 0x56, 0xa3, 0x64, 0x4c,
		0x55, 0xc8, 0x1f, 0xf2, 0xa6, 0xb1, 0xbf, 0xce, 0x6e, 0xfe, 0x39, 0xbe, 0xf7, 0xcd, 0x55, 0x78,
		0xef, 0x9b, 0x2f, 0xd3, 0x7b, 0xbf, 0x8f, 0x6e, 0x7d, 0x14, 0x5b, 0x2b, 0x5b, 0xa6, 0x81, 0x78,
		0x73, 0x65, 0xf3, 0x78, 0x0b, 0x6f, 0xaf, 0xec, 0xc8, 0xb4, 0xdf, 0x0e, 0xcd, 0xf4, 0xd9, 0xe5,
		0xf0, 0xcb, 0xc8, 0x2d, 0x23, 0xb7, 0xbc, 0x06, 0x88, 0x58, 0x30, 0xa5, 0xf3, 0x1b, 0x4d, 0xec,
		0xc0, 0x1a, 0xdb, 0x16, 0x07, 0xc3, 0xe7, 0x1c, 0x15, 0x6d, 0x92, 0x82, 0x04, 0x14, 0xf0, 0x3d,
		0x12, 0x50, 0xc5, 0x49, 0x40, 0x35, 0x90, 0x80, 0x42, 0x02, 0xaa, 0xd4, 0x09, 0xa8, 0x4d, 0x6e,
		0x46, 0xf7, 0x03, 0xc3, 0x31, 0x6f, 0x9f, 0x69, 0x9c, 0x56, 0x22, 0x0d, 0xce, 0x0b, 0xce, 0x0b,
		0xce, 0x0b, 0xce, 0x0b, 0xce, 0x0b, 0xce, 0x8b, 0xc6, 0x79, 0x8d, 0x2c, 0x47, 0xb7, 0x9c, 0x80,
		0x79, 0x0f, 0x86, 0xcd, 0xef, 0xac, 0x96, 0xae, 0xc6, 0xce, 0x09, 0x9c, 0x93, 0xa4, 0x73, 0xe2,
		0xde, 0x39, 0x99, 0x2d, 0x3e, 0x7d, 0xe4, 0x8b, 0xef, 0x9e, 0x2c, 0x0a, 0xc1, 0x0e, 0x8a, 0xa2,
		0xc5, 0x4e, 0xb6, 0xe8, 0xc9, 0x16, 0x3f, 0x9d, 0x12, 0x08, 0x3a, 0x84, 0xcc, 0x77, 0x50, 0x84,
		0x19, 0x39, 0x25, 0x98, 0x38, 0x25, 0x19, 0x38, 0x8b, 0xd2, 0xb5, 0xde, 0x44, 0xd7, 0x3a, 0x31,
		0x12, 0x5c, 0x1b, 0xe2, 0x76, 0xad, 0x56, 0x43, 0xdf, 0xba, 0xe4, 0x55, 0x45, 0xe8, 0xfa, 0x4e,
		0xfc, 0xe9, 0x84, 0xc2, 0x29, 0x4f, 0xe0, 0x94, 0xe1, 0x94, 0xe1, 0x94, 0xe1, 0x94, 0x37, 0x38,
		0xe5, 0x83, 0xf6, 0x18, 0x45, 0xf2, 0xcb, 0x70, 0xcd, 0x05, 0x76, 0xcd, 0x07, 0x52, 0x7e, 0x74,
		0x3b, 0x34, 0xab, 0x02, 0x09, 0x25, 0x4d, 0xb6, 0x14, 0xe6, 0xa7, 0xa1, 0x79, 0xf3, 0xc9, 0x72,
		0x3e, 0xcc, 0x6e, 0x9b, 0x53, 0xf6, 0x4d, 0x7c, 0xcb, 0x68, 0xa3, 0x14, 0x64, 0xe3, 0x90, 0x8d,
		0xcb, 0x2d, 0x1b, 0x37, 0x5d, 0x84, 0x34, 0x59, 0xb9, 0x05, 0x61, 0x08, 0x04, 0x10, 0x08, 0x20,
		0x10, 0x40, 0x20, 0x80, 0xec, 0x1c, 0xb2, 0x73, 0x08, 0x01, 0x24, 0xb3, 0x73, 0x33, 0xbf, 0x3a,
		0xa1, 0x74, 0xd2, 0xc8, 0xd6, 0xc1, 0x49, 0xc3, 0x49, 0xc3, 0x49, 0x23, 0x5b, 0x87, 0x6c, 0x1d,
		0x5c, 0xf5, 0x11, 0x65, 0xeb, 0x38, 0x13, 0x4f, 0xd4, 0x59, 0xbb, 0x2f, 0xd3, 0xbb, 0x1f, 0x69,
		0xcf, 0xe0, 0xfe, 0x46, 0x3a, 0x8a, 0x01, 0x57, 0xd1, 0x2f, 0x38, 0xe3, 0x1a, 0x4a, 0xd9, 0x31,
		0x18, 0x7f, 0x1d, 0x3d, 0x83, 0xe8, 0x19, 0x5c, 0xfd, 0xe2, 0xd8, 0x73, 0x67, 0x9d, 0x13, 0x81,
		0x67, 0xdd, 0xdd, 0x89, 0x74, 0x0c, 0x6e, 0x90, 0x81, 0x3c, 0x3a, 0xf2, 0xe8, 0x92, 0x4e, 0x9a,
		0x3b, 0x8f, 0x6e, 0x58, 0x12, 0x21, 0x79, 0x78, 0x31, 0x42, 0x70, 0x84, 0xe0, 0xe0, 0x01, 0xd9,
		0x66, 0xa3, 0x9b, 0x05, 0xc8, 0xc2, 0xd9, 0xa6, 0x25, 0xae, 0xe2, 0xe1, 0xc5, 0x62, 0x2a, 0x5e,
		0x87, 0x8a, 0x43, 0xc5, 0x55, 0xab, 0x38, 0xaf, 0xbf, 0x4b, 0x2e, 0x14, 0xe5, 0xc1, 0x5a, 0x5b,
		0x39, 0x62, 0x7c, 0x58, 0x92, 0xfe, 0x50, 0x5a, 0x69, 0x28, 0x94, 0x87, 0x58, 0x89, 0xa8, 0x94,
		0x89, 0x5c, 0xa9, 0xc8, 0x95, 0x8b, 0x5e, 0xc9, 0x24, 0x33, 0x56, 0xb9, 0x9f, 0x73, 0x2e, 0xea,
		0x67, 0x25, 0xfd, 0xad, 0xf8, 0xb0, 0xbd, 0x1c, 0xd4, 0x61, 0xb6, 0xeb, 0x49, 0x9e, 0x28, 0xf7,
		0x51, 0x5d, 0x8f, 0x51, 0xab, 0xfc, 0x78, 0x40, 0x3a, 0x1b, 0xf4, 0x6b, 0xf8, 0x2c, 0x37, 0x9f,
		0x93, 0x67, 0xf9, 0x1a, 0x3f, 0xca, 0xcd, 0x47, 0xd3, 0x2a, 0xc2, 0xe1, 0xb6, 0xf6, 0x9f, 0x9e,
		0x04, 0xbc, 0xfa, 0xd3, 0x03, 0xbc, 0x02, 0xbc, 0x02, 0xbc, 0x02, 0xbc, 0x02, 0xbc, 0x02, 0xbc,
		0x02, 0xbc, 0x3a, 0x76, 0x78, 0xc5, 0x8d, 0x07, 0xd4, 0xc1, 0xab, 0x3f, 0xbd, 0x0a, 0x36, 0xa6,
		0x85, 0xa6, 0x31, 0xab, 0x8d, 0xe9, 0x2d, 0x53, 0x97, 0x65, 0x5b, 0x89, 0xc7, 0x86, 0x1e, 0xf3,
		0xef, 0x25, 0x88, 0x5d, 0xd6, 0x24, 0xa8, 0x3c, 0x3b, 0xa6, 0x51, 0xc3, 0xe1, 0x31, 0x6a, 0xf0,
		0x01, 0xf6, 0xe2, 0xa4, 0xfd, 0x37, 0xe8, 0xcf, 0xd6, 0x2f, 0x4e, 0x38, 0xbc, 0x40, 0x7f, 0x26,
		0x3a, 0x74, 0x0d, 0xd0, 0x9f, 0x6d, 0x35, 0xf3, 0x19, 0x7a, 0xca, 0x47, 0xc3, 0x0a, 0xf4, 0xc0,
		0xd5, 0x3d, 0xe6, 0x07, 0xae, 0xc7, 0x24, 0x3c, 0xe6, 0x56, 0x49, 0x2a, 0x3d, 0x27, 0x1c, 0x27,
		0x1c, 0x27, 0x1c, 0x27, 0x4e, 0x5d, 0x3b, 0x26, 0xc7, 0x59, 0x6f, 0x5d, 0xb4, 0xde, 0x36, 0x3b,
		0xad, 0x0b, 0x38, 0x50, 0xd5, 0x0e, 0xb4, 0x64, 0x45, 0xd0, 0x69, 0x6a, 0x83, 0x69, 0xc2, 0x7b,
		0x15, 0x85, 0xd0, 0x77, 0xb6, 0x7b, 0x6b, 0xd8, 0xba, 0xc5, 0x71, 0x7c, 0xca, 0xfc, 0x92, 0x74,
		0x05, 0xd1, 0x35, 0x14, 0x44, 0xd3, 0x39, 0xea, 0xbc, 0x0a, 0xa2, 0x53, 0x3b, 0x62, 0x7e, 0x07,
		0xcc, 0xe1, 0x78, 0x39, 0x1d, 0x2e, 0x07, 0x6c, 0x10, 0x71, 0xb0, 0xa2, 0x11, 0xa9, 0xb4, 0x33,
		0x10, 0x77, 0x02, 0x3c, 0xbb, 0xd9, 0x22, 0x8e, 0x33, 0x19, 0x92, 0x4e, 0xbb, 0xdd, 0x6c, 0x97,
		0x67, 0x58, 0x88, 0x7c, 0x57, 0x5f, 0x81, 0x85, 0x1e, 0x59, 0xe6, 0xd8, 0xb5, 0x9c, 0xc0, 0x4f,
		0x6f, 0xa1, 0xe7, 0x97, 0xa0, 0x65, 0x05, 0x2d, 0x2b, 0xdb, 0x16, 0x94, 0x08, 0xe5, 0xd3, 0xf4,
		0x4a, 0xb4, 0xa7, 0x20, 0xb2, 0x97, 0x8c, 0xec, 0xf9, 0x8f, 0xab, 0x65, 0x7e, 0x60, 0x39, 0x62,
		0x7b, 0xb5, 0x0b, 0xe7, 0xdc, 0xcc, 0x85, 0xa0, 0xd8, 0x4a, 0xd1, 0x62, 0x27, 0x5b, 0xf4, 0x64,
		0x8b, 0x9f, 0x4e, 0x09, 0x04, 0xa3, 0xe8, 0xac, 0x8a, 0xad, 0xd2, 0x87, 0x73, 0x64, 0x61, 0x1e,
		0x51, 0x5e, 0x97, 0x4c, 0x71, 0x28, 0x14, 0x88, 0x58, 0x91, 0xa8, 0x14, 0x8a, 0x5c, 0xb1, 0xc8,
		0x15, 0x8c, 0x5e, 0xd1, 0xc4, 0x14, 0x4e, 0x22, 0x61, 0xa8, 0xd1, 0x16, 0x5c, 0x09, 0x53, 0xb7,
		0x48, 0xe4, 0xa5, 0x89, 0xf2, 0xd4, 0xf2, 0x79, 0x6b, 0xd2, 0x3c, 0x36, 0x55, 0xf8, 0xad, 0x3c,
		0x47, 0x4b, 0x9f, 0xb3, 0x25, 0x5a, 0xd6, 0xd2, 0xe1, 0xbd, 0x8a, 0xb0, 0xff, 0x10, 0xa6, 0xe3,
		0x55, 0x3e, 0x57, 0xf7, 0xb3, 0xaa, 0xc1, 0x14, 0xc0, 0x8e, 0x8e, 0x6b, 0x32, 0x12, 0x1c, 0x32,
		0x13, 0x04, 0x14, 0x02, 0x14, 0x02, 0x14, 0x22, 0xb8, 0x72, 0xac, 0xf1, 0x43, 0x4b, 0x37, 0x4c,
		0xd3, 0x63, 0xbe, 0xaf, 0x3b, 0xae, 0xfe, 0x97, 0xeb, 0x30, 0x8a, 0x2a, 0xf0, 0xb7, 0x12, 0x32,
		0x3e, 0x1b, 0x41, 0xc0, 0x3c, 0x47, 0x1a, 0x96, 0x54, 0x4e, 0x4e, 0xae, 0x6b, 0xfa, 0x65, 0xff,
		0xfb, 0x75, 0x5d, 0xbf, 0xec, 0xc7, 0x1f, 0xeb, 0xd1, 0xaf, 0xf8, 0x73, 0xe3, 0xba, 0xa6, 0xb7,
		0x66, 0x9f, 0xdb, 0xd7, 0x35, 0xbd, 0xdd, 0x3f, 0xed, 0xf5, 0xce, 0x4f, 0xbf, 0x35, 0x5f, 0xf8,
		0x2f, 0x3c, 0xf9, 0xe1, 0xba, 0xd7, 0x1b, 0x7f, 0xfb, 0xed, 0x25, 0xfc, 0xf9, 0xf1, 0xa5, 0xff,
		0xe6, 0xf4, 0x9d, 0xec, 0xaa, 0x0f, 0x6f, 0xd0, 0xeb, 0x9d, 0xf7, 0x5f, 0x57, 0x0e, 0xd2, 0x11,
		0x04, 0x13, 0xc7, 0x61, 0x34, 0x21, 0xe9, 0x5c, 0x14, 0x9c, 0x01, 0x9c, 0xc1, 0x91, 0x39, 0x83,
		0x4f, 0x86, 0x63, 0x1a, 0x81, 0xeb, 0x3d, 0x4b, 0x94, 0xc0, 0x22, 0xac, 0x2d, 0x51, 0x58, 0x5b,
		0x43, 0x58, 0x8b, 0xb0, 0x16, 0x61, 0xad, 0x42, 0x34, 0xa3, 0x34, 0x87, 0xcf, 0x9e, 0x02, 0xcf,
		0xd0, 0x27, 0x8e, 0x1f, 0x08, 0xb7, 0x3f, 0x87, 0x9e, 0xd4, 0x67, 0xce, 0x20, 0x17, 0x16, 0xe6,
		0x99, 0xa5, 0xff, 0xe0, 0x98, 0xd6, 0xc0, 0x08, 0x98, 0xaf, 0x19, 0xda, 0xc2, 0xf6, 0x99, 0x16,
		0xc6, 0xe5, 0x9a, 0xe5, 0x6b, 0x83, 0x08, 0x14, 0x4d, 0x3c, 0x66, 0x9e, 0x17, 0x0f, 0x87, 0xc4,
		0xa3, 0x57, 0x64, 0x24, 0xc2, 0x33, 0xbc, 0x87, 0x46, 0x5f, 0x5c, 0xba, 0x66, 0xdd, 0xa4, 0xb0,
		0x26, 0xf9, 0x54, 0x15, 0xdf, 0x51, 0xd6, 0x64, 0x8b, 0x42, 0x3f, 0xcd, 0x9e, 0x26, 0xf9, 0x74,
		0xf3, 0xcb, 0xc2, 0xd3, 0x14, 0x80, 0x10, 0x65, 0xe8, 0x7a, 0x8f, 0x86, 0x67, 0xea, 0xb6, 0x3f,
		0x16, 0xdf, 0xb3, 0x5f, 0x14, 0x82, 0x3d, 0x7b, 0xc5, 0x76, 0x14, 0x7b, 0xf6, 0xa2, 0xd6, 0x49,
		0x78, 0xcf, 0x7e, 0xb6, 0xbe, 0x6f, 0x0d, 0xc7, 0x7c, 0xb4, 0xcc, 0xc8, 0x3a, 0x49, 0x26, 0x4a,
		0xd6, 0x45, 0x22, 0x61, 0x82, 0x84, 0xc9, 0x91, 0x25, 0x4c, 0x90, 0xec, 0x40, 0xb2, 0x03, 0xc9,
		0x0e, 0xfe, 0xa9, 0x68, 0x35, 0x2e, 0x5b, 0x97, 0x9d, 0x8b, 0xc6, 0x25, 0x32, 0x1e, 0x07, 0x97,
		0xf1, 0x38, 0x13, 0x87, 0x27, 0x96, 0xab, 0x8f, 0x8c, 0x31, 0x1d, 0x36, 0x99, 0xca, 0x93, 0x03,
		0x26, 0x75, 0x00, 0x13, 0x00, 0x93, 0xb2, 0x01, 0x13, 0xd1, 0x48, 0x21, 0x11, 0x60, 0x39, 0xba,
		0x6d, 0xdc, 0x32, 0x5b, 0x7e, 0xae, 0xe7, 0x27, 0x2a, 0x4e, 0x25, 0x4a, 0xce, 0x8c, 0x5c, 0xbc,
		0x40, 0xa6, 0x9e, 0x94, 0x6a, 0xaa, 0x48, 0x5d, 0xa9, 0xd5, 0x56, 0x99, 0xfa, 0x2a, 0x53, 0x63,
		0x75, 0xea, 0x4c, 0xe4, 0xce, 0x25, 0xd7, 0x9e, 0x74, 0xfc, 0x41, 0x1f, 0x87, 0x10, 0xc6, 0x23,
		0xc4, 0x71, 0x09, 0x5d, 0x7c, 0xa2, 0x24, 0x4e, 0x59, 0x03, 0xc9, 0xf5, 0xce, 0x19, 0xad, 0x60,
		0x55, 0x20, 0x59, 0x1d, 0x58, 0x26, 0x0c, 0x64, 0x94, 0x04, 0x34, 0xeb, 0x81, 0x4d, 0xad, 0xde,
		0xc6, 0xac, 0x91, 0xd8, 0x46, 0x3a, 0x29, 0xfd, 0x9c, 0x42, 0x2e, 0x99, 0xa3, 0x53, 0xdd, 0x49,
		0x40, 0x0d, 0xc0, 0xe6, 0x22, 0x81, 0xc0, 0x80, 0xc0, 0x80, 0xc0, 0x48, 0x10, 0x18, 0x41, 0xc9,
		0x1c, 0xd0, 0x1c, 0xd0, 0x1c, 0xd0, 0x5c, 0x11, 0xd1, 0x5c, 0xbd, 0xd6, 0x7a, 0xdb, 0xbe, 0x00,
		0xa0, 0x03, 0xa0, 0x23, 0x02, 0x74, 0x96, 0xf3, 0x27, 0x31, 0x9e, 0x0b, 0x25, 0x02, 0xce, 0x01,
		0xce, 0x01, 0xce, 0x01, 0xce, 0x01, 0xce, 0x65, 0x08, 0xe7, 0x00, 0x0a, 0xca, 0x86, 0xe6, 0x08,
		0x3b, 0x2c, 0x80, 0xe5, 0xca, 0x8f, 0xe5, 0x32, 0xdd, 0x8f, 0x25, 0xe8, 0xd4, 0x48, 0x64, 0x49,
		0x77, 0x6c, 0xd0, 0xd9, 0xda, 0x8d, 0x1d, 0x1c, 0xcb, 0xd5, 0x17, 0xc4, 0x4d, 0x1c, 0x19, 0x41,
		0x30, 0x8a, 0xa6, 0x8e, 0x6c, 0x41, 0x18, 0xe7, 0x0c, 0x1c, 0x5b, 0x1d, 0x93, 0x68, 0x61, 0xb8,
		0x5c, 0x3f, 0x48, 0x22, 0x47, 0x49, 0x5f, 0xc8, 0x42, 0xd7, 0x42, 0x95, 0xa4, 0xe4, 0x49, 0x53,
		0xd0, 0x2e, 0xf2, 0x6b, 0xfc, 0x60, 0x1f, 0xfd, 0xf1, 0xec, 0xe3, 0x07, 0xf7, 0x93, 0x31, 0xae,
		0xe0, 0x6c, 0xbf, 0x0c, 0x96, 0x45, 0x01, 0xda, 0x85, 0xe6, 0xf3, 0x5f, 0x88, 0xe3, 0x93, 0xfd,
		0xb1, 0x08, 0x4d, 0xc4, 0xfc, 0x04, 0xe5, 0xf8, 0x7a, 0xb1, 0x1e, 0xa1, 0x1a, 0x7a, 0x84, 0x32,
		0xcf, 0x88, 0x1c, 0x5d, 0x8f, 0x90, 0x70, 0xd6, 0x41, 0x3e, 0xcb, 0x20, 0x91, 0x55, 0x90, 0xcc,
		0x22, 0x48, 0x78, 0x66, 0x8a, 0x2c, 0x01, 0x55, 0x8b, 0x01, 0x79, 0x38, 0x49, 0x17, 0x3e, 0xca,
		0xa4, 0xbe, 0x29, 0xa2, 0x7a, 0xca, 0x28, 0xbe, 0xc8, 0xc3, 0x5c, 0xcc, 0x2e, 0x6a, 0x65, 0xbe,
		0x78, 0x7a, 0x9a, 0xad, 0x9c, 0x43, 0x9e, 0x09, 0x81, 0x57, 0x86, 0x57, 0x3e, 0x58, 0xaf, 0x2c,
		0x7a, 0xaa, 0xba, 0xe0, 0x69, 0xea, 0x6a, 0x54, 0x7e, 0x16, 0xa3, 0xe8, 0xd3, 0xf0, 0x42, 0x50,
		0xe9, 0x97, 0xc5, 0x40, 0xed, 0xa1, 0xf6, 0x07, 0xab, 0xf6, 0x71, 0x4a, 0xc0, 0x72, 0x7d, 0xfd,
		0xc9, 0xd3, 0xfd, 0xc0, 0xb3, 0x9c, 0x3b, 0x19, 0x23, 0x20, 0x40, 0xa6, 0x59, 0xf9, 0xc8, 0x9c,
		0xbb, 0x28, 0x41, 0x51, 0x6e, 0x6c, 0x5e, 0x07, 0x36, 0x57, 0x8e, 0xcd, 0x5b, 0x00, 0xe6, 0xb2,
		0xc0, 0x5c, 0x40, 0x41, 0x65, 0x59, 0x6e, 0x2b, 0xd7, 0xbd, 0xde, 0x63, 0xaf, 0xa7, 0xf7, 0x7a,
		0xe7, 0xdd, 0xb3, 0x9b, 0x7f, 0xfd, 0xed, 0x87, 0xbf, 0xf7, 0x7a, 0x6f, 0x7e, 0xec, 0xf5, 0xbe,
		0xff, 0xb3, 0xff, 0xa6, 0x52, 0xca, 0xd0, 0xc2, 0x63, 0x0f, 0xcc, 0xf3, 0x99, 0x1c, 0x29, 0xd0,
		0xa2, 0x10, 0x90, 0x02, 0x01, 0x63, 0x1c, 0x1a, 0x29, 0xd0, 0x6c, 0x7d, 0x13, 0x92, 0x02, 0xad,
		0x8b, 0x04, 0x29, 0x10, 0x7a, 0xef, 0x73, 0x53, 0x3c, 0x49, 0xe7, 0x0d, 0x52, 0x20, 0x90, 0x02,
		0xe5, 0x85, 0x5c, 0xe9, 0x11, 0x2c, 0x41, 0xb4, 0x40, 0x1a, 0x35, 0xac, 0x4d, 0x05, 0x48, 0x81,
		0x32, 0xbf, 0xba, 0xc8, 0xa4, 0x40, 0x33, 0x2c, 0x41, 0x45, 0x0a, 0xb4, 0x22, 0x0f, 0xa4, 0x40,
		0x00, 0x26, 0x47, 0x06, 0x4c, 0x40, 0x0a, 0xa4, 0x5a, 0x3d, 0x29, 0xd5, 0x54, 0x91, 0xba, 0x52,
		0xab, 0xad, 0x32, 0xf5, 0x55, 0xa6, 0xc6, 0xea, 0xd4, 0x99, 0xc8, 0x9d, 0xa3, 0xef, 0x28, 0xbb,
		0xb8, 0x84, 0x2e, 0x3e, 0x51, 0x12, 0xa7, 0xac, 0x81, 0x64, 0xb4, 0x91, 0x53, 0x06, 0x32, 0x4a,
		0x02, 0x9a, 0xf5, 0xc0, 0x06, 0xa4, 0x40, 0x54, 0xb6, 0x91, 0x4e, 0x0a, 0x48, 0x81, 0x40, 0x0a,
		0x04, 0x04, 0x06, 0x04, 0xa6, 0x02, 0x81, 0xa1, 0x8b, 0x1c, 0x68, 0x0e, 0x68, 0xee, 0x40, 0xd1,
		0x1c, 0x48, 0x81, 0x00, 0xe8, 0x48, 0x01, 0x1d, 0x48, 0x81, 0x00, 0xe7, 0x00, 0xe7, 0x00, 0xe7,
		0x00, 0xe7, 0x4a, 0x0f, 0xe7, 0x00, 0x0a, 0xca, 0x86, 0xe6, 0x40, 0x0a, 0x04, 0x2c, 0x27, 0x7b,
		0x25, 0x48, 0x81, 0x36, 0x7b, 0xa6, 0x45, 0x4a, 0x9a, 0xe5, 0xea, 0x0b, 0x90, 0x02, 0x65, 0x4f,
		0x0a, 0x94, 0x62, 0x06, 0x40, 0x0a, 0x94, 0x6e, 0x84, 0x8b, 0x4c, 0x0a, 0xb4, 0xd0, 0xb5, 0x50,
		0x25, 0x29, 0x79, 0xd2, 0x14, 0x90, 0xc2, 0xfc, 0x11, 0x3f, 0xd8, 0x47, 0x7f, 0x3c, 0xfb, 0x08,
		0x52, 0xa0, 0xcc, 0x96, 0x45, 0x01, 0x48, 0x81, 0xe6, 0xf3, 0x5f, 0x04, 0x52, 0x20, 0x5f, 0xcc,
		0x6b, 0x24, 0x7e, 0x6e, 0x7a, 0x3d, 0x7a, 0x84, 0x14, 0xbb, 0x67, 0xf4, 0x08, 0x89, 0x9a, 0x24,
		0xe1, 0x1e, 0xa1, 0x3b, 0xdb, 0xbd, 0x35, 0x6c, 0x11, 0xca, 0xac, 0xb5, 0xb5, 0x33, 0x17, 0x85,
		0x9e, 0x20, 0x94, 0xde, 0xe6, 0x9e, 0x5a, 0x44, 0x4f, 0x10, 0x7a, 0x82, 0xd4, 0xa6, 0xf1, 0xd0,
		0x13, 0x54, 0xa8, 0xf4, 0x1c, 0xda, 0x81, 0x54, 0x85, 0xd1, 0x99, 0xb4, 0x03, 0x39, 0xae, 0xc9,
		0x48, 0x70, 0xc8, 0x4c, 0x10, 0x50, 0x08, 0x50, 0x08, 0x50, 0x88, 0xe0, 0xca, 0xb1, 0xc6, 0x0f,
		0x2d, 0xdd, 0x30, 0x4d, 0x8f, 0xf9, 0xbe, 0xee, 0xb8, 0xfa, 0x5f, 0xae, 0xc3, 0x08, 0x30, 0x89,
		0x08, 0x3f, 0xd1, 0x5c, 0x33, 0x24, 0x69, 0x50, 0x12, 0x41, 0x27, 0x27, 0xd7, 0x35, 0xfd, 0xb2,
		0xff, 0xfd, 0xba, 0xae, 0x5f, 0xf6, 0xe3, 0x8f, 0xf5, 0xe8, 0x57, 0xfc, 0xb9, 0x71, 0x5d, 0xd3,
		0x5b, 0xb3, 0xcf, 0xed, 0xeb, 0x9a, 0xde, 0xee, 0x9f, 0xf6, 0x7a, 0xe7, 0xa7, 0xdf, 0x9a, 0x2f,
		0xfc, 0x17, 0x9e, 0xfc, 0x70, 0xdd, 0xeb, 0x8d, 0xbf, 0xfd, 0xf6, 0x12, 0xfe, 0xfc, 0xf8, 0xd2,
		0x7f, 0x73, 0xfa, 0x4e, 0x76, 0xd5, 0x87, 0x37, 0xe8, 0xf5, 0xce, 0xfb, 0xaf, 0x2b, 0x07, 0xe9,
		0x08, 0x82, 0x89, 0xe3, 0x30, 0x9a, 0x90, 0x74, 0x2e, 0x0a, 0xce, 0x00, 0xce, 0xe0, 0xc8, 0x9c,
		0x01, 0x41, 0x55, 0x0b, 0xc2, 0xda, 0x32, 0x85, 0xb5, 0xa0, 0xba, 0x40, 0x58, 0x8b, 0xb0, 0x56,
		0x25, 0x9a, 0x51, 0x9a, 0xc3, 0x27, 0xa8, 0x16, 0x91, 0xaf, 0x12, 0x21, 0xb0, 0xf4, 0x8b, 0x35,
		0x09, 0xf1, 0xce, 0x19, 0x71, 0x35, 0x88, 0x22, 0x08, 0x42, 0x51, 0xfd, 0xa1, 0x16, 0x84, 0xa4,
		0x1c, 0xd9, 0x43, 0x23, 0xa7, 0x3f, 0x84, 0xed, 0x79, 0xa1, 0x2d, 0x64, 0x4d, 0xc1, 0xce, 0xfc,
		0x54, 0x77, 0x0a, 0xb0, 0x2b, 0x3f, 0x0d, 0xce, 0xe4, 0x98, 0xc2, 0x17, 0x85, 0x80, 0x27, 0x5c,
		0xb1, 0xe1, 0xc4, 0xfe, 0xbc, 0xa8, 0x4d, 0x92, 0xe7, 0x09, 0x27, 0xa0, 0x06, 0x57, 0xa5, 0xf3,
		0xaf, 0x08, 0x47, 0x2c, 0x5c, 0x62, 0xa2, 0x27, 0x00, 0x54, 0x3e, 0x5a, 0x7e, 0x70, 0x15, 0x04,
		0x7c, 0xa5, 0x10, 0x61, 0x2c, 0xf6, 0xde, 0x66, 0xe1, 0x22, 0xe2, 0x04, 0xd7, 0x61, 0xe8, 0xb0,
		0x70, 0x65, 0xfd, 0x6d, 0xab, 0xd5, 0xb9, 0x68, 0xb5, 0x6a, 0x17, 0xcd, 0x8b, 0xda, 0x65, 0xbb,
		0x5d, 0xef, 0xf0, 0xb0, 0x42, 0x54, 0x7e, 0xf7, 0x4c, 0xe6, 0x31, 0xf3, 0xa7, 0xf0, 0xf5, 0x9d,
		0x89, 0x6d, 0x93, 0x8e, 0xaa, 0xa0, 0x4f, 0x54, 0xe2, 0x0b, 0x2b, 0x3c, 0x95, 0x5b, 0xa4, 0xce,
		0x2f, 0x9d, 0x55, 0xd8, 0xbf, 0x9e, 0x77, 0x7f, 0x63, 0xcf, 0x9c, 0xf0, 0xce, 0x05, 0xe5, 0x1c,
		0xa4, 0x18, 0x7a, 0x9a, 0x21, 0xdf, 0x3d, 0xd2, 0xdb, 0xc7, 0x6f, 0xc7, 0xd8, 0xa5, 0xde, 0x20,
		0xe4, 0xdc, 0x08, 0x4c, 0x89, 0x03, 0x52, 0xfb, 0x7d, 0x1e, 0x3f, 0x2f, 0xe8, 0xd7, 0x79, 0xfd,
		0xb8, 0xb0, 0xdf, 0x16, 0xf6, 0xd3, 0xe2, 0x7e, 0x59, 0x4e, 0xb7, 0x52, 0xfb, 0x59, 0xd9, 0x8d,
		0x2e, 0x9e, 0x0d, 0x2d, 0xee, 0x8d, 0xab, 0x92, 0x6c, 0x50, 0xf1, 0x6c, 0x44, 0xf5, 0x45, 0x0d,
		0xc2, 0x2b, 0x8e, 0x65, 0x90, 0xd6, 0xb4, 0xca, 0x9b, 0xd4, 0x1d, 0x23, 0x24, 0x63, 0x40, 0x37,
		0x8f, 0xe3, 0xfa, 0x18, 0x2c, 0xff, 0xcd, 0xca, 0x68, 0xa4, 0x49, 0x24, 0x55, 0xfc, 0xc0, 0x08,
		0x26, 0xfe, 0xd6, 0x15, 0xb9, 0x63, 0xec, 0x66, 0x8a, 0x63, 0xb2, 0xb1, 0xc7, 0x06, 0x46, 0xc0,
		0x76, 0x19, 0xd8, 0xb4, 0x96, 0x6a, 0xd1, 0x42, 0x4d, 0x1f, 0x6d, 0x8f, 0xa6, 0xf3, 0x5a, 0xa6,
		0x25, 0x8b, 0xb4, 0xf0, 0xec, 0xbc, 0x2b, 0xef, 0xd5, 0xee, 0x95, 0xbd, 0x3a, 0x17, 0x7b, 0x56,
		0x24, 0xef, 0x4a, 0xdc, 0x30, 0x2a, 0x1c, 0xeb, 0x6d, 0xf9, 0x65, 0xe7, 0xaf, 0xb2, 0xf0, 0xd0,
		0x15, 0xdf, 0x19, 0xad, 0x73, 0xf1, 0xce, 0xa3, 0x90, 0xf0, 0x5f, 0x57, 0x5e, 0x71, 0x73, 0x9d,
		0xfb, 0x56, 0x7f, 0xb9, 0xcb, 0x3f, 0x2e, 0xdd, 0x47, 0x37, 0xee, 0x98, 0x13, 0x6c, 0x71, 0x89,
		0xfb, 0x16, 0x56, 0x6a, 0x97, 0x97, 0x7a, 0x21, 0x2d, 0x2d, 0xa0, 0x95, 0xe7, 0xe3, 0x54, 0xd0,
		0x6d, 0xd5, 0xda, 0x15, 0xc3, 0x1c, 0x59, 0x8e, 0xe5, 0x07, 0xde, 0x6e, 0x1b, 0x96, 0x0c, 0xd3,
		0xca, 0xf7, 0xb7, 0x3c, 0xf8, 0xee, 0x46, 0x84, 0xbd, 0xc0, 0x26, 0x0d, 0xa0, 0x49, 0x3f, 0x71,
		0x32, 0x96, 0x21, 0x15, 0x76, 0x91, 0xb3, 0x0c, 0xfb, 0x26, 0x56, 0xcc, 0x2f, 0xed, 0x2b, 0xcf,
		0xaf, 0x98, 0x6c, 0x68, 0x4c, 0xec, 0x40, 0x1f, 0xb8, 0xa3, 0xd1, 0xc4, 0xb1, 0x02, 0x8b, 0xf9,
		0xe9, 0x71, 0xee, 0xa6, 0x8b, 0xd3, 0x61, 0xde, 0x7a, 0x9e, 0x98, 0x37, 0xf5, 0x52, 0x29, 0x29,
		0xec, 0x4d, 0xbb, 0x94, 0x68, 0x90, 0x6f, 0xda, 0x0e, 0x90, 0xb5, 0xd5, 0xf2, 0x9c, 0x7e, 0x3c,
		0xb7, 0x2d, 0xb8, 0xb4, 0xc7, 0x56, 0x72, 0xb6, 0x44, 0x71, 0xa7, 0x5a, 0x45, 0x52, 0xac, 0xe2,
		0xcb, 0x51, 0x36, 0xab, 0x2a, 0x9d, 0x4d, 0x95, 0xce, 0xa2, 0x4a, 0x2d, 0x57, 0x35, 0xe9, 0x3f,
		0xde, 0x46, 0xa6, 0x4a, 0xb2, 0x06, 0x25, 0x37, 0x12, 0x56, 0xe4, 0x1c, 0xc1, 0x5e, 0x82, 0xf0,
		0x82, 0x3f, 0x92, 0xed, 0x04, 0x51, 0x85, 0x38, 0xa2, 0x1d, 0x05, 0x1c, 0x36, 0x2a, 0x2a, 0x07,
		0x87, 0x8d, 0xee, 0x1f, 0xe2, 0xc6, 0x5b, 0x9c, 0x36, 0x2a, 0x79, 0x55, 0x11, 0xce, 0xea, 0x74,
		0x1f, 0x1d, 0xe6, 0x89, 0x3b, 0xe6, 0xf8, 0x72, 0xf8, 0x63, 0xf8, 0xe3, 0x03, 0xf7, 0xc7, 0x5f,
		0xc2, 0xf7, 0x8b, 0x56, 0xbb, 0x6e, 0x0c, 0x06, 0xcc, 0xf7, 0x65, 0x5c, 0xb3, 0xc0, 0x41, 0xcd,
		0x95, 0xf7, 0xce, 0x64, 0x24, 0xbe, 0x78, 0xbe, 0xba, 0x5f, 0x62, 0x40, 0x21, 0x55, 0x2e, 0x5e,
		0x8b, 0x66, 0xda, 0xf4, 0x74, 0x11, 0xb5, 0x5f, 0x92, 0x54, 0x8f, 0x24, 0x3d, 0xfb, 0x01, 0x1b,
		0x4d, 0x85, 0x65, 0xdb, 0x8a, 0xe5, 0x7e, 0x88, 0x96, 0xad, 0x0c, 0x7d, 0x50, 0x32, 0x0c, 0x52,
		0x9e, 0x6b, 0x79, 0x10, 0xba, 0x5a, 0xbd, 0x98, 0xd5, 0xb2, 0x4a, 0x7c, 0xcf, 0xd8, 0xb3, 0x1e,
		0x2c, 0x9b, 0x99, 0x77, 0x12, 0x91, 0xe1, 0x82, 0x0c, 0x78, 0x21, 0x78, 0xa1, 0x63, 0xf0, 0x42,
		0xb1, 0xff, 0xd1, 0x6d, 0xf6, 0x20, 0x74, 0x6e, 0xc8, 0x61, 0x78, 0x21, 0x8f, 0x19, 0xa6, 0xee,
		0x3a, 0xf6, 0xb3, 0xb4, 0x17, 0x8a, 0x24, 0x3d, 0x7a, 0x56, 0xc0, 0x4a, 0xe7, 0x83, 0xe6, 0x83,
		0x20, 0xe7, 0x83, 0x16, 0x86, 0xe0, 0xb8, 0x3c, 0xd0, 0x43, 0x2b, 0xd1, 0x26, 0xcb, 0x0f, 0xc4,
		0xbd, 0xd0, 0x8a, 0x1c, 0x78, 0x22, 0x78, 0x22, 0xe4, 0x27, 0xf7, 0xe5, 0x27, 0x0b, 0xa1, 0xff,
		0xc6, 0xc0, 0xd6, 0x03, 0x91, 0xd1, 0x58, 0xd0, 0xfd, 0x44, 0x06, 0xf4, 0x1e, 0x7a, 0x7f, 0x04,
		0x08, 0xd4, 0x18, 0x1c, 0x25, 0xee, 0xac, 0xcf, 0x2a, 0x52, 0x65, 0x20, 0x67, 0x63, 0x2a, 0xa4,
		0x53, 0x3a, 0xb0, 0x19, 0xbd, 0xb9, 0xd4, 0xde, 0x4a, 0xfc, 0xde, 0x5d, 0xad, 0x71, 0x4c, 0x08,
		0xb3, 0x43, 0x84, 0x30, 0x3b, 0x40, 0x98, 0xf0, 0x34, 0x40, 0x98, 0xa5, 0x43, 0x98, 0x1d, 0x02,
		0x84, 0xd9, 0x01, 0xc2, 0x84, 0xde, 0x03, 0x61, 0x02, 0x61, 0x02, 0x61, 0x02, 0x61, 0xae, 0x79,
		0x18, 0x8b, 0x3d, 0x4a, 0x96, 0x57, 0xce, 0x45, 0xc0, 0xbf, 0xc0, 0xbf, 0x00, 0x57, 0xe6, 0x85,
		0x2b, 0x55, 0x70, 0x35, 0x08, 0x95, 0x4e, 0x83, 0xac, 0x61, 0xbb, 0xaa, 0x28, 0x20, 0x6b, 0x58,
		0x56, 0xb9, 0x6a, 0xf8, 0xc7, 0xea, 0x72, 0xf7, 0x58, 0x75, 0x43, 0x1b, 0x51, 0x55, 0xb4, 0xd3,
		0x43, 0xdb, 0xdd, 0x98, 0x18, 0x02, 0xb0, 0xab, 0xf0, 0x61, 0x7e, 0x1e, 0xde, 0xdd, 0x84, 0x7f,
		0xb8, 0xb9, 0x5a, 0x7a, 0x96, 0x9b, 0x5f, 0xe2, 0xfb, 0xfe, 0x3c, 0x7f, 0x94, 0xd5, 0xbf, 0x7a,
		0x3e, 0x3c, 0x32, 0x07, 0xb1, 0x39, 0x92, 0xe3, 0x74, 0x10, 0x98, 0x09, 0x15, 0xdc, 0x0e, 0xcc,
		0x19, 0x78, 0xcf, 0xe3, 0x80, 0x99, 0x62, 0x1d, 0x70, 0x9b, 0x2f, 0x47, 0x0f, 0x1c, 0x7a, 0xe0,
		0xd2, 0x2e, 0x37, 0x81, 0x2e, 0xb8, 0x4d, 0x42, 0xd0, 0x07, 0x87, 0x3e, 0x38, 0x12, 0x0c, 0x80,
		0x3e, 0x38, 0x44, 0x6b, 0x88, 0xd6, 0x32, 0x89, 0xd6, 0x62, 0x0c, 0x66, 0xb9, 0xbe, 0xfe, 0xe4,
		0xe9, 0xf9, 0x34, 0xc5, 0xc9, 0x9e, 0x6c, 0x51, 0xb9, 0xee, 0xf5, 0x1e, 0x7b, 0x3d, 0xbd, 0xd7,
		0x3b, 0xef, 0x9e, 0xdd, 0xfc, 0xeb, 0x6f, 0x3f, 0xfc, 0xbd, 0xd7, 0x7b, 0xf3, 0x63, 0xaf, 0xf7,
		0xfd, 0x9f, 0xfd, 0x37, 0x15, 0x34, 0x0d, 0xc1, 0x78, 0xc1, 0x78, 0xa1, 0x69, 0x68, 0xbf, 0xe9,
		0x42, 0xd3, 0x10, 0x9a, 0x86, 0x12, 0x39, 0x68, 0x1a, 0x42, 0xd3, 0x10, 0xbc, 0x10, 0xbc, 0x50,
		0x6a, 0x2f, 0x84, 0xa6, 0x21, 0x34, 0x0d, 0xc5, 0x22, 0xd0, 0x34, 0x24, 0xe9, 0x81, 0xd0, 0x34,
		0x04, 0x4f, 0x04, 0x4f, 0x24, 0x34, 0xff, 0x68, 0x1a, 0x42, 0xd3, 0x10, 0xf4, 0x5e, 0x43, 0x49,
		0xe7, 0xd1, 0xe0, 0x4e, 0x94, 0x74, 0xa2, 0xa4, 0x93, 0xdf, 0xc3, 0xa0, 0x69, 0x08, 0x9e, 0x06,
		0x9e, 0xe6, 0x78, 0x11, 0x26, 0x9a, 0x86, 0xa0, 0xf7, 0xd0, 0x7b, 0x20, 0x4c, 0x20, 0x4c, 0x20,
		0x4c, 0x34, 0x0d, 0xc1, 0xbf, 0xc0, 0xbf, 0x00, 0x57, 0x4a, 0x7d, 0x13, 0x4d, 0x43, 0xfb, 0x84,
		0x1d, 0x62, 0xd3, 0xd0, 0xc6, 0xce, 0x8b, 0xaa, 0x78, 0x69, 0xbc, 0x26, 0xd9, 0xae, 0xf2, 0x7e,
		0x76, 0xe7, 0xc5, 0xd6, 0xa1, 0xb5, 0xbf, 0x3c, 0xce, 0xe6, 0x21, 0x91, 0x2e, 0x19, 0x15, 0xf3,
		0xa1, 0xa2, 0x81, 0x28, 0x8c, 0x42, 0x3b, 0xba, 0x64, 0x1b, 0xd1, 0x2e, 0x21, 0x68, 0x26, 0x42,
		0x33, 0x11, 0xdf, 0xd2, 0x13, 0x68, 0x29, 0xda, 0x2e, 0x0a, 0x8d, 0x45, 0x68, 0x2c, 0x22, 0xc1,
		0x09, 0x68, 0x2c, 0x42, 0x44, 0x87, 0x88, 0x2e, 0x93, 0x88, 0x0e, 0x8d, 0x45, 0x2b, 0xff, 0xa1,
		0xb1, 0x08, 0xc6, 0x0b, 0xc6, 0xab, 0x1c, 0xc6, 0x0b, 0x8d, 0x45, 0x68, 0x2c, 0x5a, 0x4e, 0x02,
		0xa0, 0xb1, 0x48, 0xd6, 0xf7, 0xa0, 0xb1, 0x08, 0x5e, 0x08, 0x5e, 0x88, 0xdb, 0x0b, 0xa1, 0xb1,
		0x08, 0x8d, 0x45, 0xb1, 0x08, 0x34, 0x16, 0x49, 0x7a, 0x20, 0x34, 0x16, 0xc1, 0x13, 0xc1, 0x13,
		0x09, 0xcd, 0x3f, 0x1a, 0x8b, 0xd0, 0x58, 0x04, 0xbd, 0xd7, 0x50, 0xf6, 0x79, 0x34, 0xb8, 0x13,
		0x65, 0x9f, 0x28, 0xfb, 0xe4, 0xf7, 0x30, 0x68, 0x2c, 0x82, 0xa7, 0x81, 0xa7, 0x39, 0x5e, 0x84,
		0x89, 0xc6, 0x22, 0xe8, 0x3d, 0xf4, 0x1e, 0x08, 0x13, 0x08, 0x13, 0x08, 0x13, 0x8d, 0x45, 0xf0,
		0x2f, 0xf0, 0x2f, 0xc0, 0x95, 0x52, 0xdf, 0x44, 0x63, 0xd1, 0x3e, 0x61, 0x87, 0xd8, 0x58, 0xb4,
		0xa3, 0x17, 0xa3, 0x2a, 0x5b, 0x26, 0xaf, 0x49, 0x36, 0xb5, 0x84, 0x3a, 0xd9, 0xd9, 0xd8, 0x69,
		0xb4, 0xf9, 0x5f, 0x8e, 0xb3, 0xdd, 0x48, 0xbc, 0x9b, 0x46, 0xd9, 0xfc, 0x08, 0x77, 0x1e, 0xbd,
		0xe2, 0x18, 0xef, 0xb4, 0xe3, 0x2c, 0x39, 0xbe, 0x3b, 0xc6, 0x50, 0x62, 0xec, 0x36, 0x8f, 0xd0,
		0xfa, 0xfb, 0x6f, 0x78, 0xf7, 0x4a, 0xf4, 0xb8, 0x5b, 0x5f, 0x39, 0xf1, 0x47, 0xf1, 0xd7, 0xb6,
		0x8c, 0xdd, 0xee, 0x06, 0x96, 0xbd, 0x40, 0x2a, 0x0d, 0x60, 0xe2, 0x07, 0x46, 0x69, 0x01, 0x10,
		0x37, 0xd0, 0xe1, 0x06, 0x34, 0x42, 0xc0, 0x85, 0x6f, 0xf5, 0xee, 0x6b, 0x10, 0xa9, 0x30, 0xe7,
		0xce, 0x72, 0x98, 0x6e, 0x99, 0x3c, 0xe7, 0x73, 0xcd, 0x2e, 0x41, 0x1b, 0x1d, 0xda, 0xe8, 0x36,
		0x7f, 0xd1, 0x76, 0x07, 0x86, 0xcd, 0xdf, 0x32, 0x17, 0x5f, 0xc6, 0xd7, 0x1e, 0x57, 0x43, 0x7b,
		0x1c, 0xda, 0xe3, 0x88, 0xc2, 0x2d, 0xf1, 0x30, 0x8b, 0x33, 0xbc, 0x4a, 0x81, 0x0e, 0x53, 0x98,
		0x2a, 0x8f, 0x8d, 0xdc, 0x20, 0x45, 0x4f, 0xf4, 0xda, 0xeb, 0xcd, 0x2e, 0x44, 0x23, 0x2a, 0x34,
		0x8d, 0x44, 0xd3, 0xb8, 0x1b, 0x51, 0xe3, 0x15, 0x28, 0x9e, 0xf4, 0x9b, 0x5e, 0x2f, 0x96, 0xf1,
		0xab, 0x23, 0xe3, 0x87, 0x8c, 0x5f, 0x36, 0x19, 0x3f, 0x5e, 0xc5, 0x48, 0x2e, 0x1c, 0xbb, 0x9e,
		0xf8, 0x86, 0xc4, 0xbc, 0xc1, 0x24, 0x94, 0x22, 0x38, 0xc8, 0x62, 0xe9, 0x71, 0x69, 0xa5, 0xa1,
		0x50, 0x1e, 0x7a, 0x25, 0xa2, 0x52, 0x26, 0x72, 0xa5, 0x22, 0x57, 0x2e, 0x25, 0x4a, 0x26, 0xa6,
		0x6c, 0x82, 0x4a, 0x27, 0x9f, 0x6e, 0x5f, 0x5b, 0x3f, 0x4b, 0xdd, 0xdf, 0xa1, 0x52, 0xe9, 0xce,
		0x64, 0x74, 0x2b, 0xd7, 0x45, 0x38, 0xd5, 0xaf, 0x8e, 0x84, 0x88, 0x3f, 0x0c, 0x27, 0x6a, 0x3f,
		0xbb, 0x96, 0x9a, 0x69, 0xb9, 0x95, 0x3c, 0xcb, 0x9d, 0x4b, 0xab, 0x44, 0x22, 0xec, 0x3f, 0x86,
		0x3d, 0x61, 0x72, 0x5b, 0xa9, 0x4b, 0xf2, 0x7e, 0xf5, 0x8c, 0x41, 0x60, 0xb9, 0xce, 0x2f, 0xd6,
		0x9d, 0xc5, 0x9b, 0xdb, 0xdf, 0xbd, 0x3a, 0xd8, 0x9d, 0x11, 0x58, 0x0f, 0xe1, 0xb3, 0x0e, 0x0d,
		0xdb, 0x67, 0xd2, 0x52, 0x5f, 0xce, 0x08, 0xa6, 0xc2, 0x78, 0xa2, 0x9f, 0x8a, 0x4e, 0xbb, 0xdd,
		0x6c, 0x1f, 0xdf, 0x74, 0xbc, 0xca, 0xe7, 0xea, 0x7e, 0x56, 0x05, 0x00, 0x02, 0x60, 0x32, 0x06,
		0xde, 0xba, 0x61, 0x9a, 0x1e, 0xf3, 0x7d, 0x79, 0x84, 0xb2, 0x22, 0x0f, 0x58, 0x05, 0x58, 0x05,
		0x58, 0x45, 0x6a, 0xfd, 0x58, 0xe3, 0x99, 0x36, 0xe9, 0x8e, 0xab, 0xff, 0xe5, 0x3a, 0x8c, 0x00,
		0xa5, 0xd4, 0x2f, 0x25, 0x64, 0x4c, 0xdf, 0x2d, 0x77, 0x94, 0x32, 0x1f, 0xa1, 0x87, 0x16, 0xe1,
		0x18, 0xad, 0xe7, 0x00, 0x09, 0x64, 0xc9, 0x92, 0xfd, 0xac, 0x09, 0x3c, 0x39, 0xb9, 0xae, 0xe9,
		0x97, 0xfd, 0xef, 0xd7, 0x75, 0xfd, 0xb2, 0x1f, 0x7f, 0xac, 0x47, 0xbf, 0xe2, 0xcf, 0x8d, 0xeb,
		0x9a, 0xde, 0x9a, 0x7d, 0x6e, 0x5f, 0xd7, 0xf4, 0x76, 0xff, 0xb4, 0xd7, 0x3b, 0x3f, 0xfd, 0xd6,
		0x7c, 0xe1, 0xbf, 0xf0, 0xe4, 0x87, 0xeb, 0x5e, 0x6f, 0xfc, 0xed, 0xb7, 0x97, 0xf0, 0xe7, 0xc7,
		0x97, 0xfe, 0x9b, 0xd3, 0x77, 0x15, 0x22, 0x27, 0x1f, 0xde, 0xa8, 0xd7, 0x3b, 0xef, 0xbf, 0xae,
		0x48, 0xcb, 0xeb, 0xbf, 0xca, 0x11, 0xab, 0xd1, 0x2e, 0xe7, 0xce, 0x11, 0x2e, 0xe7, 0xee, 0xf7,
		0x70, 0x2d, 0x18, 0xfa, 0xf0, 0x4a, 0xff, 0xb5, 0xff, 0xad, 0x76, 0xd6, 0x7a, 0x39, 0xed, 0x9e,
		0x9e, 0xac, 0xfe, 0x5d, 0xf7, 0xf4, 0x5b, 0xed, 0xac, 0xfd, 0x72, 0x72, 0xb2, 0xe1, 0x5f, 0xde,
		0x6d, 0x92, 0x71, 0xfa, 0xfd, 0xe4, 0xe4, 0x64, 0xba, 0x90, 0x97, 0x16, 0xf7, 0x75, 0xad, 0xde,
		0x7f, 0x17, 0x7d, 0x8c, 0x7f, 0x26, 0xea, 0x91, 0xea, 0xcb, 0xa7, 0x2a, 0x95, 0xe2, 0xe4, 0xe4,
		0xfa, 0xbf, 0xbb, 0xfd, 0x37, 0xdd, 0xd3, 0x6f, 0x9d, 0x97, 0xd9, 0xe7, 0xe8, 0xe7, 0xe9, 0xf7,
		0x93, 0xf3, 0xd7, 0xbd, 0xde, 0xf9, 0xf9, 0xeb, 0xd3, 0xf8, 0xc5, 0xa6, 0xdf, 0x7b, 0x1d, 0xff,
		0xeb, 0xbb, 0x6e, 0x77, 0xed, 0xaf, 0x4e, 0x4f, 0x7e, 0x38, 0x27, 0xd6, 0xd7, 0x78, 0x7c, 0xbb,
		0xc5, 0x50, 0xdb, 0x43, 0x46, 0xe5, 0xe9, 0x77, 0xf3, 0xd3, 0xe2, 0xf2, 0xb4, 0x9b, 0xfd, 0x40,
		0xe6, 0x40, 0xe6, 0x40, 0xe6, 0xfb, 0xd6, 0x8f, 0x68, 0xf1, 0xee, 0xba, 0x4b, 0x2e, 0x66, 0x8b,
		0xc0, 0x19, 0xf7, 0x4e, 0xaa, 0x74, 0x0a, 0x40, 0xac, 0xd8, 0x77, 0x31, 0x71, 0x29, 0x56, 0xf4,
		0xbb, 0x98, 0x6f, 0x23, 0x2b, 0xfe, 0x4d, 0x84, 0x0a, 0x15, 0x01, 0x8b, 0x4e, 0x83, 0x60, 0x51,
		0x70, 0x72, 0x3d, 0x77, 0xe9, 0x63, 0xf8, 0xc7, 0x6a, 0xe2, 0x59, 0xaa, 0xd3, 0x6a, 0x84, 0xaa,
		0xd0, 0x9e, 0xae, 0xc6, 0x5d, 0x22, 0x19, 0xfe, 0xe9, 0xe6, 0x7d, 0x74, 0xf7, 0x0f, 0xe6, 0xcd,
		0x1f, 0xf1, 0xcd, 0xa7, 0xbf, 0x2b, 0xa5, 0x28, 0x8e, 0xcf, 0xac, 0x8a, 0x7b, 0xf3, 0x44, 0x29,
		0x2b, 0xcc, 0xde, 0x38, 0x33, 0x47, 0x52, 0x6e, 0xbd, 0x3c, 0xd4, 0xe4, 0x35, 0xd5, 0x4b, 0x43,
		0x5b, 0xf2, 0xca, 0xe9, 0x1d, 0x25, 0xc7, 0x62, 0x03, 0x23, 0x53, 0x27, 0x7d, 0x3b, 0xb1, 0xff,
		0xd4, 0xfd, 0xc0, 0x08, 0xfc, 0xfd, 0xc5, 0xd2, 0x0b, 0xdf, 0x45, 0xc5, 0x74, 0x59, 0x2b, 0xa6,
		0x47, 0x6c, 0xe4, 0x7a, 0xcf, 0xe9, 0xcb, 0xa5, 0xa7, 0xdf, 0x4f, 0x57, 0x2b, 0x5d, 0x43, 0xad,
		0x34, 0x69, 0x58, 0x92, 0x63, 0xad, 0x74, 0xea, 0xb0, 0x21, 0x19, 0xff, 0x89, 0xe5, 0x04, 0xcd,
		0x46, 0x9a, 0x71, 0x9f, 0xae, 0x96, 0x8b, 0x14, 0x5f, 0xe5, 0x2b, 0x11, 0xe0, 0x6b, 0x97, 0xe3,
		0x2f, 0xdf, 0x4b, 0xb6, 0xf6, 0x6b, 0xbc, 0xa5, 0x74, 0xb2, 0xbb, 0xc6, 0xe2, 0xbb, 0xc3, 0x2f,
		0x7c, 0x9d, 0x80, 0xe2, 0x83, 0xd2, 0xa8, 0x85, 0xff, 0x95, 0x67, 0x5c, 0x88, 0x80, 0x59, 0x5f,
		0xc1, 0x09, 0x52, 0xee, 0xed, 0xff, 0xb0, 0x41, 0xc0, 0x71, 0x5a, 0xd4, 0xec, 0x02, 0xb4, 0xb4,
		0xa0, 0xa5, 0x65, 0xd7, 0x92, 0xe2, 0xaf, 0xb5, 0x9f, 0x5e, 0x87, 0x52, 0x7b, 0x94, 0xda, 0x93,
		0x04, 0xff, 0xdc, 0xa5, 0xf6, 0xf1, 0x02, 0x8c, 0x98, 0xd7, 0x24, 0x99, 0x36, 0xd6, 0x24, 0x81,
		0x70, 0x43, 0x7d, 0xae, 0x1f, 0xe5, 0xf7, 0x12, 0xa9, 0xcd, 0x83, 0x38, 0xf7, 0xe9, 0x23, 0x73,
		0xee, 0xa2, 0xe4, 0x88, 0xd8, 0xd6, 0xb9, 0xc4, 0xc6, 0x05, 0x45, 0x59, 0x2f, 0x55, 0x39, 0x2f,
		0x79, 0xdd, 0x28, 0x5d, 0xbd, 0xa8, 0x44, 0x29, 0x08, 0x49, 0xb9, 0x6e, 0x32, 0xc4, 0xcd, 0xc6,
		0xe1, 0x8e, 0x71, 0x46, 0x3b, 0x5e, 0x7d, 0x1c, 0xcc, 0x46, 0x10, 0x07, 0xa7, 0x8d, 0xbf, 0x24,
		0xe3, 0x31, 0x49, 0xf8, 0x0c, 0x84, 0x01, 0x84, 0x21, 0x8b, 0x30, 0x84, 0x1b, 0xfc, 0x38, 0xe3,
		0x49, 0x9a, 0xf8, 0x92, 0x48, 0x61, 0xa4, 0x15, 0x87, 0x42, 0x81, 0xe8, 0x15, 0x89, 0x4a, 0xa1,
		0xc8, 0x15, 0x8b, 0x5c, 0xc1, 0x94, 0x28, 0x9a, 0xa4, 0xab, 0x16, 0x5c, 0x41, 0xa2, 0x0a, 0x38,
		0x57, 0x44, 0x89, 0x72, 0xb9, 0x75, 0x6d, 0x14, 0xae, 0x94, 0x93, 0x8c, 0x92, 0xc9, 0x55, 0x93,
		0x52, 0x45, 0xd5, 0xa9, 0x2a, 0xb5, 0xca, 0x2a, 0x53, 0x5d, 0x65, 0x2a, 0xac, 0x54, 0x95, 0xe5,
		0x54, 0x9a, 0x20, 0x3e, 0xd2, 0x48, 0x2a, 0xf0, 0xd6, 0xd7, 0x9f, 0x6c, 0x25, 0xde, 0x7a, 0x60,
		0x9f, 0x53, 0x55, 0x72, 0xb6, 0xc6, 0x76, 0x5a, 0xb1, 0x27, 0x6e, 0xe5, 0xe4, 0xca, 0xf5, 0x16,
		0x13, 0x13, 0x72, 0x65, 0x7b, 0x8b, 0xf1, 0x37, 0x79, 0xf9, 0x5e, 0x22, 0x5c, 0xaa, 0x8c, 0x4f,
		0x76, 0xae, 0x24, 0xcb, 0xfa, 0x12, 0x39, 0xbc, 0xf5, 0x39, 0xf3, 0x2a, 0x97, 0xea, 0x34, 0x8a,
		0x9b, 0xfe, 0x5e, 0xf9, 0xa3, 0x0c, 0x40, 0xe3, 0x29, 0xf1, 0xf9, 0x69, 0x62, 0xff, 0xf9, 0x25,
		0x7c, 0x9c, 0x9b, 0xdf, 0xe3, 0xfb, 0x4f, 0x7f, 0xaf, 0xfc, 0xb1, 0x72, 0x10, 0x25, 0xb5, 0x59,
		0xd7, 0x72, 0xee, 0x9d, 0x6c, 0xd5, 0xe5, 0x9c, 0xfb, 0x66, 0xb7, 0x52, 0x80, 0x6c, 0x88, 0xdc,
		0x01, 0x1a, 0x38, 0x3a, 0x03, 0x79, 0x90, 0x63, 0xd8, 0x69, 0x61, 0xa3, 0x71, 0xf0, 0x2c, 0xb3,
		0xb7, 0xd2, 0x2c, 0x13, 0xb3, 0xb9, 0xe0, 0x5e, 0x2a, 0xb8, 0xcd, 0xa9, 0x5d, 0x1f, 0x9d, 0xcb,
		0x53, 0x55, 0x17, 0xbf, 0xcd, 0xc5, 0x1d, 0x47, 0x65, 0xfc, 0xfa, 0x70, 0x53, 0x17, 0xc7, 0xaf,
		0x8d, 0x6f, 0x45, 0x41, 0x45, 0x5a, 0xfc, 0xda, 0x1c, 0x15, 0x69, 0xb3, 0x0b, 0x50, 0x91, 0x86,
		0x8a, 0xb4, 0x5d, 0x4b, 0x8a, 0xbf, 0x22, 0x6d, 0x7a, 0x1d, 0x2a, 0xd2, 0x50, 0x91, 0x46, 0xe2,
		0x78, 0xb9, 0x2b, 0xd2, 0x2c, 0xc7, 0x0f, 0x0c, 0x67, 0x20, 0x11, 0x13, 0x25, 0x12, 0xb0, 0x3f,
		0x8c, 0xb8, 0xe8, 0x30, 0xf7, 0x87, 0x99, 0x43, 0xc0, 0xe2, 0x10, 0x0a, 0x01, 0x71, 0x03, 0x76,
		0x86, 0x73, 0x56, 0x31, 0xf1, 0x6c, 0xa9, 0x4c, 0x02, 0xfc, 0x93, 0xe1, 0x98, 0x46, 0x10, 0x37,
		0xeb, 0xd5, 0x41, 0xfe, 0x90, 0x09, 0x11, 0x8d, 0xb0, 0x6b, 0xa7, 0x72, 0xf1, 0xb0, 0x5f, 0xb0,
		0x5f, 0x1a, 0x88, 0x67, 0x96, 0xd7, 0xcf, 0x07, 0x27, 0x60, 0xde, 0xd0, 0x18, 0x30, 0x91, 0xb6,
		0x8d, 0xcd, 0x36, 0x48, 0x42, 0x06, 0x15, 0x17, 0x5c, 0xe5, 0xda, 0xd0, 0xff, 0xba, 0xd2, 0xff,
		0x5f, 0x4d, 0xbf, 0x3c, 0xef, 0xde, 0x54, 0x75, 0x91, 0x62, 0xd9, 0xd9, 0x7f, 0x45, 0x26, 0xf7,
		0x1a, 0x49, 0x94, 0x88, 0xcf, 0xdb, 0xd0, 0x8d, 0x27, 0x58, 0x52, 0x58, 0x52, 0x20, 0xc1, 0xfc,
		0x91, 0x60, 0xea, 0x3e, 0xff, 0x7d, 0x1a, 0x79, 0x81, 0xa3, 0x03, 0x56, 0x84, 0xcd, 0x1a, 0x61,
		0x6a, 0x38, 0x3a, 0x40, 0x48, 0x4d, 0x14, 0x1c, 0x1d, 0xd0, 0x6a, 0x5c, 0xb6, 0x2e, 0x3b, 0x17,
		0x8d, 0x4b, 0x9c, 0x1f, 0x90, 0xd5, 0xd5, 0x45, 0x06, 0x33, 0x7e, 0x60, 0x50, 0x1c, 0x6c, 0x14,
		0x8b, 0x01, 0xa0, 0x01, 0xa0, 0x01, 0xa0, 0x41, 0x6a, 0x2b, 0x1b, 0xcb, 0x35, 0xb9, 0xd5, 0xad,
		0x59, 0x20, 0x4d, 0x60, 0xc1, 0x96, 0xc4, 0xc1, 0x92, 0xc1, 0x92, 0xc1, 0x92, 0xe5, 0x6e, 0xc9,
		0x6e, 0x5d, 0xd7, 0x66, 0x86, 0x43, 0x61, 0xca, 0xea, 0x05, 0x36, 0x65, 0x81, 0xcc, 0x80, 0xc9,
		0x14, 0x26, 0xc3, 0x70, 0xc1, 0x70, 0xc1, 0x70, 0x29, 0x30, 0x5c, 0x5f, 0xc2, 0x31, 0xbc, 0x9d,
		0xd8, 0x7f, 0xfa, 0x81, 0x11, 0xe8, 0x5c, 0x15, 0x5e, 0x3b, 0xad, 0x58, 0x4b, 0x42, 0xc6, 0x7b,
		0x67, 0x32, 0x92, 0x5f, 0xcb, 0x5f, 0xdd, 0x2f, 0x31, 0xbc, 0x24, 0x69, 0x00, 0xac, 0x47, 0x55,
		0x11, 0x4f, 0xc6, 0x20, 0x90, 0x06, 0x5f, 0x4b, 0x72, 0x1b, 0x73, 0xb9, 0xf2, 0x2d, 0xc0, 0x91,
		0xc4, 0x66, 0x28, 0xf1, 0xd1, 0xb2, 0x4d, 0xda, 0x07, 0x6d, 0x25, 0x62, 0x89, 0x9e, 0xb3, 0x1d,
		0x51, 0xf8, 0x1b, 0xce, 0x1d, 0xa3, 0x92, 0xd8, 0x89, 0x0f, 0x05, 0x18, 0x33, 0x23, 0x1e, 0xcc,
		0x7c, 0x7b, 0x4f, 0xdd, 0x0f, 0x4e, 0x40, 0xb3, 0xf6, 0x56, 0x97, 0x1d, 0xc9, 0x09, 0xa7, 0x0b,
		0x8b, 0xae, 0xab, 0x35, 0x08, 0xe4, 0xcd, 0xa7, 0xb2, 0xab, 0xb5, 0x29, 0xe4, 0xcd, 0x27, 0x52,
		0xea, 0xb0, 0xdb, 0x44, 0xe0, 0x8a, 0x4e, 0x74, 0xb5, 0x26, 0x95, 0xd0, 0xf8, 0x19, 0x5b, 0xe5,
		0xea, 0xe4, 0x2d, 0x58, 0xbd, 0x1b, 0x7b, 0x0a, 0x3c, 0x43, 0x9f, 0x38, 0x7e, 0x60, 0xdc, 0xda,
		0x82, 0x1d, 0x41, 0x63, 0x8f, 0xf9, 0x2c, 0x2e, 0x22, 0xc9, 0x9c, 0xf2, 0x6c, 0xbe, 0x65, 0x6e,
		0x5a, 0x03, 0x23, 0x60, 0xbe, 0x66, 0x68, 0xb3, 0x52, 0x14, 0xcd, 0x71, 0x4d, 0xa6, 0x59, 0xbe,
		0x36, 0x88, 0xe0, 0xe7, 0xc4, 0x63, 0xe6, 0x79, 0xf1, 0xe0, 0x5e, 0x3c, 0x74, 0x45, 0x06, 0x7c,
		0xa9, 0xc7, 0xb6, 0xf8, 0x6c, 0x61, 0x87, 0xda, 0xcc, 0x3b, 0xed, 0x3e, 0x99, 0xfe, 0xae, 0x4a,
		0x14, 0x63, 0x09, 0xb6, 0xe2, 0x7c, 0x89, 0x1f, 0x60, 0xfa, 0xfb, 0xe6, 0xc3, 0xec, 0x01, 0x0a,
		0xd0, 0xce, 0x3b, 0x76, 0x6d, 0x3b, 0x76, 0x40, 0x0f, 0x86, 0x2d, 0x5e, 0xc3, 0xbe, 0x2c, 0x06,
		0x0d, 0xbe, 0xea, 0x0d, 0x26, 0x0a, 0xd9, 0x25, 0x8c, 0x91, 0x7c, 0x83, 0xaf, 0x70, 0xdd, 0x83,
		0x44, 0xbd, 0x83, 0x64, 0x9d, 0x03, 0xb8, 0x53, 0xb7, 0xcd, 0xe9, 0xc1, 0x71, 0xa7, 0x36, 0xf8,
		0x0f, 0x5f, 0x28, 0xd3, 0x30, 0x17, 0x13, 0x10, 0x29, 0xf1, 0xcf, 0x31, 0x66, 0x91, 0xe4, 0x3a,
		0x5f, 0x14, 0x02, 0xdf, 0x0c, 0xdf, 0x0c, 0x9a, 0x73, 0x8e, 0xa5, 0x0f, 0x9a, 0x73, 0xb8, 0x6a,
		0x85, 0xae, 0x1a, 0x34, 0xe7, 0xf2, 0x7e, 0x1a, 0x34, 0xe7, 0x74, 0x48, 0x63, 0x81, 0xcb, 0x47,
		0x1a, 0x70, 0x2c, 0xca, 0x02, 0xee, 0x00, 0xee, 0x00, 0xee, 0x00, 0xee, 0x00, 0xee, 0x00, 0xee,
		0x00, 0xee, 0x00, 0xee, 0x48, 0x5e, 0x08, 0x84, 0xa2, 0xc0, 0x16, 0xc0, 0x16, 0xfb, 0xe6, 0xff,
		0xb8, 0x08, 0x45, 0xf9, 0x13, 0x96, 0xe0, 0x12, 0xdd, 0xae, 0x26, 0xd9, 0x73, 0x89, 0x2e, 0xef,
		0xb8, 0xab, 0xe7, 0x12, 0x5d, 0xde, 0x60, 0x3f, 0x3a, 0x2e, 0xd1, 0x74, 0xf4, 0x9a, 0xf2, 0xe3,
		0xab, 0x82, 0x4b, 0x34, 0xf0, 0x0c, 0xc7, 0x1f, 0x32, 0x8f, 0x83, 0x4d, 0x74, 0x7e, 0x09, 0xf8,
		0x44, 0xc1, 0x27, 0xba, 0x7b, 0x59, 0xf1, 0x33, 0x8a, 0x26, 0x57, 0x82, 0x53, 0x14, 0x9c, 0xa2,
		0x24, 0x0e, 0x98, 0x9b, 0x53, 0xf4, 0x76, 0x32, 0x1c, 0x32, 0x4f, 0xf7, 0xad, 0xbf, 0x24, 0x22,
		0xa3, 0x45, 0x21, 0x08, 0x90, 0x10, 0x20, 0xa1, 0x20, 0x6b, 0xf7, 0x6a, 0x3f, 0xe2, 0x82, 0xac,
		0x5a, 0xa3, 0x85, 0x84, 0xab, 0xea, 0x84, 0x6b, 0xa3, 0xde, 0xba, 0x68, 0xbd, 0x6d, 0x76, 0x5a,
		0x17, 0x48, 0xbc, 0xca, 0x26, 0x5e, 0x0b, 0x90, 0xb6, 0x64, 0x8e, 0x50, 0x4f, 0xc8, 0x02, 0x9b,
		0x71, 0x74, 0x3d, 0x3c, 0x33, 0x3c, 0x33, 0x52, 0x97, 0x39, 0xa5, 0x2e, 0x39, 0xd4, 0x7d, 0xe8,
		0x7a, 0x23, 0x43, 0xa2, 0x22, 0x62, 0x7a, 0x3d, 0xd4, 0x1d, 0xea, 0x7e, 0xe0, 0xea, 0xbe, 0xdc,
		0xbd, 0x3f, 0xb4, 0x6c, 0xa6, 0x0b, 0x2d, 0x7e, 0x4d, 0xb2, 0x75, 0x5f, 0xae, 0x65, 0x9f, 0xa6,
		0x55, 0x3f, 0x6e, 0xd1, 0x9f, 0xee, 0x66, 0x18, 0xfe, 0xc0, 0xb2, 0x64, 0x5a, 0x2c, 0x1b, 0x71,
		0x58, 0x6f, 0xff, 0x29, 0x2f, 0xaa, 0x99, 0x88, 0xba, 0xb5, 0x1c, 0xc3, 0x7b, 0xae, 0x64, 0x4b,
		0x06, 0x2d, 0xdd, 0x87, 0xbe, 0x38, 0x0c, 0x52, 0xad, 0xe2, 0x4b, 0x83, 0x20, 0xd5, 0x7e, 0xbd,
		0x3c, 0xcd, 0x5d, 0xad, 0x5e, 0xcc, 0x16, 0x68, 0x25, 0xde, 0x51, 0xbe, 0x81, 0x10, 0xbd, 0x83,
		0xf0, 0x90, 0x48, 0x55, 0x21, 0x55, 0xb5, 0x27, 0x89, 0x52, 0x43, 0x9e, 0x4a, 0x75, 0x9e, 0x8a,
		0x8a, 0xe3, 0x18, 0x79, 0xaa, 0x42, 0xe4, 0xa9, 0xc6, 0x9e, 0x35, 0x8a, 0xb1, 0x8d, 0x68, 0x6b,
		0xff, 0x54, 0x00, 0x1c, 0x33, 0x1c, 0xf3, 0x81, 0x3b, 0x66, 0x82, 0x9a, 0xfd, 0x02, 0x68, 0xbc,
		0xc7, 0x02, 0x43, 0xc0, 0xe7, 0x26, 0xa3, 0x30, 0xbd, 0x1e, 0xfa, 0x0e, 0x7d, 0x07, 0x10, 0x07,
		0x10, 0x07, 0x10, 0xcf, 0x09, 0x88, 0x83, 0xc4, 0xe3, 0x50, 0x30, 0xb8, 0xc7, 0x02, 0x19, 0x04,
		0x1e, 0x5f, 0x0e, 0x7f, 0x0c, 0x7f, 0x0c, 0x7f, 0x0c, 0x7f, 0x0c, 0x7f, 0x9c, 0x93, 0x3f, 0xae,
		0xc3, 0x1b, 0x1f, 0x84, 0x37, 0xf6, 0xd9, 0xc0, 0x75, 0x4c, 0xa9, 0x9c, 0xd8, 0x5c, 0x04, 0xbc,
		0x32, 0xbc, 0x32, 0xb2, 0x62, 0x25, 0xc8, 0x8a, 0xcd, 0xda, 0x7a, 0x24, 0xa9, 0xf4, 0x96, 0xc5,
		0x40, 0xfb, 0xa1, 0xfd, 0x20, 0xb5, 0xe1, 0x32, 0x05, 0x20, 0xb5, 0x01, 0x44, 0x57, 0x06, 0xd1,
		0x41, 0x6a, 0x23, 0x8f, 0xd0, 0x41, 0x6a, 0x43, 0x89, 0x36, 0x66, 0xad, 0xf9, 0xf2, 0x80, 0x23,
		0x7d, 0x93, 0xff, 0x46, 0xc3, 0x0b, 0xcc, 0x01, 0xcc, 0x91, 0x0d, 0xe6, 0xe0, 0x6d, 0x77, 0xde,
		0xa6, 0x34, 0x04, 0x87, 0x3a, 0xae, 0x08, 0x94, 0x3b, 0xdf, 0xb1, 0x8e, 0xf3, 0x1d, 0x09, 0x55,
		0x8c, 0x5c, 0xd5, 0xc8, 0x55, 0x4e, 0x89, 0xea, 0x49, 0xba, 0x73, 0xc1, 0x15, 0x24, 0xaa, 0x92,
		0xf3, 0x9c, 0x99, 0x04, 0x0d, 0xfd, 0xf6, 0xb5, 0x28, 0x4c, 0x4b, 0x4f, 0x14, 0x59, 0x93, 0xab,
		0x2a, 0xa5, 0xca, 0xaa, 0x53, 0x5d, 0x6a, 0x15, 0x56, 0xa6, 0xca, 0xca, 0x54, 0x5a, 0xa9, 0x6a,
		0xcb, 0xa9, 0x38, 0x41, 0x4c, 0xa5, 0x91, 0x1c, 0xc7, 0xaa, 0x28, 0x13, 0x40, 0x99, 0x19, 0xa0,
		0xce, 0x14, 0xd0, 0x65, 0x0e, 0x94, 0x64, 0x12, 0x54, 0x65, 0x16, 0x94, 0x47, 0xc1, 0xea, 0xa2,
		0x62, 0x62, 0xad, 0x21, 0xcf, 0x4c, 0x28, 0xcb, 0x54, 0x1c, 0xd2, 0x9c, 0xbd, 0x2a, 0x86, 0x94,
		0x3e, 0x81, 0x01, 0x92, 0xcd, 0x84, 0xa8, 0xcd, 0x8c, 0xc8, 0x65, 0x4a, 0xe8, 0x46, 0x3c, 0x5b,
		0xf0, 0x2b, 0xcc, 0x29, 0xba, 0xee, 0x5e, 0x44, 0x38, 0x46, 0x37, 0xb9, 0x02, 0x31, 0xce, 0xd1,
		0x4d, 0x16, 0x8a, 0x8c, 0x83, 0x74, 0x4d, 0xb8, 0x10, 0x27, 0x29, 0xd5, 0x9c, 0x49, 0x9e, 0x16,
		0xba, 0x12, 0xb7, 0x08, 0x91, 0x6a, 0x26, 0x2c, 0x93, 0xc9, 0xa7, 0xea, 0x6a, 0x2e, 0xae, 0x4a,
		0x93, 0x60, 0xd0, 0xc4, 0x89, 0x39, 0xbf, 0xce, 0x1e, 0x32, 0xf9, 0x94, 0x7c, 0x98, 0x71, 0xa2,
		0x2e, 0xff, 0xb9, 0x72, 0x10, 0x07, 0x33, 0xe7, 0x78, 0x98, 0x6c, 0x8a, 0x65, 0x91, 0xdd, 0xc1,
		0xb2, 0xfb, 0xa7, 0xbf, 0x02, 0x86, 0x77, 0xf5, 0xe1, 0x3f, 0x92, 0xde, 0x6a, 0xc2, 0x75, 0xd0,
		0x24, 0xf1, 0x04, 0xd0, 0xa5, 0x62, 0x78, 0x17, 0xa9, 0xa3, 0x01, 0xc7, 0x3b, 0xb5, 0x43, 0xa4,
		0x75, 0x84, 0xea, 0x79, 0xde, 0xd7, 0xfd, 0xdd, 0xd1, 0x71, 0xbd, 0xa7, 0x25, 0x3f, 0xa7, 0x18,
		0x65, 0x61, 0xbe, 0xf7, 0x57, 0x1c, 0x83, 0x98, 0x76, 0xf0, 0x24, 0x06, 0x6d, 0xc7, 0x50, 0x89,
		0x0d, 0xd1, 0xe6, 0x81, 0x59, 0x7f, 0xed, 0x0d, 0xaf, 0x5c, 0x19, 0xb8, 0x4e, 0xc0, 0x9e, 0x02,
		0x7d, 0x64, 0x8c, 0xc7, 0x96, 0x73, 0xb7, 0xbd, 0x34, 0x20, 0xf1, 0x0c, 0x6b, 0x57, 0x6c, 0x19,
		0xc8, 0xdd, 0xfb, 0x94, 0x7b, 0xd1, 0x4d, 0x1a, 0x14, 0xc3, 0x8f, 0x56, 0xd2, 0xa2, 0x12, 0x6e,
		0xf4, 0xc1, 0x8d, 0x32, 0x84, 0xd0, 0x04, 0xdf, 0x52, 0xde, 0xb7, 0xcf, 0xb6, 0x3a, 0x95, 0xe9,
		0xcf, 0x3c, 0x58, 0xbd, 0x10, 0x27, 0x1f, 0xe0, 0xe4, 0x83, 0x9d, 0x4b, 0x8c, 0xff, 0xe0, 0x83,
		0xd9, 0x85, 0x7c, 0xe7, 0x1e, 0xd4, 0x70, 0xee, 0x01, 0xce, 0x3d, 0x20, 0x8a, 0x89, 0x96, 0x39,
		0x24, 0xf9, 0xd6, 0xa3, 0x26, 0x48, 0x17, 0x29, 0x46, 0x13, 0x29, 0x47, 0x0f, 0x19, 0xd3, 0x42,
		0x3e, 0x78, 0x43, 0x91, 0x70, 0xaf, 0x15, 0x51, 0x37, 0x7a, 0x96, 0x79, 0x27, 0x92, 0xc7, 0xae,
		0xb4, 0xc3, 0xcb, 0x5d, 0x7f, 0x2c, 0x74, 0xef, 0xce, 0xec, 0xe2, 0x87, 0x66, 0x45, 0x6d, 0x38,
		0x2d, 0xcc, 0x10, 0x39, 0x1b, 0x9a, 0xae, 0x26, 0xc2, 0x19, 0x1a, 0x0d, 0x4c, 0x57, 0x6b, 0x0b,
		0x5e, 0xfa, 0xd0, 0xac, 0x74, 0xb5, 0x8e, 0xc0, 0xc5, 0xe1, 0x5a, 0xe0, 0xa5, 0x8c, 0x24, 0x8f,
		0xe0, 0x5f, 0x11, 0xcc, 0xe2, 0x2a, 0x50, 0xe1, 0x2b, 0x19, 0xda, 0x06, 0x77, 0xb8, 0xb2, 0x04,
		0x70, 0x4c, 0x70, 0x4c, 0xaa, 0x1c, 0x93, 0x5c, 0x0d, 0x8c, 0x48, 0xad, 0x8b, 0xf0, 0x96, 0x32,
		0xcd, 0xd6, 0x71, 0x3f, 0x43, 0xd3, 0x61, 0x39, 0x7e, 0x60, 0x38, 0x03, 0x26, 0x68, 0x33, 0x96,
		0x2f, 0x87, 0xb1, 0x80, 0xb1, 0xc8, 0xd9, 0x58, 0x48, 0xd8, 0x87, 0x0c, 0xb5, 0x2e, 0x70, 0xc7,
		0xae, 0xed, 0xde, 0x3d, 0x0b, 0x6a, 0xdd, 0xf2, 0xe5, 0xd0, 0x3a, 0x68, 0x1d, 0xb4, 0x2e, 0x85,
		0xd6, 0x3d, 0x78, 0x43, 0x41, 0x85, 0x4b, 0xae, 0x84, 0xae, 0x41, 0xd7, 0xa0, 0x6b, 0x52, 0x49,
		0xd5, 0xe9, 0x66, 0xb4, 0x40, 0xb4, 0xc9, 0xb7, 0x17, 0xcd, 0xbf, 0x07, 0x4d, 0xb2, 0xf7, 0xcc,
		0xb7, 0xe7, 0x9c, 0xf7, 0x26, 0xe7, 0xea, 0x36, 0x57, 0x95, 0x6f, 0xcf, 0x43, 0xe3, 0xdd, 0xcd,
		0xfb, 0x39, 0x16, 0xff, 0x69, 0x7a, 0xbb, 0x95, 0x3f, 0x97, 0x7b, 0xef, 0x33, 0xe5, 0x96, 0xa1,
		0xec, 0x98, 0x11, 0xec, 0x83, 0xa6, 0xdf, 0xff, 0xc4, 0xbe, 0xa7, 0x98, 0x07, 0x2a, 0xd0, 0xbe,
		0x27, 0xf7, 0x7e, 0x27, 0xf6, 0x39, 0xb1, 0xcf, 0xb9, 0x27, 0xd1, 0x2c, 0x97, 0x60, 0x06, 0x92,
		0x06, 0x92, 0x46, 0x62, 0xb9, 0xcc, 0x89, 0x65, 0xca, 0x00, 0x00, 0xc0, 0x3f, 0x47, 0xe0, 0x9f,
		0x00, 0x7e, 0x45, 0x40, 0x3f, 0x41, 0xf8, 0x07, 0x01, 0xed, 0xa9, 0x21, 0xbd, 0x24, 0x96, 0xf7,
		0x3c, 0x66, 0x1b, 0x81, 0xeb, 0xa5, 0x41, 0xf3, 0xc9, 0x77, 0x81, 0xe7, 0xcb, 0x8a, 0xe7, 0x6f,
		0x27, 0xc3, 0xa8, 0xe1, 0xc9, 0xfa, 0x8b, 0xa5, 0xc7, 0xf4, 0x8b, 0x17, 0xa5, 0xc3, 0xf5, 0x35,
		0xe0, 0xfa, 0x43, 0xc1, 0xf5, 0xa9, 0xa1, 0x11, 0x3f, 0x1b, 0x3c, 0x07, 0xfb, 0x3b, 0x27, 0xdb,
		0x3b, 0x5f, 0x97, 0x09, 0x3f, 0x86, 0x9e, 0x53, 0x8b, 0x37, 0x38, 0xab, 0x95, 0xa4, 0xfb, 0xfd,
		0xc5, 0xfb, 0xf9, 0x5f, 0xf8, 0x3a, 0x68, 0xc4, 0x47, 0xa5, 0xdd, 0x68, 0x35, 0xde, 0xbe, 0xe5,
		0x65, 0x5d, 0xcf, 0x73, 0x64, 0x88, 0x30, 0x6d, 0x5f, 0x14, 0xa0, 0xec, 0x70, 0x5f, 0xde, 0xc4,
		0x66, 0xba, 0xcf, 0x02, 0x3f, 0xbd, 0xbd, 0x9e, 0x5f, 0x82, 0x2c, 0x0c, 0xb2, 0x30, 0xbb, 0x97,
		0x15, 0x7f, 0x06, 0x26, 0xb9, 0x92, 0x2f, 0xfb, 0x52, 0x47, 0xf6, 0x05, 0xd9, 0x17, 0xb9, 0x45,
		0x9b, 0x5c, 0x60, 0x8c, 0xc7, 0xb6, 0xc5, 0x4c, 0x3d, 0x70, 0xc5, 0xdb, 0xd3, 0x17, 0x64, 0x80,
		0x99, 0x55, 0xdd, 0x82, 0x27, 0x5b, 0xf8, 0x64, 0x0a, 0x40, 0xaa, 0x08, 0x7c, 0x0a, 0x21, 0x80,
		0xc4, 0x34, 0x29, 0x66, 0x56, 0xc3, 0xb6, 0xe5, 0xd9, 0x58, 0x43, 0x21, 0x72, 0x0c, 0xac, 0x35,
		0x30, 0xb0, 0x12, 0xaa, 0x12, 0xb9, 0x4a, 0x91, 0xab, 0x96, 0x12, 0x15, 0x13, 0x53, 0x35, 0x41,
		0x95, 0x13, 0xdf, 0x19, 0xd8, 0xba, 0x7e, 0x44, 0x79, 0x22, 0xd6, 0xfc, 0x4e, 0x33, 0x2b, 0x2a,
		0x20, 0x01, 0x2f, 0x71, 0xef, 0xfa, 0x81, 0x2f, 0x6f, 0x72, 0x62, 0x31, 0xa0, 0x7d, 0x86, 0xd1,
		0x39, 0x4a, 0xa3, 0x23, 0x4d, 0xfb, 0x1c, 0xea, 0x0f, 0x1d, 0xdf, 0x73, 0x24, 0x8d, 0x86, 0xe8,
		0xb9, 0x0e, 0xa2, 0xe7, 0x1c, 0x94, 0x56, 0x99, 0xf2, 0x2a, 0x53, 0x62, 0xa5, 0xca, 0x2c, 0xa7,
		0xd4, 0x92, 0xca, 0x4d, 0xa6, 0xe4, 0x89, 0x20, 0x6b, 0xac, 0x1b, 0xa6, 0xe9, 0x31, 0xdf, 0xa7,
		0x5b, 0x28, 0x49, 0x6f, 0xd6, 0x5c, 0x36, 0xd1, 0x84, 0xd2, 0x30, 0xbe, 0x93, 0x1b, 0x04, 0x15,
		0x86, 0x41, 0xbd, 0x81, 0x50, 0x65, 0x28, 0x94, 0x1b, 0x0c, 0xe5, 0x86, 0x23, 0x13, 0x03, 0x42,
		0x63, 0x48, 0x88, 0x0c, 0x0a, 0x5d, 0xc8, 0x92, 0xc2, 0x1a, 0xe8, 0x8e, 0xab, 0xff, 0xe5, 0x3a,
		0x8c, 0x72, 0x0d, 0xcf, 0x20, 0xc2, 0x25, 0xa1, 0xcc, 0xe9, 0x58, 0x5c, 0x93, 0xae, 0x29, 0x5a,
		0x1d, 0x5b, 0x19, 0xe1, 0x87, 0x96, 0xc2, 0x31, 0x5e, 0x1b, 0xeb, 0xb7, 0x0a, 0x64, 0x53, 0x73,
		0x69, 0xaf, 0xdd, 0xe0, 0xe4, 0xe4, 0xba, 0xa6, 0x5f, 0xf6, 0xbf, 0x5f, 0xd7, 0xf5, 0xcb, 0x7e,
		0xfc, 0xb1, 0x1e, 0xfd, 0x8a, 0x3f, 0x37, 0xae, 0x6b, 0x7a, 0x6b, 0xf6, 0xb9, 0x7d, 0x5d, 0xd3,
		0xdb, 0xfd, 0xd3, 0x5e, 0xef, 0xfc, 0xf4, 0x5b, 0xf3, 0x85, 0xff, 0xc2, 0x93, 0x1f, 0xae, 0x7b,
		0xbd, 0xf1, 0xb7, 0xdf, 0x5e, 0xc2, 0x9f, 0x1f, 0x5f, 0xfa, 0x6f, 0x4e, 0xdf, 0x29, 0x98, 0x8f,
		0xe8, 0xb5, 0xc2, 0x1b, 0xf7, 0x7a, 0xe7, 0xfd, 0xd7, 0x15, 0x72, 0xf9, 0x7d, 0x52, 0x89, 0x2f,
		0x67, 0x25, 0x52, 0xa7, 0x0e, 0xd4, 0x69, 0xaf, 0x3a, 0x75, 0xbf, 0x87, 0x6b, 0xcf, 0xd0, 0x87,
		0x57, 0xfa, 0xaf, 0xfd, 0x6f, 0xb5, 0xb3, 0xd6, 0xcb, 0x69, 0xf7, 0xf4, 0x64, 0xf5, 0xef, 0xba,
		0xa7, 0xdf, 0x6a, 0x67, 0xed, 0x97, 0x93, 0x93, 0x0d, 0xff, 0xf2, 0x6e, 0x93, 0x8c, 0xd3, 0xef,
		0x27, 0x27, 0x27, 0x53, 0x45, 0x5a, 0x52, 0xae, 0xeb, 0x5a, 0xbd, 0xff, 0x2e, 0xfa, 0x18, 0xff,
		0x4c, 0xd4, 0x33, 0xd5, 0x97, 0x4f, 0xb3, 0x54, 0xca, 0x93, 0x93, 0xeb, 0xff, 0xee, 0xf6, 0xdf,
		0x74, 0x4f, 0xbf, 0x75, 0x5e, 0x66, 0x9f, 0xa3, 0x9f, 0xa7, 0xdf, 0x4f, 0xce, 0x5f, 0xf7, 0x7a,
		0xe7, 0xe7, 0xaf, 0x4f, 0xe3, 0x17, 0x9d, 0x7e, 0xef, 0x75, 0xfc, 0xaf, 0xef, 0xba, 0xdd, 0xb5,
		0xbf, 0x3a, 0x3d, 0xf9, 0xe1, 0x5c, 0xb1, 0xfd, 0x88, 0xc7, 0xbf, 0x5b, 0x0e, 0x33, 0xf2, 0xaa,
		0x58, 0xcf, 0x25, 0xff, 0x3c, 0x04, 0x86, 0xb1, 0x32, 0x76, 0xbd, 0x80, 0x3e, 0x8e, 0x8b, 0xa4,
		0x22, 0x82, 0x43, 0x04, 0x87, 0x08, 0xee, 0xa8, 0x23, 0xb8, 0xa5, 0x76, 0x95, 0xd0, 0x28, 0xe8,
		0xce, 0x64, 0x74, 0xcb, 0x45, 0x01, 0x9d, 0xd6, 0x3e, 0x74, 0x08, 0x45, 0xf2, 0x55, 0x7f, 0xe6,
		0x08, 0x3c, 0x55, 0x1c, 0x17, 0x96, 0x08, 0x57, 0x74, 0x6c, 0x58, 0x22, 0x5f, 0xf5, 0x51, 0x54,
		0xf3, 0xd5, 0xa8, 0xea, 0x48, 0x2a, 0x45, 0x11, 0x8a, 0xa6, 0xea, 0x58, 0xb1, 0xb5, 0xa9, 0xed,
		0xb4, 0xdb, 0xcd, 0x36, 0xa6, 0x37, 0x33, 0xe4, 0x78, 0xa0, 0x38, 0x34, 0xd7, 0x8d, 0x8d, 0x69,
		0x6f, 0xde, 0x3c, 0x59, 0xa8, 0x11, 0xa0, 0x4f, 0x9a, 0x33, 0xbc, 0x16, 0xed, 0x34, 0xcd, 0x59,
		0x5e, 0x8b, 0xe6, 0x41, 0xd9, 0x99, 0x5e, 0xc9, 0x4d, 0x48, 0xce, 0xf6, 0xa2, 0x9a, 0x67, 0xa2,
		0xb3, 0xbe, 0x12, 0x79, 0xfc, 0x0d, 0x75, 0xb3, 0x86, 0xb4, 0x6a, 0x52, 0xf1, 0x9e, 0x7c, 0xaa,
		0xce, 0xeb, 0x3b, 0xab, 0x51, 0x35, 0x49, 0x95, 0x60, 0x17, 0x5b, 0xe3, 0xef, 0xd1, 0x9b, 0x3d,
		0xe2, 0xcd, 0x1f, 0x13, 0x9b, 0x7d, 0x61, 0x81, 0x3f, 0xfb, 0x70, 0x73, 0x15, 0x3f, 0xe0, 0x57,
		0xf7, 0xe6, 0xdf, 0xe1, 0xf3, 0x45, 0x3f, 0x2b, 0x47, 0x71, 0xb0, 0x5f, 0x5e, 0x87, 0xc4, 0xf1,
		0x2d, 0x98, 0xac, 0x0e, 0x85, 0xe3, 0x58, 0x23, 0x38, 0x04, 0x4e, 0xe5, 0xb4, 0xab, 0x3e, 0xfe,
		0x2d, 0xd5, 0x44, 0x17, 0xe1, 0xdc, 0x37, 0xa1, 0xd3, 0xe2, 0x93, 0x10, 0x53, 0xe0, 0xa0, 0x4e,
		0x9c, 0xfb, 0x96, 0x6b, 0x6a, 0x07, 0xe7, 0xbe, 0x09, 0xcd, 0xbf, 0xe8, 0x49, 0xea, 0x32, 0xbb,
		0x45, 0xb2, 0x27, 0xa5, 0xcb, 0x1d, 0x7f, 0x2b, 0x5f, 0x52, 0x48, 0x94, 0xc2, 0x20, 0x8f, 0x65,
		0xe9, 0x62, 0xd6, 0x17, 0xb9, 0x73, 0x81, 0xe9, 0x86, 0x58, 0xf6, 0xa4, 0xf2, 0x22, 0x8f, 0x71,
		0x46, 0x38, 0xa8, 0x5f, 0x00, 0x67, 0x1c, 0x02, 0x95, 0xd0, 0xa5, 0xfa, 0xe2, 0x1e, 0x79, 0x2e,
		0x02, 0x9d, 0x6e, 0x70, 0xcb, 0x87, 0xd9, 0xe9, 0x36, 0x5b, 0xe3, 0xf2, 0xbd, 0x27, 0x89, 0x24,
		0xb4, 0x9f, 0xa0, 0xfd, 0x24, 0x67, 0x65, 0xcb, 0x27, 0x3f, 0x23, 0xdd, 0x7e, 0x22, 0xad, 0x8c,
		0xd4, 0x4a, 0x29, 0x19, 0x68, 0x92, 0x2b, 0x29, 0xa5, 0xb2, 0xaa, 0x53, 0x5a, 0x6a, 0xe5, 0x55,
		0xa6, 0xc4, 0xca, 0x94, 0x59, 0xa9, 0x52, 0xcb, 0xa7, 0x6d, 0x35, 0x82, 0x2c, 0x3e, 0x59, 0xad,
		0x81, 0x7c, 0x60, 0x4c, 0x19, 0x28, 0x53, 0x07, 0xce, 0x74, 0x81, 0xb4, 0x92, 0xc0, 0x5a, 0x55,
		0xa0, 0xad, 0x3c, 0x28, 0x54, 0x17, 0x24, 0x12, 0x2b, 0x0a, 0x79, 0xa0, 0xae, 0x2c, 0x70, 0x3f,
		0xa4, 0x39, 0x2b, 0xc8, 0x86, 0x7a, 0xff, 0x28, 0xf6, 0xe5, 0xa6, 0x1b, 0xf7, 0xb2, 0x01, 0x10,
		0xc9, 0x4e, 0x3d, 0xdd, 0x0e, 0xbd, 0xd2, 0x9d, 0x79, 0x9a, 0x1d, 0xf9, 0xc3, 0xda, 0x48, 0x4d,
		0xd2, 0x4d, 0x55, 0x02, 0xd4, 0x4e, 0xb6, 0xc3, 0xf6, 0xc7, 0xec, 0xa9, 0x92, 0x4f, 0xd8, 0x4d,
		0x55, 0x38, 0xf7, 0x79, 0x6e, 0xa6, 0x26, 0x53, 0x5d, 0xc9, 0xf7, 0x5c, 0xde, 0xb3, 0x57, 0x3c,
		0x66, 0x97, 0xe7, 0x44, 0x03, 0x21, 0x13, 0x2b, 0x6e, 0x52, 0x49, 0x4d, 0xa8, 0x98, 0xc9, 0x4c,
		0x3b, 0x98, 0x82, 0xea, 0x40, 0xab, 0x06, 0x3c, 0x44, 0x82, 0x44, 0x8b, 0xbe, 0x52, 0x08, 0x5a,
		0x7e, 0xf5, 0x8c, 0xf3, 0xeb, 0xa3, 0x4e, 0xcf, 0x3a, 0xbf, 0x36, 0xc8, 0x15, 0x45, 0xbc, 0xae,
		0x9c, 0x9c, 0xae, 0xe0, 0x73, 0xd5, 0xc0, 0xe7, 0xba, 0x63, 0x39, 0x89, 0x71, 0xb9, 0x82, 0xc7,
		0x15, 0x3c, 0xae, 0x34, 0xbe, 0x17, 0x3c, 0xae, 0xd4, 0x0b, 0x9c, 0x6e, 0xa1, 0xcb, 0x2e, 0x78,
		0xf2, 0xdc, 0x3d, 0x76, 0xb7, 0x39, 0x2e, 0x04, 0x8f, 0x2b, 0xf6, 0xb4, 0x73, 0x50, 0x2d, 0x25,
		0x2a, 0x96, 0x4f, 0x6e, 0x13, 0x3c, 0xae, 0x5c, 0xcf, 0x08, 0x1e, 0x57, 0x18, 0x1d, 0x18, 0x1d,
		0x59, 0xa3, 0x03, 0x1e, 0x57, 0x55, 0xca, 0x49, 0xa9, 0xa4, 0xea, 0x94, 0x95, 0x5a, 0x69, 0x95,
		0x29, 0xaf, 0x32, 0x25, 0x56, 0xaa, 0xcc, 0x72, 0x4a, 0x2d, 0xa9, 0xdc, 0x64, 0x4a, 0x9e, 0x08,
		0x02, 0x8f, 0x2b, 0x58, 0x80, 0xc0, 0x02, 0x94, 0x87, 0x01, 0xa1, 0x31, 0x24, 0x44, 0x06, 0x85,
		0x2e, 0x64, 0x49, 0x61, 0x0d, 0xc0, 0xe3, 0x4a, 0xfa, 0x1f, 0x78, 0x5c, 0x79, 0x6e, 0x00, 0x1e,
		0x57, 0xde, 0xff, 0xc0, 0xe3, 0x0a, 0x75, 0xda, 0xa1, 0x4e, 0xe0, 0x71, 0xdd, 0x65, 0x6b, 0xc0,
		0xe3, 0xaa, 0xc8, 0x8c, 0x80, 0xc7, 0x75, 0xc3, 0x2c, 0x82, 0xc7, 0x15, 0x11, 0x1c, 0x22, 0x38,
		0x44, 0x70, 0xe0, 0x71, 0x5d, 0x10, 0x09, 0x1e, 0x57, 0xf0, 0xb8, 0xe6, 0x18, 0xa1, 0x68, 0xe0,
		0x71, 0x2d, 0xd6, 0xf4, 0x02, 0x87, 0x2a, 0x94, 0x00, 0x1e, 0x57, 0x41, 0xf3, 0x00, 0x1e, 0x57,
		0x29, 0x79, 0x92, 0x45, 0xfd, 0x71, 0x1b, 0x45, 0x21, 0xf9, 0x5b, 0xe3, 0x6e, 0x0b, 0x30, 0xb7,
		0xe6, 0xdd, 0x70, 0xb8, 0x65, 0x89, 0xe4, 0xd4, 0x66, 0xb8, 0x79, 0x55, 0xa0, 0xbb, 0x50, 0xc5,
		0x44, 0x67, 0xdc, 0x56, 0xb8, 0x3a, 0xb5, 0x45, 0x60, 0x67, 0x1d, 0x78, 0xcc, 0x08, 0x98, 0x29,
		0x5e, 0x31, 0x3f, 0x13, 0x00, 0x8e, 0x56, 0xf5, 0xe9, 0x1c, 0x94, 0xcb, 0x4b, 0x18, 0x1f, 0x79,
		0x8e, 0x56, 0xd1, 0x5a, 0x5d, 0xc1, 0x1a, 0x5d, 0xd0, 0x31, 0x43, 0xd5, 0xa1, 0xea, 0x1a, 0xe8,
		0x98, 0xd5, 0x67, 0x2e, 0x41, 0xc7, 0xac, 0x3c, 0x38, 0x06, 0x1d, 0xb3, 0xda, 0x18, 0xb4, 0x94,
		0x74, 0xcc, 0x8e, 0xeb, 0xe8, 0x7e, 0x60, 0x04, 0x6c, 0x38, 0xb1, 0x25, 0x9c, 0xf2, 0xa2, 0x14,
		0xb4, 0xad, 0xc2, 0x39, 0x1f, 0x66, 0xdb, 0x6a, 0xb8, 0xcc, 0x3d, 0xd7, 0x0d, 0xf4, 0x81, 0x31,
		0xf1, 0x19, 0x41, 0x3f, 0xd9, 0xaa, 0x40, 0x74, 0x96, 0xa1, 0xb3, 0x2c, 0x67, 0xd5, 0xcb, 0x27,
		0x11, 0x2b, 0xdd, 0x59, 0xb6, 0xac, 0x49, 0x74, 0x3d, 0x66, 0x2b, 0x72, 0xd1, 0x6d, 0x96, 0x9d,
		0x02, 0x53, 0x2b, 0xb2, 0x32, 0x85, 0x56, 0xa6, 0xd8, 0x4a, 0x15, 0x5c, 0x4e, 0xd1, 0x09, 0xe2,
		0x11, 0x8d, 0xb4, 0xdb, 0x4c, 0x34, 0x8d, 0xbc, 0x77, 0x3d, 0x8b, 0xa5, 0x97, 0x89, 0x73, 0x51,
		0xca, 0x4d, 0x81, 0x0a, 0x93, 0xa0, 0xde, 0x34, 0xa8, 0x32, 0x11, 0xca, 0x4d, 0x85, 0x72, 0x93,
		0x91, 0x89, 0xe9, 0xa0, 0x31, 0x21, 0x44, 0xa6, 0x44, 0x3e, 0xf7, 0xb6, 0x77, 0xfd, 0xca, 0x52,
		0x65, 0x6c, 0xc5, 0x03, 0xcd, 0x03, 0x2a, 0x14, 0x77, 0x2d, 0x05, 0x46, 0x38, 0x14, 0x0a, 0x03,
		0x0c, 0x03, 0x0c, 0x03, 0x7c, 0xd4, 0x06, 0x98, 0xec, 0x28, 0x8e, 0x35, 0x0b, 0xfc, 0xf6, 0x80,
		0x2c, 0xf0, 0x83, 0xe1, 0xe9, 0xb7, 0x96, 0x63, 0x2a, 0xe0, 0x5d, 0x98, 0x8b, 0xa6, 0xb5, 0xc6,
		0x75, 0x58, 0x63, 0x58, 0x63, 0x58, 0x63, 0x15, 0xd6, 0x98, 0x2a, 0xc2, 0x5e, 0x33, 0x2f, 0xf4,
		0xcb, 0x6b, 0xd5, 0xca, 0x50, 0xaf, 0x2e, 0x5a, 0x63, 0xa3, 0xcc, 0xe8, 0xa8, 0x34, 0x3e, 0xd9,
		0x19, 0x21, 0xd5, 0xc6, 0x28, 0x33, 0xa3, 0x94, 0x99, 0x71, 0xca, 0xd4, 0x48, 0xd1, 0x1a, 0x2b,
		0x62, 0xa3, 0xa5, 0xcc, 0x78, 0x25, 0x82, 0x47, 0x46, 0x30, 0xb8, 0x57, 0xb7, 0x26, 0x67, 0xda,
		0x15, 0xdf, 0x46, 0xd1, 0x32, 0x51, 0x63, 0xce, 0x94, 0x9b, 0xb5, 0x2c, 0xcc, 0x5b, 0xf6, 0x66,
		0x2e, 0x2b, 0x73, 0x97, 0xb9, 0xd9, 0xcb, 0xdc, 0xfc, 0xe5, 0x62, 0x06, 0xd5, 0x98, 0x43, 0x45,
		0x66, 0x51, 0xb9, 0x79, 0x4c, 0x6e, 0x60, 0x39, 0x26, 0x7b, 0x52, 0xbf, 0x96, 0x13, 0x5e, 0x9c,
		0xe8, 0x76, 0x8a, 0x97, 0x15, 0x6d, 0x02, 0x30, 0x37, 0xf3, 0x99, 0xa5, 0x19, 0xcd, 0xcf, 0x9c,
		0x66, 0x6d, 0x56, 0x73, 0x33, 0xaf, 0xb9, 0x99, 0xd9, 0x5c, 0xcd, 0xad, 0x5a, 0xb3, 0xab, 0xd8,
		0xfc, 0x26, 0x23, 0x47, 0x9e, 0xf0, 0xdc, 0xaf, 0x7f, 0xd4, 0x89, 0xd0, 0xbd, 0x20, 0xf3, 0xed,
		0xab, 0x72, 0xce, 0xbf, 0xc2, 0xb9, 0xaf, 0x3c, 0x4c, 0x6b, 0xa1, 0x33, 0xf2, 0x8e, 0xf1, 0xed,
		0xe0, 0x1d, 0xe1, 0x1d, 0xe1, 0x1d, 0xe1, 0x1d, 0xe1, 0x1d, 0xe1, 0x1d, 0x8f, 0x2c, 0xdc, 0x25,
		0x66, 0xf6, 0xd8, 0x7a, 0x1f, 0x9a, 0x2e, 0xff, 0xc5, 0xa6, 0x98, 0xea, 0x4a, 0xa5, 0xff, 0xca,
		0x9f, 0xab, 0xc9, 0xbe, 0x6a, 0xf2, 0xa9, 0xaa, 0x32, 0x75, 0xa8, 0xd1, 0xf0, 0x08, 0xfc, 0xe6,
		0x3a, 0x5f, 0xa6, 0x2f, 0x18, 0x7e, 0xfe, 0xc3, 0x75, 0x83, 0x9f, 0xa3, 0xd7, 0x5b, 0xfa, 0xd3,
		0xcd, 0x7f, 0x0c, 0xef, 0xa7, 0xf0, 0xdd, 0x66, 0x1f, 0x6e, 0x3e, 0x45, 0xaf, 0xf6, 0xaa, 0x1c,
		0x0b, 0x5a, 0x05, 0x67, 0x17, 0x65, 0x8d, 0xd4, 0x56, 0x2b, 0x48, 0x57, 0x33, 0x95, 0x31, 0x48,
		0x44, 0xe6, 0xb9, 0xd0, 0x20, 0x10, 0x99, 0x67, 0xb8, 0x62, 0xf5, 0xa0, 0x2e, 0x3b, 0x30, 0xa7,
		0x18, 0xc4, 0xbd, 0x1c, 0xd9, 0x96, 0xed, 0x94, 0x66, 0x8f, 0xde, 0xfb, 0xd0, 0x52, 0xed, 0xad,
		0x49, 0x27, 0xa7, 0xde, 0x5b, 0xbf, 0x43, 0x06, 0x54, 0x7c, 0x6b, 0x37, 0x25, 0xa5, 0xe6, 0x53,
		0xbd, 0x76, 0x14, 0x03, 0xfc, 0x42, 0x00, 0x7b, 0x15, 0x25, 0x36, 0xb9, 0x41, 0xf9, 0x4a, 0x41,
		0x19, 0x4f, 0x8b, 0x55, 0x82, 0xa7, 0x68, 0x59, 0xe7, 0xb9, 0x9c, 0x29, 0xab, 0x55, 0x33, 0x5f,
		0xbd, 0x15, 0xf0, 0xe1, 0x52, 0x3a, 0x6a, 0x70, 0xe0, 0x82, 0x03, 0x97, 0xda, 0xd2, 0x14, 0x83,
		0x19, 0x37, 0x9d, 0x5d, 0x01, 0x57, 0x6e, 0xb1, 0x96, 0x52, 0xbe, 0xbc, 0xb9, 0x5b, 0xd7, 0x4c,
		0xa5, 0xc0, 0xe7, 0xa3, 0x93, 0xb2, 0xda, 0x80, 0xd1, 0x46, 0x03, 0xa3, 0x0d, 0x18, 0x6d, 0x24,
		0x19, 0x6d, 0x54, 0xb0, 0xd9, 0x80, 0xc9, 0x26, 0x17, 0xc5, 0xa5, 0x56, 0x60, 0x65, 0x8a, 0xac,
		0x4c, 0xa1, 0x95, 0x2a, 0x76, 0x31, 0xc2, 0x29, 0x30, 0xd9, 0x68, 0x85, 0x30, 0x05, 0x2a, 0x4c,
		0x82, 0x7a, 0xd3, 0xa0, 0xca, 0x44, 0x28, 0x37, 0x15, 0xca, 0x4d, 0x46, 0x26, 0xa6, 0xa3, 0x98,
		0x79, 0x43, 0x30, 0xd9, 0xe4, 0x39, 0x05, 0x60, 0xb2, 0x81, 0x01, 0x86, 0x01, 0x86, 0x01, 0x06,
		0x93, 0x4d, 0x6e, 0x16, 0x18, 0x4c, 0x36, 0xb0, 0xc6, 0xb0, 0xc6, 0xb0, 0xc6, 0xb4, 0x11, 0xf6,
		0x9a, 0x79, 0x01, 0x93, 0x8d, 0x22, 0xa3, 0xa3, 0xd2, 0xf8, 0x64, 0x67, 0x84, 0x54, 0x1b, 0xa3,
		0xcc, 0x8c, 0x52, 0x66, 0xc6, 0x29, 0x53, 0x23, 0x45, 0x6b, 0xac, 0x88, 0x8d, 0x96, 0x32, 0xe3,
		0x95, 0x08, 0x06, 0x93, 0x4d, 0x6e, 0x66, 0x2d, 0x0b, 0xf3, 0x96, 0xbd, 0x99, 0xcb, 0xca, 0xdc,
		0x65, 0x6e, 0xf6, 0x32, 0x37, 0x7f, 0xb9, 0x98, 0x41, 0x35, 0xe6, 0x50, 0x91, 0x59, 0x54, 0x6e,
		0x1e, 0x93, 0x1b, 0x80, 0xc9, 0xa6, 0xb0, 0xe6, 0x33, 0x4b, 0x33, 0x9a, 0x9f, 0x39, 0xcd, 0xda,
		0xac, 0xe6, 0x66, 0x5e, 0x73, 0x33, 0xb3, 0xb9, 0x9a, 0x5b, 0xb5, 0x66, 0x57, 0xb1, 0xf9, 0x4d,
		0x46, 0x0e, 0xbd, 0xfa, 0xc5, 0x9d, 0x7f, 0x30, 0xd9, 0xc0, 0x3b, 0xc2, 0x3b, 0xc2, 0x3b, 0xc2,
		0x3b, 0xc2, 0x3b, 0xc2, 0x3b, 0x96, 0x3b, 0xdc, 0x2d, 0x31, 0x93, 0xcd, 0x62, 0xcf, 0xce, 0x41,
		0x31, 0xd8, 0x2c, 0x74, 0xf7, 0x80, 0xbb, 0x66, 0xfb, 0xa0, 0x83, 0xbb, 0x26, 0x57, 0x38, 0x88,
		0x5c, 0x73, 0xa9, 0xe0, 0x1e, 0x72, 0xcd, 0xc5, 0x73, 0xbe, 0xe0, 0xae, 0xc9, 0xd1, 0x23, 0x81,
		0xbb, 0x06, 0xdc, 0x35, 0x69, 0x6f, 0x0a, 0xee, 0x9a, 0x82, 0x40, 0xf9, 0xe2, 0x73, 0xd6, 0xa4,
		0x02, 0xef, 0x60, 0xab, 0xc9, 0x71, 0x21, 0xe7, 0xb1, 0x80, 0x8b, 0xcb, 0x52, 0xb3, 0x73, 0xbd,
		0x82, 0x9f, 0x06, 0xfc, 0x34, 0xe0, 0xa7, 0x29, 0xa4, 0x6d, 0x29, 0x1e, 0x2f, 0xcd, 0x26, 0x4b,
		0x02, 0x46, 0x9a, 0xe2, 0x2c, 0x9e, 0xe2, 0xb0, 0xd1, 0x94, 0x83, 0x8a, 0x26, 0xb0, 0x46, 0xcc,
		0x9d, 0x04, 0xf2, 0x34, 0x34, 0x33, 0x41, 0x72, 0x14, 0x34, 0x35, 0x50, 0xd0, 0x28, 0xc8, 0xd3,
		0x81, 0x82, 0x26, 0x03, 0xfb, 0x28, 0x9d, 0xe7, 0x4a, 0xd6, 0xcf, 0xc4, 0x72, 0x82, 0x66, 0x43,
		0x66, 0xdd, 0x4c, 0xb5, 0xe9, 0x42, 0x42, 0xc4, 0x1f, 0x86, 0x73, 0x17, 0x3e, 0xcd, 0xb5, 0xd4,
		0xbc, 0xd2, 0x00, 0x40, 0xba, 0x7e, 0xc4, 0xff, 0x4c, 0x2b, 0x6f, 0xa8, 0xfa, 0x06, 0x7f, 0xf5,
		0x8c, 0x41, 0xe8, 0x12, 0x7f, 0xb1, 0xee, 0x2c, 0xca, 0x6c, 0x50, 0xe5, 0x37, 0x76, 0x67, 0x04,
		0xd6, 0x43, 0xf8, 0xac, 0x43, 0xc3, 0xf6, 0x59, 0x21, 0x1a, 0x44, 0x3f, 0x19, 0x4f, 0xf4, 0x53,
		0xd1, 0xa9, 0x85, 0xff, 0x1d, 0xdf, 0x7c, 0xe4, 0x04, 0x1a, 0xfb, 0x59, 0x81, 0x91, 0x57, 0x0a,
		0x57, 0xa7, 0x2c, 0x18, 0x55, 0x00, 0x42, 0x05, 0xcc, 0x35, 0x2d, 0xe0, 0xe4, 0xf3, 0x93, 0xe9,
		0xa7, 0x27, 0xdd, 0x37, 0x53, 0x4e, 0xe0, 0x2c, 0xcd, 0x10, 0xbd, 0x73, 0xca, 0x4b, 0x84, 0xf2,
		0x09, 0xe2, 0x79, 0x03, 0xd2, 0xfc, 0x80, 0x58, 0x1e, 0x20, 0xed, 0x60, 0x0a, 0x6a, 0x01, 0xcd,
		0xea, 0xe7, 0x58, 0xf0, 0xf2, 0x0b, 0x3d, 0xdd, 0xe2, 0xde, 0xbf, 0x54, 0x77, 0x7f, 0x63, 0xcf,
		0xb8, 0xf3, 0x8e, 0xb7, 0xf4, 0x38, 0xa7, 0x18, 0x62, 0xa9, 0xa1, 0xdd, 0x3d, 0xaa, 0xdb, 0xc7,
		0x6a, 0xf3, 0xbf, 0x6c, 0x19, 0xbd, 0xb4, 0xa3, 0x26, 0x31, 0x5a, 0x3b, 0xc6, 0x49, 0x70, 0x7c,
		0x36, 0x8f, 0xcc, 0xfa, 0x7b, 0x6f, 0x78, 0xe7, 0x8a, 0xc9, 0x86, 0xc6, 0xc4, 0x0e, 0xf4, 0x81,
		0x3b, 0x1a, 0x4d, 0x1c, 0x2b, 0x78, 0xd6, 0x47, 0xc6, 0x78, 0x3b, 0xa7, 0x46, 0x02, 0xfb, 0xb7,
		0x5c, 0xb7, 0x65, 0x54, 0x77, 0x37, 0x71, 0xee, 0x0d, 0x88, 0xd3, 0x04, 0xbc, 0xfc, 0x01, 0x6d,
		0xda, 0x80, 0x95, 0x3b, 0x20, 0xe5, 0x0e, 0x38, 0x85, 0x02, 0x4a, 0xbe, 0x75, 0xbd, 0xaf, 0x89,
		0x6e, 0xf3, 0x84, 0xee, 0x1f, 0x9b, 0x9d, 0xeb, 0x61, 0xdf, 0x38, 0xa5, 0xeb, 0xed, 0x4d, 0x9d,
		0x2f, 0xe1, 0xc9, 0x8b, 0x88, 0xe7, 0x3f, 0x78, 0xf3, 0x1c, 0xc2, 0xf9, 0x0c, 0xe1, 0xbc, 0x85,
		0x54, 0x7e, 0x42, 0xce, 0xe9, 0xa4, 0xed, 0xd5, 0xac, 0xcc, 0xd7, 0xc9, 0xd4, 0xda, 0xa5, 0x1c,
		0xcc, 0x84, 0xb0, 0x72, 0xf9, 0xfa, 0xb4, 0x80, 0x8e, 0x2b, 0x71, 0xc7, 0x9d, 0xa8, 0x13, 0x49,
		0xcc, 0xc9, 0x27, 0xe2, 0x44, 0x13, 0x6f, 0xd2, 0x89, 0x36, 0xe9, 0xc4, 0x1a, 0x49, 0x22, 0x8d,
		0x16, 0xf2, 0x73, 0x27, 0xc6, 0x92, 0xf9, 0x8b, 0x21, 0x80, 0xe5, 0xfa, 0xfa, 0x93, 0xa7, 0x73,
		0x57, 0x77, 0xcd, 0xab, 0xb5, 0x38, 0xae, 0xf9, 0xc8, 0x9c, 0xbb, 0x08, 0x80, 0xf0, 0xe5, 0xbd,
		0x04, 0x42, 0x50, 0x99, 0xbc, 0x96, 0x6c, 0x1e, 0x8b, 0x2c, 0x4f, 0x22, 0x9f, 0x17, 0x11, 0xd9,
		0xb4, 0x90, 0xc9, 0x43, 0xcd, 0x87, 0xae, 0xf1, 0xb6, 0xfc, 0x83, 0xa7, 0x28, 0xe6, 0xef, 0x73,
		0x68, 0xcc, 0x67, 0x23, 0x08, 0x98, 0xe7, 0x70, 0xab, 0x4c, 0xe5, 0xba, 0xd7, 0x7b, 0xec, 0xf5,
		0xf4, 0x5e, 0xef, 0xbc, 0x7b, 0x76, 0xf3, 0xaf, 0xbf, 0xfd, 0xf0, 0xf7, 0x5e, 0xef, 0xcd, 0x8f,
		0xbd, 0xde, 0xf7, 0x7f, 0xf6, 0xdf, 0xa4, 0x37, 0x55, 0x7d, 0xaa, 0xc0, 0xf0, 0x2c, 0x8d, 0x83,
		0x75, 0x02, 0xf6, 0x14, 0x88, 0x78, 0xd6, 0xf8, 0x42, 0xb8, 0x54, 0xb8, 0xd4, 0x9c, 0x5d, 0xaa,
		0x84, 0x17, 0xcd, 0x50, 0xd3, 0x7c, 0x36, 0x98, 0x78, 0x56, 0xf0, 0xcc, 0xaf, 0x6a, 0xc9, 0x95,
		0xd0, 0x35, 0xe8, 0x1a, 0x74, 0x2d, 0x85, 0xae, 0x05, 0x86, 0x77, 0xc7, 0x02, 0xdd, 0xb6, 0x7c,
		0x01, 0xcf, 0xb6, 0x78, 0x31, 0x34, 0x0e, 0x1a, 0x07, 0x8d, 0x93, 0xca, 0xf5, 0x4c, 0x77, 0xc7,
		0xb8, 0x32, 0x31, 0x7c, 0xfb, 0x63, 0xfc, 0xfb, 0x62, 0x24, 0xfb, 0x61, 0x7c, 0xfb, 0x60, 0x79,
		0xef, 0xc3, 0x6c, 0xce, 0xc4, 0x57, 0x45, 0x12, 0xb2, 0xdc, 0x7b, 0x10, 0xbf, 0xc4, 0x37, 0xf9,
		0x79, 0x76, 0x8f, 0x4f, 0xc6, 0xd8, 0xdf, 0xf4, 0x97, 0xe5, 0xde, 0xbb, 0xe1, 0xda, 0xeb, 0x20,
		0x19, 0x43, 0xa9, 0x1d, 0x1d, 0xcf, 0x1d, 0xeb, 0x63, 0x63, 0xf0, 0x27, 0x0b, 0x52, 0x6c, 0xe3,
		0x2c, 0x7c, 0x19, 0x7b, 0x37, 0x65, 0xdd, 0xbb, 0xf1, 0xd8, 0xd8, 0xf5, 0x82, 0xf4, 0x9b, 0x35,
		0xd3, 0xef, 0x63, 0x77, 0x06, 0xbb, 0x33, 0x9b, 0xbf, 0x68, 0x0c, 0x6c, 0x7e, 0x78, 0x1d, 0x5e,
		0xc4, 0x07, 0xab, 0xeb, 0x80, 0xd5, 0x80, 0xd5, 0x72, 0x4b, 0x35, 0xb9, 0xe0, 0xa1, 0xa5, 0x1b,
		0x83, 0x01, 0xf3, 0x7d, 0xbe, 0xe0, 0x70, 0x6d, 0xfa, 0x57, 0xe4, 0x70, 0x0e, 0xa4, 0x58, 0x67,
		0x80, 0x70, 0x47, 0x80, 0x4c, 0x27, 0x00, 0x5d, 0x07, 0x80, 0x6c, 0xe5, 0x3f, 0x59, 0xc5, 0x3f,
		0x59, 0xa5, 0x3f, 0x69, 0x85, 0xbf, 0xda, 0xe2, 0x52, 0xe1, 0x4a, 0x7e, 0x79, 0x26, 0x0a, 0x41,
		0x86, 0x09, 0x8e, 0x6a, 0xce, 0x33, 0x1e, 0xfd, 0x37, 0x06, 0xb6, 0x1e, 0x88, 0x8c, 0xc6, 0x82,
		0xee, 0x27, 0x32, 0xa0, 0xf7, 0xd0, 0xfb, 0x03, 0xd7, 0xfb, 0x30, 0xfa, 0x4c, 0x8f, 0xd9, 0x36,
		0x2a, 0x7e, 0x4b, 0xe0, 0xda, 0xf7, 0xce, 0x64, 0x24, 0xbe, 0x64, 0xbe, 0xba, 0x5f, 0x62, 0x73,
		0x25, 0xd5, 0xbc, 0x54, 0x8f, 0x78, 0xd8, 0xc7, 0x0f, 0x2d, 0x99, 0xbe, 0xa5, 0xc6, 0x54, 0x48,
		0xa7, 0x92, 0x6d, 0xeb, 0x96, 0xfb, 0xc1, 0x09, 0xe4, 0x5e, 0x3f, 0x7a, 0x73, 0xa9, 0xbe, 0xa2,
		0xf8, 0xbd, 0xbb, 0x5a, 0xa3, 0x98, 0x0d, 0x1a, 0x6a, 0x3c, 0x4c, 0x87, 0x08, 0x61, 0x76, 0x80,
		0x30, 0xe1, 0x69, 0x80, 0x30, 0x4b, 0x87, 0x30, 0x3b, 0x04, 0x08, 0xb3, 0x03, 0x84, 0x09, 0xbd,
		0x07, 0xc2, 0x04, 0xc2, 0x04, 0xc2, 0x3c, 0x12, 0x84, 0x59, 0xca, 0x26, 0xca, 0x85, 0x7d, 0xc1,
		0x6a, 0xbc, 0x5b, 0x54, 0xe5, 0x53, 0x64, 0xbe, 0x2d, 0x50, 0xcf, 0x1d, 0x7f, 0x8e, 0x6e, 0x76,
		0xf3, 0x47, 0x74, 0xb3, 0x9b, 0xab, 0x81, 0x7d, 0x1c, 0x5d, 0x94, 0xeb, 0x03, 0x4d, 0xbe, 0x47,
		0xbf, 0x3a, 0xb8, 0xc2, 0x9b, 0xf1, 0x3b, 0xb6, 0x63, 0x27, 0xce, 0x9f, 0x8e, 0xfb, 0xe8, 0xe8,
		0x13, 0x9f, 0x79, 0xe9, 0xf7, 0x21, 0x97, 0xae, 0x4a, 0xb7, 0x1b, 0x59, 0xc3, 0x6e, 0x24, 0x29,
		0x3e, 0xc9, 0x71, 0x37, 0x32, 0x35, 0xbe, 0x48, 0xc6, 0x9f, 0x8d, 0xc6, 0xa9, 0x8a, 0x65, 0x13,
		0xf4, 0xd0, 0x2c, 0x77, 0xdd, 0xc9, 0xde, 0xe2, 0x0c, 0x09, 0x63, 0x20, 0x53, 0x62, 0xc2, 0x9c,
		0x81, 0xf7, 0x3c, 0x0e, 0x98, 0xc9, 0xdd, 0x36, 0xbc, 0xf5, 0x4a, 0x14, 0x9f, 0x94, 0xb5, 0xf8,
		0x64, 0xcb, 0x94, 0xa6, 0xf7, 0x02, 0xdb, 0x04, 0xa0, 0x3c, 0x05, 0xe5, 0x29, 0x9b, 0xbf, 0x88,
		0xe6, 0x61, 0xb2, 0x4c, 0x0b, 0x8a, 0x56, 0x08, 0xa3, 0xb3, 0x52, 0x35, 0x0f, 0xa3, 0x15, 0x32,
		0x85, 0x9d, 0x40, 0x2b, 0x24, 0x0c, 0x44, 0x21, 0x0c, 0x04, 0x5a, 0x21, 0xa1, 0x6b, 0xd0, 0x35,
		0xe8, 0xda, 0xfc, 0x9e, 0x68, 0x85, 0x84, 0xc6, 0x41, 0xe3, 0xd0, 0x0a, 0xb9, 0xfd, 0x8a, 0xa3,
		0x6b, 0x85, 0xdc, 0x96, 0x5d, 0xac, 0x8a, 0xa5, 0x98, 0xb8, 0xb3, 0xab, 0xef, 0x67, 0xb7, 0x59,
		0x6e, 0x88, 0xdc, 0xf8, 0xd7, 0xe5, 0x6e, 0x89, 0xe4, 0xcc, 0xe3, 0x12, 0x8d, 0xa4, 0x4c, 0xce,
		0xfa, 0xce, 0x73, 0x27, 0x69, 0x32, 0xd4, 0xd3, 0xef, 0x21, 0x1f, 0x5d, 0xd6, 0x7c, 0x74, 0x34,
		0x81, 0xe9, 0xb3, 0xcf, 0xf1, 0xd7, 0x91, 0x6b, 0x46, 0xae, 0x79, 0x67, 0xf2, 0x48, 0x38, 0xd3,
		0xbc, 0x70, 0x35, 0x80, 0x36, 0x80, 0x36, 0x80, 0x76, 0x0a, 0xc3, 0x25, 0xa6, 0x6b, 0xd0, 0x31,
		0xe8, 0x58, 0x11, 0x74, 0x0c, 0x44, 0xb0, 0xdb, 0x2e, 0x06, 0x11, 0x2c, 0x88, 0x60, 0x41, 0x04,
		0x9b, 0xf1, 0xee, 0xa7, 0xe3, 0x06, 0xd6, 0xf0, 0x59, 0x7f, 0xb0, 0xd8, 0xa3, 0x80, 0x4f, 0x5d,
		0xb8, 0x18, 0xae, 0x15, 0xae, 0x15, 0xf0, 0x35, 0x85, 0xc6, 0x79, 0xcc, 0x30, 0x05, 0xf5, 0x6d,
		0x7e, 0x29, 0xb4, 0x0d, 0xda, 0x06, 0x6d, 0xe3, 0xa8, 0x39, 0xd0, 0x47, 0xae, 0xc9, 0x6c, 0xf1,
		0xca, 0x83, 0xe9, 0xf5, 0xd0, 0x3b, 0xe8, 0x5d, 0xce, 0x7a, 0xf7, 0x25, 0x7c, 0x7e, 0xa1, 0x65,
		0xa9, 0x09, 0xb6, 0x4e, 0x8a, 0xb5, 0x4c, 0xca, 0xb5, 0x4a, 0x56, 0x6a, 0x31, 0xc0, 0xd4, 0x8d,
		0x49, 0x70, 0xcf, 0x9c, 0xc0, 0x1a, 0xc4, 0xfb, 0x54, 0x02, 0x91, 0x55, 0xd4, 0x6c, 0x29, 0x2f,
		0xa6, 0x11, 0xaf, 0x5f, 0xeb, 0xc1, 0x18, 0x3c, 0x57, 0xd4, 0xb6, 0xd6, 0x0a, 0x77, 0x58, 0xae,
		0xbe, 0xa6, 0x50, 0x30, 0xbd, 0x61, 0xd4, 0x85, 0xc2, 0xc1, 0x64, 0xb0, 0x78, 0xdb, 0x34, 0xc9,
		0xdb, 0x27, 0x69, 0x3c, 0x49, 0xa8, 0x77, 0x0f, 0xcc, 0xf3, 0x79, 0xda, 0x2b, 0x97, 0xad, 0xee,
		0xec, 0x6a, 0x78, 0x11, 0x78, 0x11, 0x12, 0x2f, 0xf2, 0xc9, 0x70, 0x4c, 0x23, 0x70, 0xbd, 0x67,
		0x0e, 0xba, 0x4c, 0x71, 0xcf, 0xf3, 0x7f, 0x3c, 0x77, 0x32, 0xd6, 0x05, 0x56, 0x72, 0xf9, 0x1c,
		0xcf, 0x43, 0x5d, 0xd8, 0xd3, 0x3c, 0x34, 0x06, 0xc2, 0xee, 0xe5, 0xa1, 0x59, 0x58, 0xcf, 0xf2,
		0x50, 0x17, 0xf4, 0x02, 0xe1, 0x78, 0x88, 0xf9, 0xa1, 0x87, 0xe6, 0x81, 0xb8, 0x0e, 0x41, 0xf6,
		0x51, 0x39, 0xd6, 0x51, 0xb8, 0x0f, 0xb8, 0x8f, 0x23, 0x0f, 0xfe, 0x05, 0x58, 0x3f, 0xc5, 0xd9,
		0x3e, 0xa1, 0x6f, 0xd0, 0x37, 0xa5, 0x41, 0x3f, 0x27, 0xc5, 0x4a, 0x59, 0xf0, 0x96, 0x0c, 0x17,
		0x92, 0x28, 0x07, 0x52, 0x86, 0xb8, 0x49, 0x9c, 0xeb, 0x48, 0x8c, 0xe3, 0xa8, 0xa0, 0x08, 0xa8,
		0x23, 0x89, 0x80, 0x3a, 0x40, 0x40, 0xb0, 0xc8, 0x40, 0x40, 0xfc, 0x7a, 0x27, 0x81, 0x80, 0x3a,
		0x40, 0x40, 0xd0, 0x37, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x79, 0x4b, 0xfc, 0xe8, 0x59, 0x01,
		0x13, 0xac, 0xfb, 0x58, 0xb8, 0x16, 0x96, 0x18, 0x96, 0x18, 0xc8, 0x87, 0xa2, 0x1d, 0x17, 0x4d,
		0xb8, 0x1b, 0x17, 0xaa, 0xe2, 0x26, 0xdc, 0xb8, 0x81, 0xb2, 0x9a, 0xa6, 0xaf, 0x4e, 0xe3, 0x6d,
		0x0b, 0x8d, 0xf6, 0xa7, 0xfc, 0xf8, 0x57, 0xb9, 0x1b, 0x68, 0x77, 0xb6, 0x99, 0x0a, 0x8e, 0x8b,
		0x4c, 0x7b, 0xac, 0xe5, 0x0c, 0x5d, 0x6f, 0xa4, 0x8f, 0x99, 0x63, 0xee, 0x42, 0x39, 0x89, 0x89,
		0x58, 0xf9, 0xfe, 0xee, 0x76, 0xd9, 0x1a, 0xda, 0x65, 0xe9, 0x9c, 0x06, 0xdf, 0xfa, 0xdd, 0xeb,
		0x04, 0xe6, 0x64, 0xbc, 0x96, 0x13, 0x34, 0x1b, 0xbb, 0xc6, 0x6d, 0x3a, 0x9b, 0x17, 0x3b, 0xbe,
		0xf2, 0x87, 0xe1, 0xdc, 0xb1, 0xbd, 0x45, 0xf5, 0xe9, 0x2c, 0x6d, 0x7a, 0x14, 0x35, 0x6b, 0x8e,
		0x48, 0x8b, 0x6d, 0x44, 0x5b, 0x21, 0xf8, 0x5b, 0x1f, 0x5e, 0xd2, 0xb9, 0x08, 0xfe, 0x57, 0x6d,
		0x35, 0x2e, 0x5b, 0x97, 0x9d, 0x8b, 0xc6, 0x65, 0xbb, 0x78, 0xef, 0x2c, 0x68, 0x98, 0xfb, 0xf2,
		0xe6, 0xcb, 0x63, 0x81, 0x67, 0x31, 0x3f, 0xb5, 0xf9, 0x9a, 0x7d, 0x1f, 0xe6, 0x0b, 0xe6, 0x0b,
		0xe6, 0x2b, 0x43, 0xf3, 0x55, 0xaf, 0xd5, 0x60, 0xb7, 0xe6, 0x76, 0x2b, 0xb0, 0x46, 0xcc, 0x9d,
		0x04, 0xa9, 0xed, 0xd6, 0xec, 0xfb, 0xb0, 0x5b, 0xb0, 0x5b, 0xf9, 0xdb, 0xad, 0xfa, 0xd1, 0xc1,
		0xae, 0x3a, 0x8c, 0xd7, 0x3c, 0xed, 0xbb, 0xcf, 0x64, 0x6d, 0x4f, 0x7b, 0x83, 0x4e, 0xa9, 0xf8,
		0x74, 0x4a, 0x81, 0xeb, 0xa7, 0x27, 0x53, 0x0a, 0xbf, 0x0c, 0x2a, 0x25, 0x50, 0x29, 0x6d, 0xfe,
		0xa2, 0xe9, 0x0f, 0xc6, 0xfc, 0x5b, 0x23, 0xd1, 0x55, 0xd8, 0x14, 0xc1, 0xa6, 0x48, 0xce, 0x9b,
		0x22, 0x51, 0x57, 0x5e, 0xb8, 0x18, 0xf5, 0x87, 0x08, 0x0c, 0x08, 0xec, 0x8e, 0x5c, 0x72, 0x5c,
		0x33, 0x7d, 0x50, 0xe5, 0x84, 0x2e, 0xf3, 0x53, 0x58, 0x26, 0x23, 0xe6, 0x09, 0xf7, 0xce, 0x95,
		0xfd, 0xbc, 0xc6, 0xa8, 0x27, 0xc4, 0x64, 0x43, 0x63, 0x62, 0x07, 0x32, 0x47, 0x36, 0xd6, 0x23,
		0x41, 0xc6, 0xb0, 0x5e, 0x97, 0x92, 0xd2, 0x98, 0x4a, 0x69, 0x48, 0x49, 0x69, 0x4d, 0xa5, 0x34,
		0xa5, 0xa4, 0x74, 0x22, 0x22, 0x3b, 0x5f, 0xee, 0x51, 0xde, 0xc6, 0x8f, 0xd2, 0x90, 0x1a, 0x96,
		0xc6, 0x74, 0x70, 0x1b, 0x52, 0xcf, 0xd2, 0x98, 0x0e, 0x6e, 0x43, 0x6a, 0x58, 0x1a, 0xad, 0x78,
		0x58, 0xe4, 0x84, 0x74, 0xe2, 0x47, 0x69, 0xca, 0x0d, 0xcb, 0x74, 0x70, 0x9b, 0x52, 0xc3, 0xd2,
		0x9c, 0x0e, 0x6e, 0x53, 0xea, 0x8d, 0x9a, 0x8d, 0x78, 0x58, 0xa4, 0xce, 0x3d, 0x6d, 0x4e, 0x17,
		0x6e, 0x4b, 0x6a, 0x58, 0x9a, 0xd3, 0xc1, 0x6d, 0xc9, 0x0d, 0xcb, 0x74, 0x70, 0x5b, 0x52, 0xc3,
		0xd2, 0xaa, 0xc5, 0xc3, 0xd2, 0x96, 0x12, 0x12, 0xbd, 0x10, 0x1b, 0x4a, 0xc9, 0x78, 0x1b, 0x3f,
		0x48, 0x47, 0x46, 0x48, 0x7b, 0x6a, 0x12, 0x2e, 0x64, 0x84, 0x4c, 0x1f, 0xa4, 0x5e, 0xba, 0xb3,
		0x6d, 0x23, 0xe3, 0xde, 0xd5, 0xea, 0xb5, 0x33, 0x29, 0x19, 0x8d, 0x88, 0xcd, 0x4b, 0x4e, 0x46,
		0x53, 0xd0, 0xe5, 0x2e, 0xc8, 0x68, 0xd4, 0x39, 0xc9, 0xe6, 0x36, 0xc9, 0x08, 0xdf, 0xa5, 0x21,
		0x37, 0x1e, 0x8d, 0xa8, 0x15, 0x50, 0x6e, 0x3c, 0x9a, 0xe1, 0xbb, 0x34, 0x3a, 0x72, 0x32, 0xa2,
		0x77, 0x91, 0x1b, 0x8f, 0x66, 0xf8, 0x2e, 0x4d, 0xb9, 0xf1, 0x68, 0x85, 0xef, 0xd2, 0x94, 0x9b,
		0xdb, 0x56, 0xf8, 0x2e, 0x4d, 0xb9, 0xf1, 0x68, 0x45, 0xef, 0x22, 0x33, 0x1e, 0xa1, 0x8e, 0x77,
		0x35, 0x39, 0x09, 0x91, 0xb2, 0x74, 0xa4, 0x44, 0x44, 0xeb, 0xab, 0x25, 0x25, 0x22, 0x74, 0x4b,
		0xcd, 0x86, 0x94, 0x88, 0x76, 0xa5, 0xab, 0xb5, 0x6a, 0x52, 0x22, 0x42, 0xe3, 0xdb, 0x92, 0x1b,
		0xce, 0x8b, 0x4a, 0x57, 0x6b, 0xcb, 0x0c, 0xe7, 0x0c, 0x29, 0x0b, 0xb3, 0x08, 0x46, 0x52, 0xd8,
		0x30, 0x7c, 0x95, 0x4e, 0x31, 0x4f, 0xf8, 0x3e, 0xcb, 0x2a, 0xf2, 0xda, 0xbb, 0x03, 0xb0, 0x2f,
		0xe8, 0xba, 0x10, 0xb8, 0x34, 0xdd, 0x8e, 0x01, 0xdd, 0xdb, 0x26, 0x37, 0x96, 0x21, 0x10, 0x4d,
		0x84, 0x70, 0xee, 0x98, 0x6e, 0x95, 0x43, 0xc5, 0x89, 0x39, 0x9f, 0x53, 0x59, 0x6e, 0x4c, 0x49,
		0x7c, 0xa3, 0xc9, 0x12, 0x8d, 0xae, 0x0d, 0x71, 0xa7, 0x79, 0xb8, 0x63, 0x9c, 0x91, 0xe1, 0xe9,
		0xab, 0xe2, 0x3b, 0x25, 0xcd, 0x8c, 0xb1, 0xa7, 0xc0, 0x33, 0xf4, 0x89, 0xe3, 0x07, 0xc6, 0xad,
		0xcd, 0x99, 0x23, 0x7b, 0xbc, 0x67, 0x4e, 0x96, 0xc9, 0xaa, 0xf3, 0xf3, 0x6a, 0xf0, 0x3c, 0x66,
		0xda, 0x8f, 0xda, 0x3f, 0x4c, 0x7f, 0x30, 0xfe, 0x87, 0x88, 0xf1, 0x14, 0xcc, 0xaa, 0xce, 0x8d,
		0xef, 0x3c, 0xbb, 0x1a, 0xbd, 0xbe, 0x60, 0x40, 0x22, 0x9b, 0x63, 0x4d, 0x04, 0x2d, 0xe6, 0x5a,
		0xd7, 0xc6, 0x27, 0x13, 0x82, 0xe3, 0x5f, 0x98, 0x3f, 0xf0, 0xac, 0x71, 0xc0, 0x43, 0x9f, 0xb4,
		0x6b, 0x8a, 0xbf, 0xc6, 0xaf, 0xf0, 0xcb, 0x97, 0x9f, 0x3f, 0x8b, 0x8e, 0xae, 0xe4, 0x24, 0xaf,
		0x4e, 0xb4, 0xb9, 0xf0, 0x86, 0x12, 0x06, 0x9a, 0x6a, 0xce, 0x37, 0xcd, 0xfb, 0xe2, 0xa0, 0x15,
		0x13, 0x58, 0x15, 0x92, 0x25, 0x79, 0xec, 0xb1, 0x01, 0x33, 0x99, 0x33, 0x10, 0x68, 0xa3, 0x5c,
		0xb8, 0x16, 0xfb, 0x54, 0xd8, 0xa7, 0x22, 0xf1, 0xc6, 0x92, 0xfb, 0x54, 0xf3, 0x25, 0x19, 0xef,
		0x56, 0xd5, 0xb1, 0x5d, 0xb5, 0xf1, 0x15, 0x4b, 0xbd, 0x5d, 0xe5, 0xb9, 0x93, 0xc0, 0x72, 0x98,
		0xd4, 0xbe, 0xcc, 0x94, 0xf2, 0xd2, 0xe5, 0x38, 0x7b, 0x77, 0xa3, 0xa0, 0xb8, 0x49, 0x75, 0x34,
		0x62, 0xa6, 0x65, 0x04, 0x52, 0x8f, 0xd4, 0x0c, 0x25, 0x0d, 0x6d, 0xc3, 0xbf, 0x97, 0xca, 0x73,
		0x27, 0x52, 0x74, 0xf7, 0x81, 0x79, 0x9e, 0x65, 0x4a, 0x3d, 0x54, 0x3b, 0x4a, 0x56, 0x7b, 0x56,
		0x60, 0x0d, 0x0c, 0x5b, 0x46, 0x50, 0x27, 0xae, 0xe2, 0x0c, 0x98, 0xe7, 0x30, 0xa9, 0x8d, 0xc6,
		0x8b, 0xa8, 0xc3, 0x8d, 0x05, 0x8f, 0xae, 0xf7, 0x67, 0xe9, 0x52, 0xe8, 0xc9, 0x48, 0x76, 0xb5,
		0xb6, 0xc4, 0x18, 0xc4, 0xab, 0xa4, 0xab, 0x35, 0x65, 0x65, 0xcc, 0xd7, 0x48, 0x57, 0x93, 0x49,
		0x11, 0xce, 0x15, 0xa0, 0xab, 0xc9, 0xe4, 0x09, 0x93, 0x05, 0xd2, 0xd5, 0x64, 0xb2, 0x74, 0xb3,
		0xe5, 0x21, 0x94, 0x22, 0x5a, 0x80, 0x46, 0x53, 0xf3, 0x20, 0x7c, 0x70, 0x4b, 0x24, 0x66, 0x66,
		0xad, 0xba, 0x5a, 0x0d, 0x09, 0x3f, 0x24, 0xfc, 0x90, 0xf0, 0x2b, 0x68, 0xc2, 0xef, 0x02, 0xf9,
		0x3e, 0xe4, 0xfb, 0x8a, 0x9b, 0xef, 0x9b, 0x47, 0x36, 0xc8, 0xfa, 0x6d, 0xcf, 0xfa, 0x2d, 0x8e,
		0x52, 0x99, 0x73, 0x7f, 0x9f, 0x79, 0x53, 0x2b, 0xc8, 0x00, 0x6e, 0x18, 0x3a, 0xe4, 0x01, 0x53,
		0xe7, 0x01, 0xc5, 0x88, 0xd4, 0x40, 0xa1, 0x86, 0xdc, 0x5f, 0x61, 0x72, 0x7f, 0xfb, 0x9b, 0x70,
		0x64, 0x53, 0x61, 0xf9, 0xb1, 0xf6, 0x8f, 0x65, 0xfc, 0x41, 0x9c, 0xed, 0x8a, 0xfa, 0x49, 0x8a,
		0xca, 0xa4, 0x36, 0x6d, 0x91, 0xa9, 0x0b, 0x9d, 0xc5, 0xb2, 0xb0, 0x83, 0x51, 0x2b, 0x3a, 0x9f,
		0x5a, 0xa1, 0x29, 0x8c, 0xac, 0xf1, 0x43, 0xab, 0x9a, 0x4e, 0x8d, 0xb8, 0x68, 0x7a, 0x3e, 0x8c,
		0x1f, 0x5a, 0x37, 0x5f, 0x5d, 0xbf, 0xdc, 0xd4, 0x45, 0x7b, 0x78, 0x0c, 0xb9, 0x47, 0xa4, 0x22,
		0xd7, 0x82, 0xda, 0x49, 0xd5, 0x82, 0xda, 0x41, 0x0b, 0xaa, 0x86, 0x16, 0xd4, 0x34, 0x53, 0xce,
		0x8d, 0xbc, 0xd0, 0x82, 0x4a, 0x80, 0xa4, 0xd0, 0x82, 0x0a, 0x78, 0x0f, 0x78, 0x9f, 0x06, 0xde,
		0xa3, 0x05, 0x95, 0x2e, 0x90, 0x91, 0x0b, 0x68, 0x68, 0x02, 0x9b, 0xe5, 0x00, 0x07, 0x2d, 0xa8,
		0x9b, 0xa4, 0xa0, 0x05, 0x75, 0xa3, 0x14, 0xb4, 0xa0, 0x6e, 0x94, 0x82, 0x16, 0xd4, 0x4d, 0x52,
		0xd0, 0x82, 0xba, 0x26, 0x04, 0x2d, 0xa8, 0x68, 0x41, 0x5d, 0x94, 0x81, 0x16, 0xd4, 0x25, 0x19,
		0x68, 0x41, 0x5d, 0x94, 0x80, 0x16, 0xd4, 0xb9, 0x08, 0xb4, 0xa0, 0x6a, 0xa8, 0x48, 0xd3, 0x50,
		0x91, 0x86, 0x8a, 0xb4, 0x6d, 0x43, 0x8c, 0x16, 0x54, 0x45, 0x26, 0x44, 0x43, 0x49, 0xda, 0xc6,
		0x6b, 0xd1, 0x82, 0x8a, 0x16, 0x54, 0xb4, 0xa0, 0x66, 0x3e, 0xe7, 0x1a, 0x5a, 0x50, 0xd1, 0x82,
		0xba, 0xe9, 0x02, 0xec, 0x53, 0xa1, 0x05, 0x15, 0x2d, 0xa8, 0x29, 0x5e, 0x11, 0x2d, 0xa8, 0x68,
		0x41, 0x4d, 0x23, 0x0e, 0x2d, 0xa8, 0x8b, 0x2b, 0x18, 0x2d, 0xa8, 0x5b, 0x84, 0xa1, 0x05, 0x75,
		0xbb, 0x18, 0xb4, 0xa0, 0x22, 0xe1, 0x87, 0x84, 0x5f, 0xf1, 0x13, 0x7e, 0x68, 0x41, 0x45, 0xbe,
		0xaf, 0xc0, 0xf9, 0x3e, 0xb4, 0xa0, 0xa6, 0xc9, 0xfa, 0xa1, 0x05, 0xf5, 0xe8, 0x33, 0x80, 0x68,
		0x41, 0x15, 0xc9, 0x03, 0xa2, 0x05, 0x15, 0xb9, 0x3f, 0xb4, 0xa0, 0x2a, 0x49, 0x81, 0xa1, 0x05,
		0x75, 0xff, 0xa5, 0x68, 0x41, 0xd5, 0x8a, 0xd1, 0x82, 0xda, 0x51, 0xd4, 0x82, 0xda, 0x39, 0x88,
		0x16, 0xd4, 0x0e, 0x61, 0x0b, 0x6a, 0x47, 0xa6, 0x05, 0xd5, 0x76, 0xef, 0xee, 0x76, 0x59, 0x94,
		0xc4, 0x32, 0xce, 0xbe, 0x88, 0x46, 0xd4, 0xd2, 0x36, 0xa2, 0xde, 0x7b, 0xcc, 0xbf, 0x77, 0x6d,
		0x93, 0xa3, 0x1d, 0x35, 0xb9, 0x04, 0x4d, 0xa9, 0x68, 0x4a, 0xdd, 0xfc, 0x45, 0xd7, 0x32, 0xf5,
		0xb1, 0xe7, 0x0e, 0x98, 0xef, 0xf3, 0x40, 0x93, 0x64, 0xda, 0x56, 0xae, 0x4f, 0x39, 0x30, 0xbf,
		0x24, 0xf5, 0xb3, 0xe9, 0x73, 0x28, 0x95, 0x76, 0xad, 0x96, 0x0e, 0xb8, 0xf4, 0x11, 0x8a, 0x20,
		0x14, 0xc9, 0x39, 0x14, 0xe1, 0xde, 0xe4, 0x10, 0xd8, 0xdc, 0x10, 0xdc, 0xd4, 0x10, 0xc0, 0xe5,
		0x32, 0x9b, 0x18, 0xb2, 0x9b, 0x17, 0x64, 0x19, 0x75, 0xf9, 0x4c, 0xba, 0x48, 0x66, 0x50, 0x66,
		0x73, 0x22, 0x19, 0xba, 0x46, 0xad, 0x56, 0x3b, 0x80, 0xe1, 0x3b, 0x84, 0x42, 0x39, 0x73, 0x22,
		0xe5, 0x2f, 0x57, 0xae, 0x57, 0xe9, 0x2f, 0xa3, 0x45, 0x03, 0x8f, 0x09, 0x8f, 0x09, 0x8f, 0x09,
		0x8f, 0x09, 0x8f, 0x09, 0x8f, 0xa9, 0xc0, 0x63, 0x16, 0x3a, 0x8f, 0x39, 0x4d, 0x7a, 0x55, 0xd3,
		0xe6, 0x41, 0xb8, 0xd3, 0x77, 0x1f, 0xe3, 0x1b, 0xdc, 0x7c, 0x4d, 0x6e, 0x50, 0xea, 0xcc, 0xe6,
		0xee, 0x24, 0xa1, 0xe8, 0xe8, 0xc8, 0xe4, 0x37, 0x1d, 0x37, 0xb0, 0x86, 0xd6, 0x60, 0xf7, 0xbb,
		0x26, 0x1e, 0x64, 0xe9, 0xdb, 0xc8, 0x74, 0x96, 0x35, 0xd3, 0x39, 0x1a, 0xdb, 0xbe, 0x3e, 0xf4,
		0xbc, 0xf4, 0x89, 0xce, 0xe4, 0x8a, 0x12, 0xe4, 0x39, 0xa3, 0x67, 0x0d, 0xd8, 0x61, 0x26, 0x39,
		0x17, 0x5f, 0xae, 0x28, 0x19, 0x4e, 0xe6, 0x70, 0x15, 0x78, 0x2d, 0xb4, 0x58, 0x44, 0xd7, 0x1d,
		0x40, 0x64, 0xc4, 0xb7, 0xe4, 0x0e, 0x2c, 0x2c, 0xe2, 0x5a, 0x92, 0x45, 0x8b, 0x89, 0xd8, 0x68,
		0xcc, 0xd5, 0x97, 0x92, 0x58, 0xb8, 0x66, 0xa6, 0xbd, 0x83, 0x6e, 0xc0, 0x06, 0x01, 0x33, 0x45,
		0x5a, 0x07, 0x67, 0x97, 0x42, 0xcd, 0xa0, 0x66, 0x50, 0xb3, 0x5d, 0xf7, 0x9c, 0x38, 0x12, 0x8a,
		0xb6, 0x78, 0x31, 0x54, 0x0d, 0xaa, 0x76, 0xc4, 0xaa, 0x26, 0x85, 0x3a, 0x05, 0xba, 0x06, 0x2a,
		0x7e, 0x60, 0x04, 0x13, 0x3f, 0x75, 0xd2, 0x51, 0x60, 0x50, 0x4d, 0x36, 0xf6, 0xd8, 0xc0, 0x48,
		0xaf, 0xdc, 0x54, 0xda, 0x30, 0x7d, 0xb5, 0x3c, 0xb5, 0x61, 0xe1, 0xdd, 0x33, 0x2f, 0xe3, 0xeb,
		0x17, 0x3a, 0xfd, 0xb5, 0x98, 0x0e, 0xa9, 0xa6, 0x0c, 0x91, 0xb9, 0x93, 0x3c, 0xbf, 0x2d, 0xdc,
		0xe4, 0xe6, 0xd3, 0xd8, 0xf6, 0x7f, 0xf5, 0x3c, 0xe1, 0x2c, 0xd8, 0xd9, 0x9e, 0xa4, 0x40, 0xc0,
		0x38, 0x73, 0x02, 0x7b, 0x5b, 0xb1, 0x91, 0x12, 0x38, 0xc6, 0x94, 0xc0, 0x20, 0x5c, 0xd2, 0xfc,
		0x20, 0x2a, 0xbe, 0x0c, 0xf0, 0x09, 0xf0, 0x09, 0x91, 0xca, 0x5e, 0xf5, 0xd2, 0xd9, 0x53, 0xc0,
		0x1c, 0x9f, 0xa7, 0x21, 0x6e, 0x59, 0xd1, 0x16, 0x04, 0xf0, 0xa9, 0x5c, 0x1d, 0x2a, 0x07, 0x95,
		0x13, 0xf5, 0x0d, 0xc9, 0x05, 0xb7, 0x9e, 0xe5, 0xdc, 0x4d, 0xc6, 0xfa, 0xd0, 0xb0, 0x6c, 0xfe,
		0xf1, 0x9f, 0x4d, 0xfb, 0x92, 0x14, 0xce, 0x11, 0xe4, 0xf3, 0x20, 0xc2, 0xcb, 0x5a, 0x66, 0x79,
		0x13, 0x2d, 0x73, 0xd9, 0xe5, 0x4e, 0xb6, 0xec, 0xc9, 0x96, 0x3f, 0x9d, 0x1a, 0xf0, 0xa9, 0x03,
		0xa7, 0x5a, 0x88, 0x7b, 0x24, 0x69, 0xcf, 0x24, 0xe8, 0xa1, 0xf8, 0x87, 0x83, 0x63, 0x28, 0x2a,
		0x96, 0xe3, 0x4f, 0x86, 0x43, 0x6b, 0x60, 0x85, 0x81, 0xd4, 0xad, 0xe1, 0x98, 0x8f, 0x96, 0x19,
		0x85, 0x5b, 0x82, 0xea, 0xbf, 0x45, 0x1e, 0x0c, 0x01, 0x0c, 0x01, 0x0c, 0x41, 0x91, 0x0d, 0xc1,
		0xd8, 0x63, 0xe1, 0x7b, 0x88, 0x6b, 0xfe, 0x4c, 0x00, 0x54, 0x1d, 0xaa, 0x0e, 0x55, 0x2f, 0xb2,
		0xaa, 0x7b, 0x4c, 0xf7, 0xdc, 0x49, 0xc0, 0xf4, 0x31, 0x73, 0x4c, 0x91, 0xf6, 0xfc, 0x64, 0x38,
		0xd6, 0x24, 0x41, 0xf9, 0xa1, 0xfc, 0x50, 0xfe, 0x32, 0x29, 0xbf, 0x3e, 0xb0, 0x99, 0xe1, 0xd1,
		0x99, 0x80, 0xa9, 0x3c, 0x18, 0x02, 0x18, 0x02, 0x18, 0x82, 0xcc, 0x0d, 0x01, 0x69, 0x06, 0x91,
		0x73, 0xbb, 0x36, 0xb9, 0x4e, 0x7e, 0xdb, 0x36, 0x60, 0x55, 0xb1, 0x8c, 0xb8, 0x26, 0xbd, 0x9b,
		0xfb, 0x95, 0xdd, 0x44, 0x57, 0xbc, 0x4f, 0xee, 0x9c, 0xe1, 0x3e, 0x82, 0xe9, 0x3e, 0x0a, 0x6c,
		0x1e, 0x44, 0x57, 0x61, 0x93, 0x0e, 0x3b, 0x06, 0x92, 0xfa, 0x7e, 0xe0, 0x9b, 0x74, 0x1e, 0x73,
		0xc7, 0x81, 0x35, 0xb2, 0xfe, 0x12, 0x28, 0x8d, 0x5f, 0xb8, 0x16, 0x8a, 0x06, 0x45, 0x83, 0xa2,
		0xed, 0x56, 0xb4, 0x28, 0x22, 0x10, 0xd1, 0xb2, 0xf8, 0x42, 0xa8, 0x18, 0x54, 0x0c, 0x2a, 0xb6,
		0xeb, 0x9e, 0x93, 0xb1, 0x40, 0x45, 0xfc, 0x18, 0x8a, 0x05, 0xc5, 0x3a, 0x66, 0xc5, 0x42, 0x21,
		0x3c, 0x9d, 0x36, 0xa0, 0x10, 0x5e, 0x62, 0x2d, 0x65, 0x5f, 0x08, 0x9f, 0x0a, 0x55, 0xc9, 0x66,
		0x4e, 0x14, 0x96, 0xc1, 0xeb, 0xe3, 0xc6, 0x68, 0xcc, 0x5d, 0x0b, 0x1f, 0x5f, 0x85, 0x82, 0x78,
		0x14, 0xc4, 0x23, 0xd3, 0x06, 0x10, 0x05, 0x10, 0x85, 0xe8, 0x04, 0x8a, 0x05, 0xc5, 0x42, 0x74,
		0x82, 0xe8, 0x04, 0xd1, 0x49, 0xb1, 0xa2, 0x93, 0x34, 0x48, 0x9d, 0x22, 0x44, 0xf9, 0xdc, 0xf8,
		0x34, 0x56, 0x11, 0xa6, 0x84, 0x2f, 0x96, 0x3e, 0x3c, 0x89, 0xbe, 0x8d, 0x23, 0x0a, 0x70, 0x44,
		0xc1, 0xe6, 0x2f, 0x1a, 0x93, 0xe0, 0x9e, 0x39, 0xc1, 0x3e, 0x1a, 0xc0, 0xad, 0xd3, 0xb6, 0x72,
		0x3d, 0xa8, 0x8e, 0x41, 0x75, 0x8c, 0xb0, 0x25, 0x45, 0x17, 0xaf, 0x6b, 0x9b, 0xba, 0x1f, 0x18,
		0x5e, 0x20, 0xd0, 0xc0, 0x3b, 0xbf, 0x16, 0xea, 0x06, 0x75, 0x83, 0xba, 0x81, 0xa6, 0x12, 0x6a,
		0x06, 0x35, 0x2b, 0x80, 0x9a, 0x3d, 0x1a, 0xde, 0x48, 0xd4, 0xab, 0x2d, 0x5c, 0x0b, 0x75, 0x83,
		0xba, 0x21, 0x45, 0x57, 0x9a, 0xb4, 0x4a, 0x8a, 0x0c, 0x83, 0x5c, 0x3a, 0x25, 0xfc, 0x9b, 0x8c,
		0xc8, 0xff, 0x27, 0x77, 0xe1, 0x0a, 0x8e, 0x48, 0x40, 0xb7, 0x67, 0x2a, 0x53, 0x66, 0x5e, 0xaa,
		0x46, 0xa3, 0x1b, 0x8d, 0x96, 0xd1, 0xe8, 0xa6, 0x60, 0xcf, 0x9f, 0xc7, 0xee, 0x4b, 0xc7, 0xdd,
		0x57, 0xbe, 0xde, 0x5b, 0xbe, 0x66, 0xc4, 0x0f, 0xa6, 0x45, 0x4d, 0x0a, 0xa6, 0xaf, 0x05, 0xf7,
		0x4c, 0x1b, 0x44, 0x06, 0x6d, 0xe2, 0x45, 0x42, 0x35, 0xd3, 0x08, 0x0c, 0xcd, 0x1d, 0xf6, 0x9c,
		0x7f, 0xec, 0x98, 0xbd, 0x7f, 0x60, 0x83, 0x1a, 0x1b, 0xd4, 0x6b, 0x5f, 0xe4, 0xaa, 0x7b, 0xd8,
		0x3a, 0x5d, 0x29, 0xb3, 0xaa, 0x5b, 0x97, 0xf8, 0xc8, 0x35, 0x99, 0xad, 0x59, 0xbe, 0x36, 0xcf,
		0x66, 0x6b, 0x86, 0x63, 0x86, 0x7f, 0xe3, 0xb1, 0xb1, 0x6d, 0x0c, 0x98, 0xa9, 0xdd, 0x3e, 0xf7,
		0x9c, 0xa5, 0xe5, 0x3d, 0x19, 0xe9, 0x0b, 0x23, 0x7a, 0xfe, 0x6c, 0x38, 0x77, 0xda, 0xe3, 0xbd,
		0x35, 0xb8, 0xd7, 0x1e, 0x2d, 0xdb, 0xee, 0x39, 0x63, 0xcf, 0x7d, 0xb0, 0x4c, 0x36, 0xd5, 0x97,
		0xd1, 0xd8, 0x08, 0xac, 0x5b, 0x9b, 0x69, 0xc3, 0x89, 0x13, 0x1d, 0x42, 0x63, 0xd8, 0x56, 0x60,
		0x31, 0xff, 0xbc, 0xe7, 0xfc, 0xfc, 0xe1, 0xcb, 0xcf, 0xbf, 0xeb, 0x9f, 0x3e, 0x7f, 0xfc, 0xa2,
		0x7f, 0x7d, 0xaf, 0x7f, 0x6e, 0x7c, 0xfa, 0xac, 0x7f, 0xf9, 0xfa, 0x8b, 0xfe, 0xe9, 0xc3, 0x4f,
		0xda, 0xa2, 0xee, 0xf6, 0x9c, 0x25, 0xad, 0x03, 0x79, 0x16, 0xf6, 0x11, 0x65, 0x41, 0x8a, 0xc0,
		0x76, 0xda, 0x82, 0x4b, 0xe5, 0xda, 0x56, 0x4b, 0xe7, 0xc0, 0x76, 0xae, 0x16, 0xa1, 0x6d, 0x36,
		0xd9, 0x45, 0xb3, 0x69, 0xf1, 0x08, 0x6d, 0xbb, 0x91, 0x2d, 0xa2, 0x8d, 0x8b, 0x49, 0x64, 0x1b,
		0x8e, 0x6f, 0x4d, 0xf1, 0x7f, 0x3b, 0xa3, 0xc3, 0xa8, 0x44, 0x36, 0xb2, 0x00, 0xa3, 0x00, 0xa3,
		0x0e, 0x10, 0x46, 0x09, 0x23, 0xa8, 0xf2, 0x82, 0xa7, 0x19, 0x6c, 0xda, 0x84, 0x98, 0x34, 0x00,
		0x26, 0x00, 0x26, 0x00, 0x26, 0x00, 0x26, 0x00, 0x26, 0x00, 0x26, 0x00, 0x26, 0x00, 0xa6, 0x15,
		0xc0, 0x94, 0xe6, 0x2c, 0xca, 0xcd, 0x53, 0x95, 0xee, 0xc0, 0x8d, 0x42, 0xe7, 0x9b, 0x3e, 0xbc,
		0xff, 0xfa, 0xab, 0xfe, 0xeb, 0x1f, 0x7f, 0x00, 0x35, 0x01, 0x35, 0x01, 0x35, 0x01, 0x35, 0x01,
		0x35, 0x91, 0x6e, 0xf3, 0xf5, 0x33, 0x3e, 0xe3, 0x3b, 0x25, 0xda, 0x12, 0xde, 0x09, 0x95, 0x39,
		0xed, 0xdb, 0xb5, 0x4c, 0x7d, 0xec, 0xda, 0xb6, 0x1e, 0xae, 0x68, 0x7f, 0xff, 0x79, 0xdf, 0x2b,
		0xdf, 0xdf, 0x7d, 0xe2, 0x77, 0x0d, 0x27, 0x7e, 0xef, 0xd7, 0x5b, 0x35, 0x27, 0x7e, 0xef, 0xad,
		0x71, 0x48, 0x5d, 0xd3, 0xb0, 0xa7, 0x86, 0x21, 0xe5, 0x32, 0x7b, 0x60, 0x9e, 0xed, 0x1a, 0xa6,
		0x3e, 0x70, 0x9d, 0xc0, 0x73, 0xed, 0x14, 0x0b, 0x6d, 0xf5, 0x0a, 0x1c, 0x2e, 0x5f, 0xd6, 0xc3,
		0xe5, 0x4d, 0xcf, 0x1d, 0xeb, 0x81, 0x35, 0xe2, 0x38, 0x49, 0x6e, 0x7e, 0x49, 0xba, 0x08, 0xb1,
		0x86, 0x1e, 0x15, 0x75, 0x41, 0x62, 0xb6, 0x3d, 0x2a, 0x9f, 0x0c, 0xc7, 0x34, 0x02, 0xd7, 0x7b,
		0x4e, 0x11, 0xf8, 0xa7, 0xae, 0xe4, 0x9a, 0x37, 0xf9, 0x5a, 0x4e, 0xd0, 0x6c, 0xa4, 0x99, 0xa3,
		0xe9, 0xca, 0xba, 0x48, 0xf1, 0xd5, 0x3f, 0x0c, 0xe7, 0x8e, 0xa9, 0xe8, 0x62, 0xfc, 0x64, 0x39,
		0xfc, 0x31, 0xce, 0x7f, 0x0c, 0x7b, 0xc2, 0x04, 0x18, 0x89, 0x7f, 0xf5, 0x8c, 0x28, 0x1a, 0xfd,
		0xc5, 0xba, 0xb3, 0x22, 0x28, 0xc0, 0x2b, 0xe0, 0x37, 0x76, 0x67, 0x04, 0xd6, 0x43, 0x78, 0xef,
		0xa1, 0x61, 0xfb, 0x4c, 0x09, 0x7b, 0xf4, 0x27, 0xe3, 0x49, 0x7c, 0x48, 0x9a, 0xb5, 0x12, 0x0d,
		0x4a, 0x36, 0x9d, 0x98, 0x42, 0xbd, 0x86, 0xc1, 0xbd, 0xe7, 0x06, 0x81, 0xcd, 0x74, 0xcf, 0xe0,
		0x39, 0x1f, 0x74, 0xf9, 0x32, 0x58, 0x76, 0x58, 0x76, 0x58, 0x76, 0x58, 0x76, 0x12, 0xcb, 0x5e,
		0xaf, 0xc1, 0xb4, 0x4b, 0xa6, 0x45, 0xb6, 0xe1, 0x7b, 0x8e, 0x14, 0x61, 0x68, 0xc3, 0x7c, 0xe6,
		0x0c, 0xf6, 0xab, 0x0c, 0x87, 0x62, 0x7f, 0x70, 0x4c, 0x6b, 0x60, 0x04, 0xcc, 0xd7, 0x0c, 0x6d,
		0x35, 0x2a, 0xd4, 0x1c, 0xd7, 0x64, 0x9a, 0xe5, 0x27, 0x89, 0x71, 0x66, 0x9e, 0xab, 0x37, 0xd3,
		0xf1, 0x2b, 0x66, 0x69, 0xa8, 0xb9, 0xc7, 0x40, 0x59, 0x4a, 0xad, 0xcf, 0x57, 0x39, 0xaf, 0x28,
		0xa5, 0x96, 0x32, 0x3b, 0xc0, 0x9d, 0x56, 0xfb, 0x7d, 0x2a, 0xf7, 0xe7, 0xa9, 0x58, 0x89, 0x94,
		0xc7, 0xd8, 0x18, 0xfc, 0xc9, 0x02, 0xdd, 0xdf, 0xc5, 0xf6, 0x3d, 0x3f, 0xba, 0x6c, 0xe1, 0xcb,
		0xc8, 0xa9, 0x95, 0x3e, 0xa7, 0xb6, 0x17, 0x8b, 0xa4, 0xc0, 0x20, 0x29, 0xb1, 0x47, 0x0a, 0x43,
		0xca, 0x83, 0x35, 0x12, 0x87, 0xda, 0x7a, 0xdb, 0x4a, 0x69, 0xa7, 0x44, 0xfd, 0x28, 0xbf, 0xff,
		0x4c, 0xd3, 0x6c, 0xc8, 0x83, 0x22, 0x92, 0x97, 0xed, 0xb4, 0xdb, 0x69, 0xe1, 0x43, 0x96, 0xaf,
		0x4b, 0x6b, 0xa2, 0x53, 0x59, 0x2d, 0xff, 0xd9, 0x0f, 0xd8, 0x68, 0xbf, 0xc1, 0x9a, 0x7e, 0x0f,
		0x49, 0xd9, 0xb2, 0x26, 0x65, 0x07, 0xf7, 0x86, 0xef, 0x5b, 0xbe, 0x6e, 0x99, 0xe9, 0xe3, 0xf7,
		0x85, 0x6b, 0x10, 0xbc, 0x1f, 0x59, 0xf0, 0xce, 0x1f, 0x90, 0xfb, 0x81, 0x97, 0xee, 0x40, 0xc6,
		0xc4, 0x5c, 0xbc, 0x4d, 0xf1, 0xdd, 0x8f, 0xcc, 0xb9, 0x8b, 0x50, 0x62, 0xb1, 0x42, 0xf2, 0x3a,
		0x42, 0xf2, 0xd5, 0x21, 0x69, 0xb4, 0xdb, 0x88, 0xc8, 0x09, 0x92, 0xad, 0x61, 0x88, 0x63, 0x0c,
		0x02, 0x0e, 0x33, 0x3d, 0xbd, 0x00, 0x36, 0x1a, 0x36, 0x1a, 0x36, 0x1a, 0x36, 0x1a, 0x36, 0x5a,
		0xb9, 0x8d, 0xb6, 0xdd, 0x94, 0x4c, 0x89, 0x89, 0xe6, 0x25, 0x57, 0xc0, 0x4a, 0xc3, 0x4a, 0xc3,
		0x4a, 0xc3, 0x4a, 0xc3, 0x4a, 0xd3, 0x58, 0xe9, 0x42, 0xec, 0x4f, 0xec, 0x4c, 0x8f, 0x71, 0xef,
		0x4a, 0x7c, 0x89, 0xa5, 0x49, 0xa4, 0xf5, 0x02, 0xc3, 0xbb, 0x63, 0xc1, 0xfe, 0xb4, 0xde, 0xf4,
		0x7b, 0x48, 0xeb, 0x95, 0x35, 0xad, 0x17, 0x4f, 0xa0, 0xcf, 0x51, 0x93, 0x33, 0xbd, 0x00, 0x5c,
		0xe0, 0xe0, 0x02, 0xdf, 0xb5, 0xa4, 0xf8, 0xbb, 0xf1, 0x76, 0xda, 0x12, 0xc1, 0x05, 0xc6, 0xbd,
		0xd0, 0x44, 0x16, 0x9c, 0xfc, 0xc2, 0x13, 0x5d, 0x80, 0xd2, 0x0b, 0x51, 0x7a, 0x41, 0x92, 0x2c,
		0x4c, 0x4e, 0x2c, 0x90, 0xb6, 0x5b, 0xd3, 0xf2, 0xf8, 0xa6, 0x2f, 0x5e, 0x80, 0xba, 0x61, 0x9a,
		0x1e, 0xf3, 0x7d, 0xe6, 0xf3, 0x4f, 0xc3, 0xf2, 0x52, 0x5e, 0x90, 0xc4, 0x39, 0x98, 0x7c, 0x8b,
		0x5b, 0x78, 0x91, 0xcb, 0x2c, 0x76, 0xba, 0x45, 0x2f, 0xbb, 0xf8, 0xc9, 0x94, 0x80, 0x4c, 0x19,
		0x48, 0x95, 0x82, 0x4f, 0x39, 0x04, 0x62, 0x0d, 0x21, 0x65, 0xd9, 0xa2, 0x34, 0xe2, 0x93, 0xb7,
		0x59, 0x75, 0x44, 0x67, 0x50, 0x4c, 0x81, 0xa4, 0x15, 0x89, 0x42, 0xa1, 0xe8, 0x15, 0x8b, 0x4a,
		0xc1, 0xc8, 0x15, 0x8d, 0x5c, 0xe1, 0x94, 0x28, 0x9e, 0x98, 0x02, 0x0a, 0x2a, 0xa2, 0xb4, 0x42,
		0x26, 0x02, 0xac, 0xb1, 0xb4, 0x52, 0xae, 0x2d, 0xc5, 0x05, 0x99, 0x92, 0x13, 0xc4, 0xc7, 0xba,
		0xad, 0x4c, 0x51, 0x29, 0x15, 0x56, 0x9d, 0xe2, 0x52, 0x2b, 0xb0, 0x32, 0x45, 0x56, 0xa6, 0xd0,
		0x4a, 0x15, 0x5b, 0x4e, 0xc1, 0x25, 0x15, 0x9d, 0x3f, 0xcd, 0x2b, 0xa0, 0xad, 0xba, 0xe3, 0xea,
		0x7f, 0xb9, 0x0e, 0xa3, 0x58, 0x83, 0x33, 0xd7, 0x7a, 0x49, 0x20, 0x6b, 0xfa, 0xce, 0xd7, 0x24,
		0x6b, 0x83, 0x46, 0x27, 0x56, 0x46, 0xf0, 0xa1, 0xa5, 0x60, 0x0c, 0xd7, 0xc6, 0xf2, 0x2d, 0xa1,
		0xcc, 0xcf, 0x46, 0x10, 0x30, 0xcf, 0x21, 0x1b, 0xd6, 0x44, 0xf0, 0xc9, 0xc9, 0x75, 0x4d, 0xbf,
		0xec, 0x7f, 0xbf, 0xae, 0xeb, 0x97, 0xfd, 0xf8, 0x63, 0x3d, 0xfa, 0x15, 0x7f, 0x6e, 0x5c, 0xd7,
		0xf4, 0xd6, 0xec, 0x73, 0xfb, 0xba, 0xa6, 0xb7, 0xfb, 0xa7, 0xbd, 0xde, 0xf9, 0xe9, 0xb7, 0xe6,
		0x0b, 0xff, 0x85, 0x27, 0x3f, 0x5c, 0xf7, 0x7a, 0xe3, 0x6f, 0xbf, 0xbd, 0x84, 0x3f, 0x3f, 0xbe,
		0xf4, 0xdf, 0x9c, 0xbe, 0x23, 0x1c, 0xf7, 0xe8, 0x75, 0xc2, 0x1b, 0xf6, 0x7a, 0xe7, 0xfd, 0xd7,
		0x15, 0x32, 0xb9, 0x7d, 0x12, 0x49, 0x2f, 0x67, 0x05, 0x56, 0x87, 0x0e, 0xd4, 0x21, 0x51, 0x87,
		0xee, 0xf7, 0x70, 0x0d, 0x19, 0xfa, 0xf0, 0x4a, 0xff, 0xb5, 0xff, 0xad, 0x76, 0xd6, 0x7a, 0x39,
		0xed, 0x9e, 0x9e, 0xac, 0xfe, 0x5d, 0xf7, 0xf4, 0x5b, 0xed, 0xac, 0xfd, 0x72, 0x72, 0xb2, 0xe1,
		0x5f, 0xde, 0x6d, 0x92, 0x71, 0xfa, 0xfd, 0xe4, 0xe4, 0x64, 0xaa, 0x08, 0x4b, 0xca, 0x71, 0x5d,
		0xab, 0xf7, 0xdf, 0x45, 0x1f, 0xe3, 0x9f, 0x89, 0x7a, 0xa5, 0xfa, 0xf2, 0x69, 0x16, 0x4a, 0x75,
		0x72, 0x72, 0xfd, 0xdf, 0xdd, 0xfe, 0x9b, 0xee, 0xe9, 0xb7, 0xce, 0xcb, 0xec, 0x73, 0xf4, 0xf3,
		0xf4, 0xfb, 0xc9, 0xf9, 0xeb, 0x5e, 0xef, 0xfc, 0xfc, 0xf5, 0x69, 0xfc, 0x82, 0xd3, 0xef, 0xbd,
		0x8e, 0xff, 0xf5, 0x5d, 0xb7, 0xbb, 0xf6, 0x57, 0xa7, 0x27, 0x3f, 0x9c, 0x2b, 0xd2, 0xfb, 0x78,
		0xbc, 0xbb, 0xc5, 0x54, 0xff, 0x57, 0xf9, 0x3e, 0xc7, 0x4b, 0x49, 0x02, 0xa4, 0xff, 0x62, 0xcf,
		0x24, 0x21, 0x49, 0xe5, 0xa3, 0xe5, 0x07, 0x57, 0x41, 0x20, 0x19, 0x6e, 0x7d, 0xb2, 0x9c, 0xf7,
		0x36, 0x0b, 0xa1, 0xa9, 0x2f, 0x17, 0x8e, 0x54, 0x3e, 0x19, 0x4f, 0x0b, 0x92, 0xea, 0x6f, 0x5b,
		0xad, 0xce, 0x45, 0xab, 0x55, 0xbb, 0x68, 0x5e, 0xd4, 0x2e, 0xdb, 0xed, 0x7a, 0xa7, 0xde, 0x96,
		0x10, 0xfe, 0xbb, 0x67, 0x32, 0x8f, 0x99, 0x3f, 0x85, 0x63, 0xe7, 0x4c, 0x6c, 0x3b, 0xd3, 0x29,
		0xe3, 0x3c, 0x4f, 0x66, 0xab, 0x1c, 0xde, 0xdd, 0xd5, 0x38, 0xa7, 0x34, 0xfd, 0xe5, 0x2f, 0xff,
		0x71, 0x9e, 0xa4, 0xad, 0x92, 0xa4, 0x9e, 0x34, 0xde, 0xcd, 0xda, 0xaf, 0xd1, 0x5d, 0xa7, 0xbf,
		0xfc, 0xe5, 0x3f, 0x5e, 0xcd, 0x9e, 0x6d, 0xf9, 0xcf, 0x62, 0x26, 0xeb, 0xa5, 0x60, 0x29, 0x47,
		0xc9, 0xd5, 0xa0, 0x68, 0x15, 0x88, 0x24, 0xae, 0xc9, 0xa7, 0xbb, 0xa2, 0x88, 0x5f, 0x8d, 0xa7,
		0x02, 0x65, 0x3a, 0x30, 0xb6, 0xe5, 0x07, 0xfa, 0xf4, 0xd5, 0xe4, 0x76, 0x43, 0xe6, 0x92, 0xc4,
		0x76, 0x43, 0x6a, 0xd8, 0x0d, 0xc9, 0x23, 0xb7, 0x73, 0x8c, 0xbb, 0x21, 0xc2, 0xb9, 0x98, 0x64,
		0xfe, 0x63, 0x6b, 0x64, 0xb9, 0xbe, 0xfe, 0xe4, 0xe9, 0xa9, 0xeb, 0xf1, 0x28, 0x23, 0x22, 0xe9,
		0xc8, 0xa7, 0x72, 0xdd, 0xeb, 0x3d, 0xf6, 0x7a, 0x7a, 0xaf, 0x77, 0xde, 0x3d, 0xbb, 0xf9, 0xd7,
		0xdf, 0x7e, 0xf8, 0x7b, 0xaf, 0xf7, 0xe6, 0xc7, 0x5e, 0xef, 0xfb, 0x3f, 0xfb, 0x6f, 0xf8, 0x27,
		0xac, 0x5f, 0x00, 0x93, 0xf6, 0xe0, 0x0d, 0x23, 0x03, 0x24, 0xb1, 0xb3, 0x3b, 0x17, 0x81, 0x2d,
		0x5d, 0x18, 0xb1, 0xc3, 0xdc, 0xd2, 0x9d, 0xad, 0x71, 0xf9, 0xcd, 0xdc, 0x44, 0x12, 0xb6, 0x71,
		0xb1, 0x8d, 0x9b, 0xb3, 0xb2, 0xe5, 0x93, 0xa5, 0x90, 0xde, 0xc6, 0x95, 0x52, 0xc4, 0xb5, 0x45,
		0x28, 0xa1, 0x8c, 0x92, 0x70, 0x9c, 0x5c, 0x39, 0x29, 0x95, 0x54, 0x9d, 0xb2, 0x52, 0x2b, 0xad,
		0x32, 0xe5, 0x55, 0xa6, 0xc4, 0x4a, 0x95, 0x99, 0x26, 0x69, 0x5a, 0xbc, 0xad, 0x5b, 0x9a, 0xf0,
		0x81, 0x32, 0x9c, 0x20, 0x0f, 0x2f, 0xd4, 0x86, 0x1b, 0x72, 0xe1, 0x07, 0xdd, 0xf2, 0xca, 0x25,
		0x27, 0x2e, 0x03, 0xb9, 0x90, 0x0d, 0xcf, 0x6a, 0xb2, 0x8a, 0x95, 0x0d, 0x4f, 0x02, 0xdb, 0xaa,
		0x24, 0x68, 0x27, 0xca, 0x88, 0xfe, 0xc7, 0x1b, 0x86, 0xc6, 0xd0, 0x9f, 0x7d, 0x40, 0xce, 0x5b,
		0xc1, 0x5c, 0xe7, 0x93, 0xec, 0x9e, 0x4d, 0xad, 0xb2, 0x2c, 0x37, 0x69, 0x1b, 0xc1, 0xd4, 0xa6,
		0x0a, 0x26, 0xb1, 0xc5, 0xec, 0xa9, 0xb8, 0xfd, 0x24, 0xb5, 0x97, 0x62, 0xf6, 0x31, 0xed, 0xc0,
		0x0a, 0xea, 0x02, 0x8d, 0x0e, 0xf0, 0x34, 0xe5, 0x48, 0xaf, 0xf8, 0x4a, 0x36, 0xc7, 0xda, 0xec,
		0xeb, 0x36, 0xe4, 0x1b, 0x6f, 0xc9, 0x71, 0x4e, 0xd3, 0x6e, 0x27, 0x3e, 0xb0, 0x95, 0x52, 0x77,
		0xfb, 0xee, 0x5d, 0x82, 0x02, 0x23, 0x23, 0xd5, 0xed, 0x3b, 0xe3, 0x59, 0xdf, 0x79, 0xe8, 0xc6,
		0x3a, 0x2d, 0xfb, 0x8e, 0x03, 0x37, 0x40, 0x3f, 0x0a, 0xfa, 0xd1, 0x4d, 0xff, 0xa9, 0xa2, 0x1f,
		0x6d, 0xd7, 0x8e, 0x87, 0x7d, 0x34, 0x3d, 0x77, 0xf9, 0x81, 0x93, 0x8f, 0x86, 0xf6, 0xc7, 0x9d,
		0xa4, 0x39, 0x86, 0x2c, 0xf9, 0x26, 0x98, 0x0a, 0x4a, 0x7b, 0x2a, 0xd4, 0x64, 0x6c, 0xc7, 0x9c,
		0xe6, 0x1c, 0xc7, 0x42, 0xcd, 0xaf, 0xd9, 0x7b, 0x6a, 0xf1, 0xd0, 0x98, 0xd8, 0x41, 0xaa, 0x6c,
		0x56, 0xa5, 0xbe, 0x1b, 0x7e, 0xf4, 0x41, 0xd1, 0x04, 0x8a, 0x26, 0x59, 0x97, 0xcb, 0xe1, 0x7a,
		0x39, 0x5d, 0x70, 0x7a, 0x57, 0x2c, 0xe4, 0x92, 0xd7, 0xdc, 0x15, 0x4e, 0x1f, 0x59, 0x1b, 0x92,
		0x06, 0xce, 0x1e, 0x49, 0x1d, 0xb1, 0xed, 0xf0, 0x8f, 0x96, 0xa3, 0xff, 0xaf, 0xe9, 0xb9, 0xe3,
		0xf4, 0x0e, 0x21, 0xb9, 0x82, 0xd4, 0x1d, 0xd4, 0xe0, 0x0f, 0xe0, 0x0f, 0xe0, 0x0f, 0xe0, 0x0f,
		0xe0, 0x0f, 0x72, 0xf5, 0x07, 0x63, 0x73, 0xb2, 0xe7, 0x5c, 0xea, 0x35, 0xbd, 0x9b, 0x5f, 0x42,
		0xe9, 0x11, 0x1a, 0x70, 0x08, 0x70, 0x08, 0x70, 0x08, 0x69, 0xf3, 0x59, 0x70, 0x08, 0xeb, 0x29,
		0x3e, 0x38, 0x04, 0x02, 0x87, 0xe0, 0x4f, 0x6e, 0x23, 0x15, 0x4f, 0xef, 0x0f, 0x92, 0x2b, 0x10,
		0x20, 0xc0, 0x1f, 0xc0, 0x1f, 0xc0, 0x1f, 0x20, 0x40, 0x38, 0xac, 0x73, 0xc8, 0x99, 0x7f, 0xef,
		0xda, 0x26, 0xd7, 0x19, 0xe4, 0xd3, 0x4b, 0x28, 0x3d, 0x42, 0xbb, 0x56, 0xab, 0xc1, 0x29, 0xc0,
		0x29, 0xc0, 0x29, 0x20, 0x6b, 0x24, 0x75, 0x86, 0x39, 0x4e, 0x31, 0x4f, 0xef, 0x18, 0x8a, 0x51,
		0xfb, 0xb5, 0xbb, 0x12, 0x41, 0xe3, 0xae, 0xfe, 0x9a, 0xc9, 0x93, 0xa9, 0xa3, 0xf0, 0x8c, 0x71,
		0x8a, 0x1a, 0x8a, 0xf0, 0x5b, 0xa8, 0x9f, 0x28, 0x6b, 0xfd, 0xc4, 0xff, 0x4e, 0xd8, 0x84, 0xe9,
		0xf6, 0xec, 0x10, 0x9f, 0x94, 0xf0, 0x67, 0xe9, 0x2a, 0x20, 0x12, 0x20, 0x12, 0x20, 0x12, 0x84,
		0xa9, 0x5b, 0x87, 0xa4, 0x0d, 0x3c, 0x42, 0x16, 0xa8, 0xa6, 0xa8, 0xc8, 0xde, 0x14, 0xac, 0xee,
		0xad, 0xcc, 0x86, 0xb9, 0x86, 0xb9, 0x3e, 0x4a, 0x73, 0x8d, 0x08, 0x72, 0x93, 0xbd, 0x86, 0xb9,
		0xa6, 0x30, 0xd7, 0x71, 0x10, 0xc6, 0x61, 0xa8, 0xa7, 0x17, 0xc0, 0x44, 0xc3, 0x44, 0xc3, 0x44,
		0x03, 0x51, 0xef, 0xcc, 0xf1, 0xc1, 0x44, 0x97, 0x2b, 0xc3, 0xb7, 0x3d, 0x4f, 0xc6, 0x9f, 0xdd,
		0x0b, 0x65, 0x49, 0x66, 0xf6, 0xf4, 0x7b, 0xd7, 0x4f, 0xd5, 0x23, 0x35, 0xff, 0x2e, 0xb2, 0x7c,
		0xa5, 0x3d, 0xcf, 0x75, 0x36, 0x89, 0x1c, 0x58, 0x24, 0xb9, 0x04, 0x67, 0xba, 0xe2, 0x4c, 0xd7,
		0xcd, 0x5f, 0x34, 0xe3, 0xcd, 0x6d, 0x7d, 0xe2, 0x33, 0x4f, 0x1f, 0xb8, 0xa3, 0xd1, 0xc4, 0xb1,
		0x02, 0x8b, 0x83, 0x48, 0x75, 0xde, 0x92, 0xb7, 0x4d, 0x12, 0xce, 0x7d, 0xc5, 0xb9, 0xaf, 0x14,
		0x98, 0x8b, 0xff, 0xdc, 0xd7, 0x8d, 0x4b, 0xf2, 0x59, 0x9c, 0x23, 0x78, 0x8b, 0x3c, 0x10, 0x06,
		0xab, 0x53, 0x04, 0x32, 0x85, 0x20, 0x53, 0x0c, 0x52, 0x05, 0xe1, 0x53, 0x14, 0x81, 0x20, 0x45,
		0x93, 0x22, 0x0c, 0x36, 0xcc, 0x07, 0xc3, 0x19, 0x30, 0x53, 0x8f, 0xa0, 0x44, 0xf0, 0x3c, 0x66,
		0x7e, 0x5d, 0x9e, 0x3c, 0x78, 0xa3, 0x54, 0x39, 0x22, 0xe1, 0x1a, 0x88, 0x84, 0x09, 0x95, 0x8d,
		0x5c, 0xe9, 0xc8, 0x95, 0x4f, 0x89, 0x12, 0x8a, 0x29, 0xa3, 0xa0, 0x52, 0x2e, 0x64, 0x11, 0x1c,
		0xd3, 0x08, 0x5c, 0xef, 0x59, 0x82, 0x0f, 0x5b, 0x9a, 0xa7, 0x94, 0x3f, 0x29, 0x45, 0x90, 0xac,
		0x22, 0x4a, 0x62, 0xc9, 0x27, 0xb7, 0x48, 0x93, 0x5e, 0x7b, 0x33, 0x3f, 0x35, 0x22, 0xda, 0x5d,
		0xd9, 0x74, 0x10, 0x7d, 0x9a, 0x88, 0x58, 0x35, 0xa4, 0x93, 0x6d, 0x7b, 0xa7, 0xa2, 0xd5, 0xb8,
		0x6c, 0x5d, 0x76, 0x2e, 0x1a, 0x97, 0xed, 0xe3, 0x9b, 0x93, 0x9c, 0x78, 0x73, 0xfb, 0x59, 0xd1,
		0x7d, 0x9e, 0x91, 0xc0, 0x9d, 0x86, 0x12, 0xb8, 0xd3, 0x00, 0xdc, 0x01, 0xdc, 0x01, 0xdc, 0x01,
		0xdc, 0x01, 0xdc, 0x01, 0xdc, 0x01, 0xdc, 0x01, 0xdc, 0xc9, 0x05, 0xee, 0xdc, 0x1a, 0xbe, 0x35,
		0x58, 0x40, 0x25, 0xf2, 0x50, 0x67, 0x4d, 0x22, 0x60, 0x0e, 0x60, 0x0e, 0x60, 0x0e, 0x60, 0x0e,
		0x60, 0x0e, 0x60, 0x0e, 0x60, 0x0e, 0x60, 0x4e, 0x1e, 0x30, 0x27, 0xd9, 0xa8, 0x25, 0x3a, 0xfb,
		0x72, 0x45, 0x1e, 0x20, 0x0e, 0x20, 0xce, 0x51, 0x42, 0x1c, 0x3a, 0x78, 0x42, 0x7b, 0x28, 0x1e,
		0xc5, 0x61, 0x78, 0x95, 0x8f, 0xb3, 0x76, 0xda, 0xc3, 0x44, 0x2b, 0x75, 0xa0, 0x95, 0xa2, 0xa0,
		0x95, 0x7a, 0xe3, 0x2d, 0x60, 0x4a, 0x56, 0x30, 0x45, 0xc2, 0x22, 0x50, 0x1d, 0x8b, 0xa9, 0xe6,
		0x38, 0xcc, 0x22, 0x03, 0x30, 0xf3, 0xd9, 0x72, 0xee, 0xf4, 0x3b, 0xc3, 0x1f, 0xcb, 0x83, 0xaf,
		0x05, 0x59, 0x00, 0x5e, 0x00, 0x5e, 0x00, 0x5e, 0x52, 0xeb, 0xe7, 0xd6, 0x75, 0x6d, 0x66, 0x38,
		0x14, 0x60, 0xab, 0x5e, 0x60, 0x03, 0x34, 0x76, 0xbd, 0x40, 0xde, 0xf4, 0x44, 0x52, 0x60, 0x74,
		0x60, 0x74, 0x60, 0x74, 0xe8, 0xa2, 0xbd, 0x50, 0xa9, 0x74, 0x67, 0x32, 0xba, 0x65, 0x1e, 0x81,
		0x15, 0xea, 0x20, 0x3d, 0x8d, 0x80, 0xaf, 0xe8, 0x01, 0x5f, 0xa7, 0xdd, 0x6e, 0x22, 0x33, 0x9d,
		0x59, 0xc8, 0x57, 0x60, 0x5c, 0xe2, 0xb3, 0xc1, 0xc4, 0xb3, 0x82, 0x67, 0xdd, 0x66, 0x0f, 0xcc,
		0x96, 0x47, 0x28, 0x2b, 0xf2, 0x80, 0x55, 0x80, 0x55, 0x80, 0x55, 0xa4, 0xd6, 0xcf, 0x97, 0xf0,
		0xfd, 0x13, 0xb5, 0x1a, 0xb9, 0xa6, 0xb0, 0x5a, 0x2d, 0x05, 0x4b, 0x2d, 0x09, 0x19, 0xef, 0x9d,
		0xc9, 0x48, 0x7e, 0x19, 0x7e, 0x75, 0xbf, 0xc4, 0x79, 0x76, 0x0a, 0xf7, 0x56, 0xa9, 0x85, 0x63,
		0xe5, 0xb8, 0xba, 0x31, 0x09, 0xee, 0x99, 0x13, 0x58, 0x83, 0x98, 0x7d, 0x81, 0xc0, 0x03, 0xd7,
		0xa3, 0x0a, 0x6a, 0x72, 0xb1, 0x8d, 0x58, 0xff, 0xac, 0x07, 0x63, 0xf0, 0x5c, 0x79, 0x95, 0x23,
		0xcc, 0xa8, 0x7c, 0x75, 0x3f, 0x38, 0x01, 0xcd, 0x2c, 0xac, 0x0c, 0x13, 0x09, 0xe8, 0xdb, 0x30,
		0xab, 0x24, 0x20, 0x23, 0x19, 0xfc, 0xae, 0xd6, 0xc8, 0x09, 0x19, 0xbc, 0x14, 0x18, 0x19, 0x3c,
		0x30, 0xcf, 0x4f, 0x7b, 0x9e, 0xff, 0x4e, 0x03, 0x36, 0x13, 0x04, 0x2c, 0x00, 0x2c, 0x70, 0x94,
		0x58, 0xa0, 0x58, 0x85, 0x78, 0x84, 0x9b, 0xdb, 0x59, 0x59, 0x2f, 0xa5, 0x9d, 0xe9, 0xff, 0xc5,
		0x9e, 0xa5, 0x4b, 0x6a, 0x2a, 0x1f, 0x2d, 0x3f, 0xb8, 0x0a, 0x02, 0xc1, 0x1e, 0xf7, 0x4f, 0x96,
		0xf3, 0xde, 0x66, 0xe1, 0x22, 0x17, 0x8c, 0x9f, 0x2b, 0x9f, 0x8c, 0xa7, 0x05, 0x09, 0xf5, 0xb7,
		0xad, 0x56, 0xe7, 0xa2, 0xd5, 0xaa, 0x5d, 0x34, 0x2f, 0x6a, 0x97, 0xed, 0x76, 0xbd, 0x53, 0x17,
		0x88, 0xf6, 0x2b, 0xbf, 0x7b, 0x26, 0xf3, 0x98, 0xf9, 0x53, 0x38, 0x3e, 0xce, 0xc4, 0xb6, 0x95,
		0x4e, 0x43, 0x4a, 0xc6, 0xac, 0xed, 0x81, 0xac, 0x00, 0x93, 0x56, 0xcc, 0x48, 0x35, 0xff, 0x58,
		0xdd, 0x46, 0x20, 0x53, 0x25, 0xa1, 0xdd, 0xd0, 0x44, 0x18, 0xba, 0xfe, 0x1d, 0x3e, 0x62, 0xf2,
		0xe9, 0x66, 0x7a, 0x12, 0xcc, 0xff, 0xf5, 0x99, 0xf7, 0xf3, 0xfc, 0xf9, 0x36, 0xfd, 0x35, 0x27,
		0xa8, 0x7c, 0xc9, 0x89, 0x51, 0x45, 0x70, 0xde, 0xd5, 0xce, 0x37, 0x0f, 0xbd, 0x8e, 0x92, 0x09,
		0xad, 0x10, 0xb1, 0xdd, 0xa5, 0x98, 0x85, 0x0a, 0x73, 0x06, 0xde, 0xf3, 0x38, 0x60, 0x26, 0x01,
		0x03, 0xd3, 0x0e, 0x59, 0xe0, 0x60, 0x02, 0x07, 0x13, 0x89, 0xc5, 0xe0, 0xe6, 0x60, 0xda, 0xb2,
		0x28, 0x25, 0x58, 0x98, 0xb6, 0x4a, 0x04, 0x0f, 0x93, 0xfa, 0xd8, 0x05, 0x3c, 0x4c, 0x12, 0x30,
		0x0b, 0x3c, 0x4c, 0x48, 0x14, 0x20, 0x51, 0x80, 0x44, 0x41, 0x8a, 0x35, 0x88, 0x8e, 0xbd, 0x95,
		0x18, 0x1d, 0x1d, 0x7b, 0xe8, 0xd8, 0x3b, 0xc8, 0x39, 0x41, 0x5d, 0x44, 0x1a, 0xb8, 0x03, 0x1e,
		0x26, 0xc0, 0x1d, 0xc0, 0x1d, 0xc0, 0x1d, 0xc0, 0x1d, 0xc0, 0x1d, 0xc0, 0x1d, 0xc0, 0x9d, 0x43,
		0x82, 0x3b, 0xe0, 0x61, 0x02, 0xcc, 0x01, 0xcc, 0x01, 0xcc, 0x01, 0xcc, 0x01, 0xcc, 0x01, 0xcc,
		0x01, 0xcc, 0x01, 0x0f, 0x53, 0x2a, 0x63, 0x0a, 0x1e, 0x26, 0x40, 0x1c, 0x40, 0x9c, 0x03, 0xe7,
		0x61, 0x02, 0xeb, 0x8a, 0x06, 0xd6, 0x15, 0x98, 0x59, 0x98, 0xd9, 0x03, 0x32, 0xb3, 0x60, 0x5d,
		0xe1, 0x18, 0x2c, 0xb0, 0xae, 0xc0, 0xe8, 0xc0, 0xe8, 0x80, 0x75, 0xa5, 0x94, 0xc9, 0x28, 0xb0,
		0xae, 0x14, 0x26, 0x19, 0x05, 0xd6, 0x15, 0xe4, 0xa1, 0xe2, 0x41, 0x06, 0xeb, 0x0a, 0xb0, 0x0a,
		0xb0, 0x4a, 0x91, 0xb1, 0x0a, 0x58, 0x57, 0x52, 0x49, 0x03, 0xeb, 0x8a, 0xc4, 0x44, 0x80, 0x75,
		0x25, 0x1f, 0x64, 0x00, 0xd6, 0x15, 0x60, 0x01, 0x60, 0x81, 0x43, 0xc7, 0x02, 0x60, 0x5d, 0x91,
		0xb4, 0x5e, 0x60, 0x5d, 0x49, 0x91, 0x25, 0x00, 0xeb, 0x8a, 0x3c, 0x0b, 0xc7, 0x76, 0xd2, 0x88,
		0x2a, 0x51, 0xa3, 0xbd, 0x46, 0x40, 0xd4, 0xf1, 0x7e, 0xf6, 0x28, 0xab, 0xdc, 0x2b, 0x1b, 0xff,
		0x01, 0xec, 0x2b, 0x32, 0xf3, 0x9e, 0x21, 0xff, 0xca, 0xb6, 0x69, 0xcd, 0x92, 0x81, 0xc5, 0x72,
		0x86, 0xae, 0x37, 0x8a, 0x06, 0x85, 0x9f, 0x72, 0x65, 0xf1, 0x62, 0x70, 0xac, 0x80, 0x63, 0x85,
		0xc4, 0x2e, 0x70, 0x73, 0xac, 0x4c, 0x57, 0x21, 0x01, 0x97, 0xd0, 0xb6, 0x05, 0x4e, 0x62, 0x2d,
		0x34, 0xb0, 0xae, 0x80, 0x75, 0x25, 0x7b, 0xb4, 0x2b, 0xcc, 0xba, 0xb2, 0x7b, 0xed, 0x3f, 0xcb,
		0xa7, 0x09, 0xf6, 0xdd, 0x40, 0x2e, 0x7d, 0x50, 0x47, 0xfa, 0x00, 0xe9, 0x83, 0x72, 0xa6, 0x0f,
		0x44, 0x55, 0x76, 0x9e, 0x94, 0xa5, 0x24, 0x4c, 0x5a, 0x5b, 0x94, 0x84, 0xc4, 0x49, 0x44, 0x39,
		0x3f, 0x32, 0xe5, 0xa5, 0x54, 0x62, 0x75, 0xca, 0x4c, 0xad, 0xd4, 0xca, 0x94, 0x5b, 0x99, 0x92,
		0x2b, 0x55, 0x76, 0x39, 0xa5, 0x97, 0x54, 0x7e, 0xca, 0x1c, 0x22, 0x5d, 0x2e, 0x71, 0x6d, 0x2d,
		0x4b, 0xb7, 0xf2, 0xad, 0x6a, 0xfe, 0x05, 0x81, 0x28, 0x9a, 0x6a, 0xaa, 0xd9, 0x7f, 0x34, 0x3a,
		0xa5, 0x51, 0x57, 0x57, 0x25, 0x42, 0x89, 0x5b, 0xfe, 0x12, 0xb9, 0xaa, 0xca, 0x7b, 0xe6, 0x6b,
		0x88, 0xba, 0xcc, 0x87, 0x48, 0xe5, 0x56, 0xf3, 0xab, 0xea, 0xa6, 0x8c, 0xba, 0x35, 0xf0, 0x10,
		0xe6, 0xee, 0x55, 0x31, 0xa4, 0xf4, 0xf3, 0xda, 0x18, 0x3e, 0x23, 0x85, 0x7b, 0x0d, 0xa5, 0x70,
		0xaf, 0x01, 0xb8, 0x07, 0xb8, 0x07, 0xb8, 0x07, 0xb8, 0x07, 0xb8, 0x07, 0xb8, 0x07, 0xb8, 0x07,
		0xb8, 0x07, 0xb8, 0x97, 0x21, 0xdc, 0x23, 0x23, 0xcc, 0x5a, 0x33, 0xf3, 0x44, 0xc4, 0x59, 0x80,
		0x79, 0x80, 0x79, 0x80, 0x79, 0x80, 0x79, 0x80, 0x79, 0x80, 0x79, 0x80, 0x79, 0x80, 0x79, 0x80,
		0x79, 0x22, 0x93, 0x42, 0x44, 0x18, 0xb6, 0x66, 0xe4, 0x49, 0x88, 0xc3, 0x00, 0xf1, 0x00, 0xf1,
		0x00, 0xf1, 0x32, 0x82, 0x65, 0xb4, 0xc4, 0x64, 0xab, 0xaa, 0x2b, 0x43, 0x50, 0x36, 0x57, 0x3b,
		0x22, 0xa2, 0xb2, 0x44, 0xa0, 0x12, 0xc2, 0xb2, 0x32, 0xbb, 0x03, 0x02, 0x42, 0xb3, 0xb5, 0x85,
		0x25, 0x4d, 0x6c, 0x06, 0x37, 0x00, 0x37, 0x00, 0x37, 0x90, 0x91, 0x1b, 0x90, 0x27, 0x4e, 0x5b,
		0x33, 0xfd, 0xf5, 0x12, 0x1a, 0x42, 0x29, 0x62, 0xb5, 0xb5, 0x41, 0x95, 0x20, 0x58, 0x83, 0xf1,
		0x83, 0xf1, 0x83, 0xf1, 0xcb, 0x03, 0x03, 0xd3, 0x10, 0xb8, 0xad, 0xea, 0x6f, 0x07, 0xc9, 0x4a,
		0xc1, 0xcc, 0x57, 0x1d, 0x09, 0x2f, 0x1a, 0xc5, 0x59, 0x9e, 0x32, 0x95, 0xc9, 0x4a, 0x42, 0x42,
		0xb8, 0x43, 0x98, 0x36, 0xe4, 0x29, 0x85, 0x27, 0x85, 0x88, 0x50, 0x6e, 0x1d, 0x71, 0x50, 0x10,
		0xcb, 0x01, 0xa3, 0x01, 0xa3, 0x01, 0xa3, 0x65, 0x84, 0xd1, 0x68, 0x89, 0xeb, 0xd6, 0x82, 0xd5,
		0x16, 0x81, 0x2c, 0x12, 0x22, 0xbb, 0xf9, 0x10, 0x52, 0x12, 0xda, 0x25, 0x52, 0x95, 0x11, 0xdb,
		0x25, 0x77, 0x50, 0x43, 0x70, 0x97, 0x88, 0xa7, 0x23, 0xba, 0x23, 0x86, 0x55, 0x84, 0xc4, 0x77,
		0x89, 0x48, 0x15, 0x04, 0x78, 0x89, 0x70, 0x45, 0x44, 0x78, 0xf3, 0x5c, 0x0a, 0x11, 0x21, 0x1e,
		0x1d, 0x02, 0x7a, 0x29, 0x21, 0x02, 0x92, 0x25, 0xce, 0x5b, 0x33, 0xa4, 0x72, 0x04, 0x7a, 0xc0,
		0x3c, 0xc0, 0x3c, 0xc0, 0x3c, 0x5b, 0x42, 0xea, 0x22, 0x97, 0xdf, 0x29, 0xd8, 0xda, 0x2d, 0x17,
		0xcd, 0xe9, 0x99, 0x30, 0x3d, 0x0c, 0xdd, 0x89, 0x78, 0x52, 0xc4, 0x7e, 0x8b, 0xe9, 0x36, 0x39,
		0x82, 0xbf, 0xc5, 0x2c, 0x10, 0x39, 0xd1, 0x5f, 0x22, 0x5c, 0x8a, 0xf0, 0x4f, 0x76, 0xda, 0x24,
		0x09, 0x00, 0xe7, 0x09, 0x08, 0x0a, 0x42, 0xb8, 0x05, 0x2a, 0xb3, 0xea, 0x5e, 0xd6, 0xa7, 0xaa,
		0x1a, 0xea, 0x1a, 0x8d, 0x80, 0x53, 0xee, 0x43, 0xf4, 0x64, 0x0b, 0x1f, 0xb7, 0x72, 0x07, 0xee,
		0xf8, 0x67, 0x41, 0xd4, 0x5e, 0x34, 0xa2, 0xcf, 0x42, 0x30, 0x4c, 0x72, 0x2d, 0xac, 0x1c, 0xb8,
		0x25, 0x53, 0x2f, 0x18, 0x65, 0xac, 0x92, 0x67, 0xdc, 0x54, 0x6f, 0xc1, 0xf3, 0x98, 0x75, 0x54,
		0x12, 0xbe, 0xed, 0xbd, 0x01, 0x68, 0xdf, 0xd4, 0x23, 0x69, 0xd0, 0xbe, 0x49, 0xd8, 0x3e, 0x59,
		0xda, 0xb7, 0x9d, 0x1a, 0x40, 0x47, 0xfe, 0xb6, 0xe7, 0x36, 0xa0, 0x80, 0x03, 0x05, 0x5c, 0x41,
		0x02, 0x58, 0x50, 0xc0, 0x81, 0x02, 0x0e, 0xd9, 0x2a, 0x64, 0xab, 0x90, 0xad, 0x42, 0xb3, 0xa8,
		0x58, 0x42, 0x08, 0xcd, 0xa2, 0xf3, 0x35, 0x84, 0x66, 0x51, 0x34, 0x8b, 0xd2, 0x1a, 0x5b, 0x3a,
		0x29, 0xa0, 0x80, 0x4b, 0x01, 0xf7, 0x40, 0x01, 0x07, 0xb8, 0x07, 0xb8, 0x07, 0xb8, 0x07, 0xb8,
		0x07, 0xb8, 0x07, 0xb8, 0x07, 0xb8, 0x07, 0xb8, 0x97, 0x25, 0xdc, 0x03, 0x05, 0x1c, 0x60, 0x1e,
		0x60, 0x1e, 0x60, 0x1e, 0x60, 0x1e, 0x60, 0x1e, 0x60, 0x1e, 0x60, 0x1e, 0x60, 0xde, 0x41, 0xc2,
		0x3c, 0x50, 0xc0, 0x01, 0xe2, 0x01, 0xe2, 0x95, 0x0f, 0xe2, 0x81, 0x02, 0x8e, 0x62, 0x7d, 0x80,
		0x02, 0x6e, 0x65, 0x40, 0x40, 0x01, 0x07, 0x37, 0x00, 0x37, 0x70, 0xcc, 0x6e, 0x00, 0x14, 0x70,
		0x1a, 0x28, 0xe0, 0x60, 0xfc, 0x60, 0xfc, 0x8e, 0x1e, 0x03, 0x83, 0x02, 0x8e, 0x3f, 0xf3, 0x05,
		0x0a, 0xb8, 0x4c, 0x12, 0x5e, 0xa0, 0x80, 0x43, 0x9e, 0xf2, 0xb8, 0x02, 0x53, 0x50, 0xc0, 0x01,
		0xa3, 0x01, 0xa3, 0x01, 0xa3, 0x81, 0x02, 0x8e, 0xc8, 0xcb, 0x81, 0x02, 0x4e, 0x15, 0xac, 0x02,
		0x05, 0xdc, 0x6a, 0x2e, 0x05, 0x14, 0x70, 0x04, 0x08, 0x08, 0x14, 0x70, 0xc0, 0x3c, 0xc0, 0x3c,
		0x65, 0xc0, 0x3c, 0xa0, 0x80, 0xcb, 0xc8, 0x9a, 0x82, 0x02, 0x0e, 0x14, 0x70, 0x7b, 0xcd, 0x4c,
		0xc1, 0x29, 0xe0, 0xf6, 0xf1, 0x40, 0x55, 0x55, 0xd2, 0xd8, 0x68, 0x2a, 0xd8, 0xbd, 0x42, 0x93,
		0xd5, 0xd9, 0xc3, 0x09, 0xb7, 0xfd, 0x3b, 0x20, 0x86, 0xcb, 0x75, 0xb9, 0x15, 0x81, 0x1e, 0x6e,
		0xe7, 0x02, 0x2a, 0x10, 0x47, 0x1c, 0x39, 0x27, 0x1c, 0x38, 0xe0, 0xc0, 0x01, 0x77, 0x5c, 0x1c,
		0x70, 0x8a, 0x38, 0xdf, 0xc0, 0xf1, 0xa6, 0x2c, 0x82, 0x05, 0xc7, 0x1b, 0x38, 0xde, 0xc0, 0xf1,
		0x86, 0x74, 0x14, 0xd2, 0x51, 0x48, 0x47, 0x51, 0xac, 0x65, 0x74, 0x83, 0x72, 0x66, 0x7c, 0xd0,
		0x0d, 0x3a, 0x5f, 0x43, 0xe8, 0x06, 0x45, 0x37, 0x28, 0xad, 0xb1, 0xa5, 0x93, 0x02, 0x8e, 0xb7,
		0x14, 0x70, 0x0f, 0x1c, 0x6f, 0x80, 0x7b, 0x80, 0x7b, 0x80, 0x7b, 0x80, 0x7b, 0x80, 0x7b, 0x80,
		0x7b, 0x80, 0x7b, 0x80, 0x7b, 0x59, 0xc2, 0x3d, 0x70, 0xbc, 0x01, 0xe6, 0x01, 0xe6, 0x01, 0xe6,
		0x01, 0xe6, 0x01, 0xe6, 0x01, 0xe6, 0x01, 0xe6, 0x01, 0xe6, 0x1d, 0x24, 0xcc, 0x03, 0xc7, 0x1b,
		0x20, 0x1e, 0x20, 0x5e, 0xf9, 0x20, 0xde, 0x51, 0x72, 0xbc, 0x7d, 0x64, 0xce, 0x5d, 0x54, 0xf4,
		0x0a, 0x72, 0x0b, 0xa0, 0xb4, 0x42, 0xa3, 0xb4, 0x7a, 0xe3, 0x2d, 0x26, 0xad, 0x68, 0xf0, 0x0c,
		0x2c, 0x93, 0x25, 0x00, 0xa4, 0x60, 0x99, 0x04, 0x10, 0x05, 0x10, 0x3d, 0x66, 0x20, 0x0a, 0x96,
		0x49, 0x0d, 0x2c, 0x93, 0x30, 0x7e, 0x30, 0x7e, 0x47, 0x1f, 0x85, 0x83, 0x65, 0x12, 0x81, 0x38,
		0x02, 0x71, 0xa9, 0x29, 0x03, 0xcb, 0x64, 0x21, 0x43, 0x71, 0xb0, 0x4c, 0x82, 0x65, 0x12, 0x18,
		0x0d, 0x18, 0xad, 0x94, 0x18, 0x0d, 0x2c, 0x93, 0x24, 0x52, 0xc1, 0x32, 0xa9, 0x0a, 0x56, 0x81,
		0x65, 0x72, 0x35, 0x97, 0x02, 0x96, 0x49, 0x02, 0x04, 0x04, 0x96, 0x49, 0x60, 0x1e, 0x60, 0x9e,
		0x32, 0x60, 0x1e, 0xb0, 0x4c, 0x66, 0x64, 0x4d, 0xc1, 0x32, 0x09, 0x96, 0xc9, 0xbd, 0x66, 0xa6,
		0xe0, 0x2c, 0x93, 0xdb, 0x58, 0x25, 0x8b, 0xcb, 0x22, 0xb9, 0x99, 0x37, 0x12, 0x4c, 0x91, 0xb9,
		0x2d, 0x99, 0x22, 0x30, 0x43, 0x66, 0xc5, 0x05, 0xf9, 0x8a, 0x70, 0xa2, 0x45, 0x27, 0x98, 0x7c,
		0x62, 0x39, 0x26, 0x90, 0x6e, 0xe2, 0xd2, 0x4d, 0xd1, 0xfe, 0x01, 0x4f, 0x31, 0xd8, 0x15, 0x6b,
		0xac, 0x1b, 0xa6, 0xe9, 0x31, 0x3f, 0x7d, 0x23, 0xe3, 0x9c, 0x38, 0x70, 0x7e, 0x6d, 0xca, 0x69,
		0xe5, 0x8b, 0x48, 0xb8, 0x23, 0x0f, 0x91, 0x08, 0x43, 0x3e, 0x92, 0x10, 0x8d, 0x18, 0xa4, 0x23,
		0x03, 0xe9, 0x08, 0x80, 0x04, 0xe9, 0xd3, 0x2a, 0x3e, 0x37, 0xaa, 0xde, 0xb0, 0x1a, 0x75, 0xc7,
		0xd5, 0xff, 0x72, 0x1d, 0x1e, 0x08, 0x98, 0x20, 0xe6, 0x4b, 0x8e, 0x6b, 0xa6, 0xcf, 0xca, 0xb7,
		0xd7, 0x2b, 0x41, 0xfb, 0x6a, 0x8d, 0x1f, 0x5a, 0x12, 0xef, 0xb8, 0x1e, 0x1d, 0x08, 0x5c, 0x2b,
		0x5b, 0xe8, 0x59, 0x39, 0x39, 0xb9, 0xae, 0xe9, 0x97, 0xfd, 0xef, 0xd7, 0x75, 0xfd, 0xb2, 0x1f,
		0x7f, 0xac, 0x47, 0xbf, 0xe2, 0xcf, 0x8d, 0xeb, 0x9a, 0xde, 0x9a, 0x7d, 0x6e, 0x5f, 0xd7, 0xf4,
		0x76, 0xff, 0xb4, 0xd7, 0x3b, 0x3f, 0xfd, 0xd6, 0x7c, 0xe1, 0xbf, 0xf0, 0xe4, 0x87, 0xeb, 0x5e,
		0x6f, 0xfc, 0xed, 0xb7, 0x97, 0xf0, 0xe7, 0xc7, 0x97, 0xfe, 0x9b, 0xd3, 0x77, 0xa2, 0x61, 0x41,
		0x28, 0xb8, 0xd7, 0x3b, 0xef, 0xbf, 0xe6, 0x07, 0x50, 0x7d, 0x95, 0x50, 0x48, 0x6e, 0x39, 0x75,
		0x0e, 0x60, 0x39, 0x75, 0xbf, 0x87, 0x73, 0x63, 0xe8, 0xc3, 0x2b, 0xfd, 0xd7, 0xfe, 0xb7, 0xda,
		0x59, 0xeb, 0xe5, 0xb4, 0x7b, 0x7a, 0xb2, 0xfa, 0x77, 0xdd, 0xd3, 0x6f, 0xb5, 0xb3, 0xf6, 0xcb,
		0xc9, 0xc9, 0x86, 0x7f, 0x79, 0xb7, 0x49, 0xc6, 0xe9, 0xf7, 0x93, 0x93, 0x93, 0xe9, 0x42, 0x5a,
		0x5a, 0x5c, 0xd7, 0xb5, 0x7a, 0xff, 0x5d, 0xf4, 0x31, 0xfe, 0x99, 0x2c, 0xcf, 0x54, 0x5f, 0x3e,
		0xa5, 0x5c, 0x94, 0x27, 0x27, 0xd7, 0xff, 0xdd, 0xed, 0xbf, 0xe9, 0x9e, 0x7e, 0xeb, 0xbc, 0xcc,
		0x3e, 0x47, 0x3f, 0x4f, 0xbf, 0x9f, 0x9c, 0xbf, 0xee, 0xf5, 0xce, 0xcf, 0x5f, 0x9f, 0xc6, 0x2f,
		0x32, 0xfd, 0xde, 0xeb, 0xf8, 0x5f, 0xdf, 0x75, 0xbb, 0x6b, 0x7f, 0x75, 0x7a, 0xf2, 0xc3, 0xb9,
		0xa4, 0x7e, 0xc4, 0xe3, 0xd7, 0xcd, 0x46, 0x4d, 0x5e, 0xd1, 0xca, 0xa5, 0x41, 0x53, 0x7b, 0x99,
		0xe2, 0xb9, 0x31, 0x16, 0x11, 0xf7, 0x3c, 0x27, 0x2f, 0x33, 0x90, 0xd7, 0xf1, 0x21, 0x2f, 0x5e,
		0xde, 0xe3, 0xca, 0x9e, 0xd3, 0x35, 0x84, 0x89, 0xfd, 0x49, 0x4f, 0xed, 0x00, 0xbf, 0x7f, 0xae,
		0x9b, 0x16, 0xe0, 0xf7, 0xe7, 0xb8, 0x90, 0x94, 0x38, 0x5c, 0x05, 0x61, 0xb8, 0xe4, 0x8e, 0x22,
		0xd8, 0xfd, 0xb3, 0x51, 0x3a, 0x72, 0xe5, 0x53, 0xa2, 0x84, 0xf9, 0xec, 0x15, 0x11, 0xec, 0x00,
		0xca, 0xef, 0xfc, 0xd1, 0x51, 0xfe, 0x10, 0x50, 0xfd, 0x10, 0xd5, 0xac, 0x13, 0xec, 0x83, 0x52,
		0xd6, 0xa8, 0x53, 0x53, 0xf9, 0x28, 0x2b, 0x6e, 0xa6, 0x2f, 0x6a, 0x26, 0x28, 0x96, 0x22, 0xad,
		0x3d, 0x57, 0x46, 0xd1, 0x53, 0xa6, 0x39, 0xc9, 0x69, 0x23, 0xbe, 0x9f, 0xd5, 0x76, 0xdf, 0x19,
		0x09, 0xdc, 0x69, 0x28, 0x81, 0x3b, 0x0d, 0xc0, 0x1d, 0xc0, 0x1d, 0xc0, 0x1d, 0xc0, 0x1d, 0xc0,
		0x1d, 0xc0, 0x1d, 0xc0, 0x1d, 0xc0, 0x9d, 0x5c, 0xe0, 0x0e, 0x19, 0x71, 0x34, 0x35, 0x61, 0x34,
		0x60, 0x0e, 0x60, 0x0e, 0x60, 0x0e, 0x60, 0x0e, 0x60, 0x0e, 0x60, 0x0e, 0x60, 0x0e, 0x60, 0x8e,
		0x1c, 0xcc, 0x21, 0x22, 0x4e, 0xa6, 0x25, 0x4c, 0x06, 0xc4, 0x01, 0xc4, 0x29, 0x39, 0xc4, 0xa1,
		0x83, 0x27, 0xb4, 0x84, 0xc6, 0x14, 0x44, 0xc6, 0x64, 0xf4, 0xa1, 0x6a, 0x68, 0x43, 0x8b, 0x6c,
		0x6e, 0x09, 0x68, 0x41, 0xe9, 0xe8, 0x40, 0x61, 0x66, 0x61, 0x66, 0x61, 0x66, 0xc9, 0xe8, 0x3a,
		0x25, 0x69, 0x3a, 0xb3, 0x31, 0x40, 0x52, 0x74, 0x9c, 0x14, 0x34, 0x9c, 0x30, 0x3a, 0x30, 0x3a,
		0x30, 0x3a, 0xea, 0x68, 0x32, 0x09, 0xe8, 0x31, 0x0f, 0x3c, 0x19, 0x55, 0x47, 0x32, 0xaa, 0x28,
		0xc9, 0x28, 0x42, 0x5a, 0x4b, 0xe4, 0xa1, 0x4a, 0x1d, 0x18, 0x11, 0xd1, 0x52, 0xd2, 0xd2, 0x51,
		0x02, 0xab, 0x00, 0xab, 0x00, 0xab, 0x28, 0xa1, 0x8b, 0xa4, 0xa0, 0x89, 0xa4, 0xa1, 0x87, 0xa4,
		0xa5, 0x85, 0x54, 0x47, 0x07, 0xa9, 0x88, 0x06, 0x92, 0x90, 0xfe, 0x51, 0x9a, 0xe2, 0x94, 0x8c,
		0xee, 0x51, 0x09, 0xcd, 0xa3, 0x2a, 0x7a, 0x47, 0x32, 0x5a, 0xc7, 0xcc, 0x09, 0xc0, 0x32, 0x41,
		0x06, 0xb2, 0x74, 0x8d, 0x44, 0x34, 0x8d, 0xc0, 0x02, 0xc0, 0x02, 0x28, 0xbb, 0x21, 0xc4, 0x13,
		0x84, 0x5b, 0x59, 0x07, 0x41, 0x92, 0x46, 0x41, 0x8b, 0x28, 0x47, 0x87, 0x28, 0x4f, 0x83, 0xa8,
		0x84, 0xfe, 0x50, 0x8e, 0xf6, 0xb0, 0x94, 0x5c, 0x75, 0xfb, 0x68, 0x24, 0xaa, 0xa4, 0x4d, 0xf7,
		0x1a, 0x01, 0x1d, 0x5a, 0x68, 0x17, 0x3a, 0xef, 0x67, 0xcf, 0xb3, 0xca, 0x6c, 0xb8, 0xfd, 0x5f,
		0x9f, 0x41, 0x70, 0x27, 0xbd, 0x1a, 0x32, 0x64, 0xbd, 0xdb, 0x39, 0xcd, 0x64, 0x44, 0x78, 0xaf,
		0x24, 0xa6, 0x6c, 0x66, 0x47, 0x53, 0xb3, 0xdd, 0xf1, 0xd9, 0x4c, 0x7e, 0x1b, 0x49, 0x62, 0x13,
		0xf9, 0x6c, 0xe0, 0xbe, 0x21, 0xe2, 0x5c, 0xcd, 0x24, 0xab, 0x38, 0xc5, 0x22, 0x95, 0x5c, 0x9c,
		0xbb, 0x97, 0xdf, 0xf6, 0x45, 0xb5, 0xf9, 0x5f, 0xb6, 0x8c, 0x61, 0xda, 0xb1, 0x93, 0x18, 0xb3,
		0x1d, 0x23, 0x25, 0x36, 0x42, 0x9b, 0x07, 0x66, 0xfd, 0xb5, 0x37, 0xbc, 0x72, 0x25, 0x7a, 0xac,
		0x9d, 0x9b, 0xc6, 0x73, 0x22, 0x98, 0xe4, 0xab, 0x5b, 0x86, 0x6e, 0x77, 0x04, 0xb5, 0x37, 0x42,
		0x4a, 0x13, 0x01, 0xf1, 0x47, 0x38, 0x69, 0x23, 0x18, 0xee, 0x08, 0x85, 0x3b, 0x02, 0x11, 0x8a,
		0x30, 0xf8, 0x16, 0xef, 0x5e, 0xf4, 0x9e, 0xbe, 0x28, 0x3e, 0x45, 0xd1, 0x7b, 0xca, 0x7d, 0xc4,
		0x74, 0x46, 0x37, 0x3d, 0x17, 0x57, 0xb2, 0xcf, 0x57, 0x6b, 0xa4, 0x4c, 0x2e, 0x0a, 0xef, 0x1d,
		0xf1, 0xef, 0x0d, 0xbd, 0xa4, 0x73, 0x18, 0xfc, 0x6f, 0xcb, 0xb1, 0x95, 0x96, 0xe5, 0xeb, 0x0a,
		0xda, 0xe4, 0xbe, 0xac, 0xc9, 0xf2, 0x77, 0x6b, 0xf5, 0xb2, 0xd1, 0x9a, 0x7e, 0x19, 0x66, 0xab,
		0xf4, 0x66, 0xeb, 0x83, 0x13, 0x30, 0x6f, 0x68, 0x0c, 0xd8, 0xbe, 0xe8, 0x39, 0x4d, 0x1d, 0x6c,
		0xea, 0x3a, 0xd7, 0xca, 0xb5, 0xa1, 0xff, 0x75, 0xa5, 0xff, 0xbf, 0x9a, 0x7e, 0x79, 0xde, 0xbd,
		0xa9, 0xea, 0xbb, 0xaa, 0x57, 0x89, 0x56, 0xb6, 0x6e, 0x8d, 0x1f, 0x5a, 0x5c, 0xcb, 0x3b, 0xbe,
		0x02, 0x6b, 0x1c, 0x6b, 0xbc, 0x4c, 0x6b, 0xbc, 0xc3, 0xbd, 0xc6, 0x3b, 0x58, 0xe3, 0x58, 0xe3,
		0x05, 0x5f, 0xe3, 0x2b, 0x09, 0x9d, 0x79, 0xce, 0x77, 0x64, 0x8c, 0xfd, 0x14, 0x2b, 0x7e, 0xf7,
		0xf5, 0xbb, 0xd7, 0x7f, 0x1d, 0xeb, 0x3f, 0xaf, 0xf5, 0xbf, 0x8f, 0x6a, 0x72, 0xf7, 0xc4, 0xee,
		0x1f, 0xa3, 0x54, 0xeb, 0x63, 0xdf, 0xb8, 0xa5, 0x63, 0x60, 0x4d, 0xbd, 0x9f, 0xc9, 0xb3, 0x6f,
		0x29, 0xbe, 0x3f, 0xc9, 0xbb, 0x0f, 0x29, 0xbc, 0xdf, 0x28, 0xbc, 0xaf, 0x28, 0xb5, 0x7f, 0x28,
		0x97, 0x11, 0x4d, 0xcb, 0x70, 0x2a, 0xda, 0x0c, 0x2a, 0xd7, 0xfc, 0x89, 0x53, 0x46, 0x48, 0x16,
		0xa6, 0xf4, 0x02, 0x25, 0x59, 0xa8, 0x6a, 0x76, 0x5f, 0xc4, 0x4f, 0x19, 0x91, 0x6b, 0x9e, 0x14,
		0x69, 0x96, 0x14, 0x6e, 0x8e, 0xa4, 0x69, 0x86, 0xcc, 0x92, 0x3e, 0x7f, 0xe0, 0x3a, 0x01, 0x7b,
		0x0a, 0x44, 0xec, 0x44, 0x7c, 0x21, 0x0c, 0x04, 0x0c, 0xc4, 0xff, 0xcf, 0xde, 0xf9, 0x36, 0x27,
		0x6e, 0x24, 0x7f, 0xfc, 0xb9, 0x5f, 0x05, 0xf1, 0xef, 0xb7, 0x55, 0x60, 0x5b, 0x18, 0x30, 0x66,
		0x17, 0xae, 0xae, 0x7c, 0xa9, 0x24, 0x5b, 0x97, 0xaa, 0x4d, 0xea, 0x2a, 0x77, 0xc9, 0x13, 0x20,
		0x5b, 0x5a, 0x90, 0x6d, 0xd5, 0xf1, 0xaf, 0x24, 0xcc, 0xae, 0x63, 0xf3, 0xde, 0xaf, 0x90, 0x40,
		0x80, 0x84, 0x90, 0x66, 0xa6, 0x7b, 0x90, 0xe4, 0xef, 0x3e, 0x20, 0xc4, 0xa0, 0x11, 0xd2, 0x74,
		0xf7, 0x7c, 0xa6, 0x67, 0xf4, 0xed, 0x13, 0x07, 0x08, 0x85, 0x98, 0xa0, 0xd1, 0xd3, 0x36, 0xdb,
		0x6e, 0xc5, 0x5d, 0x2d, 0x38, 0x12, 0xbe, 0x06, 0x5f, 0x83, 0xaf, 0xa5, 0x29, 0x0a, 0x63, 0x3a,
		0x0f, 0xd6, 0xdc, 0x18, 0xd9, 0xae, 0xc4, 0xc8, 0xb6, 0x7b, 0x30, 0x3c, 0x0e, 0x1e, 0x07, 0x8f,
		0xa3, 0xd8, 0xcb, 0x23, 0x34, 0xaf, 0xc4, 0x7e, 0x9e, 0x64, 0x9c, 0x10, 0xdd, 0x9b, 0x72, 0x34,
		0xdf, 0x78, 0xad, 0x92, 0x6e, 0x2a, 0x09, 0xef, 0x6a, 0xd9, 0xdb, 0x81, 0x16, 0x6c, 0x23, 0xfc,
		0xc5, 0x9c, 0xb9, 0x47, 0x3e, 0xcb, 0xf9, 0xde, 0x20, 0x99, 0x7c, 0x2f, 0xe5, 0x9d, 0x55, 0xd9,
		0x41, 0xf4, 0xe4, 0x5a, 0x4e, 0x8a, 0x9c, 0xb6, 0xff, 0x35, 0xa4, 0xae, 0xf3, 0x9a, 0xba, 0x5e,
		0xf5, 0x5f, 0xfa, 0x0c, 0xb5, 0xf7, 0x6d, 0x24, 0xa2, 0x91, 0x88, 0x3e, 0xfc, 0x45, 0x73, 0xf4,
		0x30, 0x75, 0xec, 0xf9, 0xe3, 0x58, 0x9c, 0xc0, 0xb7, 0x87, 0x82, 0xbf, 0xc1, 0xdf, 0x27, 0xe6,
		0x6f, 0xef, 0x99, 0xe9, 0x47, 0xd3, 0x7d, 0x34, 0x44, 0xcd, 0xb2, 0x24, 0xf9, 0x8c, 0xb4, 0xdc,
		0x33, 0xd1, 0x6a, 0xcf, 0x40, 0x6f, 0x9e, 0x79, 0x96, 0xab, 0x47, 0xec, 0x3d, 0xd6, 0x3c, 0x1e,
		0xde, 0xca, 0x1c, 0xeb, 0x3d, 0xbb, 0xec, 0x3e, 0x9a, 0xe7, 0xac, 0x8f, 0x04, 0xc9, 0x3f, 0x97,
		0xec, 0x5d, 0x97, 0xd4, 0xc3, 0x76, 0xfe, 0xed, 0x94, 0x7b, 0x08, 0x6b, 0x75, 0x43, 0x44, 0x9f,
		0x25, 0x26, 0x7f, 0xb0, 0x86, 0x24, 0x17, 0xb3, 0xff, 0xb8, 0xb5, 0x31, 0x33, 0x5d, 0x77, 0x1d,
		0x9d, 0x44, 0x47, 0x85, 0x98, 0x86, 0x30, 0x46, 0x60, 0x8c, 0x38, 0xf1, 0x18, 0xf1, 0x2f, 0x67,
		0x3a, 0x73, 0x6c, 0x6b, 0x6e, 0x3a, 0xcf, 0xa2, 0x76, 0x59, 0xd2, 0xbe, 0x46, 0x59, 0xfe, 0xae,
		0x7a, 0x59, 0x79, 0x2d, 0x77, 0xff, 0xfc, 0xae, 0x5f, 0xbd, 0xac, 0x64, 0x73, 0x59, 0x32, 0xc6,
		0xd7, 0x8d, 0x81, 0xe7, 0x95, 0x4f, 0x8e, 0x45, 0x17, 0x3f, 0x76, 0xdb, 0x44, 0x28, 0x41, 0x28,
		0x39, 0x71, 0x28, 0xb1, 0xc6, 0x33, 0xa1, 0x87, 0x7f, 0x83, 0xd8, 0x71, 0xa3, 0xd1, 0x3d, 0x1f,
		0x9c, 0xe9, 0xd3, 0x4c, 0x72, 0x83, 0xd1, 0xce, 0xb1, 0x70, 0x37, 0xb8, 0x1b, 0x89, 0xbb, 0x49,
		0xa8, 0x62, 0x14, 0x7e, 0x0d, 0x74, 0xfa, 0x75, 0x62, 0x39, 0xe2, 0xee, 0xe9, 0x1f, 0x06, 0xcf,
		0x84, 0x67, 0x66, 0x21, 0xef, 0xe2, 0x59, 0xa3, 0x61, 0x0e, 0x06, 0xc9, 0x1a, 0x00, 0xf9, 0xcd,
		0xba, 0xb8, 0x43, 0xc7, 0x10, 0x71, 0xbb, 0x68, 0xea, 0xc5, 0x7d, 0x76, 0xe7, 0xd6, 0x78, 0xdd,
		0x48, 0x56, 0xf3, 0x28, 0xdb, 0xcb, 0x94, 0x4c, 0x89, 0xec, 0x5e, 0x64, 0xa7, 0x54, 0x2f, 0x40,
		0x6e, 0x44, 0x48, 0xc9, 0x5d, 0x46, 0xb9, 0x1d, 0x11, 0x1a, 0x11, 0x9a, 0x2d, 0x42, 0x13, 0x28,
		0x9f, 0x4b, 0x28, 0x9d, 0x4b, 0x2a, 0x9b, 0xcb, 0x49, 0x69, 0xc9, 0x2b, 0x16, 0x2a, 0x2a, 0x95,
		0x93, 0x49, 0x61, 0xab, 0x4b, 0x5f, 0x2f, 0xe5, 0x34, 0xc4, 0xd4, 0x6f, 0x9d, 0x82, 0xb2, 0x78,
		0x96, 0x6e, 0x1f, 0xd3, 0x38, 0xa5, 0x33, 0x1d, 0x37, 0x73, 0xec, 0x85, 0xa1, 0xb0, 0xa0, 0x1b,
		0x3a, 0x1e, 0x63, 0x17, 0xc6, 0xae, 0x2c, 0xcc, 0x2e, 0xa4, 0xcc, 0xb2, 0xf4, 0xb6, 0x56, 0x75,
		0x87, 0x52, 0x45, 0xae, 0xfd, 0x55, 0xdd, 0x1b, 0xc9, 0x83, 0x6f, 0xbc, 0x74, 0xbd, 0xe5, 0xd6,
		0x1b, 0x1f, 0x64, 0x0e, 0x6f, 0x6e, 0x0e, 0x6f, 0xcb, 0x54, 0x04, 0x3e, 0xbf, 0x5d, 0x1f, 0xde,
		0xb8, 0x6d, 0x65, 0x76, 0x2e, 0xe5, 0xdd, 0xd9, 0x4e, 0xa9, 0x21, 0x71, 0x79, 0xeb, 0xfb, 0xda,
		0x29, 0xdd, 0x48, 0x1e, 0xdc, 0x5e, 0xf5, 0x6d, 0x53, 0xee, 0xe0, 0xd5, 0x3d, 0xed, 0x94, 0x64,
		0x04, 0x44, 0xfd, 0x0b, 0x56, 0x59, 0x85, 0x2f, 0xc2, 0x7c, 0xd1, 0x57, 0x19, 0x57, 0x58, 0x44,
		0x8f, 0xb4, 0x80, 0xb1, 0x18, 0x63, 0xf1, 0x89, 0xc7, 0x62, 0xac, 0x9e, 0x33, 0x87, 0x09, 0xa5,
		0x65, 0xf3, 0x63, 0x8d, 0x21, 0x78, 0x20, 0x78, 0x9c, 0x38, 0x78, 0xe4, 0x62, 0xbd, 0xdc, 0xb1,
		0xc6, 0xd3, 0xb9, 0x15, 0x88, 0x19, 0x0b, 0xfb, 0x60, 0xe8, 0x78, 0xb8, 0x1d, 0xdc, 0xee, 0xc4,
		0x6e, 0xb7, 0x95, 0xe6, 0x36, 0x26, 0x53, 0xe3, 0x2f, 0xb1, 0x19, 0x66, 0xe0, 0x83, 0x6d, 0x81,
		0x63, 0xd6, 0xbf, 0x95, 0x3d, 0xeb, 0xbb, 0xbd, 0xc2, 0x45, 0x53, 0xe1, 0x1a, 0x55, 0xe8, 0x44,
		0x99, 0x52, 0xb6, 0xb4, 0x52, 0xee, 0xd6, 0x8c, 0x76, 0xff, 0xb5, 0x5b, 0x37, 0xda, 0x7d, 0xff,
		0x6d, 0xdd, 0xfb, 0x8f, 0xff, 0xbe, 0xd1, 0xad, 0x19, 0xcd, 0xcd, 0xfb, 0xdb, 0x6e, 0xcd, 0xb8,
		0xed, 0x57, 0x7a, 0xbd, 0x6a, 0xe5, 0xe5, 0x66, 0x29, 0x7e, 0x60, 0xf9, 0x5d, 0xb7, 0xd7, 0x9b,
		0xbd, 0xfc, 0xba, 0x5c, 0xbd, 0x7e, 0x5a, 0xf6, 0x2f, 0x2b, 0x77, 0xb2, 0x75, 0x7a, 0x56, 0x0d,
		0xf7, 0x7a, 0xd5, 0xfe, 0x85, 0x78, 0x59, 0x96, 0x3e, 0xe7, 0x94, 0x5d, 0xcd, 0x9c, 0x5a, 0x05,
		0x30, 0xa7, 0xce, 0xeb, 0xaa, 0x6f, 0x4c, 0xe3, 0xfe, 0x7b, 0xe3, 0x63, 0xff, 0xa5, 0x76, 0xd5,
		0x5c, 0x56, 0x3a, 0x95, 0x72, 0xf8, 0x6f, 0x9d, 0xca, 0x4b, 0xed, 0xea, 0x76, 0x59, 0x2e, 0x1f,
		0xf8, 0xe4, 0xee, 0x50, 0x1b, 0x95, 0xd7, 0x72, 0xb9, 0xbc, 0x36, 0xa4, 0x3d, 0xe3, 0xea, 0xd6,
		0xea, 0xfd, 0x3b, 0xef, 0xad, 0xff, 0x1a, 0x98, 0x67, 0xaa, 0x2f, 0x57, 0x28, 0x8d, 0xb2, 0x5c,
		0xee, 0xfe, 0xd9, 0xe9, 0x5f, 0x76, 0x2a, 0x2f, 0xad, 0xe5, 0xe6, 0xbd, 0xf7, 0x5a, 0x79, 0x2d,
		0x57, 0x2f, 0x7a, 0xbd, 0x6a, 0xf5, 0xa2, 0xe2, 0x5f, 0xc8, 0xfa, 0x7b, 0x17, 0xfe, 0xa7, 0x77,
		0x9d, 0x4e, 0xe4, 0x4f, 0x95, 0xf2, 0xbb, 0xaa, 0xa2, 0x7f, 0xf8, 0xf7, 0xaf, 0xa3, 0xc7, 0x4d,
		0x32, 0x39, 0xcd, 0xf1, 0x6a, 0x68, 0x98, 0x4f, 0xf3, 0x47, 0x63, 0x2e, 0x32, 0x8e, 0xed, 0x3d,
		0xc0, 0xb8, 0x73, 0x3c, 0xa8, 0x0a, 0x54, 0x75, 0x62, 0xaa, 0x4a, 0x54, 0xec, 0x8f, 0xb3, 0xc6,
		0xf7, 0x85, 0x5d, 0x3f, 0xaf, 0x61, 0xfd, 0x5c, 0xf6, 0xd6, 0x35, 0x1b, 0xed, 0x66, 0xbb, 0xf5,
		0xbe, 0xd1, 0xc6, 0x22, 0x7a, 0x66, 0x86, 0x2b, 0xb9, 0x3d, 0xf3, 0xdb, 0x43, 0x31, 0x48, 0x61,
		0x90, 0x3a, 0xf1, 0x20, 0x95, 0x8f, 0xed, 0xef, 0x9e, 0xcb, 0xf8, 0x0b, 0xfc, 0x8a, 0x84, 0x18,
		0x6a, 0x04, 0x1e, 0x08, 0x0f, 0x04, 0x26, 0x02, 0x13, 0x81, 0x89, 0xc0, 0x44, 0x8e, 0x81, 0x6b,
		0xd1, 0x5c, 0x3f, 0xef, 0x22, 0x29, 0x5f, 0x19, 0x3a, 0x1e, 0xc3, 0x15, 0x86, 0x2b, 0x00, 0x63,
		0x2a, 0xbf, 0x33, 0x07, 0x23, 0x49, 0x4e, 0xdc, 0x39, 0x16, 0xfe, 0x06, 0x7f, 0x3b, 0xb1, 0xbf,
		0xfd, 0x7b, 0x32, 0x9e, 0x99, 0x83, 0x51, 0x11, 0xf7, 0x33, 0xd7, 0x37, 0x2b, 0xb3, 0xd2, 0x7b,
		0x92, 0xbd, 0xea, 0x62, 0x59, 0xdd, 0xd6, 0xbb, 0x2e, 0x08, 0x28, 0xb3, 0xcb, 0x75, 0x5d, 0x67,
		0xad, 0x08, 0x8a, 0x51, 0x8b, 0x96, 0x22, 0x01, 0xb5, 0x40, 0x40, 0x88, 0xc8, 0x20, 0x20, 0x71,
		0xbf, 0x53, 0x20, 0xa0, 0x16, 0x08, 0x08, 0xfe, 0x06, 0x02, 0x02, 0x01, 0x81, 0x80, 0x08, 0x22,
		0xb1, 0xe5, 0xb8, 0x69, 0x2b, 0x01, 0xec, 0x87, 0xe1, 0xf5, 0x81, 0x88, 0xc1, 0x88, 0xc1, 0x24,
		0x31, 0x58, 0xaf, 0xb2, 0xd6, 0xef, 0xae, 0xe5, 0xf8, 0xd5, 0x13, 0xc4, 0x0c, 0x39, 0x7f, 0x11,
		0x7c, 0x51, 0x97, 0x8e, 0xdf, 0x8b, 0xc6, 0x40, 0xfa, 0xa1, 0xda, 0xc5, 0x4d, 0x66, 0x23, 0xff,
		0xa2, 0x2e, 0x19, 0xf7, 0x57, 0xf7, 0x43, 0xee, 0x51, 0xd8, 0xc5, 0xea, 0x9e, 0xdc, 0x64, 0x7d,
		0xbc, 0xa0, 0xa8, 0xbe, 0x93, 0x76, 0x03, 0x09, 0x0a, 0xef, 0x24, 0x9e, 0x5c, 0xb4, 0xf0, 0x8b,
		0x57, 0x14, 0xe5, 0x3a, 0x45, 0xb1, 0x8c, 0x92, 0x68, 0xb1, 0x97, 0x55, 0xb4, 0x74, 0xbd, 0xd7,
		0x7c, 0x97, 0xc6, 0x39, 0x56, 0x36, 0x46, 0xee, 0xa6, 0xa8, 0xd4, 0xba, 0x59, 0xd8, 0xd6, 0xd7,
		0x14, 0xb5, 0x6e, 0xfc, 0xaf, 0xa1, 0xd6, 0x4d, 0x5e, 0x6b, 0xdd, 0xac, 0xfa, 0x2f, 0x7d, 0xad,
		0x1b, 0xef, 0xdb, 0xa8, 0x75, 0x83, 0x5a, 0x37, 0x87, 0xbf, 0x78, 0x6f, 0x8e, 0xed, 0x91, 0x44,
		0x65, 0xd7, 0xf5, 0x71, 0x98, 0xad, 0x61, 0xb6, 0x86, 0x0c, 0x75, 0x9a, 0xbc, 0x88, 0x6d, 0x7d,
		0x35, 0xec, 0xc9, 0x60, 0xf4, 0x24, 0x99, 0x1e, 0xd9, 0x3f, 0x1e, 0x7e, 0x07, 0xbf, 0xcb, 0x61,
		0x96, 0xc4, 0xd3, 0x2e, 0x1b, 0xdb, 0x5f, 0x0c, 0x29, 0x73, 0xce, 0x61, 0xb6, 0x7b, 0x75, 0x85,
		0x43, 0x6b, 0x28, 0x9d, 0x31, 0xb1, 0xbe, 0xad, 0x1b, 0xc8, 0x6a, 0xee, 0x23, 0xf8, 0x81, 0x72,
		0x79, 0x8c, 0xe0, 0x06, 0x15, 0x43, 0x15, 0xd9, 0x33, 0x6b, 0xb9, 0x07, 0x65, 0xb6, 0x87, 0x22,
		0xb6, 0x23, 0xb6, 0x9f, 0x98, 0xa9, 0xf6, 0xf4, 0x91, 0x15, 0x00, 0x4b, 0x87, 0xac, 0x55, 0xb7,
		0xd7, 0xfb, 0xda, 0xeb, 0x19, 0xbd, 0x5e, 0xb5, 0x73, 0xf5, 0xf9, 0x1f, 0xff, 0xf7, 0xee, 0xff,
		0x7b, 0xbd, 0xcb, 0xbf, 0xf7, 0x7a, 0xaf, 0x7f, 0xeb, 0x5f, 0x9e, 0x40, 0xe3, 0x8a, 0x22, 0xe5,
		0x19, 0x84, 0x82, 0x52, 0xaa, 0x59, 0x16, 0x32, 0x9f, 0xe4, 0x99, 0x4f, 0x2f, 0x45, 0x76, 0x9d,
		0x22, 0x75, 0x22, 0x9c, 0xe4, 0xfb, 0x63, 0xd5, 0xb2, 0xf7, 0x9a, 0xef, 0xcc, 0xe7, 0xb1, 0x24,
		0xa2, 0xdc, 0x4d, 0x51, 0xca, 0x7c, 0x3a, 0xf7, 0x46, 0xa8, 0x48, 0xda, 0xdc, 0x31, 0x67, 0xc6,
		0xd0, 0x76, 0xcd, 0x2f, 0x23, 0x2b, 0x45, 0x4e, 0x34, 0xa1, 0x81, 0xe3, 0xd9, 0xd2, 0x1a, 0xb2,
		0xa5, 0xa7, 0xca, 0x96, 0x26, 0x8e, 0x71, 0xa9, 0xe5, 0xd6, 0x12, 0xe4, 0xd5, 0x52, 0x1b, 0xa2,
		0x9b, 0xca, 0xda, 0x90, 0x80, 0xcf, 0x71, 0x02, 0xde, 0xb9, 0x17, 0xc8, 0xbf, 0x3b, 0xf7, 0x48,
		0xbf, 0x23, 0xfd, 0x1e, 0xf3, 0xc5, 0xc1, 0x74, 0x32, 0xb7, 0xbe, 0xcd, 0x8d, 0xb1, 0x39, 0x9b,
		0xd9, 0x93, 0x07, 0x09, 0x81, 0xc5, 0x48, 0x0b, 0x62, 0xd3, 0xc7, 0x3a, 0xa6, 0x8f, 0x98, 0x3e,
		0xaa, 0x19, 0x71, 0x9c, 0x31, 0x8b, 0xf7, 0x42, 0x8c, 0x4d, 0x8b, 0xf6, 0x85, 0x98, 0x69, 0x4b,
		0x9b, 0xb8, 0x8a, 0xa9, 0xd3, 0x99, 0xbc, 0xaa, 0xe9, 0x93, 0xb9, 0x00, 0x99, 0x2b, 0x90, 0xba,
		0x84, 0x78, 0xbe, 0x50, 0x26, 0x81, 0x2a, 0xea, 0x2a, 0x61, 0x97, 0x91, 0xef, 0xb5, 0x90, 0xcb,
		0xc8, 0xf6, 0x99, 0x58, 0x32, 0x91, 0xcc, 0x75, 0x28, 0x5c, 0x88, 0xde, 0x95, 0xa8, 0x5c, 0x8a,
		0xdc, 0xb5, 0xc8, 0x5d, 0x8c, 0xc5, 0xd5, 0xe4, 0x5c, 0x4e, 0xd2, 0xf5, 0xe4, 0x93, 0x9d, 0xb1,
		0xf6, 0xe3, 0x2d, 0x52, 0xa9, 0xf9, 0x53, 0x49, 0x72, 0xa5, 0x2a, 0xd2, 0x86, 0xd4, 0xca, 0x55,
		0xf4, 0xde, 0xa8, 0xac, 0x64, 0x45, 0x5a, 0xab, 0xa7, 0x9b, 0xd6, 0xa4, 0x6a, 0xcb, 0x2b, 0x78,
		0xf3, 0xc5, 0xb1, 0x87, 0x0f, 0x16, 0x45, 0x73, 0x5e, 0x01, 0x9c, 0xa9, 0x3b, 0x23, 0xf9, 0x6d,
		0xad, 0x4d, 0x63, 0xa2, 0x5b, 0x8f, 0x89, 0x4c, 0x7a, 0xa7, 0xfb, 0x64, 0x97, 0xe7, 0x22, 0x4d,
		0xad, 0x6f, 0xb5, 0x54, 0x15, 0x9c, 0x48, 0x63, 0xde, 0x8d, 0x96, 0xaa, 0x89, 0x73, 0xb0, 0x29,
		0x6f, 0x4f, 0x73, 0x8b, 0xa0, 0x31, 0x7f, 0x7e, 0x5e, 0x57, 0xeb, 0x33, 0xdd, 0x61, 0x4f, 0x8b,
		0xea, 0x4e, 0x08, 0xac, 0xc5, 0x96, 0x2a, 0xd3, 0xe2, 0xba, 0xc8, 0x2a, 0x26, 0x40, 0x04, 0x20,
		0x02, 0x10, 0x89, 0xb1, 0x1f, 0xb5, 0x55, 0xd8, 0x58, 0x1e, 0xf9, 0xa0, 0xd0, 0x86, 0xaa, 0x0e,
		0x7b, 0xd0, 0x10, 0xc9, 0xaa, 0x6d, 0xf8, 0x5f, 0x3f, 0xc3, 0xa1, 0xd7, 0x9e, 0xb8, 0x73, 0x73,
		0x32, 0xb0, 0x88, 0x62, 0xee, 0x7e, 0x73, 0x08, 0xb6, 0x08, 0xb6, 0x08, 0xb6, 0x6a, 0xf6, 0x43,
		0x17, 0x5f, 0x33, 0x1c, 0x85, 0xe6, 0xd3, 0xd9, 0x74, 0x34, 0x7d, 0x78, 0x26, 0x8a, 0x42, 0xfb,
		0xcd, 0x21, 0x0a, 0x21, 0x0a, 0x21, 0x0a, 0x21, 0x0a, 0xa5, 0x99, 0xa0, 0x13, 0x05, 0xa0, 0xa0,
		0x25, 0xc4, 0x1e, 0xc4, 0x1e, 0xc4, 0x9e, 0xb7, 0x16, 0x7b, 0x58, 0x17, 0xf5, 0xd6, 0xbb, 0x71,
		0x09, 0xb2, 0x5b, 0x62, 0x3b, 0x74, 0x23, 0x47, 0x0b, 0xef, 0xd8, 0x8d, 0xb6, 0x40, 0xb0, 0x83,
		0x37, 0xd2, 0xa8, 0xd0, 0x8e, 0x5e, 0xd5, 0xce, 0x10, 0xdc, 0xf1, 0x1b, 0x39, 0x5e, 0x78, 0x7f,
		0xab, 0x73, 0xef, 0xae, 0x5e, 0xae, 0xc3, 0xfb, 0x6b, 0xae, 0xd5, 0x36, 0x27, 0x94, 0x84, 0xf7,
		0xc6, 0x3a, 0xf7, 0xee, 0xea, 0xe5, 0xf3, 0x0f, 0xfe, 0x79, 0x7f, 0x59, 0xff, 0x8e, 0xd0, 0xff,
		0x9f, 0x9f, 0xf6, 0xe9, 0x99, 0xb4, 0x3b, 0xb2, 0xe4, 0x7a, 0x91, 0xae, 0xf7, 0x44, 0xf6, 0x12,
		0x51, 0xf4, 0xd2, 0xb9, 0xc6, 0x87, 0x8f, 0xd6, 0xd7, 0x2a, 0xbf, 0x87, 0x0c, 0x7b, 0xc7, 0xb0,
		0x77, 0x8c, 0xc8, 0xd1, 0x65, 0xf7, 0x8e, 0x29, 0xef, 0x19, 0xc3, 0x5e, 0x31, 0x0d, 0x80, 0x8f,
		0xbd, 0x62, 0x0a, 0x24, 0xa3, 0xba, 0x57, 0x8c, 0x78, 0xd1, 0x16, 0xb3, 0x67, 0xcc, 0x9e, 0x31,
		0x7b, 0xc6, 0x62, 0xed, 0xb1, 0x86, 0xf2, 0xbd, 0x58, 0xab, 0x33, 0x49, 0x80, 0xe4, 0xc0, 0x5b,
		0x4c, 0x0e, 0x04, 0x49, 0x01, 0xdd, 0xc9, 0x80, 0x20, 0x0b, 0x80, 0xe9, 0xff, 0xd1, 0xfe, 0xd1,
		0x35, 0xed, 0xd7, 0x3a, 0xdf, 0x97, 0xd3, 0x19, 0x81, 0xc4, 0x08, 0xe6, 0xf9, 0x74, 0x1e, 0x0d,
		0x89, 0x91, 0x4c, 0x56, 0x62, 0xf4, 0xb4, 0x0b, 0x1e, 0xa7, 0xae, 0x4c, 0x32, 0x70, 0xe7, 0x58,
		0xa4, 0x03, 0x11, 0x26, 0x4e, 0x93, 0x0e, 0x0c, 0x8c, 0x50, 0x3e, 0x21, 0xb8, 0x6d, 0x02, 0x29,
		0x41, 0xa4, 0x04, 0x8b, 0x99, 0x12, 0x1c, 0x5a, 0xf7, 0xe6, 0xd3, 0x68, 0x6e, 0x78, 0x22, 0xf9,
		0x83, 0xe9, 0x78, 0xfc, 0x34, 0xb1, 0xe7, 0xb6, 0xe5, 0xaa, 0xa7, 0x07, 0x63, 0x5b, 0x56, 0x4b,
		0x15, 0xd6, 0x91, 0x2a, 0x44, 0xaa, 0x30, 0x9f, 0xa9, 0x42, 0x59, 0x27, 0x3d, 0xee, 0xac, 0xcf,
		0xea, 0x9d, 0x7f, 0xd4, 0x65, 0x9f, 0x55, 0x2d, 0x41, 0xcd, 0x71, 0xc9, 0x1c, 0x98, 0xd2, 0x91,
		0xf9, 0x1c, 0x9a, 0xda, 0xb1, 0xd9, 0x1c, 0x9c, 0xcd, 0xd1, 0x59, 0x1d, 0x5e, 0xcd, 0xf1, 0x15,
		0x03, 0x00, 0x59, 0x20, 0x08, 0x1a, 0x32, 0x87, 0x0b, 0x73, 0x32, 0xb0, 0x86, 0xbe, 0xd4, 0xdc,
		0xfc, 0x79, 0x66, 0xb9, 0x75, 0x3a, 0x93, 0xd9, 0x18, 0xf7, 0xc1, 0xb3, 0x10, 0x75, 0xb2, 0xda,
		0x02, 0x20, 0x5b, 0x90, 0xe0, 0x08, 0x16, 0xfc, 0x41, 0x83, 0x2b, 0x78, 0xb0, 0x07, 0x11, 0xf6,
		0x60, 0xa2, 0x25, 0xa8, 0xd0, 0x04, 0x17, 0xa2, 0x20, 0x13, 0x5c, 0xb1, 0x84, 0x3e, 0x3b, 0x7d,
		0xd2, 0x2e, 0xb5, 0x4f, 0x3c, 0xd9, 0x93, 0xf9, 0x4d, 0x83, 0xd2, 0x17, 0xd6, 0x11, 0xe6, 0x3d,
		0x61, 0x93, 0xbf, 0x99, 0x13, 0x4f, 0x02, 0xa1, 0x4b, 0x6a, 0x9b, 0xb4, 0xbe, 0x5a, 0x5a, 0x2f,
		0xed, 0x91, 0x07, 0x81, 0xa0, 0xf1, 0x3f, 0xcc, 0xd1, 0x93, 0x45, 0x17, 0x6a, 0x23, 0xed, 0x7f,
		0x74, 0xcc, 0xc1, 0xdc, 0x9e, 0x4e, 0x7e, 0xb4, 0x1f, 0x6c, 0xd9, 0xa5, 0xc9, 0x74, 0xb6, 0x67,
		0x3d, 0x98, 0x73, 0x7b, 0xb1, 0xba, 0x96, 0x7b, 0x73, 0xe4, 0x5a, 0xe4, 0x67, 0x59, 0x5e, 0x31,
		0x74, 0xad, 0xf9, 0x8d, 0xbf, 0x6b, 0x9b, 0x8d, 0x76, 0xb3, 0xdd, 0x7a, 0xdf, 0x68, 0xdf, 0xa2,
		0x8f, 0xb5, 0x04, 0x7d, 0xfa, 0xd6, 0xfa, 0x67, 0xd9, 0xf8, 0x3d, 0x04, 0x3e, 0x70, 0x08, 0x44,
		0x1b, 0x5a, 0x70, 0xb7, 0x01, 0xdc, 0x05, 0xee, 0x02, 0x77, 0x81, 0xbb, 0xc0, 0x5d, 0xe0, 0x2e,
		0x50, 0x08, 0xb8, 0x8b, 0x3e, 0x06, 0xee, 0xb2, 0xe3, 0xee, 0x17, 0xd3, 0xb5, 0x07, 0x3b, 0x14,
		0x4a, 0x8f, 0xba, 0x91, 0x33, 0x00, 0x73, 0x81, 0xb9, 0xc0, 0x5c, 0x60, 0x2e, 0x30, 0x17, 0x98,
		0x0b, 0x04, 0x02, 0xe6, 0x02, 0x73, 0x81, 0xb9, 0xdc, 0x98, 0x1b, 0x6c, 0x34, 0x52, 0x7b, 0x2e,
		0x39, 0x76, 0xf0, 0x09, 0xb5, 0x0f, 0xc4, 0x05, 0xe2, 0x02, 0x71, 0x73, 0x80, 0xb8, 0x7c, 0x38,
		0x4a, 0xfb, 0xa4, 0x75, 0x5c, 0x68, 0x50, 0x79, 0xf2, 0x3a, 0xd2, 0xe6, 0x27, 0x6b, 0xf2, 0xe0,
		0x3d, 0xbc, 0x08, 0x3a, 0xb5, 0xe8, 0xa6, 0x3c, 0xa0, 0xd3, 0xec, 0xd1, 0x69, 0xbd, 0xf1, 0x01,
		0x9d, 0x9b, 0x57, 0x2c, 0x25, 0x8c, 0x78, 0x54, 0xda, 0x13, 0x91, 0x86, 0x59, 0xb4, 0x28, 0x8a,
		0x0c, 0xe8, 0xc3, 0x67, 0x7b, 0xf2, 0x60, 0x3c, 0x98, 0xee, 0x8c, 0x1e, 0xce, 0x77, 0xda, 0x06,
		0x98, 0x03, 0xcc, 0x01, 0xe6, 0x6f, 0x1a, 0xcc, 0xbf, 0x4c, 0xa7, 0x23, 0xcb, 0x9c, 0x70, 0xc0,
		0x78, 0xbd, 0x40, 0x01, 0x79, 0x36, 0x75, 0xe6, 0xf4, 0xa1, 0xd8, 0x6b, 0x15, 0x41, 0x18, 0x41,
		0x18, 0x41, 0x18, 0xd9, 0x91, 0x4d, 0x76, 0x64, 0x15, 0x14, 0x8c, 0xc9, 0xd3, 0xf8, 0x8b, 0xe5,
		0x30, 0x44, 0xe5, 0x16, 0x96, 0xef, 0x90, 0x20, 0x41, 0x82, 0x44, 0xac, 0x6b, 0x5b, 0xb7, 0xb7,
		0x37, 0x58, 0xb9, 0xcb, 0x6d, 0x8a, 0xa4, 0x40, 0x1c, 0xea, 0x5a, 0x83, 0x27, 0xc7, 0x9e, 0x3f,
		0x1b, 0x23, 0x6b, 0x61, 0x8d, 0xe8, 0x89, 0x34, 0xd4, 0x3e, 0xd8, 0x14, 0x6c, 0x0a, 0x36, 0x7d,
		0xd3, 0x6c, 0xea, 0x55, 0xd6, 0x0f, 0xc2, 0xc2, 0x78, 0x3a, 0x24, 0x0b, 0x0b, 0x25, 0xa2, 0x82,
		0xfb, 0x91, 0x36, 0x49, 0x0a, 0xf0, 0x47, 0x6f, 0x31, 0x65, 0x41, 0xfe, 0x48, 0xeb, 0x35, 0x4f,
		0xe7, 0x73, 0x6a, 0x98, 0x4f, 0xf3, 0x47, 0x6b, 0x32, 0xb7, 0x07, 0xbe, 0xe4, 0x2a, 0x03, 0x31,
		0xd5, 0xbd, 0x27, 0xee, 0xd8, 0x4f, 0xd3, 0xf0, 0xe3, 0x87, 0xbd, 0x30, 0x07, 0xcf, 0xe7, 0x67,
		0x19, 0xc6, 0x48, 0xc2, 0x52, 0xfd, 0x91, 0xa6, 0x43, 0xb7, 0x99, 0x65, 0x92, 0x70, 0xc0, 0x6a,
		0x58, 0x20, 0x32, 0xe8, 0xcc, 0x4e, 0xa9, 0x91, 0x51, 0xd2, 0x5b, 0x16, 0x88, 0xf4, 0x16, 0x96,
		0xe3, 0xca, 0x8a, 0x63, 0x1f, 0x0d, 0xe8, 0x9b, 0x86, 0xc1, 0x76, 0x60, 0x3b, 0xb0, 0x5d, 0x0e,
		0xd8, 0x2e, 0x5f, 0x0f, 0x1e, 0x30, 0x6e, 0xee, 0xca, 0x4a, 0x74, 0x3f, 0xa9, 0x92, 0x59, 0x50,
		0xbc, 0x82, 0x70, 0x8b, 0xad, 0x5a, 0x39, 0x8b, 0xa8, 0xc1, 0xaa, 0x96, 0xb7, 0x38, 0xe0, 0x02,
		0xf4, 0xe5, 0x2e, 0x22, 0x27, 0x51, 0x2a, 0x7f, 0x41, 0xdd, 0xcd, 0x8a, 0xe5, 0x31, 0xa2, 0x89,
		0x23, 0xd9, 0x72, 0x0c, 0x5b, 0x69, 0xf1, 0xed, 0xdb, 0xeb, 0x38, 0xa5, 0xd9, 0x6b, 0x16, 0x3d,
		0xcb, 0x92, 0x74, 0x89, 0x87, 0xff, 0x38, 0xe6, 0xec, 0x9f, 0xab, 0xdf, 0x1e, 0xbc, 0xfb, 0xfc,
		0xa3, 0xff, 0x0b, 0x7f, 0x77, 0x2d, 0xe7, 0x87, 0xed, 0x0f, 0x3f, 0xf4, 0x67, 0xc5, 0x69, 0xcb,
		0x32, 0x27, 0x1a, 0xa9, 0x44, 0x96, 0xa6, 0xc9, 0xc2, 0x54, 0x94, 0x7b, 0x79, 0x4d, 0xe8, 0x3c,
		0xc3, 0xc5, 0xdb, 0xad, 0xc9, 0xc0, 0x79, 0x9e, 0xcd, 0xad, 0x21, 0x83, 0xea, 0xf4, 0x91, 0xb6,
		0xa1, 0x3b, 0x0d, 0xdd, 0xe9, 0x8c, 0x20, 0x7e, 0xce, 0x74, 0xa7, 0x63, 0x9c, 0x8a, 0x50, 0x79,
		0x3a, 0xf6, 0x0c, 0xd0, 0x9e, 0xd6, 0x3f, 0xef, 0x87, 0xf6, 0x34, 0xb4, 0xa7, 0x93, 0x1b, 0x82,
		0xf6, 0x34, 0x92, 0x85, 0x48, 0x16, 0x22, 0x59, 0x58, 0x9c, 0x64, 0x21, 0x54, 0x4a, 0x28, 0xad,
		0x1d, 0x2a, 0x25, 0xa9, 0x6c, 0x0f, 0xdb, 0x1c, 0x63, 0xba, 0x16, 0x2a, 0x25, 0x9a, 0x83, 0x3e,
		0x7d, 0x6b, 0xd0, 0x9e, 0x26, 0xc0, 0x5d, 0x68, 0x4f, 0x03, 0x77, 0x81, 0xbb, 0xc0, 0x5d, 0xe0,
		0x2e, 0x70, 0x17, 0xb8, 0x0b, 0xdc, 0x45, 0x1f, 0x03, 0x77, 0xf9, 0x71, 0x17, 0xda, 0xd3, 0xc0,
		0x5c, 0x60, 0x2e, 0x30, 0x17, 0x98, 0x0b, 0xcc, 0x05, 0xe6, 0x02, 0x73, 0x81, 0xb9, 0xc0, 0xdc,
		0x02, 0x62, 0x2e, 0xb4, 0xa7, 0x81, 0xb8, 0x40, 0x5c, 0x20, 0xae, 0x3e, 0x1c, 0xcd, 0xa1, 0xf6,
		0x34, 0x94, 0x58, 0xa1, 0xc4, 0x8a, 0x61, 0x0a, 0xc3, 0x14, 0x86, 0x29, 0x28, 0xb1, 0x12, 0x0c,
		0x4d, 0x50, 0x62, 0x4d, 0xba, 0xf9, 0x50, 0x62, 0x45, 0x10, 0x46, 0x10, 0x46, 0x10, 0x86, 0x12,
		0xeb, 0xce, 0x3f, 0x28, 0xb1, 0xee, 0xb7, 0x8f, 0x64, 0xf6, 0xd1, 0xae, 0x85, 0x12, 0x6b, 0x66,
		0xba, 0x17, 0x79, 0x6c, 0x76, 0x0e, 0x85, 0x12, 0x2b, 0xd8, 0x14, 0x6c, 0x0a, 0x36, 0xd5, 0xc7,
		0xa6, 0x50, 0x62, 0xdd, 0xdc, 0x62, 0x28, 0xb1, 0x8a, 0x9c, 0x06, 0x4a, 0xac, 0x50, 0x62, 0xd5,
		0x4d, 0x7a, 0x50, 0x62, 0x4d, 0x11, 0xd0, 0xa1, 0xc4, 0x0a, 0xb6, 0x03, 0xdb, 0xe5, 0x88, 0xed,
		0xa0, 0xc4, 0x0a, 0x25, 0xd6, 0x3d, 0x0f, 0x86, 0x12, 0x2b, 0x94, 0x58, 0x85, 0x13, 0x47, 0xa4,
		0x3a, 0x99, 0xf1, 0xea, 0x8b, 0xd7, 0x4c, 0x0a, 0x6f, 0x25, 0x4a, 0x29, 0xcd, 0x9f, 0x36, 0xbf,
		0x31, 0xac, 0xc7, 0x7a, 0xf0, 0x03, 0x28, 0xb2, 0x66, 0xd2, 0xd2, 0xb2, 0xa0, 0xc9, 0x1a, 0x67,
		0x48, 0x59, 0x56, 0x65, 0xb5, 0x27, 0xf7, 0x53, 0x67, 0xec, 0xdd, 0x5d, 0x75, 0x19, 0xd6, 0xdd,
		0xc6, 0xa0, 0xbb, 0x0a, 0xdd, 0xd5, 0x8c, 0x00, 0x7d, 0xce, 0x74, 0x57, 0xd7, 0x5e, 0xc4, 0xa0,
		0x97, 0x1c, 0xe7, 0xb0, 0x2c, 0x61, 0xb5, 0x04, 0x25, 0xd6, 0x8c, 0xcc, 0xf7, 0xa1, 0xc4, 0x9a,
		0xa1, 0x19, 0x1b, 0x99, 0x12, 0xeb, 0x71, 0xdf, 0x7d, 0xa6, 0x4f, 0x15, 0x26, 0x9d, 0x90, 0x36,
		0x85, 0x58, 0x47, 0x0a, 0x11, 0x29, 0x44, 0xa4, 0x10, 0x39, 0x52, 0x88, 0x54, 0x21, 0x28, 0x68,
		0x90, 0x55, 0x14, 0x3a, 0xe2, 0x24, 0x8c, 0xe2, 0xd0, 0xe1, 0x20, 0x44, 0xbc, 0x70, 0x46, 0x1e,
		0x8c, 0x38, 0x83, 0x92, 0xbe, 0xe0, 0xc4, 0x1d, 0xa4, 0xb4, 0x05, 0x2b, 0x6d, 0x41, 0x4b, 0x6b,
		0xf0, 0xa2, 0x0d, 0x62, 0xc4, 0xc1, 0x6c, 0x27, 0x29, 0x4c, 0xbe, 0x2e, 0x12, 0xb4, 0x4d, 0xbe,
		0x3e, 0x12, 0xf1, 0x2d, 0x72, 0xb9, 0x92, 0x70, 0x24, 0x7b, 0xcf, 0xd0, 0x34, 0xcf, 0x8e, 0xef,
		0xcd, 0x3f, 0x9e, 0x18, 0x50, 0xe2, 0xde, 0x01, 0x1e, 0x9c, 0x84, 0x59, 0xd6, 0x24, 0x38, 0x8f,
		0xae, 0x2d, 0xc3, 0x5b, 0x9b, 0xe5, 0xde, 0x3a, 0xcc, 0x14, 0x22, 0x42, 0xe1, 0xe2, 0x9b, 0x3e,
		0x13, 0xe0, 0x96, 0x3f, 0x79, 0x0b, 0xb6, 0x70, 0x96, 0x8f, 0x56, 0xfb, 0x59, 0xdd, 0x0c, 0x75,
		0xc5, 0x8a, 0xfb, 0x0d, 0xad, 0xb8, 0xdf, 0x00, 0xee, 0x03, 0xf7, 0x81, 0xfb, 0xc0, 0x7d, 0xe0,
		0x3e, 0x70, 0x1f, 0xb8, 0x0f, 0xdc, 0x07, 0xee, 0x03, 0xf7, 0x81, 0xfb, 0x4c, 0xb8, 0xcf, 0x26,
		0x0a, 0x1e, 0x19, 0x16, 0x99, 0xc4, 0xc1, 0x81, 0xf9, 0xc0, 0x7c, 0x60, 0x3e, 0x30, 0x1f, 0x98,
		0x0f, 0xcc, 0x07, 0xe6, 0x03, 0xf3, 0x81, 0xf9, 0xc0, 0x7c, 0x60, 0x7e, 0xb8, 0xd3, 0x99, 0x44,
		0xd1, 0x23, 0x83, 0x22, 0x8b, 0x38, 0x3a, 0x10, 0x1f, 0x88, 0x0f, 0xc4, 0xcf, 0x25, 0xe2, 0xf3,
		0x63, 0x38, 0xaf, 0xf8, 0x7a, 0x38, 0xf4, 0x50, 0x8a, 0xb0, 0x6f, 0xc3, 0x04, 0x93, 0x18, 0x7b,
		0x70, 0x02, 0x2d, 0xa2, 0xec, 0x6f, 0x69, 0x38, 0x65, 0x10, 0x6d, 0x8f, 0x18, 0x36, 0xb9, 0x78,
		0x3b, 0x86, 0x51, 0x0c, 0xa3, 0x18, 0x46, 0x31, 0x8c, 0x1e, 0xb4, 0x7f, 0x7a, 0x71, 0xf8, 0xc8,
		0xd0, 0x59, 0x7f, 0x03, 0x03, 0x03, 0xa9, 0x78, 0x7c, 0xa4, 0x93, 0x08, 0x45, 0xe4, 0x31, 0x18,
		0x60, 0x30, 0xc0, 0x60, 0x80, 0xc1, 0x20, 0x79, 0x4e, 0xc5, 0x23, 0x52, 0x1f, 0x8e, 0x3f, 0x2d,
		0x2c, 0x76, 0x6c, 0x7f, 0xb8, 0xd6, 0xc5, 0x8e, 0x3a, 0x12, 0xdc, 0xd9, 0x70, 0xec, 0x7d, 0x13,
		0xd0, 0xb9, 0xd8, 0xc1, 0x28, 0x7a, 0xff, 0x16, 0xcc, 0x00, 0xeb, 0x1c, 0x99, 0xe1, 0x6f, 0x26,
		0xd1, 0xfc, 0x28, 0x21, 0x72, 0x88, 0xe7, 0x83, 0xc9, 0xc1, 0xe4, 0x60, 0x72, 0x30, 0xf9, 0x41,
		0xfb, 0xe7, 0x15, 0xe7, 0x8f, 0x24, 0x6b, 0x9a, 0x0c, 0x6d, 0xb3, 0x88, 0xf5, 0x6f, 0xbb, 0x80,
		0x53, 0xb4, 0x3f, 0x38, 0x8b, 0x36, 0xf1, 0xfe, 0xe0, 0x8c, 0x7a, 0x44, 0xfc, 0x83, 0xd3, 0xf1,
		0x89, 0xf9, 0x33, 0x63, 0x33, 0xa3, 0xb8, 0x7f, 0x70, 0x0a, 0x1d, 0x22, 0xff, 0xc1, 0xc9, 0x34,
		0x89, 0xfd, 0x07, 0xe7, 0xe3, 0x12, 0xfd, 0xe7, 0x23, 0xda, 0xe5, 0x1b, 0x20, 0x5a, 0xea, 0xe2,
		0x00, 0x91, 0x81, 0x85, 0xb6, 0x48, 0x00, 0x18, 0x16, 0x0c, 0x0b, 0x86, 0xcd, 0x25, 0xc3, 0xe6,
		0x7b, 0x3b, 0xbe, 0x86, 0xad, 0x3f, 0xc5, 0x2e, 0x85, 0x73, 0x45, 0x26, 0x47, 0xca, 0xb6, 0x11,
		0x94, 0xb6, 0x78, 0xc1, 0xd6, 0xf0, 0xa9, 0x8b, 0x18, 0xec, 0xb8, 0x14, 0x7f, 0x31, 0x83, 0xe0,
		0x64, 0xa4, 0x45, 0x0d, 0xa8, 0xcd, 0x82, 0xb8, 0xc8, 0x41, 0xd0, 0x2e, 0xad, 0x04, 0xfd, 0x8e,
		0xc6, 0xf9, 0x75, 0xa2, 0x7c, 0xf2, 0xb5, 0x1e, 0xcd, 0xd4, 0x12, 0xa5, 0x8a, 0xfd, 0xcf, 0xde,
		0x4f, 0xde, 0x79, 0x1b, 0x5b, 0x1f, 0xe1, 0xc8, 0xc7, 0x44, 0xf3, 0xc2, 0xbc, 0x97, 0x67, 0xc9,
		0x76, 0xdd, 0x0e, 0x21, 0x53, 0xce, 0x52, 0xc5, 0x8e, 0xd4, 0x26, 0x7a, 0xb2, 0x5a, 0x1d, 0x57,
		0xca, 0xf2, 0xef, 0xf3, 0xe7, 0x99, 0xd5, 0xd2, 0x29, 0x02, 0x9f, 0x78, 0x42, 0x48, 0xc1, 0xeb,
		0x9f, 0xbd, 0x41, 0x0a, 0x1e, 0x52, 0xf0, 0x34, 0x21, 0x83, 0x4f, 0x10, 0x3e, 0xe1, 0xb4, 0x90,
		0x85, 0xcf, 0x6e, 0x52, 0x08, 0xb2, 0xf0, 0x27, 0x4d, 0xfa, 0x40, 0x16, 0x9e, 0xd0, 0x49, 0x20,
		0x0b, 0xaf, 0x25, 0x28, 0xe9, 0x0b, 0x4e, 0xdc, 0x41, 0x4a, 0x5b, 0xb0, 0xd2, 0x16, 0xb4, 0xb4,
		0x06, 0x2f, 0xfa, 0x2c, 0x65, 0x09, 0x19, 0xeb, 0x90, 0x6f, 0x41, 0x40, 0x26, 0xf2, 0x0f, 0x02,
		0x32, 0xe9, 0xce, 0x83, 0x3d, 0xd5, 0x72, 0xe1, 0x02, 0x02, 0x32, 0xb9, 0xb2, 0x05, 0x6c, 0xac,
		0xce, 0x8a, 0x2f, 0x41, 0x16, 0x1e, 0xb8, 0x0f, 0xdc, 0x07, 0xee, 0x03, 0xf7, 0x81, 0xfb, 0xc0,
		0x7d, 0xe0, 0x3e, 0x70, 0x1f, 0xb8, 0x0f, 0xdc, 0x2f, 0x2e, 0xee, 0x43, 0x16, 0x1e, 0x98, 0x0f,
		0xcc, 0x07, 0xe6, 0x03, 0xf3, 0x81, 0xf9, 0xc0, 0x7c, 0x60, 0x3e, 0x30, 0x1f, 0x98, 0x0f, 0xcc,
		0x2f, 0x1c, 0xe6, 0x43, 0x16, 0x1e, 0x88, 0x0f, 0xc4, 0x07, 0xe2, 0xeb, 0x46, 0x7c, 0xc8, 0xc2,
		0xa7, 0x09, 0x13, 0x90, 0x85, 0xcf, 0xd9, 0x70, 0x0a, 0x59, 0x78, 0x0c, 0xa3, 0x18, 0x46, 0x31,
		0x8c, 0x16, 0x67, 0x18, 0x85, 0x2c, 0x3c, 0xc9, 0xb5, 0x42, 0x16, 0x1e, 0x83, 0x01, 0x06, 0x03,
		0x0c, 0x06, 0x05, 0x9a, 0x53, 0x41, 0x16, 0xfe, 0xf0, 0x3f, 0xc8, 0xc2, 0xa7, 0x3b, 0x0f, 0x16,
		0x3b, 0xa4, 0x4c, 0x00, 0xb2, 0xf0, 0xb9, 0x31, 0x03, 0xac, 0x73, 0x64, 0x86, 0xbf, 0x21, 0x0b,
		0x0f, 0x26, 0x07, 0x93, 0x83, 0xc9, 0x8b, 0xc7, 0xe4, 0x90, 0x85, 0x4f, 0xea, 0x02, 0xc8, 0xc2,
		0x53, 0x9c, 0x0e, 0xb2, 0xf0, 0x47, 0x4e, 0x01, 0x59, 0xf8, 0x4c, 0x11, 0x2d, 0x64, 0xe1, 0x09,
		0x06, 0x16, 0xc8, 0xc2, 0x83, 0x61, 0xc1, 0xb0, 0x60, 0x58, 0xc8, 0xc2, 0x27, 0x20, 0x31, 0x64,
		0xe1, 0x53, 0x46, 0x08, 0xc8, 0xc2, 0x6f, 0x5d, 0x0a, 0xb2, 0xf0, 0xeb, 0x30, 0x9b, 0x57, 0x59,
		0xf8, 0x24, 0x41, 0xe5, 0x6b, 0x9d, 0xfa, 0xa9, 0x25, 0x56, 0xfd, 0xed, 0x55, 0x90, 0x6e, 0x25,
		0xe8, 0xc4, 0xc7, 0x7f, 0x07, 0x62, 0xf1, 0xa5, 0x5c, 0x8a, 0xc5, 0x33, 0x2b, 0x86, 0x9f, 0xd0,
		0x64, 0x73, 0xac, 0x1b, 0xcf, 0xae, 0x13, 0x0f, 0x5d, 0xf8, 0x0c, 0x4c, 0xdf, 0xa0, 0x0b, 0x0f,
		0x5d, 0x78, 0xb9, 0x90, 0xc0, 0xa7, 0x03, 0x0f, 0xdd, 0xf7, 0xdc, 0x64, 0x7d, 0xa0, 0xfb, 0x7e,
		0xd2, 0xac, 0x0e, 0x74, 0xdf, 0x09, 0x9d, 0x04, 0xba, 0xef, 0x5a, 0x82, 0x92, 0xbe, 0xe0, 0xc4,
		0x1d, 0xa4, 0xb4, 0x05, 0x2b, 0x6d, 0x41, 0x4b, 0x6b, 0xf0, 0xa2, 0x4f, 0x43, 0x96, 0x90, 0x92,
		0x0e, 0xf9, 0x16, 0x14, 0x62, 0x22, 0xff, 0xa0, 0x10, 0x93, 0xee, 0x3c, 0xd8, 0x34, 0x2d, 0x17,
		0x2e, 0xa0, 0x10, 0x93, 0x2b, 0x5b, 0xc0, 0xce, 0xe9, 0xac, 0xf8, 0x12, 0x74, 0xdf, 0x81, 0xfb,
		0xc0, 0x7d, 0xe0, 0x3e, 0x70, 0x1f, 0xb8, 0x0f, 0xdc, 0x07, 0xee, 0x03, 0xf7, 0x81, 0xfb, 0xc0,
		0xfd, 0xe2, 0xe2, 0x3e, 0x74, 0xdf, 0x81, 0xf9, 0xc0, 0x7c, 0x60, 0x3e, 0x30, 0x1f, 0x98, 0x0f,
		0xcc, 0x07, 0xe6, 0x03, 0xf3, 0x81, 0xf9, 0xc0, 0xfc, 0xc2, 0x61, 0x3e, 0x74, 0xdf, 0x81, 0xf8,
		0x40, 0x7c, 0x20, 0xbe, 0x6e, 0xc4, 0x87, 0xee, 0x7b, 0x8a, 0xb6, 0x3f, 0x59, 0x93, 0x07, 0xef,
		0xb1, 0x1e, 0x50, 0xf9, 0x31, 0x24, 0x83, 0x40, 0xe1, 0x9b, 0xa7, 0xf2, 0x7a, 0xe3, 0x03, 0x8c,
		0xa0, 0xe8, 0x38, 0x8e, 0xca, 0x1a, 0x98, 0xb0, 0xa0, 0xb2, 0x06, 0x26, 0x2a, 0x98, 0xa8, 0x60,
		0xa2, 0x52, 0xa0, 0x89, 0x0a, 0x2a, 0x6b, 0x90, 0x5c, 0x2b, 0x2a, 0x6b, 0x60, 0x30, 0xc0, 0x60,
		0x80, 0xc1, 0xa0, 0x40, 0x59, 0x2b, 0x54, 0xd6, 0x40, 0xe2, 0x0a, 0x39, 0x8b, 0x42, 0x27, 0xae,
		0x50, 0x59, 0xe3, 0x4d, 0xa4, 0xae, 0x50, 0x59, 0x83, 0x8e, 0x10, 0x51, 0x59, 0x03, 0x4c, 0x0e,
		0x26, 0x07, 0x93, 0x6b, 0x63, 0x72, 0x54, 0xd6, 0x48, 0xea, 0x02, 0x54, 0xd6, 0xa0, 0x38, 0x1d,
		0x2a, 0x6b, 0x1c, 0x39, 0x05, 0x2a, 0x6b, 0x64, 0x8a, 0x68, 0x51, 0x59, 0x83, 0x60, 0x60, 0x41,
		0x65, 0x0d, 0x30, 0x2c, 0x18, 0x16, 0x0c, 0x8b, 0xca, 0x1a, 0x09, 0x48, 0x8c, 0xca, 0x1a, 0x29,
		0x23, 0x04, 0x2a, 0x6b, 0x6c, 0x5d, 0x0a, 0x95, 0x35, 0xd6, 0x61, 0x36, 0xaf, 0x95, 0x35, 0xe2,
		0x2a, 0x69, 0xe4, 0xb0, 0x72, 0xc6, 0xe1, 0x5a, 0x19, 0xa8, 0x8e, 0xc1, 0x6d, 0xac, 0xfa, 0x8d,
		0x34, 0xd3, 0xd5, 0x30, 0xb2, 0x52, 0xff, 0xe2, 0x4c, 0xa3, 0x69, 0x51, 0x99, 0x14, 0x9f, 0x29,
		0x29, 0x98, 0x0c, 0x83, 0xa9, 0xc8, 0x19, 0x85, 0x78, 0x97, 0x4a, 0x74, 0xe7, 0xb9, 0x3d, 0x33,
		0xcc, 0xe1, 0xd0, 0xb1, 0x5c, 0x79, 0x39, 0x92, 0x6d, 0x39, 0x83, 0x6d, 0x5b, 0x92, 0x86, 0xa5,
		0x36, 0xcf, 0x56, 0x9e, 0x4f, 0x53, 0xcc, 0x9b, 0xe9, 0xe7, 0xc7, 0x54, 0xf3, 0x60, 0xf2, 0xf9,
		0x2e, 0xf9, 0xbc, 0x96, 0x65, 0xfe, 0xaa, 0x37, 0x34, 0x2a, 0xcf, 0x0d, 0x0f, 0x78, 0x93, 0x31,
		0x99, 0x1a, 0x7f, 0x4d, 0x27, 0x2a, 0x13, 0x8f, 0x60, 0xde, 0xd7, 0x56, 0x68, 0x63, 0x7d, 0x6d,
		0x6a, 0x3b, 0x90, 0x08, 0x8b, 0x03, 0xd9, 0xb3, 0x45, 0x93, 0xf0, 0x1e, 0x45, 0xe7, 0xc8, 0x04,
		0x6d, 0x51, 0x3f, 0x0e, 0x73, 0x5e, 0x2e, 0x77, 0x6b, 0x46, 0xbb, 0xff, 0xda, 0xad, 0x1b, 0xed,
		0xbe, 0xff, 0xb6, 0xee, 0xfd, 0xc7, 0x7f, 0xdf, 0xe8, 0xd6, 0x8c, 0xe6, 0xe6, 0xfd, 0x6d, 0xb7,
		0x66, 0xdc, 0xf6, 0x2b, 0xbd, 0x5e, 0xb5, 0xf2, 0x72, 0xb3, 0x14, 0x3f, 0xb0, 0xfc, 0xae, 0xdb,
		0xeb, 0xcd, 0x5e, 0x7e, 0x5d, 0xae, 0x5e, 0x3f, 0x2d, 0xfb, 0x97, 0x95, 0x3b, 0xaa, 0xc9, 0xef,
		0xea, 0x44, 0xbd, 0x5e, 0xb5, 0x7f, 0xa1, 0x0e, 0xe9, 0xfd, 0x53, 0xe2, 0x35, 0xad, 0x39, 0xb7,
		0xde, 0xa0, 0x39, 0x77, 0x5e, 0x57, 0xb6, 0x60, 0x1a, 0xf7, 0xdf, 0x1b, 0x1f, 0xfb, 0x2f, 0xb5,
		0xab, 0xe6, 0xb2, 0xd2, 0xa9, 0x94, 0xc3, 0x7f, 0xeb, 0x54, 0x5e, 0x6a, 0x57, 0xb7, 0xcb, 0x72,
		0xf9, 0xc0, 0x27, 0x77, 0x87, 0xda, 0xa8, 0xbc, 0x96, 0xcb, 0xe5, 0xb5, 0x21, 0xef, 0x19, 0x77,
		0xb7, 0x56, 0xef, 0xdf, 0x79, 0x6f, 0xfd, 0xd7, 0xc0, 0x3d, 0x52, 0x7d, 0xb9, 0xc2, 0xe9, 0x14,
		0xe5, 0x72, 0xf7, 0xcf, 0x4e, 0xff, 0xb2, 0x53, 0x79, 0x69, 0x2d, 0x37, 0xef, 0xbd, 0xd7, 0xca,
		0x6b, 0xb9, 0x7a, 0xd1, 0xeb, 0x55, 0xab, 0x17, 0x15, 0xff, 0xc2, 0xd6, 0xdf, 0xbb, 0xf0, 0x3f,
		0xbd, 0xeb, 0x74, 0x22, 0x7f, 0xaa, 0x94, 0xdf, 0x55, 0x89, 0xfd, 0xd5, 0xbf, 0xbf, 0x9d, 0x6c,
		0xb8, 0xed, 0x99, 0xde, 0xf3, 0xea, 0xa1, 0xf1, 0xc4, 0xc2, 0x90, 0xca, 0x8c, 0xce, 0x54, 0x7a,
		0x52, 0xb1, 0xda, 0x18, 0xc8, 0x1d, 0xe4, 0x7e, 0x6a, 0x72, 0x57, 0xad, 0xe6, 0x75, 0x9e, 0x50,
		0x8e, 0x98, 0xac, 0x9c, 0x28, 0x6b, 0xd9, 0x63, 0x54, 0x15, 0x3d, 0xa5, 0xa3, 0xb3, 0x39, 0x3c,
		0x9b, 0xe3, 0xb3, 0x06, 0x80, 0x6c, 0x24, 0xd0, 0xc9, 0xaa, 0x8a, 0xb2, 0x96, 0xf7, 0xd3, 0x51,
		0xd6, 0x8f, 0x78, 0x1f, 0x0c, 0x6a, 0x8a, 0xb2, 0x04, 0x0f, 0xf6, 0x20, 0xc2, 0x1e, 0x4c, 0xb4,
		0x04, 0x15, 0x9a, 0xe0, 0x42, 0x14, 0x64, 0x82, 0x2b, 0x66, 0xd8, 0xb7, 0x42, 0xbf, 0x5f, 0x85,
		0x4f, 0x98, 0x97, 0x41, 0x90, 0x97, 0xe9, 0xc9, 0x49, 0x86, 0xdd, 0x3f, 0x9c, 0x4f, 0x4a, 0x72,
		0x0b, 0xee, 0x6a, 0x7b, 0x24, 0x8e, 0xff, 0x51, 0x38, 0x86, 0x2d, 0xdd, 0xac, 0x4f, 0x40, 0x6a,
		0x13, 0xd2, 0x2d, 0x52, 0x1f, 0x67, 0x74, 0xfb, 0x5b, 0x3f, 0x2b, 0x5b, 0x56, 0xae, 0x58, 0x70,
		0xb7, 0xa1, 0x05, 0x77, 0x1b, 0xc0, 0x5d, 0xe0, 0x2e, 0x70, 0x17, 0xb8, 0x0b, 0xdc, 0x05, 0xee,
		0x02, 0x85, 0x80, 0xbb, 0xe8, 0x63, 0xe0, 0x2e, 0x3b, 0xee, 0xb2, 0x95, 0x77, 0xe3, 0x2e, 0xeb,
		0x06, 0xcc, 0x05, 0xe6, 0x02, 0x73, 0x81, 0xb9, 0xc0, 0x5c, 0x60, 0x2e, 0x30, 0x17, 0x98, 0x0b,
		0xcc, 0x05, 0xe6, 0xc6, 0x77, 0x22, 0x53, 0x79, 0x33, 0xde, 0xb2, 0x66, 0x40, 0x5c, 0x20, 0x2e,
		0x10, 0x97, 0x15, 0x71, 0xf9, 0x70, 0x94, 0xb7, 0xec, 0x18, 0x47, 0xb9, 0x31, 0xb6, 0x22, 0x38,
		0x7a, 0x8a, 0xdf, 0x14, 0x69, 0xb8, 0x62, 0x28, 0x6e, 0xc3, 0x57, 0xd4, 0x06, 0xc3, 0x14, 0x86,
		0x29, 0x0c, 0x53, 0x39, 0x1d, 0xa6, 0xe8, 0x8b, 0xce, 0x10, 0x17, 0x9b, 0xc9, 0x46, 0x40, 0x26,
		0x2d, 0x2a, 0xc3, 0x51, 0x4c, 0x06, 0x41, 0x18, 0x41, 0x18, 0x41, 0xb8, 0x08, 0x73, 0x05, 0x9e,
		0x62, 0x2f, 0x0c, 0x45, 0x5e, 0x90, 0xcc, 0x2e, 0x69, 0x28, 0xe2, 0x82, 0x64, 0xf6, 0xf1, 0xae,
		0xd5, 0x91, 0xcc, 0x66, 0x2c, 0xce, 0x82, 0x3c, 0x36, 0x7b, 0x6b, 0x45, 0x4a, 0x0c, 0x30, 0x15,
		0x57, 0xe1, 0x2d, 0xaa, 0x02, 0x36, 0x05, 0x9b, 0x82, 0x4d, 0x73, 0xca, 0xa6, 0xbc, 0x45, 0x4f,
		0x38, 0x8a, 0x9d, 0xf0, 0x14, 0x39, 0xe1, 0x2d, 0x6e, 0xa2, 0xaf, 0xa8, 0x89, 0xa6, 0x62, 0x26,
		0x8c, 0x45, 0x4c, 0xc8, 0x0b, 0x07, 0xb1, 0x15, 0x2d, 0xd1, 0x52, 0xac, 0x44, 0x57, 0x91, 0x12,
		0xb6, 0xe2, 0x24, 0x99, 0x93, 0x61, 0xcf, 0x04, 0xe9, 0x51, 0x17, 0x1d, 0x61, 0x2a, 0x36, 0x02,
		0xb6, 0x03, 0xdb, 0x81, 0xed, 0x58, 0xd9, 0x2e, 0x5f, 0xdb, 0x70, 0x19, 0xb7, 0x3a, 0x40, 0x18,
		0x9f, 0xa9, 0xb8, 0x07, 0x6d, 0x51, 0x0f, 0xfa, 0x62, 0x1e, 0x5a, 0x8a, 0x78, 0xd0, 0x16, 0xef,
		0x28, 0x76, 0xfd, 0x83, 0x24, 0x3d, 0xc6, 0x6b, 0x56, 0xb5, 0xb7, 0x12, 0xa5, 0xe0, 0xfd, 0x2a,
		0x12, 0xb6, 0x7e, 0xda, 0xfc, 0xd0, 0x70, 0x7d, 0x8e, 0xf8, 0x4f, 0x9f, 0x51, 0x34, 0x21, 0xbb,
		0xf6, 0x97, 0x85, 0x4a, 0x0a, 0x47, 0x0d, 0x4b, 0x5b, 0x71, 0x85, 0x33, 0x46, 0x23, 0xd9, 0x8c,
		0x45, 0xd2, 0x15, 0x14, 0xd4, 0xc6, 0x1d, 0xf5, 0x71, 0x86, 0x65, 0x5c, 0x51, 0x1b, 0x47, 0x44,
		0xbb, 0x40, 0xd1, 0x3f, 0x69, 0xfd, 0x52, 0xc2, 0xed, 0xa8, 0xdc, 0x4d, 0xcc, 0xa1, 0xd2, 0xbb,
		0x45, 0xba, 0x6f, 0xa6, 0xec, 0x35, 0xd9, 0xde, 0xa2, 0xe8, 0x25, 0x81, 0xbe, 0x51, 0xec, 0x93,
		0x74, 0x5d, 0x91, 0x7c, 0x63, 0x8f, 0x7f, 0x23, 0xe1, 0x96, 0x6f, 0x62, 0x53, 0x0a, 0x3a, 0x16,
		0x8b, 0x42, 0xe2, 0x51, 0x87, 0x24, 0xca, 0x88, 0x45, 0x95, 0xa4, 0x9b, 0x23, 0x68, 0x87, 0xd2,
		0xf6, 0x97, 0xc2, 0xe8, 0xa4, 0x8c, 0xed, 0xb8, 0x89, 0xc5, 0x1b, 0xce, 0xe1, 0x4f, 0x62, 0xee,
		0x56, 0xda, 0xbb, 0x24, 0x75, 0x77, 0x8e, 0xdc, 0x19, 0xe1, 0x3b, 0x72, 0xf8, 0x6e, 0x44, 0xaf,
		0x75, 0xff, 0x2f, 0xa1, 0xab, 0x4e, 0xba, 0x5a, 0xd1, 0xab, 0x3c, 0x70, 0x81, 0x22, 0x17, 0xb6,
		0x7f, 0x4d, 0xdb, 0x5f, 0xee, 0xbf, 0x5b, 0xff, 0xf6, 0xb8, 0xdf, 0x7c, 0x6e, 0xbb, 0x1f, 0xcd,
		0xff, 0x5a, 0xbf, 0x4d, 0xa7, 0xd1, 0x24, 0x54, 0xf8, 0x3a, 0xce, 0x77, 0x3f, 0xda, 0xfb, 0x7d,
		0x3f, 0x4f, 0xe6, 0x96, 0x73, 0x6f, 0x0e, 0x36, 0xb4, 0xb6, 0x3c, 0x5b, 0xfe, 0x0f, 0x00, 0x00,
		0xff, 0xff, 0x01, 0x00, 0x00, 0xff, 0xff, 0xce, 0x82, 0x7d, 0x89, 0x28, 0xe2, 0x39, 0x00,
	}
)


// ΛEnumTypes is a map, keyed by a YANG schema path, of the enumerated types that
// correspond with the leaf. The type is represented as a reflect.Type. The naming
// of the map ensures that there are no clashes with valid YANG identifiers.
func initΛEnumTypes(){
  ΛEnumTypes = map[string][]reflect.Type{
	"/global-interface-configuration/link-status": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRIfmgrCfg_LinkStatusEnum)(0)),
	},
	"/interface-configurations/interface-configuration/dampening/args": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRIfmgrCfg_InterfaceConfigurations_InterfaceConfiguration_Dampening_Args)(0)),
	},
	"/interface-configurations/interface-configuration/interface-mode-non-physical": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRIfmgrCfg_InterfaceModeEnum)(0)),
	},
	"/interface-configurations/interface-configuration/mte-tunnel-attributes/bandwidth/dste-type": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_MplsTeBandwidthDste)(0)),
	},
	"/interface-configurations/interface-configuration/mte-tunnel-attributes/destination-leafs/destination-leaf/path-options/path-option/lockdown": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_MplsTePathOptionProperty)(0)),
	},
	"/interface-configurations/interface-configuration/mte-tunnel-attributes/destination-leafs/destination-leaf/path-options/path-option/path-type": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_MplsTePathOption)(0)),
	},
	"/interface-configurations/interface-configuration/mte-tunnel-attributes/destination-leafs/destination-leaf/path-options/path-option/verbatim": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_MplsTePathOptionProperty)(0)),
	},
	"/interface-configurations/interface-configuration/mte-tunnel-attributes/new-style-affinity-affinity-types/new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8-affinity9-affinity10/affinity-type": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity)(0)),
	},
	"/interface-configurations/interface-configuration/mte-tunnel-attributes/new-style-affinity-affinity-types/new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8-affinity9/affinity-type": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity)(0)),
	},
	"/interface-configurations/interface-configuration/mte-tunnel-attributes/new-style-affinity-affinity-types/new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8/affinity-type": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity)(0)),
	},
	"/interface-configurations/interface-configuration/mte-tunnel-attributes/new-style-affinity-affinity-types/new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7/affinity-type": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity)(0)),
	},
	"/interface-configurations/interface-configuration/mte-tunnel-attributes/new-style-affinity-affinity-types/new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6/affinity-type": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity)(0)),
	},
	"/interface-configurations/interface-configuration/mte-tunnel-attributes/new-style-affinity-affinity-types/new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5/affinity-type": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity)(0)),
	},
	"/interface-configurations/interface-configuration/mte-tunnel-attributes/new-style-affinity-affinity-types/new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4/affinity-type": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity)(0)),
	},
	"/interface-configurations/interface-configuration/mte-tunnel-attributes/new-style-affinity-affinity-types/new-style-affinity-affinity-type-affinity1-affinity2-affinity3/affinity-type": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity)(0)),
	},
	"/interface-configurations/interface-configuration/mte-tunnel-attributes/new-style-affinity-affinity-types/new-style-affinity-affinity-type-affinity1-affinity2/affinity-type": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity)(0)),
	},
	"/interface-configurations/interface-configuration/mte-tunnel-attributes/new-style-affinity-affinity-types/new-style-affinity-affinity-type-affinity1/affinity-type": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity)(0)),
	},
	"/interface-configurations/interface-configuration/mte-tunnel-attributes/new-style-affinity-affinity-types/new-style-affinity-affinity-type/affinity-type": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity)(0)),
	},
	"/interface-configurations/interface-configuration/mte-tunnel-attributes/path-selection-metric": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_MplsTePathSelectionMetric)(0)),
	},
	"/interface-configurations/interface-configuration/secondary-admin-state": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRIfmgrCfg_SecondaryAdminStateEnum)(0)),
	},
	"/interface-configurations/interface-configuration/tunnel-te-attributes/autoroute/autoroute-announce/metric/metric-type": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_MplsTeAutorouteMetric)(0)),
	},
	"/interface-configurations/interface-configuration/tunnel-te-attributes/backup-bandwidth/class-type": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_MplsTeBackupBandwidthClass)(0)),
	},
	"/interface-configurations/interface-configuration/tunnel-te-attributes/backup-bandwidth/dste-type": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_MplsTeBandwidthDste)(0)),
	},
	"/interface-configurations/interface-configuration/tunnel-te-attributes/backup-bandwidth/limit-type": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_MplsTeBandwidthLimit)(0)),
	},
	"/interface-configurations/interface-configuration/tunnel-te-attributes/backup-bandwidth/pool-type": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_MplsTeBackupBandwidthPool)(0)),
	},
	"/interface-configurations/interface-configuration/tunnel-te-attributes/bandwidth/dste-type": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_MplsTeBandwidthDste)(0)),
	},
	"/interface-configurations/interface-configuration/tunnel-te-attributes/bfd-over-lsp/fast-detect": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_MplsTebfdSession)(0)),
	},
	"/interface-configurations/interface-configuration/tunnel-te-attributes/binding-segment-id-mpls/segment-id-type": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_BindingSegmentId)(0)),
	},
	"/interface-configurations/interface-configuration/tunnel-te-attributes/new-style-affinity-affinity-types/new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8-affinity9-affinity10/affinity-type": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity)(0)),
	},
	"/interface-configurations/interface-configuration/tunnel-te-attributes/new-style-affinity-affinity-types/new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8-affinity9/affinity-type": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity)(0)),
	},
	"/interface-configurations/interface-configuration/tunnel-te-attributes/new-style-affinity-affinity-types/new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8/affinity-type": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity)(0)),
	},
	"/interface-configurations/interface-configuration/tunnel-te-attributes/new-style-affinity-affinity-types/new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7/affinity-type": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity)(0)),
	},
	"/interface-configurations/interface-configuration/tunnel-te-attributes/new-style-affinity-affinity-types/new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6/affinity-type": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity)(0)),
	},
	"/interface-configurations/interface-configuration/tunnel-te-attributes/new-style-affinity-affinity-types/new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5/affinity-type": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity)(0)),
	},
	"/interface-configurations/interface-configuration/tunnel-te-attributes/new-style-affinity-affinity-types/new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4/affinity-type": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity)(0)),
	},
	"/interface-configurations/interface-configuration/tunnel-te-attributes/new-style-affinity-affinity-types/new-style-affinity-affinity-type-affinity1-affinity2-affinity3/affinity-type": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity)(0)),
	},
	"/interface-configurations/interface-configuration/tunnel-te-attributes/new-style-affinity-affinity-types/new-style-affinity-affinity-type-affinity1-affinity2/affinity-type": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity)(0)),
	},
	"/interface-configurations/interface-configuration/tunnel-te-attributes/new-style-affinity-affinity-types/new-style-affinity-affinity-type-affinity1/affinity-type": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity)(0)),
	},
	"/interface-configurations/interface-configuration/tunnel-te-attributes/new-style-affinity-affinity-types/new-style-affinity-affinity-type/affinity-type": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity)(0)),
	},
	"/interface-configurations/interface-configuration/tunnel-te-attributes/path-option-protects/path-option-protect/path-options/path-option/igp-type": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_MplsTeIgpProtocol)(0)),
	},
	"/interface-configurations/interface-configuration/tunnel-te-attributes/path-option-protects/path-option-protect/path-options/path-option/lockdown": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_MplsTePathOptionProperty)(0)),
	},
	"/interface-configurations/interface-configuration/tunnel-te-attributes/path-option-protects/path-option-protect/path-options/path-option/path-type": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_MplsTePathOption)(0)),
	},
	"/interface-configurations/interface-configuration/tunnel-te-attributes/path-option-protects/path-option-protect/path-options/path-option/pce": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_MplsTePathOptionProperty)(0)),
	},
	"/interface-configurations/interface-configuration/tunnel-te-attributes/path-option-protects/path-option-protect/path-options/path-option/segment-routing": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_MplsTePathOptionProperty)(0)),
	},
	"/interface-configurations/interface-configuration/tunnel-te-attributes/path-option-protects/path-option-protect/path-options/path-option/sticky": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_MplsTePathOptionProperty)(0)),
	},
	"/interface-configurations/interface-configuration/tunnel-te-attributes/path-option-protects/path-option-protect/path-options/path-option/verbatim": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_MplsTePathOptionProperty)(0)),
	},
	"/interface-configurations/interface-configuration/tunnel-te-attributes/path-option-protects/path-option-protect/protection": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_MplsTePathOptionProtection)(0)),
	},
	"/interface-configurations/interface-configuration/tunnel-te-attributes/path-selection-metric": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_MplsTePathSelectionMetric)(0)),
	},
	"/interface-configurations/interface-configuration/tunnel-te-attributes/switching/endpoint/capability": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_MplsTeSwitchingCap)(0)),
	},
	"/interface-configurations/interface-configuration/tunnel-te-attributes/switching/endpoint/encoding": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_MplsTeSwitchingEncode)(0)),
	},
	"/interface-configurations/interface-configuration/tunnel-te-attributes/switching/transit/capability": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_MplsTeSwitchingCap)(0)),
	},
	"/interface-configurations/interface-configuration/tunnel-te-attributes/switching/transit/encoding": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_MplsTeSwitchingEncode)(0)),
	},
	"/interface-configurations/interface-configuration/tunnel-te-attributes/tunnel-path-selection/invalidation/path-invalidation-action": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_PathInvalidationAction)(0)),
	},
	"/interface-configurations/interface-configuration/tunnel-te-attributes/tunnel-path-selection/tiebreaker": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_MplsTePathSelectionTiebreaker)(0)),
	},
	"/mpls-te/diff-serv-traffic-engineering/bandwidth-constraint-model": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_BandwidthConstraint)(0)),
	},
	"/mpls-te/diff-serv-traffic-engineering/mode-ietf": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_IETFMode)(0)),
	},
	"/mpls-te/global-attributes/affinity-mappings/affinity-mapping/value-type": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_MplsTeAffinityValue)(0)),
	},
	"/mpls-te/global-attributes/attribute-set/auto-backup-attributes/auto-backup-attribute/new-style-affinity-affinity-types/new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8-affinity9-affinity10/affinity-type": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity)(0)),
	},
	"/mpls-te/global-attributes/attribute-set/auto-backup-attributes/auto-backup-attribute/new-style-affinity-affinity-types/new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8-affinity9/affinity-type": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity)(0)),
	},
	"/mpls-te/global-attributes/attribute-set/auto-backup-attributes/auto-backup-attribute/new-style-affinity-affinity-types/new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8/affinity-type": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity)(0)),
	},
	"/mpls-te/global-attributes/attribute-set/auto-backup-attributes/auto-backup-attribute/new-style-affinity-affinity-types/new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7/affinity-type": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity)(0)),
	},
	"/mpls-te/global-attributes/attribute-set/auto-backup-attributes/auto-backup-attribute/new-style-affinity-affinity-types/new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6/affinity-type": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity)(0)),
	},
	"/mpls-te/global-attributes/attribute-set/auto-backup-attributes/auto-backup-attribute/new-style-affinity-affinity-types/new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5/affinity-type": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity)(0)),
	},
	"/mpls-te/global-attributes/attribute-set/auto-backup-attributes/auto-backup-attribute/new-style-affinity-affinity-types/new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4/affinity-type": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity)(0)),
	},
	"/mpls-te/global-attributes/attribute-set/auto-backup-attributes/auto-backup-attribute/new-style-affinity-affinity-types/new-style-affinity-affinity-type-affinity1-affinity2-affinity3/affinity-type": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity)(0)),
	},
	"/mpls-te/global-attributes/attribute-set/auto-backup-attributes/auto-backup-attribute/new-style-affinity-affinity-types/new-style-affinity-affinity-type-affinity1-affinity2/affinity-type": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity)(0)),
	},
	"/mpls-te/global-attributes/attribute-set/auto-backup-attributes/auto-backup-attribute/new-style-affinity-affinity-types/new-style-affinity-affinity-type-affinity1/affinity-type": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity)(0)),
	},
	"/mpls-te/global-attributes/attribute-set/auto-backup-attributes/auto-backup-attribute/new-style-affinity-affinity-types/new-style-affinity-affinity-type/affinity-type": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity)(0)),
	},
	"/mpls-te/global-attributes/attribute-set/auto-backup-attributes/auto-backup-attribute/signalled-name/protected-interface-type": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_MplsTeSigNameOption)(0)),
	},
	"/mpls-te/global-attributes/attribute-set/auto-backup-attributes/auto-backup-attribute/signalled-name/source-type": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_MplsTeSigNameOption)(0)),
	},
	"/mpls-te/global-attributes/attribute-set/auto-mesh-attributes/auto-mesh-attribute/bandwidth/dste-type": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_MplsTeBandwidthDste)(0)),
	},
	"/mpls-te/global-attributes/attribute-set/auto-mesh-attributes/auto-mesh-attribute/new-style-affinity-affinity-types/new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8-affinity9-affinity10/affinity-type": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity)(0)),
	},
	"/mpls-te/global-attributes/attribute-set/auto-mesh-attributes/auto-mesh-attribute/new-style-affinity-affinity-types/new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8-affinity9/affinity-type": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity)(0)),
	},
	"/mpls-te/global-attributes/attribute-set/auto-mesh-attributes/auto-mesh-attribute/new-style-affinity-affinity-types/new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8/affinity-type": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity)(0)),
	},
	"/mpls-te/global-attributes/attribute-set/auto-mesh-attributes/auto-mesh-attribute/new-style-affinity-affinity-types/new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7/affinity-type": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity)(0)),
	},
	"/mpls-te/global-attributes/attribute-set/auto-mesh-attributes/auto-mesh-attribute/new-style-affinity-affinity-types/new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6/affinity-type": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity)(0)),
	},
	"/mpls-te/global-attributes/attribute-set/auto-mesh-attributes/auto-mesh-attribute/new-style-affinity-affinity-types/new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5/affinity-type": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity)(0)),
	},
	"/mpls-te/global-attributes/attribute-set/auto-mesh-attributes/auto-mesh-attribute/new-style-affinity-affinity-types/new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4/affinity-type": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity)(0)),
	},
	"/mpls-te/global-attributes/attribute-set/auto-mesh-attributes/auto-mesh-attribute/new-style-affinity-affinity-types/new-style-affinity-affinity-type-affinity1-affinity2-affinity3/affinity-type": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity)(0)),
	},
	"/mpls-te/global-attributes/attribute-set/auto-mesh-attributes/auto-mesh-attribute/new-style-affinity-affinity-types/new-style-affinity-affinity-type-affinity1-affinity2/affinity-type": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity)(0)),
	},
	"/mpls-te/global-attributes/attribute-set/auto-mesh-attributes/auto-mesh-attribute/new-style-affinity-affinity-types/new-style-affinity-affinity-type-affinity1/affinity-type": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity)(0)),
	},
	"/mpls-te/global-attributes/attribute-set/auto-mesh-attributes/auto-mesh-attribute/new-style-affinity-affinity-types/new-style-affinity-affinity-type/affinity-type": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity)(0)),
	},
	"/mpls-te/global-attributes/attribute-set/otn-pp-attributes/otn-pp-attribute/aps-protection-mode": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_MplsTeOtnApsProtectionMode)(0)),
	},
	"/mpls-te/global-attributes/attribute-set/otn-pp-attributes/otn-pp-attribute/aps-protection-type": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_MplsTeOtnApsProtection)(0)),
	},
	"/mpls-te/global-attributes/attribute-set/otn-pp-attributes/otn-pp-attribute/aps-restoration-style": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_MplsTeOtnApsRestorationStyle)(0)),
	},
	"/mpls-te/global-attributes/attribute-set/otn-pp-attributes/otn-pp-attribute/sub-network-connection-mode/connection-mode": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_MplsTeOtnSncMode)(0)),
	},
	"/mpls-te/global-attributes/attribute-set/p2mpte-attributes/p2mpte-attribute/bandwidth/dste-type": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_MplsTeBandwidthDste)(0)),
	},
	"/mpls-te/global-attributes/attribute-set/p2mpte-attributes/p2mpte-attribute/new-style-affinity-affinity-types/new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8-affinity9-affinity10/affinity-type": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity)(0)),
	},
	"/mpls-te/global-attributes/attribute-set/p2mpte-attributes/p2mpte-attribute/new-style-affinity-affinity-types/new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8-affinity9/affinity-type": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity)(0)),
	},
	"/mpls-te/global-attributes/attribute-set/p2mpte-attributes/p2mpte-attribute/new-style-affinity-affinity-types/new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8/affinity-type": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity)(0)),
	},
	"/mpls-te/global-attributes/attribute-set/p2mpte-attributes/p2mpte-attribute/new-style-affinity-affinity-types/new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7/affinity-type": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity)(0)),
	},
	"/mpls-te/global-attributes/attribute-set/p2mpte-attributes/p2mpte-attribute/new-style-affinity-affinity-types/new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6/affinity-type": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity)(0)),
	},
	"/mpls-te/global-attributes/attribute-set/p2mpte-attributes/p2mpte-attribute/new-style-affinity-affinity-types/new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5/affinity-type": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity)(0)),
	},
	"/mpls-te/global-attributes/attribute-set/p2mpte-attributes/p2mpte-attribute/new-style-affinity-affinity-types/new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4/affinity-type": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity)(0)),
	},
	"/mpls-te/global-attributes/attribute-set/p2mpte-attributes/p2mpte-attribute/new-style-affinity-affinity-types/new-style-affinity-affinity-type-affinity1-affinity2-affinity3/affinity-type": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity)(0)),
	},
	"/mpls-te/global-attributes/attribute-set/p2mpte-attributes/p2mpte-attribute/new-style-affinity-affinity-types/new-style-affinity-affinity-type-affinity1-affinity2/affinity-type": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity)(0)),
	},
	"/mpls-te/global-attributes/attribute-set/p2mpte-attributes/p2mpte-attribute/new-style-affinity-affinity-types/new-style-affinity-affinity-type-affinity1/affinity-type": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity)(0)),
	},
	"/mpls-te/global-attributes/attribute-set/p2mpte-attributes/p2mpte-attribute/new-style-affinity-affinity-types/new-style-affinity-affinity-type/affinity-type": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity)(0)),
	},
	"/mpls-te/global-attributes/attribute-set/p2p-te-attributes/p2p-te-attribute/new-style-affinity-affinity-types/new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8-affinity9-affinity10/affinity-type": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity)(0)),
	},
	"/mpls-te/global-attributes/attribute-set/p2p-te-attributes/p2p-te-attribute/new-style-affinity-affinity-types/new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8-affinity9/affinity-type": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity)(0)),
	},
	"/mpls-te/global-attributes/attribute-set/p2p-te-attributes/p2p-te-attribute/new-style-affinity-affinity-types/new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8/affinity-type": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity)(0)),
	},
	"/mpls-te/global-attributes/attribute-set/p2p-te-attributes/p2p-te-attribute/new-style-affinity-affinity-types/new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7/affinity-type": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity)(0)),
	},
	"/mpls-te/global-attributes/attribute-set/p2p-te-attributes/p2p-te-attribute/new-style-affinity-affinity-types/new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6/affinity-type": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity)(0)),
	},
	"/mpls-te/global-attributes/attribute-set/p2p-te-attributes/p2p-te-attribute/new-style-affinity-affinity-types/new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5/affinity-type": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity)(0)),
	},
	"/mpls-te/global-attributes/attribute-set/p2p-te-attributes/p2p-te-attribute/new-style-affinity-affinity-types/new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4/affinity-type": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity)(0)),
	},
	"/mpls-te/global-attributes/attribute-set/p2p-te-attributes/p2p-te-attribute/new-style-affinity-affinity-types/new-style-affinity-affinity-type-affinity1-affinity2-affinity3/affinity-type": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity)(0)),
	},
	"/mpls-te/global-attributes/attribute-set/p2p-te-attributes/p2p-te-attribute/new-style-affinity-affinity-types/new-style-affinity-affinity-type-affinity1-affinity2/affinity-type": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity)(0)),
	},
	"/mpls-te/global-attributes/attribute-set/p2p-te-attributes/p2p-te-attribute/new-style-affinity-affinity-types/new-style-affinity-affinity-type-affinity1/affinity-type": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity)(0)),
	},
	"/mpls-te/global-attributes/attribute-set/p2p-te-attributes/p2p-te-attribute/new-style-affinity-affinity-types/new-style-affinity-affinity-type/affinity-type": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity)(0)),
	},
	"/mpls-te/global-attributes/attribute-set/p2p-te-attributes/p2p-te-attribute/path-selection/invalidation/invalidation-timer-expire-type": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_MplsTePathSelectionInvalidationTimerExpire)(0)),
	},
	"/mpls-te/global-attributes/attribute-set/p2p-te-attributes/p2p-te-attribute/path-selection/path-selection-metric": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_MplsTePathSelectionMetric)(0)),
	},
	"/mpls-te/global-attributes/attribute-set/p2p-te-attributes/p2p-te-attribute/path-selection/path-selection-segment-routing-adjacency-protection": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_MplsTePathSelectionSegmentRoutingAdjacencyProtection)(0)),
	},
	"/mpls-te/global-attributes/attribute-set/p2p-te-attributes/p2p-te-attribute/path-selection/segment-routing-prepend/indexes/index/prepend-type": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_SrPrepend)(0)),
	},
	"/mpls-te/global-attributes/attribute-set/path-option-attributes/path-option-attribute/att-path-option-path-selection/invalidation/path-invalidation-action": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_PathInvalidationAction)(0)),
	},
	"/mpls-te/global-attributes/attribute-set/path-option-attributes/path-option-attribute/bandwidth/dste-type": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_MplsTeBandwidthDste)(0)),
	},
	"/mpls-te/global-attributes/attribute-set/path-option-attributes/path-option-attribute/bfd-reverse-path/bfd-reverse-path-type": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_BfdReversePath)(0)),
	},
	"/mpls-te/global-attributes/attribute-set/path-option-attributes/path-option-attribute/new-style-affinity-affinity-types/new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8-affinity9-affinity10/affinity-type": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity)(0)),
	},
	"/mpls-te/global-attributes/attribute-set/path-option-attributes/path-option-attribute/new-style-affinity-affinity-types/new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8-affinity9/affinity-type": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity)(0)),
	},
	"/mpls-te/global-attributes/attribute-set/path-option-attributes/path-option-attribute/new-style-affinity-affinity-types/new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8/affinity-type": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity)(0)),
	},
	"/mpls-te/global-attributes/attribute-set/path-option-attributes/path-option-attribute/new-style-affinity-affinity-types/new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7/affinity-type": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity)(0)),
	},
	"/mpls-te/global-attributes/attribute-set/path-option-attributes/path-option-attribute/new-style-affinity-affinity-types/new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6/affinity-type": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity)(0)),
	},
	"/mpls-te/global-attributes/attribute-set/path-option-attributes/path-option-attribute/new-style-affinity-affinity-types/new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5/affinity-type": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity)(0)),
	},
	"/mpls-te/global-attributes/attribute-set/path-option-attributes/path-option-attribute/new-style-affinity-affinity-types/new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4/affinity-type": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity)(0)),
	},
	"/mpls-te/global-attributes/attribute-set/path-option-attributes/path-option-attribute/new-style-affinity-affinity-types/new-style-affinity-affinity-type-affinity1-affinity2-affinity3/affinity-type": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity)(0)),
	},
	"/mpls-te/global-attributes/attribute-set/path-option-attributes/path-option-attribute/new-style-affinity-affinity-types/new-style-affinity-affinity-type-affinity1-affinity2/affinity-type": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity)(0)),
	},
	"/mpls-te/global-attributes/attribute-set/path-option-attributes/path-option-attribute/new-style-affinity-affinity-types/new-style-affinity-affinity-type-affinity1/affinity-type": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity)(0)),
	},
	"/mpls-te/global-attributes/attribute-set/path-option-attributes/path-option-attribute/new-style-affinity-affinity-types/new-style-affinity-affinity-type/affinity-type": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity)(0)),
	},
	"/mpls-te/global-attributes/attribute-set/uni-p-attributes/uni-p-attribute/in-place-bit": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_MplsTeUniInPlaceBit)(0)),
	},
	"/mpls-te/global-attributes/attribute-set/uni-p-attributes/uni-p-attribute/lsp-flag": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_MplsTeUniLspSegFlag)(0)),
	},
	"/mpls-te/global-attributes/attribute-set/uni-p-attributes/uni-p-attribute/required-bit": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_MplsTeUniRequiredBit)(0)),
	},
	"/mpls-te/global-attributes/attribute-set/uni-p-attributes/uni-p-attribute/seg-flag": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_MplsTeUniLspSegFlag)(0)),
	},
	"/mpls-te/global-attributes/attribute-set/xro-attributes/xro-attribute/path-diversity/lsp/fecs/fec/conformance": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_MplsTePathDiversityConformance)(0)),
	},
	"/mpls-te/global-attributes/attribute-set/xro-attributes/xro-attribute/path-diversity/srlgs/srlg/conformance": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_MplsTePathDiversityConformance)(0)),
	},
	"/mpls-te/global-attributes/bfd-over-lsp/head/down-action": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_MplsTeBfdSessionDownAction)(0)),
	},
	"/mpls-te/global-attributes/log-frr-protection": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_MplsTeLogFrrProtection)(0)),
	},
	"/mpls-te/global-attributes/path-selection/invalidation/path-invalidation-action": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_PathInvalidationAction)(0)),
	},
	"/mpls-te/global-attributes/path-selection/loose-metrics/loose-metric/metric-type": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_MplsTePathSelectionMetric)(0)),
	},
	"/mpls-te/global-attributes/path-selection/metric": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_MplsTePathSelectionMetric)(0)),
	},
	"/mpls-te/global-attributes/path-selection/tiebreaker": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_MplsTePathSelectionTiebreaker)(0)),
	},
	"/mpls-te/global-attributes/queues/queue/role": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_RoutePriorityRole)(0)),
	},
	"/mpls-te/gmpls-nni/path-selection-metric": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_MplsTePathSelectionMetric)(0)),
	},
	"/mpls-te/gmpls-nni/topology-instances/topology-instance/igp-type": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_MplsTeIgpProtocol)(0)),
	},
	"/mpls-te/gmpls-nni/topology-instances/topology-instance/ospf-area-type": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_OspfAreaMode)(0)),
	},
	"/mpls-te/gmpls-nni/topology-instances/topology-instance/ospf-int/controllers/controller/tti-mode/tti-mode-type": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_GmplsttiMode)(0)),
	},
	"/mpls-te/gmpls-nni/topology-instances/topology-instance/ospfip-addr/controllers/controller/tti-mode/tti-mode-type": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_GmplsttiMode)(0)),
	},
	"/mpls-te/gmpls-nni/tunnel-heads/tunnel-head/destination/destination-type": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_OtnDestination)(0)),
	},
	"/mpls-te/gmpls-nni/tunnel-heads/tunnel-head/path-options/path-option/lockdown": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_MplsTePathOptionProperty)(0)),
	},
	"/mpls-te/gmpls-nni/tunnel-heads/tunnel-head/path-options/path-option/path-type": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_MplsTePathOption)(0)),
	},
	"/mpls-te/gmpls-nni/tunnel-heads/tunnel-head/path-options/path-option/xro-type": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_MplsTePathOptionXro)(0)),
	},
	"/mpls-te/gmpls-nni/tunnel-heads/tunnel-head/path-selection-metric": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_MplsTePathSelectionMetric)(0)),
	},
	"/mpls-te/gmpls-nni/tunnel-heads/tunnel-head/payload": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_OtnPayload)(0)),
	},
	"/mpls-te/gmpls-nni/tunnel-heads/tunnel-head/protection-switching/lockout": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_OtnProtectionSwitchLockout)(0)),
	},
	"/mpls-te/gmpls-nni/tunnel-heads/tunnel-head/signalled-bandwidth/od-uflex-framing-type": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_OtnSignaledBandwidthFlexFraming)(0)),
	},
	"/mpls-te/gmpls-nni/tunnel-heads/tunnel-head/signalled-bandwidth/signalled-bandwidth-type": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_OtnSignaledBandwidth)(0)),
	},
	"/mpls-te/gmpls-nni/tunnel-heads/tunnel-head/static-uni/egress-type": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_OtnStaticUni)(0)),
	},
	"/mpls-te/gmpls-nni/tunnel-heads/tunnel-head/static-uni/ingress-type": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_OtnStaticUni)(0)),
	},
	"/mpls-te/gmpls-uni/controllers/controller/gmpls-unitunnel-head/enc-type": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_MplsTeLspEnc)(0)),
	},
	"/mpls-te/gmpls-uni/controllers/controller/gmpls-unitunnel-head/path-options/path-option/lockdown": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_MplsTePathOptionProperty)(0)),
	},
	"/mpls-te/gmpls-uni/controllers/controller/gmpls-unitunnel-head/path-options/path-option/path-type": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_MplsTePathOption)(0)),
	},
	"/mpls-te/gmpls-uni/controllers/controller/gmpls-unitunnel-head/path-options/path-option/signaled-label": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_MplsTeSignaledLabel)(0)),
	},
	"/mpls-te/gmpls-uni/controllers/controller/gmpls-unitunnel-head/path-options/path-option/verbatim": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_MplsTePathOptionProperty)(0)),
	},
	"/mpls-te/gmpls-uni/controllers/controller/gmpls-unitunnel-head/path-options/path-option/xro-type": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_MplsTePathOptionXro)(0)),
	},
	"/mpls-te/gmpls-uni/controllers/controller/switching-type": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_MplsTeLspSwitch)(0)),
	},
	"/mpls-te/interfaces/interface/global-attributes/auto-tunnel/backup/exclude/srlg-mode": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_MplsTesrlgExclude)(0)),
	},
	"/mpls-te/interfaces/interface/lcac/flood-area/igp-type": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_MplsLcacFloodingIgp)(0)),
	},
	"/mpls-te/interfaces/interface/lcac/switchings/switching/capability": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_MplsTeSwitchingCap)(0)),
	},
	"/mpls-te/interfaces/interface/lcac/switchings/switching/encoding": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_MplsTeSwitchingEncoding)(0)),
	},
	"/mpls-te/interfaces/interface/lcac/switchings/switching/switching-id": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_MplsTe_Interfaces_Interface_Lcac_Switchings_Switching_SwitchingId)(0)),
	},
	"/mpls-te/interfaces/interface/transport-profile-link/links/link/next-hop-type": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_LinkNextHop)(0)),
	},
	"/mpls-te/named-tunnels/tunnels/tunnel/tunnel-attributes/autoroute/autoroute-announce/metric/metric-type": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_MplsTeAutorouteMetric)(0)),
	},
	"/mpls-te/named-tunnels/tunnels/tunnel/tunnel-attributes/bandwidth/dste-type": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_MplsTeBandwidthDste)(0)),
	},
	"/mpls-te/named-tunnels/tunnels/tunnel/tunnel-attributes/new-style-affinity-affinity-types/new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8-affinity9-affinity10/affinity-type": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity)(0)),
	},
	"/mpls-te/named-tunnels/tunnels/tunnel/tunnel-attributes/new-style-affinity-affinity-types/new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8-affinity9/affinity-type": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity)(0)),
	},
	"/mpls-te/named-tunnels/tunnels/tunnel/tunnel-attributes/new-style-affinity-affinity-types/new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8/affinity-type": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity)(0)),
	},
	"/mpls-te/named-tunnels/tunnels/tunnel/tunnel-attributes/new-style-affinity-affinity-types/new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7/affinity-type": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity)(0)),
	},
	"/mpls-te/named-tunnels/tunnels/tunnel/tunnel-attributes/new-style-affinity-affinity-types/new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6/affinity-type": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity)(0)),
	},
	"/mpls-te/named-tunnels/tunnels/tunnel/tunnel-attributes/new-style-affinity-affinity-types/new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5/affinity-type": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity)(0)),
	},
	"/mpls-te/named-tunnels/tunnels/tunnel/tunnel-attributes/new-style-affinity-affinity-types/new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4/affinity-type": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity)(0)),
	},
	"/mpls-te/named-tunnels/tunnels/tunnel/tunnel-attributes/new-style-affinity-affinity-types/new-style-affinity-affinity-type-affinity1-affinity2-affinity3/affinity-type": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity)(0)),
	},
	"/mpls-te/named-tunnels/tunnels/tunnel/tunnel-attributes/new-style-affinity-affinity-types/new-style-affinity-affinity-type-affinity1-affinity2/affinity-type": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity)(0)),
	},
	"/mpls-te/named-tunnels/tunnels/tunnel/tunnel-attributes/new-style-affinity-affinity-types/new-style-affinity-affinity-type-affinity1/affinity-type": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity)(0)),
	},
	"/mpls-te/named-tunnels/tunnels/tunnel/tunnel-attributes/new-style-affinity-affinity-types/new-style-affinity-affinity-type/affinity-type": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelAffinity)(0)),
	},
	"/mpls-te/named-tunnels/tunnels/tunnel/tunnel-attributes/path-selection-metric": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_MplsTePathSelectionMetric)(0)),
	},
	"/mpls-te/named-tunnels/tunnels/tunnel/tunnel-attributes/path-setups/path-setup/path-computation/path-computation-method": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_MplsTePathComputationMethod)(0)),
	},
	"/mpls-te/named-tunnels/tunnels/tunnel/tunnel-attributes/tunnel-path-selection/invalidation/path-invalidation-action": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_PathInvalidationAction)(0)),
	},
	"/mpls-te/named-tunnels/tunnels/tunnel/tunnel-attributes/tunnel-path-selection/tiebreaker": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_MplsTePathSelectionTiebreaker)(0)),
	},
	"/mpls-te/named-tunnels/tunnels/tunnel/tunnel-id/tunnel-id-type": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_MplsTeTunnelId)(0)),
	},
	"/mpls-te/named-tunnels/tunnels/tunnel/tunnel-type": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRMplsTeCfg_MplsTeConfigTunnel)(0)),
	},
	"/snmp/administration/default-communities/default-community/owner": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRSnmpAgentCfg_SnmpOwnerAccess)(0)),
	},
	"/snmp/administration/default-communities/default-community/priviledge": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRSnmpAgentCfg_SnmpAccessLevel)(0)),
	},
	"/snmp/administration/default-communities/default-community/v4acl-type": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRSnmpAgentCfg_Snmpacl)(0)),
	},
	"/snmp/administration/default-communities/default-community/v6acl-type": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRSnmpAgentCfg_Snmpacl)(0)),
	},
	"/snmp/administration/encrypted-communities/encrypted-community/owner": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRSnmpAgentCfg_SnmpOwnerAccess)(0)),
	},
	"/snmp/administration/encrypted-communities/encrypted-community/priviledge": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRSnmpAgentCfg_SnmpAccessLevel)(0)),
	},
	"/snmp/administration/encrypted-communities/encrypted-community/v4acl-type": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRSnmpAgentCfg_Snmpacl)(0)),
	},
	"/snmp/administration/encrypted-communities/encrypted-community/v6acl-type": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRSnmpAgentCfg_Snmpacl)(0)),
	},
	"/snmp/administration/type6-encrypted-communities/type6-encrypted-community/owner": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRSnmpAgentCfg_SnmpOwnerAccess)(0)),
	},
	"/snmp/administration/type6-encrypted-communities/type6-encrypted-community/priviledge": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRSnmpAgentCfg_SnmpAccessLevel)(0)),
	},
	"/snmp/administration/type6-encrypted-communities/type6-encrypted-community/v4acl-type": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRSnmpAgentCfg_Snmpacl)(0)),
	},
	"/snmp/administration/type6-encrypted-communities/type6-encrypted-community/v6acl-type": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRSnmpAgentCfg_Snmpacl)(0)),
	},
	"/snmp/bulk-stats/schemas/schema/instance/type": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRSnmpAgentCfg_SnmpBulkstatSchema)(0)),
	},
	"/snmp/bulk-stats/transfers/transfer/format": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRSnmpAgentCfg_SnmpBulkstatFileFormat)(0)),
	},
	"/snmp/context-mappings/context-mapping/context": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRSnmpAgentCfg_SnmpContext)(0)),
	},
	"/snmp/drop-packet/report/acl/v4acl-type": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRSnmpAgentCfg_Snmpacl)(0)),
	},
	"/snmp/drop-packet/report/acl/v6acl-type": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRSnmpAgentCfg_Snmpacl)(0)),
	},
	"/snmp/groups/group/security-model": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRSnmpAgentCfg_SnmpSecurityModel)(0)),
	},
	"/snmp/groups/group/snmp-version": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRSnmpAgentCfg_GroupSnmpVersion)(0)),
	},
	"/snmp/groups/group/v4acl-type": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRSnmpAgentCfg_Snmpacl)(0)),
	},
	"/snmp/groups/group/v6acl-type": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRSnmpAgentCfg_Snmpacl)(0)),
	},
	"/snmp/ipv4/tos/dscp": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Dscp)(0)),
	},
	"/snmp/ipv4/tos/precedence": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv4_Tos_Precedence)(0)),
	},
	"/snmp/ipv4/tos/type": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRSnmpAgentCfg_SnmpTos)(0)),
	},
	"/snmp/ipv6/tos/dscp": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Dscp)(0)),
	},
	"/snmp/ipv6/tos/precedence": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRSnmpAgentCfg_Snmp_Ipv6_Tos_Precedence)(0)),
	},
	"/snmp/ipv6/tos/type": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRSnmpAgentCfg_SnmpTos)(0)),
	},
	"/snmp/trap-hosts/trap-host/default-user-communities/default-user-community/security-level": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRSnmpAgentCfg_SnmpSecurityModel)(0)),
	},
	"/snmp/trap-hosts/trap-host/encrypted-user-communities/encrypted-user-community/security-level": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRSnmpAgentCfg_SnmpSecurityModel)(0)),
	},
	"/snmp/trap-hosts/trap-host/inform-host/inform-encrypted-user-communities/inform-encrypted-user-community/security-level": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRSnmpAgentCfg_SnmpSecurityModel)(0)),
	},
	"/snmp/trap-hosts/trap-host/inform-host/inform-type6-encrypted-user-communities/inform-type6-encrypted-user-community/security-level": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRSnmpAgentCfg_SnmpSecurityModel)(0)),
	},
	"/snmp/trap-hosts/trap-host/inform-host/inform-user-communities/inform-user-community/security-level": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRSnmpAgentCfg_SnmpSecurityModel)(0)),
	},
	"/snmp/trap-hosts/trap-host/type6-encrypted-user-communities/type6-encrypted-user-community/security-level": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRSnmpAgentCfg_SnmpSecurityModel)(0)),
	},
	"/snmp/users/user/algorithm": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRSnmpAgentCfg_SnmpHashAlgorithm)(0)),
	},
	"/snmp/users/user/owner": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRSnmpAgentCfg_SnmpOwnerAccess)(0)),
	},
	"/snmp/users/user/priv-algorithm": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRSnmpAgentCfg_SnmpPrivAlgorithm)(0)),
	},
	"/snmp/users/user/v4acl-type": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRSnmpAgentCfg_Snmpacl)(0)),
	},
	"/snmp/users/user/v6acl-type": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRSnmpAgentCfg_Snmpacl)(0)),
	},
	"/snmp/users/user/version": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRSnmpAgentCfg_UserSnmpVersion)(0)),
	},
	"/snmp/views/view/view-inclusion": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRSnmpAgentCfg_SnmpMibViewInclusion)(0)),
	},
	"/snmp/vrfs/vrf/context-mappings/context-mapping/context": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRSnmpAgentCfg_SnmpContext)(0)),
	},
	"/snmp/vrfs/vrf/trap-hosts/trap-host/default-user-communities/default-user-community/security-level": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRSnmpAgentCfg_SnmpSecurityModel)(0)),
	},
	"/snmp/vrfs/vrf/trap-hosts/trap-host/encrypted-user-communities/encrypted-user-community/security-level": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRSnmpAgentCfg_SnmpSecurityModel)(0)),
	},
	"/snmp/vrfs/vrf/trap-hosts/trap-host/inform-host/inform-encrypted-user-communities/inform-encrypted-user-community/security-level": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRSnmpAgentCfg_SnmpSecurityModel)(0)),
	},
	"/snmp/vrfs/vrf/trap-hosts/trap-host/inform-host/inform-type6-encrypted-user-communities/inform-type6-encrypted-user-community/security-level": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRSnmpAgentCfg_SnmpSecurityModel)(0)),
	},
	"/snmp/vrfs/vrf/trap-hosts/trap-host/inform-host/inform-user-communities/inform-user-community/security-level": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRSnmpAgentCfg_SnmpSecurityModel)(0)),
	},
	"/snmp/vrfs/vrf/trap-hosts/trap-host/type6-encrypted-user-communities/type6-encrypted-user-community/security-level": []reflect.Type{
		reflect.TypeOf((E_Cisco_IOS_XRSnmpAgentCfg_SnmpSecurityModel)(0)),
	},
  }
}

